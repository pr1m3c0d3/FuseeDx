/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 0.0.1
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_C4dApi(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_C4dApi(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_C4dApi(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy 
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char* msg) : swig_msg(msg) {
    }
    DirectorException(const std::string &msg) : swig_msg(msg) {
    }
    const std::string& what() const {
      return swig_msg;
    }
    virtual ~DirectorException() {
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public Swig::DirectorException {
  public:
    DirectorPureVirtualException(const char* msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }
  };
}

#endif /* __cplusplus */



/* Includes the header in the wrapper code */
#include "c4d.h"
#include "lib_ca.h"
#include "lib_description.h"
#include "c4d_graphview.h"
#include "c4d_operatordata.h"
#include "c4d_operatorplugin.h"
#include "operatingsystem.h"
#include "c4d_basetag.h"
#include "c4d_baseselect.h" //NEU
#include "c4d_basebitmap.h"
#include "c4d_nodedata.h"
#include "gvdynamic.h"
#include "gvobject.h"
#include "gvmath.h"
#include "ObjectDataM.h"
#include "c4d_customdatatype.h"//neu
#include "customgui_inexclude.h"//neu

// POD (plain old datatype = no construcors or methods) version of C4D's Vector.
// We need this type as return values for swig-generated C++ stubs. If we use
// the original UDT (user defined type = constructors and methods) Vector type we'll get 
// P/Invoke errors complaining that P/Invoke cannot find the C++ stub.
// Make sure to keep this type bit-compatible with the original Vector type.
struct Vector_POD
{
	double x, y, z;
};

// POD (plain old datatype = no construcors or methods) version of C4D's Matrix.
// See comment above.
// Make sure to keep this type bit-compatible with the original Matrix type.
struct Matrix_POD
{
	Vector_POD off, v1, v2, v3;
};



	inline void blDelete_cs(GeListNode *v) { if (v) C4DOS.Bl->Free(v); }

SWIGINTERN DescLevel const &DescID_GetAt(DescID const *self,LONG pos){ return (*self)[pos]; }
SWIGINTERN BaseBitmap *BaseBitmap_AutoBitmap__SWIG_0(String const &str){
		BaseBitmap *bmp=BaseBitmap::Alloc();
		if (!bmp) 
			return NULL;
				
		char *debug = str.GetCStringCopy();

		if (bmp->Init(str)!=IMAGERESULT_OK)
		{
			BaseBitmap::Free(bmp);
			return NULL;
		}
		return bmp;
	}
SWIGINTERN BaseBitmap *BaseBitmap_AutoBitmap__SWIG_1(LONG id){
		BaseBitmap *bmp = InitResourceBitmap(id);
		return bmp;
	}
SWIGINTERN Vector PointObject_GetPointAt(PointObject *self,LONG inx){
		return self->GetPointR()[inx];
	}
SWIGINTERN void PointObject_SetPointAt(PointObject *self,LONG inx,Vector v){
		self->GetPointW()[inx] = v;
	}
SWIGINTERN PointObject *PointObject_GetPointObject(BaseObject *iObj){
  return (PointObject*)iObj;
 }
SWIGINTERN Tangent *SplineObject_GetTangentAt(SplineObject *self,LONG inx){
		return (Tangent *)(self->GetTangentR() + inx);
	}
SWIGINTERN void SplineObject_SetTangentAt(SplineObject *self,LONG inx,Tangent *pT){
		self->GetTangentW()[inx] = *pT;
	}
SWIGINTERN Segment *SplineObject_GetSegmentAt(SplineObject *self,LONG inx){
		return (Segment *)(self->GetSegmentR() + inx);
	}
SWIGINTERN void SplineObject_SetSegmentAt(SplineObject *self,LONG inx,Segment *pT){
		self->GetSegmentW()[inx] = *pT;
	}
SWIGINTERN Vector BrushObjectInfo_GetPointAt(BrushObjectInfo *self,LONG inx){
		return self->m_pPoints[inx];
	}
SWIGINTERN Vector BrushObjectInfo_GetGlobalPointAt(BrushObjectInfo *self,LONG inx){
		return self->m_pGlobalPoints[inx];
	}
SWIGINTERN void BrushObjectInfo_SetGlobalPointAt(BrushObjectInfo *self,LONG inx,Vector v){
		self->m_pGlobalPoints[inx] = v;
	}
SWIGINTERN Vector BrushObjectInfo_GetNormalAt(BrushObjectInfo *self,LONG inx){
		return self->m_pNormals[inx];
	}
SWIGINTERN void BrushObjectInfo_SetNormalAt(BrushObjectInfo *self,LONG inx,Vector v){
		self->m_pNormals[inx] = v;
	}
SWIGINTERN CPolygon BrushObjectInfo_GetPolyAt(BrushObjectInfo *self,LONG inx){
		return self->m_pPolys[inx];
	}

	// Maxon forgot to implement this. It's probably never used, but since it is declared, Swig wants to generate a wrapper for it
	inline Bool GvBuildValuesTable(GvNode *bn, GvValue **&in_ports, LONG &nr_of_in_ports, GvPort **&out_ports, LONG &nr_of_out_ports)
	{
		return FALSE;	
	}


/* Unpack binary data from a string */
SWIGINTERN const char * SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}


/* Pack binary data into a string */
SWIGINTERN char * SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

SWIGINTERN ModelingCommandData *new_ModelingCommandData__SWIG_1(BaseDocument *doc=NULL,BaseObject *op=NULL,BaseContainer *bc=NULL,MODELINGCOMMANDMODE mode=MODELINGCOMMANDMODE_ALL,MODELINGCOMMANDFLAGS flags=MODELINGCOMMANDFLAGS_0,AtomArray *result=NULL,AtomArray *arr=NULL){

	//~ModelingCommandData();

		return 0;
	
		 }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "C4dApiWrapper.h"

SwigDirector_CommandData::SwigDirector_CommandData() : CommandData(), Swig::Director() {
  swig_init_callbacks();
}

Bool SwigDirector_CommandData::Execute(BaseDocument *doc) {
  Bool c_result = SwigValueInit< Bool >() ;
  unsigned int jresult = 0 ;
  void * jdoc = 0 ;
  
  if (!swig_callbackExecute) {
    return CommandData::Execute(doc);
  } else {
    jdoc = (void *) doc; 
    jresult = (unsigned int) swig_callbackExecute(jdoc);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

Bool SwigDirector_CommandData::ExecuteSubID(BaseDocument *doc, LONG subid) {
  Bool c_result = SwigValueInit< Bool >() ;
  unsigned int jresult = 0 ;
  void * jdoc = 0 ;
  int jsubid  ;
  
  if (!swig_callbackExecuteSubID) {
    return CommandData::ExecuteSubID(doc,subid);
  } else {
    jdoc = (void *) doc; 
    jsubid = subid;
    jresult = (unsigned int) swig_callbackExecuteSubID(jdoc, jsubid);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

Bool SwigDirector_CommandData::ExecuteOptionID(BaseDocument *doc, LONG plugid, LONG subid) {
  Bool c_result = SwigValueInit< Bool >() ;
  unsigned int jresult = 0 ;
  void * jdoc = 0 ;
  int jplugid  ;
  int jsubid  ;
  
  if (!swig_callbackExecuteOptionID) {
    return CommandData::ExecuteOptionID(doc,plugid,subid);
  } else {
    jdoc = (void *) doc; 
    jplugid = plugid;
    jsubid = subid;
    jresult = (unsigned int) swig_callbackExecuteOptionID(jdoc, jplugid, jsubid);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

LONG SwigDirector_CommandData::GetState(BaseDocument *doc) {
  LONG c_result = SwigValueInit< LONG >() ;
  int jresult = 0 ;
  void * jdoc = 0 ;
  
  if (!swig_callbackGetState) {
    return CommandData::GetState(doc);
  } else {
    jdoc = (void *) doc; 
    jresult = (int) swig_callbackGetState(jdoc);
    c_result = (LONG)jresult; 
  }
  return c_result;
}

Bool SwigDirector_CommandData::GetSubContainer(BaseDocument *doc, BaseContainer &submenu) {
  Bool c_result = SwigValueInit< Bool >() ;
  unsigned int jresult = 0 ;
  void * jdoc = 0 ;
  void * jsubmenu = 0 ;
  
  if (!swig_callbackGetSubContainer) {
    return CommandData::GetSubContainer(doc,submenu);
  } else {
    jdoc = (void *) doc; 
    jsubmenu = (BaseContainer *) &submenu; 
    jresult = (unsigned int) swig_callbackGetSubContainer(jdoc, jsubmenu);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

Bool SwigDirector_CommandData::RestoreLayout(void *secret) {
  Bool c_result = SwigValueInit< Bool >() ;
  unsigned int jresult = 0 ;
  void * jsecret = 0 ;
  
  if (!swig_callbackRestoreLayout) {
    return CommandData::RestoreLayout(secret);
  } else {
    jsecret = (void *) secret; 
    jresult = (unsigned int) swig_callbackRestoreLayout(jsecret);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

String SwigDirector_CommandData::GetScriptName() {
  String c_result ;
  char * /* String_ctype */ jresult = 0 ;
  
  if (!swig_callbackGetScriptName) {
    return CommandData::GetScriptName();
  } else {
    jresult = (char * /* String_ctype */) swig_callbackGetScriptName();
    /* <String_directorout> */
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
      return c_result;
    }
    c_result = jresult; 
    /* </String_directorout> */ 
  }
  return c_result;
}

Bool SwigDirector_CommandData::Message(LONG type, void *data) {
  Bool c_result = SwigValueInit< Bool >() ;
  unsigned int jresult = 0 ;
  int jtype  ;
  void * jdata = 0 ;
  
  if (!swig_callbackMessage) {
    return CommandData::Message(type,data);
  } else {
    jtype = type;
    jdata = (void *) data; 
    jresult = (unsigned int) swig_callbackMessage(jtype, jdata);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_CommandData::swig_connect_director(SWIG_Callback0_t callbackExecute, SWIG_Callback1_t callbackExecuteSubID, SWIG_Callback2_t callbackExecuteOptionID, SWIG_Callback3_t callbackGetState, SWIG_Callback4_t callbackGetSubContainer, SWIG_Callback5_t callbackRestoreLayout, SWIG_Callback6_t callbackGetScriptName, SWIG_Callback7_t callbackMessage) {
  swig_callbackExecute = callbackExecute;
  swig_callbackExecuteSubID = callbackExecuteSubID;
  swig_callbackExecuteOptionID = callbackExecuteOptionID;
  swig_callbackGetState = callbackGetState;
  swig_callbackGetSubContainer = callbackGetSubContainer;
  swig_callbackRestoreLayout = callbackRestoreLayout;
  swig_callbackGetScriptName = callbackGetScriptName;
  swig_callbackMessage = callbackMessage;
}

void SwigDirector_CommandData::swig_init_callbacks() {
  swig_callbackExecute = 0;
  swig_callbackExecuteSubID = 0;
  swig_callbackExecuteOptionID = 0;
  swig_callbackGetState = 0;
  swig_callbackGetSubContainer = 0;
  swig_callbackRestoreLayout = 0;
  swig_callbackGetScriptName = 0;
  swig_callbackMessage = 0;
}

SwigDirector_BrushToolData::SwigDirector_BrushToolData() : Swig::Director() {
  
}


Bool SwigDirector_BrushToolData::InitTool(BaseDocument *doc, BaseContainer &data, BaseThread *bt) {
  Bool c_result = SwigValueInit< Bool >() ;
  unsigned int jresult = 0 ;
  void * jdoc = 0 ;
  void * jdata = 0 ;
  void * jbt = 0 ;
  
  if (!swig_callbackInitTool) {
    return BrushToolData::InitTool(doc,data,bt);
  } else {
    jdoc = (void *) doc; 
    jdata = (BaseContainer *) &data; 
    jbt = (void *) bt; 
    jresult = (unsigned int) swig_callbackInitTool(jdoc, jdata, jbt);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_BrushToolData::FreeTool(BaseDocument *doc, BaseContainer &data) {
  void * jdoc = 0 ;
  void * jdata = 0 ;
  
  if (!swig_callbackFreeTool) {
    BrushToolData::FreeTool(doc,data);
    return;
  } else {
    jdoc = (void *) doc; 
    jdata = (BaseContainer *) &data; 
    swig_callbackFreeTool(jdoc, jdata);
  }
}

void SwigDirector_BrushToolData::InitDefaultSettings(BaseDocument *doc, BaseContainer &data) {
  void * jdoc = 0 ;
  void * jdata = 0 ;
  
  if (!swig_callbackInitDefaultSettings) {
    BrushToolData::InitDefaultSettings(doc,data);
    return;
  } else {
    jdoc = (void *) doc; 
    jdata = (BaseContainer *) &data; 
    swig_callbackInitDefaultSettings(jdoc, jdata);
  }
}

Bool SwigDirector_BrushToolData::GetDEnabling(BaseDocument *doc, BaseContainer &data, DescID const &id, GeData const &t_data, DESCFLAGS_ENABLE flags, BaseContainer const *itemdesc) {
  Bool c_result = SwigValueInit< Bool >() ;
  unsigned int jresult = 0 ;
  void * jdoc = 0 ;
  void * jdata = 0 ;
  void * jid = 0 ;
  void * jt_data = 0 ;
  int jflags  ;
  void * jitemdesc = 0 ;
  
  if (!swig_callbackGetDEnabling) {
    return BrushToolData::GetDEnabling(doc,data,id,t_data,flags,itemdesc);
  } else {
    jdoc = (void *) doc; 
    jdata = (BaseContainer *) &data; 
    jid = (DescID *) &id; 
    jt_data = (GeData *) &t_data; 
    jflags = flags;
    jitemdesc = (void *) itemdesc; 
    jresult = (unsigned int) swig_callbackGetDEnabling(jdoc, jdata, jid, jt_data, jflags, jitemdesc);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

Bool SwigDirector_BrushToolData::SetDParameter(BaseDocument *doc, BaseContainer &data, DescID const &id, GeData const &t_data, DESCFLAGS_SET &flags) {
  Bool c_result = SwigValueInit< Bool >() ;
  unsigned int jresult = 0 ;
  void * jdoc = 0 ;
  void * jdata = 0 ;
  void * jid = 0 ;
  void * jt_data = 0 ;
  void * jflags = 0 ;
  
  if (!swig_callbackSetDParameter) {
    return BrushToolData::SetDParameter(doc,data,id,t_data,flags);
  } else {
    jdoc = (void *) doc; 
    jdata = (BaseContainer *) &data; 
    jid = (DescID *) &id; 
    jt_data = (GeData *) &t_data; 
    jflags = (DESCFLAGS_SET *) &flags; 
    jresult = (unsigned int) swig_callbackSetDParameter(jdoc, jdata, jid, jt_data, jflags);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

Bool SwigDirector_BrushToolData::GetDDescription(BaseDocument *doc, BaseContainer &data, Description *description, DESCFLAGS_DESC &flags) {
  Bool c_result = SwigValueInit< Bool >() ;
  unsigned int jresult = 0 ;
  void * jdoc = 0 ;
  void * jdata = 0 ;
  void * jdescription = 0 ;
  void * jflags = 0 ;
  
  if (!swig_callbackGetDDescription) {
    return BrushToolData::GetDDescription(doc,data,description,flags);
  } else {
    jdoc = (void *) doc; 
    jdata = (BaseContainer *) &data; 
    jdescription = (void *) description; 
    jflags = (DESCFLAGS_DESC *) &flags; 
    jresult = (unsigned int) swig_callbackGetDDescription(jdoc, jdata, jdescription, jflags);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

Bool SwigDirector_BrushToolData::Message(BaseDocument *doc, BaseContainer &data, LONG type, void *t_data) {
  Bool c_result = SwigValueInit< Bool >() ;
  unsigned int jresult = 0 ;
  void * jdoc = 0 ;
  void * jdata = 0 ;
  int jtype  ;
  void * jt_data = 0 ;
  
  if (!swig_callbackMessage) {
    return BrushToolData::Message(doc,data,type,t_data);
  } else {
    jdoc = (void *) doc; 
    jdata = (BaseContainer *) &data; 
    jtype = type;
    jt_data = (void *) t_data; 
    jresult = (unsigned int) swig_callbackMessage(jdoc, jdata, jtype, jt_data);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

Bool SwigDirector_BrushToolData::GetCursorInfo(BaseDocument *doc, BaseContainer &data, BaseDraw *bd, Real x, Real y, BaseContainer &bc) {
  Bool c_result = SwigValueInit< Bool >() ;
  unsigned int jresult = 0 ;
  void * jdoc = 0 ;
  void * jdata = 0 ;
  void * jbd = 0 ;
  double jx  ;
  double jy  ;
  void * jbc = 0 ;
  
  if (!swig_callbackGetCursorInfo) {
    return BrushToolData::GetCursorInfo(doc,data,bd,x,y,bc);
  } else {
    jdoc = (void *) doc; 
    jdata = (BaseContainer *) &data; 
    jbd = (void *) bd; 
    jx = x;
    jy = y;
    jbc = (BaseContainer *) &bc; 
    jresult = (unsigned int) swig_callbackGetCursorInfo(jdoc, jdata, jbd, jx, jy, jbc);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

Bool SwigDirector_BrushToolData::MouseInput(BaseDocument *doc, BaseContainer &data, BaseDraw *bd, EditorWindow *win, BaseContainer const &msg) {
  Bool c_result = SwigValueInit< Bool >() ;
  unsigned int jresult = 0 ;
  void * jdoc = 0 ;
  void * jdata = 0 ;
  void * jbd = 0 ;
  void * jwin = 0 ;
  void * jmsg = 0 ;
  
  if (!swig_callbackMouseInput) {
    return BrushToolData::MouseInput(doc,data,bd,win,msg);
  } else {
    jdoc = (void *) doc; 
    jdata = (BaseContainer *) &data; 
    jbd = (void *) bd; 
    jwin = (void *) win; 
    jmsg = (BaseContainer *) &msg; 
    jresult = (unsigned int) swig_callbackMouseInput(jdoc, jdata, jbd, jwin, jmsg);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

Bool SwigDirector_BrushToolData::MouseInputStart(BaseDocument *doc, BaseContainer &data, BaseDraw *bd, EditorWindow *win, BaseContainer const &msg, LONG &flags) {
  Bool c_result = SwigValueInit< Bool >() ;
  unsigned int jresult = 0 ;
  void * jdoc = 0 ;
  void * jdata = 0 ;
  void * jbd = 0 ;
  void * jwin = 0 ;
  void * jmsg = 0 ;
  void * jflags = 0 ;
  
  if (!swig_callbackMouseInputStart) {
    return BrushToolData::MouseInputStart(doc,data,bd,win,msg,flags);
  } else {
    jdoc = (void *) doc; 
    jdata = (BaseContainer *) &data; 
    jbd = (void *) bd; 
    jwin = (void *) win; 
    jmsg = (BaseContainer *) &msg; 
    jflags = (LONG *) &flags; 
    jresult = (unsigned int) swig_callbackMouseInputStart(jdoc, jdata, jbd, jwin, jmsg, jflags);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

Bool SwigDirector_BrushToolData::MouseInputDrag(BaseDocument *doc, BaseContainer &data, BaseDraw *bd, EditorWindow *win, BaseContainer const &msg, BrushVertexData *vdata, LONG vcnt, Real x, Real y, LONG &flags) {
  Bool c_result = SwigValueInit< Bool >() ;
  unsigned int jresult = 0 ;
  void * jdoc = 0 ;
  void * jdata = 0 ;
  void * jbd = 0 ;
  void * jwin = 0 ;
  void * jmsg = 0 ;
  void * jvdata = 0 ;
  int jvcnt  ;
  double jx  ;
  double jy  ;
  void * jflags = 0 ;
  
  if (!swig_callbackMouseInputDrag) {
    return BrushToolData::MouseInputDrag(doc,data,bd,win,msg,vdata,vcnt,x,y,flags);
  } else {
    jdoc = (void *) doc; 
    jdata = (BaseContainer *) &data; 
    jbd = (void *) bd; 
    jwin = (void *) win; 
    jmsg = (BaseContainer *) &msg; 
    jvdata = (void *) vdata; 
    jvcnt = vcnt;
    jx = x;
    jy = y;
    jflags = (LONG *) &flags; 
    jresult = (unsigned int) swig_callbackMouseInputDrag(jdoc, jdata, jbd, jwin, jmsg, jvdata, jvcnt, jx, jy, jflags);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

Bool SwigDirector_BrushToolData::MouseInputEnd(BaseDocument *doc, BaseContainer &data, BaseDraw *bd, EditorWindow *win, BaseContainer const &msg) {
  Bool c_result = SwigValueInit< Bool >() ;
  unsigned int jresult = 0 ;
  void * jdoc = 0 ;
  void * jdata = 0 ;
  void * jbd = 0 ;
  void * jwin = 0 ;
  void * jmsg = 0 ;
  
  if (!swig_callbackMouseInputEnd) {
    return BrushToolData::MouseInputEnd(doc,data,bd,win,msg);
  } else {
    jdoc = (void *) doc; 
    jdata = (BaseContainer *) &data; 
    jbd = (void *) bd; 
    jwin = (void *) win; 
    jmsg = (BaseContainer *) &msg; 
    jresult = (unsigned int) swig_callbackMouseInputEnd(jdoc, jdata, jbd, jwin, jmsg);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_BrushToolData::swig_connect_director(SWIG_Callback0_t callbackInitTool, SWIG_Callback1_t callbackFreeTool, SWIG_Callback2_t callbackInitDefaultSettings, SWIG_Callback3_t callbackGetDEnabling, SWIG_Callback4_t callbackSetDParameter, SWIG_Callback5_t callbackGetDDescription, SWIG_Callback6_t callbackMessage, SWIG_Callback7_t callbackGetCursorInfo, SWIG_Callback8_t callbackMouseInput, SWIG_Callback9_t callbackMouseInputStart, SWIG_Callback10_t callbackMouseInputDrag, SWIG_Callback11_t callbackMouseInputEnd) {
  swig_callbackInitTool = callbackInitTool;
  swig_callbackFreeTool = callbackFreeTool;
  swig_callbackInitDefaultSettings = callbackInitDefaultSettings;
  swig_callbackGetDEnabling = callbackGetDEnabling;
  swig_callbackSetDParameter = callbackSetDParameter;
  swig_callbackGetDDescription = callbackGetDDescription;
  swig_callbackMessage = callbackMessage;
  swig_callbackGetCursorInfo = callbackGetCursorInfo;
  swig_callbackMouseInput = callbackMouseInput;
  swig_callbackMouseInputStart = callbackMouseInputStart;
  swig_callbackMouseInputDrag = callbackMouseInputDrag;
  swig_callbackMouseInputEnd = callbackMouseInputEnd;
}

void SwigDirector_BrushToolData::swig_init_callbacks() {
  swig_callbackInitTool = 0;
  swig_callbackFreeTool = 0;
  swig_callbackInitDefaultSettings = 0;
  swig_callbackGetDEnabling = 0;
  swig_callbackSetDParameter = 0;
  swig_callbackGetDDescription = 0;
  swig_callbackMessage = 0;
  swig_callbackGetCursorInfo = 0;
  swig_callbackMouseInput = 0;
  swig_callbackMouseInputStart = 0;
  swig_callbackMouseInputDrag = 0;
  swig_callbackMouseInputEnd = 0;
}

SwigDirector_ObjectDataM::SwigDirector_ObjectDataM() : ObjectDataM(), Swig::Director() {
  swig_init_callbacks();
}

Bool SwigDirector_ObjectDataM::Init(GeListNode *node) {
  Bool c_result = SwigValueInit< Bool >() ;
  unsigned int jresult = 0 ;
  void * jnode = 0 ;
  
  if (!swig_callbackInit) {
    return NodeData::Init(node);
  } else {
    jnode = (void *) node; 
    jresult = (unsigned int) swig_callbackInit(jnode);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_ObjectDataM::Free(GeListNode *node) {
  void * jnode = 0 ;
  
  if (!swig_callbackFree) {
    NodeData::Free(node);
    return;
  } else {
    jnode = (void *) node; 
    swig_callbackFree(jnode);
  }
}

Bool SwigDirector_ObjectDataM::Read(GeListNode *node, HyperFile *hf, LONG level) {
  Bool c_result = SwigValueInit< Bool >() ;
  unsigned int jresult = 0 ;
  void * jnode = 0 ;
  void * jhf = 0 ;
  int jlevel  ;
  
  if (!swig_callbackRead) {
    return NodeData::Read(node,hf,level);
  } else {
    jnode = (void *) node; 
    jhf = (void *) hf; 
    jlevel = level;
    jresult = (unsigned int) swig_callbackRead(jnode, jhf, jlevel);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

Bool SwigDirector_ObjectDataM::Write(GeListNode *node, HyperFile *hf) {
  Bool c_result = SwigValueInit< Bool >() ;
  unsigned int jresult = 0 ;
  void * jnode = 0 ;
  void * jhf = 0 ;
  
  if (!swig_callbackWrite) {
    return NodeData::Write(node,hf);
  } else {
    jnode = (void *) node; 
    jhf = (void *) hf; 
    jresult = (unsigned int) swig_callbackWrite(jnode, jhf);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

Bool SwigDirector_ObjectDataM::Message(GeListNode *node, LONG type, void *data) {
  Bool c_result = SwigValueInit< Bool >() ;
  unsigned int jresult = 0 ;
  void * jnode = 0 ;
  int jtype  ;
  void * jdata = 0 ;
  
  if (!swig_callbackMessage) {
    return NodeData::Message(node,type,data);
  } else {
    jnode = (void *) node; 
    jtype = type;
    jdata = (void *) data; 
    jresult = (unsigned int) swig_callbackMessage(jnode, jtype, jdata);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

Bool SwigDirector_ObjectDataM::CopyTo(NodeData *dest, GeListNode *snode, GeListNode *dnode, COPYFLAGS flags, AliasTrans *trn) {
  Bool c_result = SwigValueInit< Bool >() ;
  unsigned int jresult = 0 ;
  void * jdest = 0 ;
  void * jsnode = 0 ;
  void * jdnode = 0 ;
  int jflags  ;
  void * jtrn = 0 ;
  
  if (!swig_callbackCopyTo) {
    return NodeData::CopyTo(dest,snode,dnode,flags,trn);
  } else {
    jdest = (void *) dest; 
    jsnode = (void *) snode; 
    jdnode = (void *) dnode; 
    jflags = flags;
    jtrn = (void *) trn; 
    jresult = (unsigned int) swig_callbackCopyTo(jdest, jsnode, jdnode, jflags, jtrn);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_ObjectDataM::GetBubbleHelp(GeListNode *node, String &str) {
  void * jnode = 0 ;
  void * jstr = 0 ;
  
  if (!swig_callbackGetBubbleHelp) {
    NodeData::GetBubbleHelp(node,str);
    return;
  } else {
    jnode = (void *) node; 
    jstr = (String *) &str; 
    swig_callbackGetBubbleHelp(jnode, jstr);
  }
}

BaseDocument *SwigDirector_ObjectDataM::GetDocument(GeListNode *node) {
  BaseDocument *c_result = 0 ;
  void * jresult = 0 ;
  void * jnode = 0 ;
  
  if (!swig_callbackGetDocument) {
    return NodeData::GetDocument(node);
  } else {
    jnode = (void *) node; 
    jresult = (void *) swig_callbackGetDocument(jnode);
    c_result = (BaseDocument *)jresult; 
  }
  return c_result;
}

LONG SwigDirector_ObjectDataM::GetBranchInfo(GeListNode *node, BranchInfo *info, LONG max, GETBRANCHINFO flags) {
  LONG c_result = SwigValueInit< LONG >() ;
  int jresult = 0 ;
  void * jnode = 0 ;
  void * jinfo = 0 ;
  int jmax  ;
  int jflags  ;
  
  if (!swig_callbackGetBranchInfo) {
    return NodeData::GetBranchInfo(node,info,max,flags);
  } else {
    jnode = (void *) node; 
    jinfo = (void *) info; 
    jmax = max;
    jflags = flags;
    jresult = (int) swig_callbackGetBranchInfo(jnode, jinfo, jmax, jflags);
    c_result = (LONG)jresult; 
  }
  return c_result;
}

Bool SwigDirector_ObjectDataM::IsInstanceOf(GeListNode const *node, LONG type) const {
  Bool c_result = SwigValueInit< Bool >() ;
  unsigned int jresult = 0 ;
  void * jnode = 0 ;
  int jtype  ;
  
  if (!swig_callbackIsInstanceOf) {
    return NodeData::IsInstanceOf(node,type);
  } else {
    jnode = (void *) node; 
    jtype = type;
    jresult = (unsigned int) swig_callbackIsInstanceOf(jnode, jtype);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

Bool SwigDirector_ObjectDataM::GetDDescription(GeListNode *node, Description *description, DESCFLAGS_DESC &flags) {
  Bool c_result = SwigValueInit< Bool >() ;
  unsigned int jresult = 0 ;
  void * jnode = 0 ;
  void * jdescription = 0 ;
  void * jflags = 0 ;
  
  if (!swig_callbackGetDDescription__SWIG_0) {
    return ObjectDataM::GetDDescription(node,description,flags);
  } else {
    jnode = (void *) node; 
    jdescription = (void *) description; 
    jflags = (DESCFLAGS_DESC *) &flags; 
    jresult = (unsigned int) swig_callbackGetDDescription__SWIG_0(jnode, jdescription, jflags);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

Bool SwigDirector_ObjectDataM::GetDParameter(GeListNode *node, DescID const &id, GeData &t_data, DESCFLAGS_GET &flags) {
  Bool c_result = SwigValueInit< Bool >() ;
  unsigned int jresult = 0 ;
  void * jnode = 0 ;
  void * jid = 0 ;
  void * jt_data = 0 ;
  void * jflags = 0 ;
  
  if (!swig_callbackGetDParameter) {
    return NodeData::GetDParameter(node,id,t_data,flags);
  } else {
    jnode = (void *) node; 
    jid = (DescID *) &id; 
    jt_data = (GeData *) &t_data; 
    jflags = (DESCFLAGS_GET *) &flags; 
    jresult = (unsigned int) swig_callbackGetDParameter(jnode, jid, jt_data, jflags);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

Bool SwigDirector_ObjectDataM::GetDEnabling(GeListNode *node, DescID const &id, GeData const &t_data, DESCFLAGS_ENABLE flags, BaseContainer const *itemdesc) {
  Bool c_result = SwigValueInit< Bool >() ;
  unsigned int jresult = 0 ;
  void * jnode = 0 ;
  void * jid = 0 ;
  void * jt_data = 0 ;
  int jflags  ;
  void * jitemdesc = 0 ;
  
  if (!swig_callbackGetDEnabling) {
    return NodeData::GetDEnabling(node,id,t_data,flags,itemdesc);
  } else {
    jnode = (void *) node; 
    jid = (DescID *) &id; 
    jt_data = (GeData *) &t_data; 
    jflags = flags;
    jitemdesc = (void *) itemdesc; 
    jresult = (unsigned int) swig_callbackGetDEnabling(jnode, jid, jt_data, jflags, jitemdesc);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

Bool SwigDirector_ObjectDataM::SetDParameter(GeListNode *node, DescID const &id, GeData const &t_data, DESCFLAGS_SET &flags) {
  Bool c_result = SwigValueInit< Bool >() ;
  unsigned int jresult = 0 ;
  void * jnode = 0 ;
  void * jid = 0 ;
  void * jt_data = 0 ;
  void * jflags = 0 ;
  
  if (!swig_callbackSetDParameter) {
    return NodeData::SetDParameter(node,id,t_data,flags);
  } else {
    jnode = (void *) node; 
    jid = (DescID *) &id; 
    jt_data = (GeData *) &t_data; 
    jflags = (DESCFLAGS_SET *) &flags; 
    jresult = (unsigned int) swig_callbackSetDParameter(jnode, jid, jt_data, jflags);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

Bool SwigDirector_ObjectDataM::TranslateDescID(GeListNode *node, DescID const &id, DescID &res_id, C4DAtom *&res_at) {
  Bool c_result = SwigValueInit< Bool >() ;
  unsigned int jresult = 0 ;
  void * jnode = 0 ;
  void * jid = 0 ;
  void * jres_id = 0 ;
  void * jres_at = 0 ;
  
  if (!swig_callbackTranslateDescID) {
    return NodeData::TranslateDescID(node,id,res_id,res_at);
  } else {
    jnode = (void *) node; 
    jid = (DescID *) &id; 
    jres_id = (DescID *) &res_id; 
    jres_at = (C4DAtom **) &res_at; 
    jresult = (unsigned int) swig_callbackTranslateDescID(jnode, jid, jres_id, jres_at);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

Bool SwigDirector_ObjectDataM::IsDocumentRelated(GeListNode const *node, Bool &docrelated) const {
  Bool c_result = SwigValueInit< Bool >() ;
  unsigned int jresult = 0 ;
  void * jnode = 0 ;
  void * jdocrelated = 0 ;
  
  if (!swig_callbackIsDocumentRelated) {
    return NodeData::IsDocumentRelated(node,docrelated);
  } else {
    jnode = (void *) node; 
    jdocrelated = (Bool *) &docrelated; 
    jresult = (unsigned int) swig_callbackIsDocumentRelated(jnode, jdocrelated);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_ObjectDataM::GetDimension(BaseObject *op, Vector *mp, Vector *rad) {
  void * jop = 0 ;
  void * jmp = 0 ;
  void * jrad = 0 ;
  
  if (!swig_callbackGetDimension) {
    ObjectData::GetDimension(op,mp,rad);
    return;
  } else {
    jop = (void *) op; 
    jmp = (void *) mp; 
    jrad = (void *) rad; 
    swig_callbackGetDimension(jop, jmp, jrad);
  }
}

DRAWRESULT SwigDirector_ObjectDataM::Draw(BaseObject *op, DRAWPASS drawpass, BaseDraw *bd, BaseDrawHelp *bh) {
  DRAWRESULT c_result = SwigValueInit< DRAWRESULT >() ;
  int jresult = 0 ;
  void * jop = 0 ;
  int jdrawpass  ;
  void * jbd = 0 ;
  void * jbh = 0 ;
  
  if (!swig_callbackDraw) {
    return ObjectData::Draw(op,drawpass,bd,bh);
  } else {
    jop = (void *) op; 
    jdrawpass = drawpass;
    jbd = (void *) bd; 
    jbh = (void *) bh; 
    jresult = (int) swig_callbackDraw(jop, jdrawpass, jbd, jbh);
    c_result = (DRAWRESULT)jresult; 
  }
  return c_result;
}

LONG SwigDirector_ObjectDataM::DetectHandle(BaseObject *op, BaseDraw *bd, LONG x, LONG y, QUALIFIER qualifier) {
  LONG c_result = SwigValueInit< LONG >() ;
  int jresult = 0 ;
  void * jop = 0 ;
  void * jbd = 0 ;
  int jx  ;
  int jy  ;
  int jqualifier  ;
  
  if (!swig_callbackDetectHandle) {
    return ObjectData::DetectHandle(op,bd,x,y,qualifier);
  } else {
    jop = (void *) op; 
    jbd = (void *) bd; 
    jx = x;
    jy = y;
    jqualifier = qualifier;
    jresult = (int) swig_callbackDetectHandle(jop, jbd, jx, jy, jqualifier);
    c_result = (LONG)jresult; 
  }
  return c_result;
}

Bool SwigDirector_ObjectDataM::MoveHandle(BaseObject *op, BaseObject *undo, Vector const &mouse_pos, LONG hit_id, QUALIFIER qualifier, BaseDraw *bd) {
  Bool c_result = SwigValueInit< Bool >() ;
  unsigned int jresult = 0 ;
  void * jop = 0 ;
  void * jundo = 0 ;
  void * jmouse_pos = 0 ;
  int jhit_id  ;
  int jqualifier  ;
  void * jbd = 0 ;
  
  if (!swig_callbackMoveHandle) {
    return ObjectData::MoveHandle(op,undo,mouse_pos,hit_id,qualifier,bd);
  } else {
    jop = (void *) op; 
    jundo = (void *) undo; 
    jmouse_pos = (Vector *) &mouse_pos; 
    jhit_id = hit_id;
    jqualifier = qualifier;
    jbd = (void *) bd; 
    jresult = (unsigned int) swig_callbackMoveHandle(jop, jundo, jmouse_pos, jhit_id, jqualifier, jbd);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

Bool SwigDirector_ObjectDataM::AddToExecution(BaseObject *op, PriorityList *list) {
  Bool c_result = SwigValueInit< Bool >() ;
  unsigned int jresult = 0 ;
  void * jop = 0 ;
  void * jlist = 0 ;
  
  if (!swig_callbackAddToExecution) {
    return ObjectData::AddToExecution(op,list);
  } else {
    jop = (void *) op; 
    jlist = (void *) list; 
    jresult = (unsigned int) swig_callbackAddToExecution(jop, jlist);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

EXECUTIONRESULT SwigDirector_ObjectDataM::Execute(BaseObject *op, BaseDocument *doc, BaseThread *bt, LONG priority, EXECUTIONFLAGS flags) {
  EXECUTIONRESULT c_result = SwigValueInit< EXECUTIONRESULT >() ;
  int jresult = 0 ;
  void * jop = 0 ;
  void * jdoc = 0 ;
  void * jbt = 0 ;
  int jpriority  ;
  int jflags  ;
  
  if (!swig_callbackExecute) {
    return ObjectData::Execute(op,doc,bt,priority,flags);
  } else {
    jop = (void *) op; 
    jdoc = (void *) doc; 
    jbt = (void *) bt; 
    jpriority = priority;
    jflags = flags;
    jresult = (int) swig_callbackExecute(jop, jdoc, jbt, jpriority, jflags);
    c_result = (EXECUTIONRESULT)jresult; 
  }
  return c_result;
}

void SwigDirector_ObjectDataM::GetModelingAxis(BaseObject *op, BaseDocument *doc, Matrix &axis) {
  void * jop = 0 ;
  void * jdoc = 0 ;
  void * jaxis = 0 ;
  
  if (!swig_callbackGetModelingAxis) {
    ObjectData::GetModelingAxis(op,doc,axis);
    return;
  } else {
    jop = (void *) op; 
    jdoc = (void *) doc; 
    jaxis = (Matrix *) &axis; 
    swig_callbackGetModelingAxis(jop, jdoc, jaxis);
  }
}

BaseObject *SwigDirector_ObjectDataM::GetVirtualObjects(BaseObject *op, HierarchyHelp *hh) {
  BaseObject *c_result = 0 ;
  void * jresult = 0 ;
  void * jop = 0 ;
  void * jhh = 0 ;
  
  if (!swig_callbackGetVirtualObjects) {
    return ObjectData::GetVirtualObjects(op,hh);
  } else {
    jop = (void *) op; 
    jhh = (void *) hh; 
    jresult = (void *) swig_callbackGetVirtualObjects(jop, jhh);
    c_result = (BaseObject *)jresult; 
  }
  return c_result;
}

Bool SwigDirector_ObjectDataM::ModifyObject(BaseObject *mod, BaseDocument *doc, BaseObject *op, Matrix const &op_mg, Matrix const &mod_mg, Real lod, LONG flags, BaseThread *thread) {
  Bool c_result = SwigValueInit< Bool >() ;
  unsigned int jresult = 0 ;
  void * jmod = 0 ;
  void * jdoc = 0 ;
  void * jop = 0 ;
  void * jop_mg = 0 ;
  void * jmod_mg = 0 ;
  double jlod  ;
  int jflags  ;
  void * jthread = 0 ;
  
  if (!swig_callbackModifyObject) {
    return ObjectData::ModifyObject(mod,doc,op,op_mg,mod_mg,lod,flags,thread);
  } else {
    jmod = (void *) mod; 
    jdoc = (void *) doc; 
    jop = (void *) op; 
    jop_mg = (Matrix *) &op_mg; 
    jmod_mg = (Matrix *) &mod_mg; 
    jlod = lod;
    jflags = flags;
    jthread = (void *) thread; 
    jresult = (unsigned int) swig_callbackModifyObject(jmod, jdoc, jop, jop_mg, jmod_mg, jlod, jflags, jthread);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_ObjectDataM::CheckDirty(BaseObject *op, BaseDocument *doc) {
  void * jop = 0 ;
  void * jdoc = 0 ;
  
  if (!swig_callbackCheckDirty) {
    ObjectData::CheckDirty(op,doc);
    return;
  } else {
    jop = (void *) op; 
    jdoc = (void *) doc; 
    swig_callbackCheckDirty(jop, jdoc);
  }
}

SplineObject *SwigDirector_ObjectDataM::GetContour(BaseObject *op, BaseDocument *doc, Real lod, BaseThread *bt) {
  SplineObject *c_result = 0 ;
  void * jresult = 0 ;
  void * jop = 0 ;
  void * jdoc = 0 ;
  double jlod  ;
  void * jbt = 0 ;
  
  if (!swig_callbackGetContour) {
    return ObjectData::GetContour(op,doc,lod,bt);
  } else {
    jop = (void *) op; 
    jdoc = (void *) doc; 
    jlod = lod;
    jbt = (void *) bt; 
    jresult = (void *) swig_callbackGetContour(jop, jdoc, jlod, jbt);
    c_result = (SplineObject *)jresult; 
  }
  return c_result;
}

void SwigDirector_ObjectDataM::ModifyParticles(BaseObject *op, Particle *pp, BaseParticle *ss, LONG pcnt, Real diff) {
  void * jop = 0 ;
  void * jpp = 0 ;
  void * jss = 0 ;
  int jpcnt  ;
  double jdiff  ;
  
  if (!swig_callbackModifyParticles) {
    ObjectData::ModifyParticles(op,pp,ss,pcnt,diff);
    return;
  } else {
    jop = (void *) op; 
    jpp = (void *) pp; 
    jss = (void *) ss; 
    jpcnt = pcnt;
    jdiff = diff;
    swig_callbackModifyParticles(jop, jpp, jss, jpcnt, jdiff);
  }
}

LONG SwigDirector_ObjectDataM::GetHandleCount(BaseObject *op) {
  LONG c_result = SwigValueInit< LONG >() ;
  int jresult = 0 ;
  void * jop = 0 ;
  
  if (!swig_callbackGetHandleCount) {
    return ObjectData::GetHandleCount(op);
  } else {
    jop = (void *) op; 
    jresult = (int) swig_callbackGetHandleCount(jop);
    c_result = (LONG)jresult; 
  }
  return c_result;
}

void SwigDirector_ObjectDataM::GetHandle(BaseObject *op, LONG i, HandleInfo &info) {
  void * jop = 0 ;
  int ji  ;
  void * jinfo = 0 ;
  
  if (!swig_callbackGetHandle) {
    ObjectData::GetHandle(op,i,info);
    return;
  } else {
    jop = (void *) op; 
    ji = i;
    jinfo = (HandleInfo *) &info; 
    swig_callbackGetHandle(jop, ji, jinfo);
  }
}

void SwigDirector_ObjectDataM::SetHandle(BaseObject *op, LONG i, Vector p, HandleInfo const &info) {
  void * jop = 0 ;
  int ji  ;
  Vector_POD /* Vector_ctype_out */ jp  ;
  void * jinfo = 0 ;
  
  if (!swig_callbackSetHandle) {
    ObjectData::SetHandle(op,i,p,info);
    return;
  } else {
    jop = (void *) op; 
    ji = i;
    /* <Vector_directorin> */
    jp = *((Vector_POD *)&(p)); 
    /* </Vector_directorin> */ 
    
    jinfo = (HandleInfo *) &info; 
    swig_callbackSetHandle(jop, ji, jp, jinfo);
  }
}

SwigDirector_ObjectDataM::~SwigDirector_ObjectDataM() {
  
}


Bool SwigDirector_ObjectDataM::GetDDescription(GeListNode *node, DDescriptionParams *descparams) {
  Bool c_result = SwigValueInit< Bool >() ;
  unsigned int jresult = 0 ;
  void * jnode = 0 ;
  void * jdescparams = 0 ;
  
  if (!swig_callbackGetDDescription__SWIG_1) {
    return ObjectDataM::GetDDescription(node,descparams);
  } else {
    jnode = (void *) node; 
    jdescparams = (void *) descparams; 
    jresult = (unsigned int) swig_callbackGetDDescription__SWIG_1(jnode, jdescparams);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_ObjectDataM::swig_connect_director(SWIG_Callback0_t callbackInit, SWIG_Callback1_t callbackFree, SWIG_Callback2_t callbackRead, SWIG_Callback3_t callbackWrite, SWIG_Callback4_t callbackMessage, SWIG_Callback5_t callbackCopyTo, SWIG_Callback6_t callbackGetBubbleHelp, SWIG_Callback7_t callbackGetDocument, SWIG_Callback8_t callbackGetBranchInfo, SWIG_Callback9_t callbackIsInstanceOf, SWIG_Callback10_t callbackGetDDescription__SWIG_0, SWIG_Callback11_t callbackGetDParameter, SWIG_Callback12_t callbackGetDEnabling, SWIG_Callback13_t callbackSetDParameter, SWIG_Callback14_t callbackTranslateDescID, SWIG_Callback15_t callbackIsDocumentRelated, SWIG_Callback16_t callbackGetDimension, SWIG_Callback17_t callbackDraw, SWIG_Callback18_t callbackDetectHandle, SWIG_Callback19_t callbackMoveHandle, SWIG_Callback20_t callbackAddToExecution, SWIG_Callback21_t callbackExecute, SWIG_Callback22_t callbackGetModelingAxis, SWIG_Callback23_t callbackGetVirtualObjects, SWIG_Callback24_t callbackModifyObject, SWIG_Callback25_t callbackCheckDirty, SWIG_Callback26_t callbackGetContour, SWIG_Callback27_t callbackModifyParticles, SWIG_Callback28_t callbackGetHandleCount, SWIG_Callback29_t callbackGetHandle, SWIG_Callback30_t callbackSetHandle, SWIG_Callback31_t callbackGetDDescription__SWIG_1) {
  swig_callbackInit = callbackInit;
  swig_callbackFree = callbackFree;
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackMessage = callbackMessage;
  swig_callbackCopyTo = callbackCopyTo;
  swig_callbackGetBubbleHelp = callbackGetBubbleHelp;
  swig_callbackGetDocument = callbackGetDocument;
  swig_callbackGetBranchInfo = callbackGetBranchInfo;
  swig_callbackIsInstanceOf = callbackIsInstanceOf;
  swig_callbackGetDDescription__SWIG_0 = callbackGetDDescription__SWIG_0;
  swig_callbackGetDParameter = callbackGetDParameter;
  swig_callbackGetDEnabling = callbackGetDEnabling;
  swig_callbackSetDParameter = callbackSetDParameter;
  swig_callbackTranslateDescID = callbackTranslateDescID;
  swig_callbackIsDocumentRelated = callbackIsDocumentRelated;
  swig_callbackGetDimension = callbackGetDimension;
  swig_callbackDraw = callbackDraw;
  swig_callbackDetectHandle = callbackDetectHandle;
  swig_callbackMoveHandle = callbackMoveHandle;
  swig_callbackAddToExecution = callbackAddToExecution;
  swig_callbackExecute = callbackExecute;
  swig_callbackGetModelingAxis = callbackGetModelingAxis;
  swig_callbackGetVirtualObjects = callbackGetVirtualObjects;
  swig_callbackModifyObject = callbackModifyObject;
  swig_callbackCheckDirty = callbackCheckDirty;
  swig_callbackGetContour = callbackGetContour;
  swig_callbackModifyParticles = callbackModifyParticles;
  swig_callbackGetHandleCount = callbackGetHandleCount;
  swig_callbackGetHandle = callbackGetHandle;
  swig_callbackSetHandle = callbackSetHandle;
  swig_callbackGetDDescription__SWIG_1 = callbackGetDDescription__SWIG_1;
}

void SwigDirector_ObjectDataM::swig_init_callbacks() {
  swig_callbackInit = 0;
  swig_callbackFree = 0;
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackMessage = 0;
  swig_callbackCopyTo = 0;
  swig_callbackGetBubbleHelp = 0;
  swig_callbackGetDocument = 0;
  swig_callbackGetBranchInfo = 0;
  swig_callbackIsInstanceOf = 0;
  swig_callbackGetDDescription__SWIG_0 = 0;
  swig_callbackGetDParameter = 0;
  swig_callbackGetDEnabling = 0;
  swig_callbackSetDParameter = 0;
  swig_callbackTranslateDescID = 0;
  swig_callbackIsDocumentRelated = 0;
  swig_callbackGetDimension = 0;
  swig_callbackDraw = 0;
  swig_callbackDetectHandle = 0;
  swig_callbackMoveHandle = 0;
  swig_callbackAddToExecution = 0;
  swig_callbackExecute = 0;
  swig_callbackGetModelingAxis = 0;
  swig_callbackGetVirtualObjects = 0;
  swig_callbackModifyObject = 0;
  swig_callbackCheckDirty = 0;
  swig_callbackGetContour = 0;
  swig_callbackModifyParticles = 0;
  swig_callbackGetHandleCount = 0;
  swig_callbackGetHandle = 0;
  swig_callbackSetHandle = 0;
  swig_callbackGetDDescription__SWIG_1 = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_blDelete_cs(void * jarg1) {
  GeListNode *arg1 = (GeListNode *) 0 ;
  
  arg1 = (GeListNode *)jarg1; 
  blDelete_cs(arg1);
}


SWIGEXPORT char SWIGSTDCALL CSharp_MACTYPE_CINEMA_get() {
  char jresult ;
  char result;
  
  result = (char)('C4DC');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_MACCREATOR_CINEMA_get() {
  char jresult ;
  char result;
  
  result = (char)('C4D1');
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_IMAGE_RESOLUTION_get() {
  int jresult ;
  int result;
  
  result = (int)(16000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FILTER_TIF_get() {
  int jresult ;
  int result;
  
  result = (int)(1100);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FILTER_TGA_get() {
  int jresult ;
  int result;
  
  result = (int)(1101);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FILTER_BMP_get() {
  int jresult ;
  int result;
  
  result = (int)(1102);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FILTER_IFF_get() {
  int jresult ;
  int result;
  
  result = (int)(1103);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FILTER_JPG_get() {
  int jresult ;
  int result;
  
  result = (int)(1104);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FILTER_PICT_get() {
  int jresult ;
  int result;
  
  result = (int)(1105);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FILTER_PSD_get() {
  int jresult ;
  int result;
  
  result = (int)(1106);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FILTER_RLA_get() {
  int jresult ;
  int result;
  
  result = (int)(1107);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FILTER_RPF_get() {
  int jresult ;
  int result;
  
  result = (int)(1108);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FILTER_B3D_get() {
  int jresult ;
  int result;
  
  result = (int)(1109);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FILTER_TIF_B3D_get() {
  int jresult ;
  int result;
  
  result = (int)(1110);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FILTER_PSB_get() {
  int jresult ;
  int result;
  
  result = (int)(1111);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FILTER_AVI_get() {
  int jresult ;
  int result;
  
  result = (int)(1122);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FILTER_MOVIE_get() {
  int jresult ;
  int result;
  
  result = (int)(1125);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FILTER_QTVRSAVER_PANORAMA_get() {
  int jresult ;
  int result;
  
  result = (int)(1150);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FILTER_QTVRSAVER_OBJECT_get() {
  int jresult ;
  int result;
  
  result = (int)(1151);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FILTER_HDR_get() {
  int jresult ;
  int result;
  
  result = (int)(1001379);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FILTER_PNG_get() {
  int jresult ;
  int result;
  
  result = (int)(1023671);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FILTER_IES_get() {
  int jresult ;
  int result;
  
  result = (int)(1024463);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AVISAVER_FCCTYPE_get() {
  int jresult ;
  int result;
  
  result = (int)(10000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AVISAVER_FCCHANDLER_get() {
  int jresult ;
  int result;
  
  result = (int)(10001);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AVISAVER_LKEY_get() {
  int jresult ;
  int result;
  
  result = (int)(10002);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AVISAVER_LDATARATE_get() {
  int jresult ;
  int result;
  
  result = (int)(10003);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AVISAVER_LQ_get() {
  int jresult ;
  int result;
  
  result = (int)(10004);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_QTSAVER_COMPRESSOR_get() {
  int jresult ;
  int result;
  
  result = (int)(10010);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_QTSAVER_QUALITY_get() {
  int jresult ;
  int result;
  
  result = (int)(10011);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_QTSAVER_TEMPQUAL_get() {
  int jresult ;
  int result;
  
  result = (int)(10012);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_QTSAVER_FRAMERATE_get() {
  int jresult ;
  int result;
  
  result = (int)(10013);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_QTSAVER_KEYFRAMES_get() {
  int jresult ;
  int result;
  
  result = (int)(10014);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_QTSAVER_PLANES_get() {
  int jresult ;
  int result;
  
  result = (int)(10015);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_QTSAVER_DATARATE_get() {
  int jresult ;
  int result;
  
  result = (int)(10016);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_QTSAVER_FRAMEDURATION_get() {
  int jresult ;
  int result;
  
  result = (int)(10017);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_QTSAVER_MINQUALITY_get() {
  int jresult ;
  int result;
  
  result = (int)(10018);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_QTSAVER_MINTEMPQUAL_get() {
  int jresult ;
  int result;
  
  result = (int)(10019);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_QTSAVER_FIXEDFRAMERATE_get() {
  int jresult ;
  int result;
  
  result = (int)(10020);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_JPGSAVER_QUALITY_get() {
  int jresult ;
  int result;
  
  result = (int)(10021);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IMAGESAVER_DPI_get() {
  int jresult ;
  int result;
  
  result = (int)(10022);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PNG_INTERLACED_get() {
  int jresult ;
  int result;
  
  result = (int)(11000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RLA_OPTIONS_get() {
  int jresult ;
  int result;
  
  result = (int)(10024);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BITDEPTH_SHIFT_get() {
  int jresult ;
  int result;
  
  result = (int)(4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BITDEPTH_MAXMODES_get() {
  int jresult ;
  int result;
  
  result = (int)(3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BITDEPTH_UCHAR_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BITDEPTH_UWORD_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BITDEPTH_FLOAT_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BIT_ACTIVE_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 1));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BIT_ACTIVE2_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 29));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BIT_MATMARK_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 2));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BIT_ENABLEPAINT_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 3));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BIT_RECALCPREVIEW_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 5));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BIT_MFOLD_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 6));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BIT_BP_FOLDLAYERS_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 9));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BIT_IGNOREDRAW_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 2));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BIT_OFOLD_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 6));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BIT_CONTROLOBJECT_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 9));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BIT_RECMARK_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 11));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BIT_IGNOREDRAWBOX_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 12));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BIT_EDITOBJECT_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 13));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BIT_ACTIVESELECTIONDRAW_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 15));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BIT_TEMPDRAW_VISIBLE_CACHECHILD_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 16));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BIT_TEMPDRAW_VISIBLE_DEFCACHECHILD_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 17));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BIT_TEMPDRAW_VISIBLE_CHILD_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 18));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BIT_TRACKPROCESSED_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 16));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BIT_ANIM_OFF_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 17));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BIT_ANIM_SOLO_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 18));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BIT_ANIM_CONSTANTVELOCITY_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 19));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BIT_VPDISABLED_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 2));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BIT_DOCUMENT_CHECKREWIND_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 2));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BIT_ACTIVERENDERDATA_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 28));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OBJECT_MODIFIER_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 0));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OBJECT_HIERARCHYMODIFIER_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 1));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OBJECT_GENERATOR_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 2));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OBJECT_INPUT_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 3));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OBJECT_PARTICLEMODIFIER_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 5));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OBJECT_NOCACHESUB_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 6));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OBJECT_ISSPLINE_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 7));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OBJECT_UNIQUEENUMERATION_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 8));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OBJECT_CAMERADEPENDENT_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 9));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OBJECT_USECACHECOLOR_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 10));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OBJECT_POINTOBJECT_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 11));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OBJECT_POLYGONOBJECT_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 12));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OBJECT_NO_PLA_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 13));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OBJECT_DONTFREECACHE_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 14));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OBJECT_CALL_ADDEXECUTION_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 15));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tbaselist2d_get() {
  int jresult ;
  int result;
  
  result = (int)(110050);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tbasedocument_get() {
  int jresult ;
  int result;
  
  result = (int)(110059);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tpluginlayer_get() {
  int jresult ;
  int result;
  
  result = (int)(110064);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tundoablelist_get() {
  int jresult ;
  int result;
  
  result = (int)(110068);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tgelistnode_get() {
  int jresult ;
  int result;
  
  result = (int)(110069);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mbase_get() {
  int jresult ;
  int result;
  
  result = (int)(5702);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mmaterial_get() {
  int jresult ;
  int result;
  
  result = (int)(5703);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mplugin_get() {
  int jresult ;
  int result;
  
  result = (int)(5705);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mfog_get() {
  int jresult ;
  int result;
  
  result = (int)(8803);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mterrain_get() {
  int jresult ;
  int result;
  
  result = (int)(8808);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mdanel_get() {
  int jresult ;
  int result;
  
  result = (int)(1011117);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mbanji_get() {
  int jresult ;
  int result;
  
  result = (int)(1011118);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mbanzi_get() {
  int jresult ;
  int result;
  
  result = (int)(1011119);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mcheen_get() {
  int jresult ;
  int result;
  
  result = (int)(1011120);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mmabel_get() {
  int jresult ;
  int result;
  
  result = (int)(1011121);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mnukei_get() {
  int jresult ;
  int result;
  
  result = (int)(1011122);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MCgFX_get() {
  int jresult ;
  int result;
  
  result = (int)(450000237);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VPbase_get() {
  int jresult ;
  int result;
  
  result = (int)(5709);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Opolygon_get() {
  int jresult ;
  int result;
  
  result = (int)(5100);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Ospline_get() {
  int jresult ;
  int result;
  
  result = (int)(5101);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Olight_get() {
  int jresult ;
  int result;
  
  result = (int)(5102);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Ocamera_get() {
  int jresult ;
  int result;
  
  result = (int)(5103);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Ofloor_get() {
  int jresult ;
  int result;
  
  result = (int)(5104);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Osky_get() {
  int jresult ;
  int result;
  
  result = (int)(5105);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Oenvironment_get() {
  int jresult ;
  int result;
  
  result = (int)(5106);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Oloft_get() {
  int jresult ;
  int result;
  
  result = (int)(5107);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Offd_get() {
  int jresult ;
  int result;
  
  result = (int)(5108);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Oparticle_get() {
  int jresult ;
  int result;
  
  result = (int)(5109);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Odeflector_get() {
  int jresult ;
  int result;
  
  result = (int)(5110);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Ogravitation_get() {
  int jresult ;
  int result;
  
  result = (int)(5111);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Orotation_get() {
  int jresult ;
  int result;
  
  result = (int)(5112);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Owind_get() {
  int jresult ;
  int result;
  
  result = (int)(5113);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Ofriction_get() {
  int jresult ;
  int result;
  
  result = (int)(5114);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Oturbulence_get() {
  int jresult ;
  int result;
  
  result = (int)(5115);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Oextrude_get() {
  int jresult ;
  int result;
  
  result = (int)(5116);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Olathe_get() {
  int jresult ;
  int result;
  
  result = (int)(5117);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Osweep_get() {
  int jresult ;
  int result;
  
  result = (int)(5118);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Oattractor_get() {
  int jresult ;
  int result;
  
  result = (int)(5119);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Obezier_get() {
  int jresult ;
  int result;
  
  result = (int)(5120);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Oforeground_get() {
  int jresult ;
  int result;
  
  result = (int)(5121);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Obackground_get() {
  int jresult ;
  int result;
  
  result = (int)(5122);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Obone_EX_get() {
  int jresult ;
  int result;
  
  result = (int)(5123);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Odestructor_get() {
  int jresult ;
  int result;
  
  result = (int)(5124);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Ometaball_get() {
  int jresult ;
  int result;
  
  result = (int)(5125);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Oinstance_get() {
  int jresult ;
  int result;
  
  result = (int)(5126);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Obend_get() {
  int jresult ;
  int result;
  
  result = (int)(5128);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Obulge_get() {
  int jresult ;
  int result;
  
  result = (int)(5129);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Oshear_get() {
  int jresult ;
  int result;
  
  result = (int)(5131);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Otaper_get() {
  int jresult ;
  int result;
  
  result = (int)(5133);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Otwist_get() {
  int jresult ;
  int result;
  
  result = (int)(5134);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Owave_get() {
  int jresult ;
  int result;
  
  result = (int)(5135);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Ostage_get() {
  int jresult ;
  int result;
  
  result = (int)(5136);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Oline_get() {
  int jresult ;
  int result;
  
  result = (int)(5137);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Omicrophone_get() {
  int jresult ;
  int result;
  
  result = (int)(5138);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Oloudspeaker_get() {
  int jresult ;
  int result;
  
  result = (int)(5139);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Onull_get() {
  int jresult ;
  int result;
  
  result = (int)(5140);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Osymmetry_get() {
  int jresult ;
  int result;
  
  result = (int)(5142);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Owrap_get() {
  int jresult ;
  int result;
  
  result = (int)(5143);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Oboole_get() {
  int jresult ;
  int result;
  
  result = (int)(1010865);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Oexplosion_get() {
  int jresult ;
  int result;
  
  result = (int)(5145);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Oformula_get() {
  int jresult ;
  int result;
  
  result = (int)(5146);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Omelt_get() {
  int jresult ;
  int result;
  
  result = (int)(5147);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Oshatter_get() {
  int jresult ;
  int result;
  
  result = (int)(5148);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Owinddeform_get() {
  int jresult ;
  int result;
  
  result = (int)(5149);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Oarray_get() {
  int jresult ;
  int result;
  
  result = (int)(5150);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Oheadphone_get() {
  int jresult ;
  int result;
  
  result = (int)(5151);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Oconplane_get() {
  int jresult ;
  int result;
  
  result = (int)(5153);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Oplugin_get() {
  int jresult ;
  int result;
  
  result = (int)(5154);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Obase_get() {
  int jresult ;
  int result;
  
  result = (int)(5155);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Opoint_get() {
  int jresult ;
  int result;
  
  result = (int)(5156);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Obasedeform_get() {
  int jresult ;
  int result;
  
  result = (int)(5157);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Oparticlemodifier_get() {
  int jresult ;
  int result;
  
  result = (int)(5158);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Opolyreduction_get() {
  int jresult ;
  int result;
  
  result = (int)(1001253);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Oshowdisplacement_get() {
  int jresult ;
  int result;
  
  result = (int)(1001196);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Ojoint_get() {
  int jresult ;
  int result;
  
  result = (int)(1019362);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Oskin_get() {
  int jresult ;
  int result;
  
  result = (int)(1019363);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Oweighteffector_get() {
  int jresult ;
  int result;
  
  result = (int)(1019677);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Ocharacter_get() {
  int jresult ;
  int result;
  
  result = (int)(1021433);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Ocube_get() {
  int jresult ;
  int result;
  
  result = (int)(5159);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Osphere_get() {
  int jresult ;
  int result;
  
  result = (int)(5160);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Oplatonic_get() {
  int jresult ;
  int result;
  
  result = (int)(5161);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Ocone_get() {
  int jresult ;
  int result;
  
  result = (int)(5162);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Otorus_get() {
  int jresult ;
  int result;
  
  result = (int)(5163);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Odisc_get() {
  int jresult ;
  int result;
  
  result = (int)(5164);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Otube_get() {
  int jresult ;
  int result;
  
  result = (int)(5165);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Ofigure_get() {
  int jresult ;
  int result;
  
  result = (int)(5166);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Opyramid_get() {
  int jresult ;
  int result;
  
  result = (int)(5167);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Oplane_get() {
  int jresult ;
  int result;
  
  result = (int)(5168);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Ofractal_get() {
  int jresult ;
  int result;
  
  result = (int)(5169);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Ocylinder_get() {
  int jresult ;
  int result;
  
  result = (int)(5170);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Ocapsule_get() {
  int jresult ;
  int result;
  
  result = (int)(5171);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Ooiltank_get() {
  int jresult ;
  int result;
  
  result = (int)(5172);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Orelief_get() {
  int jresult ;
  int result;
  
  result = (int)(5173);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Osinglepoly_get() {
  int jresult ;
  int result;
  
  result = (int)(5174);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Opluginpolygon_get() {
  int jresult ;
  int result;
  
  result = (int)(1001091);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Osplineprimitive_get() {
  int jresult ;
  int result;
  
  result = (int)(5152);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Osplineprofile_get() {
  int jresult ;
  int result;
  
  result = (int)(5175);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Osplineflower_get() {
  int jresult ;
  int result;
  
  result = (int)(5176);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Osplineformula_get() {
  int jresult ;
  int result;
  
  result = (int)(5177);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Osplinetext_get() {
  int jresult ;
  int result;
  
  result = (int)(5178);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Osplinenside_get() {
  int jresult ;
  int result;
  
  result = (int)(5179);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Ospline4side_get() {
  int jresult ;
  int result;
  
  result = (int)(5180);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Osplinecircle_get() {
  int jresult ;
  int result;
  
  result = (int)(5181);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Osplinearc_get() {
  int jresult ;
  int result;
  
  result = (int)(5182);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Osplinecissoid_get() {
  int jresult ;
  int result;
  
  result = (int)(5183);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Osplinecycloid_get() {
  int jresult ;
  int result;
  
  result = (int)(5184);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Osplinehelix_get() {
  int jresult ;
  int result;
  
  result = (int)(5185);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Osplinerectangle_get() {
  int jresult ;
  int result;
  
  result = (int)(5186);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Osplinestar_get() {
  int jresult ;
  int result;
  
  result = (int)(5187);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Osplinecogwheel_get() {
  int jresult ;
  int result;
  
  result = (int)(5188);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Osplinecontour_get() {
  int jresult ;
  int result;
  
  result = (int)(5189);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Oselection_get() {
  int jresult ;
  int result;
  
  result = (int)(5190);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Osds_get() {
  int jresult ;
  int result;
  
  result = (int)(1007455);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Osplinedeformer_get() {
  int jresult ;
  int result;
  
  result = (int)(1008982);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Osplinerail_get() {
  int jresult ;
  int result;
  
  result = (int)(1008796);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Oatomarray_get() {
  int jresult ;
  int result;
  
  result = (int)(1001002);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Ospherify_get() {
  int jresult ;
  int result;
  
  result = (int)(1001003);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Oexplosionfx_get() {
  int jresult ;
  int result;
  
  result = (int)(1002603);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Yplugin_get() {
  int jresult ;
  int result;
  
  result = (int)(110061);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Zplugin_get() {
  int jresult ;
  int result;
  
  result = (int)(110062);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Olayer_get() {
  int jresult ;
  int result;
  
  result = (int)(100004801);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Fbase_get() {
  int jresult ;
  int result;
  
  result = (int)(1001024);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Zmultipass_get() {
  int jresult ;
  int result;
  
  result = (int)(300001048);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SHplugin_get() {
  int jresult ;
  int result;
  
  result = (int)(110065);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VPplugin_get() {
  int jresult ;
  int result;
  
  result = (int)(110066);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_LISTHEAD_get() {
  int jresult ;
  int result;
  
  result = (int)(110063);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Rbase_get() {
  int jresult ;
  int result;
  
  result = (int)(110304);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Xbase_get() {
  int jresult ;
  int result;
  
  result = (int)(5707);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Xcolor_get() {
  int jresult ;
  int result;
  
  result = (int)(5832);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Xbitmap_get() {
  int jresult ;
  int result;
  
  result = (int)(5833);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Xbrick_get() {
  int jresult ;
  int result;
  
  result = (int)(5804);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Xcheckerboard_get() {
  int jresult ;
  int result;
  
  result = (int)(5800);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Xcloud_get() {
  int jresult ;
  int result;
  
  result = (int)(5802);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Xcolorstripes_get() {
  int jresult ;
  int result;
  
  result = (int)(5822);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Xcyclone_get() {
  int jresult ;
  int result;
  
  result = (int)(5821);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Xearth_get() {
  int jresult ;
  int result;
  
  result = (int)(5825);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Xfire_get() {
  int jresult ;
  int result;
  
  result = (int)(5803);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Xflame_get() {
  int jresult ;
  int result;
  
  result = (int)(5817);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Xgalaxy_get() {
  int jresult ;
  int result;
  
  result = (int)(5813);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Xmetal_get() {
  int jresult ;
  int result;
  
  result = (int)(5827);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Xsimplenoise_get() {
  int jresult ;
  int result;
  
  result = (int)(5807);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Xrust_get() {
  int jresult ;
  int result;
  
  result = (int)(5828);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Xstar_get() {
  int jresult ;
  int result;
  
  result = (int)(5816);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Xstarfield_get() {
  int jresult ;
  int result;
  
  result = (int)(5808);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Xsunburst_get() {
  int jresult ;
  int result;
  
  result = (int)(5820);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Xsimpleturbulence_get() {
  int jresult ;
  int result;
  
  result = (int)(5806);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Xvenus_get() {
  int jresult ;
  int result;
  
  result = (int)(5826);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Xwater_get() {
  int jresult ;
  int result;
  
  result = (int)(5818);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Xwood_get() {
  int jresult ;
  int result;
  
  result = (int)(5823);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Xplanet_get() {
  int jresult ;
  int result;
  
  result = (int)(5829);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Xmarble_get() {
  int jresult ;
  int result;
  
  result = (int)(5830);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Xspectral_get() {
  int jresult ;
  int result;
  
  result = (int)(5831);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Xgradient_get() {
  int jresult ;
  int result;
  
  result = (int)(1011100);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Xfalloff_get() {
  int jresult ;
  int result;
  
  result = (int)(1011101);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Xtiles_get() {
  int jresult ;
  int result;
  
  result = (int)(1011102);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Xfresnel_get() {
  int jresult ;
  int result;
  
  result = (int)(1011103);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Xlumas_get() {
  int jresult ;
  int result;
  
  result = (int)(1011105);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Xproximal_get() {
  int jresult ;
  int result;
  
  result = (int)(1011106);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Xnormaldirection_get() {
  int jresult ;
  int result;
  
  result = (int)(1011107);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Xtranslucency_get() {
  int jresult ;
  int result;
  
  result = (int)(1011108);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Xfusion_get() {
  int jresult ;
  int result;
  
  result = (int)(1011109);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Xposterizer_get() {
  int jresult ;
  int result;
  
  result = (int)(1011111);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Xcolorizer_get() {
  int jresult ;
  int result;
  
  result = (int)(1011112);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Xdistorter_get() {
  int jresult ;
  int result;
  
  result = (int)(1011114);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Xprojector_get() {
  int jresult ;
  int result;
  
  result = (int)(1011115);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Xnoise_get() {
  int jresult ;
  int result;
  
  result = (int)(1011116);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Xlayer_get() {
  int jresult ;
  int result;
  
  result = (int)(1011123);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Xspline_get() {
  int jresult ;
  int result;
  
  result = (int)(1011124);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Xfilter_get() {
  int jresult ;
  int result;
  
  result = (int)(1011128);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Xripple_get() {
  int jresult ;
  int result;
  
  result = (int)(1011199);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Xvertexmap_get() {
  int jresult ;
  int result;
  
  result = (int)(1011137);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Xsss_get() {
  int jresult ;
  int result;
  
  result = (int)(1001197);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Xambientocclusion_get() {
  int jresult ;
  int result;
  
  result = (int)(1001191);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Xchanlum_get() {
  int jresult ;
  int result;
  
  result = (int)(1007539);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Xmosaic_get() {
  int jresult ;
  int result;
  
  result = (int)(1022119);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tpoint_get() {
  int jresult ;
  int result;
  
  result = (int)(5600);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tanchor_EX_get() {
  int jresult ;
  int result;
  
  result = (int)(5608);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tphong_get() {
  int jresult ;
  int result;
  
  result = (int)(5612);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tdisplay_get() {
  int jresult ;
  int result;
  
  result = (int)(5613);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tkinematic_EX_get() {
  int jresult ;
  int result;
  
  result = (int)(5614);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Ttexture_get() {
  int jresult ;
  int result;
  
  result = (int)(5616);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Ttangent_get() {
  int jresult ;
  int result;
  
  result = (int)(5617);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tprotection_get() {
  int jresult ;
  int result;
  
  result = (int)(5629);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tparticle_get() {
  int jresult ;
  int result;
  
  result = (int)(5630);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tmotionblur_get() {
  int jresult ;
  int result;
  
  result = (int)(5636);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tcompositing_get() {
  int jresult ;
  int result;
  
  result = (int)(5637);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Twww_get() {
  int jresult ;
  int result;
  
  result = (int)(5647);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tsavetemp_get() {
  int jresult ;
  int result;
  
  result = (int)(5650);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tpolygon_get() {
  int jresult ;
  int result;
  
  result = (int)(5604);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tuvw_get() {
  int jresult ;
  int result;
  
  result = (int)(5671);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tsegment_get() {
  int jresult ;
  int result;
  
  result = (int)(5672);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tpolygonselection_get() {
  int jresult ;
  int result;
  
  result = (int)(5673);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tpointselection_get() {
  int jresult ;
  int result;
  
  result = (int)(5674);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tcoffeeexpression_get() {
  int jresult ;
  int result;
  
  result = (int)(5675);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Ttargetexpression_get() {
  int jresult ;
  int result;
  
  result = (int)(5676);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tfixexpression_EX_get() {
  int jresult ;
  int result;
  
  result = (int)(5677);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tsunexpression_get() {
  int jresult ;
  int result;
  
  result = (int)(5678);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tikexpression_EX_get() {
  int jresult ;
  int result;
  
  result = (int)(5679);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tline_get() {
  int jresult ;
  int result;
  
  result = (int)(5680);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tvertexmap_get() {
  int jresult ;
  int result;
  
  result = (int)(5682);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Trestriction_get() {
  int jresult ;
  int result;
  
  result = (int)(5683);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tmetaball_get() {
  int jresult ;
  int result;
  
  result = (int)(5684);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tbakeparticle_get() {
  int jresult ;
  int result;
  
  result = (int)(5685);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tmorph_get() {
  int jresult ;
  int result;
  
  result = (int)(5689);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tsticktexture_get() {
  int jresult ;
  int result;
  
  result = (int)(5690);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tplugin_get() {
  int jresult ;
  int result;
  
  result = (int)(5691);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tstop_get() {
  int jresult ;
  int result;
  
  result = (int)(5693);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tbase_get() {
  int jresult ;
  int result;
  
  result = (int)(5694);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tvariable_get() {
  int jresult ;
  int result;
  
  result = (int)(5695);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tvibrate_get() {
  int jresult ;
  int result;
  
  result = (int)(5698);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Taligntospline_get() {
  int jresult ;
  int result;
  
  result = (int)(5699);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Taligntopath_get() {
  int jresult ;
  int result;
  
  result = (int)(5700);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tedgeselection_get() {
  int jresult ;
  int result;
  
  result = (int)(5701);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tclaudebonet_EX_get() {
  int jresult ;
  int result;
  
  result = (int)(5708);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tnormal_get() {
  int jresult ;
  int result;
  
  result = (int)(5711);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tcorner_get() {
  int jresult ;
  int result;
  
  result = (int)(5712);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tsds_get() {
  int jresult ;
  int result;
  
  result = (int)(1007579);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tlookatcamera_get() {
  int jresult ;
  int result;
  
  result = (int)(1001001);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Texpresso_get() {
  int jresult ;
  int result;
  
  result = (int)(1001149);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tsoftselection_get() {
  int jresult ;
  int result;
  
  result = (int)(1016641);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tbaketexture_get() {
  int jresult ;
  int result;
  
  result = (int)(1011198);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tsdsdata_get() {
  int jresult ;
  int result;
  
  result = (int)(1018016);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tweights_get() {
  int jresult ;
  int result;
  
  result = (int)(1019365);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tposemorph_get() {
  int jresult ;
  int result;
  
  result = (int)(1024237);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NLAbase_get() {
  int jresult ;
  int result;
  
  result = (int)(5349);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTbase_get() {
  int jresult ;
  int result;
  
  result = (int)(5350);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CSbase_get() {
  int jresult ;
  int result;
  
  result = (int)(5351);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CKbase_get() {
  int jresult ;
  int result;
  
  result = (int)(5352);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTpla_get() {
  int jresult ;
  int result;
  
  result = (int)(100004812);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTsound_get() {
  int jresult ;
  int result;
  
  result = (int)(100004813);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTmorph_get() {
  int jresult ;
  int result;
  
  result = (int)(100004822);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTtime_get() {
  int jresult ;
  int result;
  
  result = (int)(-1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GVbase_get() {
  int jresult ;
  int result;
  
  result = (int)(1001101);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_BS_HOOK_get() {
  int jresult ;
  int result;
  
  result = (int)(100004808);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MCOMMAND_SPLINE_HARDINTERPOLATION_get() {
  int jresult ;
  int result;
  
  result = (int)(100);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MCOMMAND_SPLINE_SOFTINTERPOLATION_get() {
  int jresult ;
  int result;
  
  result = (int)(101);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MCOMMAND_SPLINE_REORDER_get() {
  int jresult ;
  int result;
  
  result = (int)(102);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MCOMMAND_SPLINE_REVERSE_get() {
  int jresult ;
  int result;
  
  result = (int)(103);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MCOMMAND_SPLINE_MOVEDOWN_get() {
  int jresult ;
  int result;
  
  result = (int)(104);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MCOMMAND_SPLINE_MOVEUP_get() {
  int jresult ;
  int result;
  
  result = (int)(105);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MCOMMAND_SPLINE_JOINSEGMENT_get() {
  int jresult ;
  int result;
  
  result = (int)(109);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MCOMMAND_SPLINE_BREAKSEGMENT_get() {
  int jresult ;
  int result;
  
  result = (int)(110);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MCOMMAND_SPLINE_EQUALLENGTH_get() {
  int jresult ;
  int result;
  
  result = (int)(111);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MCOMMAND_SPLINE_EQUALDIRECTION_get() {
  int jresult ;
  int result;
  
  result = (int)(112);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MCOMMAND_SPLINE_LINEUP_get() {
  int jresult ;
  int result;
  
  result = (int)(113);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MCOMMAND_SPLINE_CREATEOUTLINE_get() {
  int jresult ;
  int result;
  
  result = (int)(114);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MCOMMAND_SPLINE_PROJECT_get() {
  int jresult ;
  int result;
  
  result = (int)(115);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MCOMMAND_SPLINE_ADDPOINT_get() {
  int jresult ;
  int result;
  
  result = (int)(116);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MCOMMAND_SELECTALL_get() {
  int jresult ;
  int result;
  
  result = (int)(200);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MCOMMAND_DESELECTALL_get() {
  int jresult ;
  int result;
  
  result = (int)(201);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MCOMMAND_SELECTINVERSE_get() {
  int jresult ;
  int result;
  
  result = (int)(202);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MCOMMAND_SELECTCONNECTED_get() {
  int jresult ;
  int result;
  
  result = (int)(203);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MCOMMAND_SELECTGROW_get() {
  int jresult ;
  int result;
  
  result = (int)(204);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MCOMMAND_SELECTSHRINK_get() {
  int jresult ;
  int result;
  
  result = (int)(205);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MCOMMAND_SELECTPOINTTOPOLY_get() {
  int jresult ;
  int result;
  
  result = (int)(206);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MCOMMAND_SELECTPOLYTOPOINT_get() {
  int jresult ;
  int result;
  
  result = (int)(207);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MCOMMAND_SELECTADJACENT_get() {
  int jresult ;
  int result;
  
  result = (int)(208);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MCOMMAND_GENERATESELECTION_get() {
  int jresult ;
  int result;
  
  result = (int)(209);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MCOMMAND_HIDESELECTED_get() {
  int jresult ;
  int result;
  
  result = (int)(211);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MCOMMAND_HIDEUNSELECTED_get() {
  int jresult ;
  int result;
  
  result = (int)(212);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MCOMMAND_HIDEINVERT_get() {
  int jresult ;
  int result;
  
  result = (int)(213);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MCOMMAND_UNHIDE_get() {
  int jresult ;
  int result;
  
  result = (int)(214);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MCOMMAND_REVERSENORMALS_get() {
  int jresult ;
  int result;
  
  result = (int)(217);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MCOMMAND_ALIGNNORMALS_get() {
  int jresult ;
  int result;
  
  result = (int)(218);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MCOMMAND_SPLIT_get() {
  int jresult ;
  int result;
  
  result = (int)(220);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MCOMMAND_TRIANGULATE_get() {
  int jresult ;
  int result;
  
  result = (int)(221);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MCOMMAND_UNTRIANGULATE_get() {
  int jresult ;
  int result;
  
  result = (int)(222);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MCOMMAND_DELETE_get() {
  int jresult ;
  int result;
  
  result = (int)(224);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MCOMMAND_OPTIMIZE_get() {
  int jresult ;
  int result;
  
  result = (int)(227);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MCOMMAND_DISCONNECT_get() {
  int jresult ;
  int result;
  
  result = (int)(228);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MCOMMAND_MAKEEDITABLE_get() {
  int jresult ;
  int result;
  
  result = (int)(230);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MCOMMAND_MIRROR_get() {
  int jresult ;
  int result;
  
  result = (int)(237);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MCOMMAND_MATRIXEXTRUDE_get() {
  int jresult ;
  int result;
  
  result = (int)(238);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MCOMMAND_SUBDIVIDE_get() {
  int jresult ;
  int result;
  
  result = (int)(242);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MCOMMAND_EXPLODESEGMENTS_get() {
  int jresult ;
  int result;
  
  result = (int)(243);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MCOMMAND_KNIFE_get() {
  int jresult ;
  int result;
  
  result = (int)(244);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MCOMMAND_CURRENTSTATETOOBJECT_get() {
  int jresult ;
  int result;
  
  result = (int)(245);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MCOMMAND_JOIN_get() {
  int jresult ;
  int result;
  
  result = (int)(246);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MCOMMAND_CONVERTSELECTION_get() {
  int jresult ;
  int result;
  
  result = (int)(247);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MCOMMAND_EDGE_TO_SPLINE_get() {
  int jresult ;
  int result;
  
  result = (int)(251);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MCOMMAND_BREAKPHONG_get() {
  int jresult ;
  int result;
  
  result = (int)(255);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MCOMMAND_UNBREAKPHONG_get() {
  int jresult ;
  int result;
  
  result = (int)(256);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MCOMMAND_PHONGTOSELECTION_get() {
  int jresult ;
  int result;
  
  result = (int)(257);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MCOMMAND_MELT_get() {
  int jresult ;
  int result;
  
  result = (int)(264);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MCOMMAND_RESETSYSTEM_get() {
  int jresult ;
  int result;
  
  result = (int)(265);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_SPLINE_FREEHANDTOLERANCE_get() {
  int jresult ;
  int result;
  
  result = (int)(2020);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_SPLINE_OUTLINE_get() {
  int jresult ;
  int result;
  
  result = (int)(2021);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_SPLINE_PROJECTMODE_get() {
  int jresult ;
  int result;
  
  result = (int)(2022);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_SPLINE_ADDPOINTSEGMENT_get() {
  int jresult ;
  int result;
  
  result = (int)(2023);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_SPLINE_ADDPOINTPOSITION_get() {
  int jresult ;
  int result;
  
  result = (int)(2024);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_SPLINE_ADDPOINTSELECT_get() {
  int jresult ;
  int result;
  
  result = (int)(2025);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_DISCONNECT_PRESERVEGROUPS_get() {
  int jresult ;
  int result;
  
  result = (int)(2028);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_MIRROR_SNAPPOINTS_get() {
  int jresult ;
  int result;
  
  result = (int)(2069);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_MIRROR_DUPLICATE_get() {
  int jresult ;
  int result;
  
  result = (int)(2070);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_MIRROR_WELD_get() {
  int jresult ;
  int result;
  
  result = (int)(2071);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_MIRROR_TOLERANCE_get() {
  int jresult ;
  int result;
  
  result = (int)(2072);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_MIRROR_SYSTEM_get() {
  int jresult ;
  int result;
  
  result = (int)(2067);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_MIRROR_PLANE_get() {
  int jresult ;
  int result;
  
  result = (int)(2068);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_MIRROR_VALUE_get() {
  int jresult ;
  int result;
  
  result = (int)(2073);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_MIRROR_POINT_get() {
  int jresult ;
  int result;
  
  result = (int)(2074);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_MIRROR_VECTOR_get() {
  int jresult ;
  int result;
  
  result = (int)(2075);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_OPTIMIZE_TOLERANCE_get() {
  int jresult ;
  int result;
  
  result = (int)(2076);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_OPTIMIZE_POINTS_get() {
  int jresult ;
  int result;
  
  result = (int)(2077);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_OPTIMIZE_POLYGONS_get() {
  int jresult ;
  int result;
  
  result = (int)(2078);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_OPTIMIZE_UNUSEDPOINTS_get() {
  int jresult ;
  int result;
  
  result = (int)(2079);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_SPLINE_OUTLINESEPARATE_get() {
  int jresult ;
  int result;
  
  result = (int)(2080);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_CROSSSECTION_ANGLE_get() {
  int jresult ;
  int result;
  
  result = (int)(2082);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_SUBDIVIDE_HYPER_get() {
  int jresult ;
  int result;
  
  result = (int)(2098);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_SUBDIVIDE_ANGLE_get() {
  int jresult ;
  int result;
  
  result = (int)(2099);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_SUBDIVIDE_SPLINESUB_get() {
  int jresult ;
  int result;
  
  result = (int)(2100);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_SUBDIVIDE_SUB_get() {
  int jresult ;
  int result;
  
  result = (int)(2101);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_KNIFE_P1_get() {
  int jresult ;
  int result;
  
  result = (int)(2110);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_KNIFE_V1_get() {
  int jresult ;
  int result;
  
  result = (int)(2111);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_KNIFE_P2_get() {
  int jresult ;
  int result;
  
  result = (int)(2112);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_KNIFE_V2_get() {
  int jresult ;
  int result;
  
  result = (int)(2113);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_KNIFE_ANGLE_get() {
  int jresult ;
  int result;
  
  result = (int)(2115);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_MIRROR_SELECTIONS_get() {
  int jresult ;
  int result;
  
  result = (int)(2120);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_UNTRIANGULATE_ANGLE_get() {
  int jresult ;
  int result;
  
  result = (int)(2121);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_MIRROR_ONPLANE_get() {
  int jresult ;
  int result;
  
  result = (int)(2122);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_CONVERTSELECTION_LEFT_get() {
  int jresult ;
  int result;
  
  result = (int)(2126);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_CONVERTSELECTION_RIGHT_get() {
  int jresult ;
  int result;
  
  result = (int)(2127);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_CONVERTSELECTION_TOLERANT_get() {
  int jresult ;
  int result;
  
  result = (int)(2128);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_CURRENTSTATETOOBJECT_INHERITANCE_get() {
  int jresult ;
  int result;
  
  result = (int)(2140);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_CURRENTSTATETOOBJECT_KEEPANIMATION_get() {
  int jresult ;
  int result;
  
  result = (int)(2141);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_ROTATECAMERA_get() {
  int jresult ;
  int result;
  
  result = (int)(2142);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_RING_EDGE_get() {
  int jresult ;
  int result;
  
  result = (int)(2154);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_RING_SELECTION_get() {
  int jresult ;
  int result;
  
  result = (int)(2155);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_RING_SKIP_get() {
  int jresult ;
  int result;
  
  result = (int)(2156);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_FILLSEL_START_POLY_get() {
  int jresult ;
  int result;
  
  result = (int)(2157);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_FILLSEL_SELECTION_get() {
  int jresult ;
  int result;
  
  result = (int)(2158);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_OUTLINESEL_START_POLY_get() {
  int jresult ;
  int result;
  
  result = (int)(2159);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_OUTLINESEL_SELECTION_get() {
  int jresult ;
  int result;
  
  result = (int)(2160);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_UNTRIANGULATE_NGONS_get() {
  int jresult ;
  int result;
  
  result = (int)(2143);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_UNTRIANGULATE_ANGLE_RAD_get() {
  int jresult ;
  int result;
  
  result = (int)(2161);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_CURRENTSTATETOOBJECT_NOGENERATE_get() {
  int jresult ;
  int result;
  
  result = (int)(2162);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_RESETSYSTEM_COMPENSATE_get() {
  int jresult ;
  int result;
  
  result = (int)(2165);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_RESETSYSTEM_RECURSIVE_get() {
  int jresult ;
  int result;
  
  result = (int)(2166);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_JOIN_MERGE_SELTAGS_get() {
  int jresult ;
  int result;
  
  result = (int)(2167);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_SETVERTEX_VALUE_get() {
  int jresult ;
  int result;
  
  result = (int)(4000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDATA_SETVERTEX_MODE_get() {
  int jresult ;
  int result;
  
  result = (int)(4001);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_UNITS_BASIC_get() {
  int jresult ;
  int result;
  
  result = (int)(10000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_UNITS_TIME_get() {
  int jresult ;
  int result;
  
  result = (int)(10001);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_UNITS_AUTOCONVERT_get() {
  int jresult ;
  int result;
  
  result = (int)(10002);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_UNITS_USEUNITS_get() {
  int jresult ;
  int result;
  
  result = (int)(10003);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_REFRESHTIME_get() {
  int jresult ;
  int result;
  
  result = (int)(10004);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_RATIO_get() {
  int jresult ;
  int result;
  
  result = (int)(10005);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_CENTER_get() {
  int jresult ;
  int result;
  
  result = (int)(1002);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_TABLET_get() {
  int jresult ;
  int result;
  
  result = (int)(1005);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_OPENGL_get() {
  int jresult ;
  int result;
  
  result = (int)(1008);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_LINK_SELECTION_get() {
  int jresult ;
  int result;
  
  result = (int)(1009);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_FULLANIMREDRAW_get() {
  int jresult ;
  int result;
  
  result = (int)(1010);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_SAVE_LAYOUT_get() {
  int jresult ;
  int result;
  
  result = (int)(1014);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_INSERTAT_get() {
  int jresult ;
  int result;
  
  result = (int)(1016);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_PASTEAT_get() {
  int jresult ;
  int result;
  
  result = (int)(1017);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_MAX_UNDOS_get() {
  int jresult ;
  int result;
  
  result = (int)(1018);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_MAX_LAST_get() {
  int jresult ;
  int result;
  
  result = (int)(1019);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_CAMERAROTATION_get() {
  int jresult ;
  int result;
  
  result = (int)(1020);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_OPENGL_PERSPECT_get() {
  int jresult ;
  int result;
  
  result = (int)(1024);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_OPENGL_TEXTURE_FILTERING_get() {
  int jresult ;
  int result;
  
  result = (int)(1025);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_OPENGL_TEXTURE_FILTERING_NEAREST_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_OPENGL_TEXTURE_FILTERING_LINEAR_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_OPENGL_TEXTURE_FILTERING_LINEAR_MIPMAP_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_USE_TEXTURES_get() {
  int jresult ;
  int result;
  
  result = (int)(1026);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_USE_QUICKTIME_get() {
  int jresult ;
  int result;
  
  result = (int)(1029);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_TABLET_HIRES_get() {
  int jresult ;
  int result;
  
  result = (int)(1030);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_REVERSE_ORBIT_get() {
  int jresult ;
  int result;
  
  result = (int)(1031);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_OPENGL_POLYLINES_get() {
  int jresult ;
  int result;
  
  result = (int)(1034);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_OPENGL_LIGHTING_get() {
  int jresult ;
  int result;
  
  result = (int)(1035);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_OPENGL_GLPOINTS_get() {
  int jresult ;
  int result;
  
  result = (int)(1037);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_OPENGL_HIGHENDSHADING_get() {
  int jresult ;
  int result;
  
  result = (int)(1038);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_REALTIMEMANAGER_get() {
  int jresult ;
  int result;
  
  result = (int)(1042);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_MAX_BACKUP_get() {
  int jresult ;
  int result;
  
  result = (int)(1043);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_CENTERAXIS_get() {
  int jresult ;
  int result;
  
  result = (int)(1044);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_OPENGL_DUALPLANES_ARB_get() {
  int jresult ;
  int result;
  
  result = (int)(1047);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_MATPREVIEW_DEFAULTSIZE_get() {
  int jresult ;
  int result;
  
  result = (int)(1048);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_DESCRIPTIONLIMIT_get() {
  int jresult ;
  int result;
  
  result = (int)(1049);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_MATPREVIEW_DEFAULTOBJECT_MAT_get() {
  int jresult ;
  int result;
  
  result = (int)(1050);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_MATPREVIEW_DEFAULTUSERSCENE_MAT_get() {
  int jresult ;
  int result;
  
  result = (int)(1051);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_MATPREVIEW_DEFAULTOBJECT_SHD_get() {
  int jresult ;
  int result;
  
  result = (int)(1052);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_MATPREVIEW_DEFAULTUSERSCENE_SHD_get() {
  int jresult ;
  int result;
  
  result = (int)(1053);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_MATPREVIEW_AUTO_UPDATE_get() {
  int jresult ;
  int result;
  
  result = (int)(1054);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_MATPREVIEW_REDRAW_TIME_get() {
  int jresult ;
  int result;
  
  result = (int)(1055);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_MATPREVIEW_FPS_get() {
  int jresult ;
  int result;
  
  result = (int)(1056);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_MATPREVIEW_LENGTH_get() {
  int jresult ;
  int result;
  
  result = (int)(1057);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_MATPREVIEW_MAX_MEM_get() {
  int jresult ;
  int result;
  
  result = (int)(1058);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_SUBPIXELLIMIT_get() {
  int jresult ;
  int result;
  
  result = (int)(1062);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_OPENGL_ROTATEQUADS_get() {
  int jresult ;
  int result;
  
  result = (int)(1064);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_OPENGL_DUALPLANES_HIGHLIGHT_get() {
  int jresult ;
  int result;
  
  result = (int)(1066);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_ALLOWBUGREPORTS_get() {
  int jresult ;
  int result;
  
  result = (int)(1068);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_OPENGL_COMPILER_get() {
  int jresult ;
  int result;
  
  result = (int)(1070);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_OPENGL_COMPILER_GLSL_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_OPENGL_COMPILER_CG_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_OPENGL_MAX_TRANS_DEPTH_get() {
  int jresult ;
  int result;
  
  result = (int)(1071);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_OPENGL_MAX_LIGHTS_get() {
  int jresult ;
  int result;
  
  result = (int)(1072);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_OPENGL_MAX_SHADOWS_get() {
  int jresult ;
  int result;
  
  result = (int)(1073);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_SAVE_CACHES_get() {
  int jresult ;
  int result;
  
  result = (int)(1074);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_OPENGL_ANTIALIAS_get() {
  int jresult ;
  int result;
  
  result = (int)(1084);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_OPENGL_MULTITHREADED_get() {
  int jresult ;
  int result;
  
  result = (int)(1085);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_VIEW_DISLAYCOLORPROFILE_get() {
  int jresult ;
  int result;
  
  result = (int)(1086);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_MOVEACCELERATION_get() {
  int jresult ;
  int result;
  
  result = (int)(1081);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_SCALEACCELERATION_get() {
  int jresult ;
  int result;
  
  result = (int)(1082);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_ROTATEACCELERATION_get() {
  int jresult ;
  int result;
  
  result = (int)(1083);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_COLOR_SYSTEM_C4D_get() {
  int jresult ;
  int result;
  
  result = (int)(1100);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_COLOR_SYSTEM_BP_get() {
  int jresult ;
  int result;
  
  result = (int)(1101);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_COLORSYSTEM_HSVTAB_get() {
  int jresult ;
  int result;
  
  result = (int)(22);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_COLORSYSTEM_TABLE_get() {
  int jresult ;
  int result;
  
  result = (int)(30);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_COLORSYSTEM_RGB_COLOR_get() {
  int jresult ;
  int result;
  
  result = (int)(11);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_COLORSYSTEM_HSV_COLOR_get() {
  int jresult ;
  int result;
  
  result = (int)(21);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_COLOR_RGBRANGE_get() {
  int jresult ;
  int result;
  
  result = (int)(1102);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_COLOR_HRANGE_get() {
  int jresult ;
  int result;
  
  result = (int)(1103);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_COLOR_SVRANGE_get() {
  int jresult ;
  int result;
  
  result = (int)(1104);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_COLORSYSTEM_RANGE_PERCENT_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_COLORSYSTEM_RANGE_DEGREE_get() {
  int jresult ;
  int result;
  
  result = (int)(3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_COLORSYSTEM_RANGE_255_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_COLORSYSTEM_RANGE_65535_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_COLOR_QUICK_C4D_get() {
  int jresult ;
  int result;
  
  result = (int)(1105);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_COLOR_QUICK_BP_get() {
  int jresult ;
  int result;
  
  result = (int)(1106);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_COLOR_MIX_C4D_get() {
  int jresult ;
  int result;
  
  result = (int)(1107);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_COLOR_MIX_BP_get() {
  int jresult ;
  int result;
  
  result = (int)(1108);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_COLOR_SETUPS_get() {
  int jresult ;
  int result;
  
  result = (int)(1109);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_COLOR_QUICKPRESET_get() {
  int jresult ;
  int result;
  
  result = (int)(1200);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_COLOR_QUICKPRESET_LAST_get() {
  int jresult ;
  int result;
  
  result = (int)(1299);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_COLOR_MIXING_1_get() {
  int jresult ;
  int result;
  
  result = (int)(1301);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_COLOR_MIXING_2_get() {
  int jresult ;
  int result;
  
  result = (int)(1302);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_COLOR_MIXING_3_get() {
  int jresult ;
  int result;
  
  result = (int)(1303);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_COLOR_MIXING_4_get() {
  int jresult ;
  int result;
  
  result = (int)(1304);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_COLOR_SYSTEM_COLORCHOOSER_get() {
  int jresult ;
  int result;
  
  result = (int)(1305);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_AUTOSAVE_ENABLE_get() {
  int jresult ;
  int result;
  
  result = (int)(1400);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_AUTOSAVE_MIN_get() {
  int jresult ;
  int result;
  
  result = (int)(1401);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_AUTOSAVE_LIMIT_TO_get() {
  int jresult ;
  int result;
  
  result = (int)(1402);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_AUTOSAVE_LIMIT_NUM_get() {
  int jresult ;
  int result;
  
  result = (int)(1403);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_AUTOSAVE_DEST_get() {
  int jresult ;
  int result;
  
  result = (int)(1405);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_AUTOSAVE_DEST_BACKUPDIR_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_AUTOSAVE_DEST_USERDIR_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_AUTOSAVE_DEST_STARTUPDIR_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_AUTOSAVE_DEST_PATH_get() {
  int jresult ;
  int result;
  
  result = (int)(1406);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_PLUGINS_get() {
  int jresult ;
  int result;
  
  result = (int)(30006);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_CPUCOUNT_get() {
  int jresult ;
  int result;
  
  result = (int)(30010);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_LOGFILE_get() {
  int jresult ;
  int result;
  
  result = (int)(30011);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_CONSOLEGI_get() {
  int jresult ;
  int result;
  
  result = (int)(30013);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_CPUCUSTOM_get() {
  int jresult ;
  int result;
  
  result = (int)(30014);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_RENDERQUEUELOG_get() {
  int jresult ;
  int result;
  
  result = (int)(30015);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_BUBBLEHELP2_get() {
  int jresult ;
  int result;
  
  result = (int)(21002);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_THREADPRIORITY_get() {
  int jresult ;
  int result;
  
  result = (int)(21003);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_MENUICON_get() {
  int jresult ;
  int result;
  
  result = (int)(21004);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_MENUSHORTCUT_get() {
  int jresult ;
  int result;
  
  result = (int)(21005);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_INACTIVEBORDER_get() {
  int jresult ;
  int result;
  
  result = (int)(21006);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_ACTIVEBORDER_get() {
  int jresult ;
  int result;
  
  result = (int)(21007);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_FONT_STANDARD_get() {
  int jresult ;
  int result;
  
  result = (int)(21050);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_FONT_MONO_get() {
  int jresult ;
  int result;
  
  result = (int)(21051);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_MAC_CTRLCLICK_EMULATES_RMB_get() {
  int jresult ;
  int result;
  
  result = (int)(21062);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_UV_RELAX_DATA_get() {
  int jresult ;
  int result;
  
  result = (int)(21065);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_UV_OPTIMAL_MAPPING_DATA_get() {
  int jresult ;
  int result;
  
  result = (int)(21066);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_UV_PROJECTION_DATA_get() {
  int jresult ;
  int result;
  
  result = (int)(21067);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_UV_TAB_SEL_get() {
  int jresult ;
  int result;
  
  result = (int)(21068);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_UV_TRANSFORM_DATA_get() {
  int jresult ;
  int result;
  
  result = (int)(21069);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_LINUX_BROWSERPATH_get() {
  int jresult ;
  int result;
  
  result = (int)(21070);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_MOUSEOVER_SHORTCUT_get() {
  int jresult ;
  int result;
  
  result = (int)(21072);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_ONLINEHELP_PATH_get() {
  int jresult ;
  int result;
  
  result = (int)(21075);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_ONLINEHELP_URL_get() {
  int jresult ;
  int result;
  
  result = (int)(21076);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_LINUX_IMAGEEDITPATH_get() {
  int jresult ;
  int result;
  
  result = (int)(21077);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_LOCKINTERFACE_get() {
  int jresult ;
  int result;
  
  result = (int)(21078);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_TOOLCURSOR_BASIC_get() {
  int jresult ;
  int result;
  
  result = (int)(21079);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_TOOLCURSOR_ADV_get() {
  int jresult ;
  int result;
  
  result = (int)(21080);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_ONLINEUPDATER_AUTO_CHECK_get() {
  int jresult ;
  int result;
  
  result = (int)(40000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_ONLINEUPDATER_CHECKSUM_get() {
  int jresult ;
  int result;
  
  result = (int)(40001);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_ONLINEUPDATER_SHOW_INSTALLED_get() {
  int jresult ;
  int result;
  
  result = (int)(40003);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_ONLINEUPDATER_AUTORESTART_get() {
  int jresult ;
  int result;
  
  result = (int)(40004);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_ONLINEUPDATER_BACKUP_get() {
  int jresult ;
  int result;
  
  result = (int)(40005);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_ONLINEUPDATER_BACKUP_PATH_get() {
  int jresult ;
  int result;
  
  result = (int)(40014);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_ONLINEUPDATER_PROXYSERVER_get() {
  int jresult ;
  int result;
  
  result = (int)(40008);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_ONLINEUPDATER_PROXYPORT_get() {
  int jresult ;
  int result;
  
  result = (int)(40009);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_ONLINEUPDATER_LAST_OPEN_DAY_get() {
  int jresult ;
  int result;
  
  result = (int)(40011);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_ONLINEUPDATER_LAST_OPEN_HOUR_get() {
  int jresult ;
  int result;
  
  result = (int)(40012);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_ONLINEUPDATER_REMOVE_FILES_get() {
  int jresult ;
  int result;
  
  result = (int)(40013);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREF_PV_RENDER_VIEW_get() {
  int jresult ;
  int result;
  
  result = (int)(430000690);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PVPREFSDIALOG_ID_get() {
  int jresult ;
  int result;
  
  result = (int)(465001700);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREFS_PVMEMORY_get() {
  int jresult ;
  int result;
  
  result = (int)WPREFS_PVMEMORY;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREFS_PVDRAWBUCKETS_get() {
  int jresult ;
  int result;
  
  result = (int)WPREFS_PVDRAWBUCKETS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREFS_PVHDMEM_get() {
  int jresult ;
  int result;
  
  result = (int)WPREFS_PVHDMEM;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREFS_PVHDFOLDER_get() {
  int jresult ;
  int result;
  
  result = (int)WPREFS_PVHDFOLDER;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WPREFS_PVHDUNLIMIT_get() {
  int jresult ;
  int result;
  
  result = (int)WPREFS_PVHDUNLIMIT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MOUSE_HIDE_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MOUSE_SHOW_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MOUSE_NORMAL_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MOUSE_BUSY_get() {
  int jresult ;
  int result;
  
  result = (int)(3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MOUSE_CROSS_get() {
  int jresult ;
  int result;
  
  result = (int)(4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MOUSE_QUESTION_get() {
  int jresult ;
  int result;
  
  result = (int)(5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MOUSE_ZOOM_IN_get() {
  int jresult ;
  int result;
  
  result = (int)(6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MOUSE_ZOOM_OUT_get() {
  int jresult ;
  int result;
  
  result = (int)(7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MOUSE_FORBIDDEN_get() {
  int jresult ;
  int result;
  
  result = (int)(8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MOUSE_DELETE_get() {
  int jresult ;
  int result;
  
  result = (int)(9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MOUSE_COPY_get() {
  int jresult ;
  int result;
  
  result = (int)(10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MOUSE_INSERTCOPY_get() {
  int jresult ;
  int result;
  
  result = (int)(11);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MOUSE_INSERTCOPYDOWN_get() {
  int jresult ;
  int result;
  
  result = (int)(12);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MOUSE_MOVE_get() {
  int jresult ;
  int result;
  
  result = (int)(13);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MOUSE_INSERTMOVE_get() {
  int jresult ;
  int result;
  
  result = (int)(14);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MOUSE_INSERTMOVEDOWN_get() {
  int jresult ;
  int result;
  
  result = (int)(15);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MOUSE_ARROW_H_get() {
  int jresult ;
  int result;
  
  result = (int)(16);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MOUSE_ARROW_V_get() {
  int jresult ;
  int result;
  
  result = (int)(17);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MOUSE_ARROW_HV_get() {
  int jresult ;
  int result;
  
  result = (int)(18);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MOUSE_POINT_HAND_get() {
  int jresult ;
  int result;
  
  result = (int)(19);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MOUSE_MOVE_HAND_get() {
  int jresult ;
  int result;
  
  result = (int)(20);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MOUSE_IBEAM_get() {
  int jresult ;
  int result;
  
  result = (int)(21);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MOUSE_SELECT_LIVE_get() {
  int jresult ;
  int result;
  
  result = (int)(22);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MOUSE_SELECT_FREE_get() {
  int jresult ;
  int result;
  
  result = (int)(23);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MOUSE_SELECT_RECT_get() {
  int jresult ;
  int result;
  
  result = (int)(24);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MOUSE_SELECT_POLY_get() {
  int jresult ;
  int result;
  
  result = (int)(25);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MOUSE_SPLINETOOLS_get() {
  int jresult ;
  int result;
  
  result = (int)(26);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MOUSE_EXTRUDE_get() {
  int jresult ;
  int result;
  
  result = (int)(27);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MOUSE_NORMALMOVE_get() {
  int jresult ;
  int result;
  
  result = (int)(28);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MOUSE_ADDPOINTS_get() {
  int jresult ;
  int result;
  
  result = (int)(29);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MOUSE_ADDPOLYGONS_get() {
  int jresult ;
  int result;
  
  result = (int)(30);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MOUSE_BRIDGE_get() {
  int jresult ;
  int result;
  
  result = (int)(31);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MOUSE_MIRROR_get() {
  int jresult ;
  int result;
  
  result = (int)(32);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MOUSE_PAINTMOVE_get() {
  int jresult ;
  int result;
  
  result = (int)(33);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MOUSE_PAINTSELECTRECT_get() {
  int jresult ;
  int result;
  
  result = (int)(34);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MOUSE_PAINTSELECTCIRCLE_get() {
  int jresult ;
  int result;
  
  result = (int)(35);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MOUSE_PAINTSELECTPOLY_get() {
  int jresult ;
  int result;
  
  result = (int)(36);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MOUSE_PAINTSELECTFREE_get() {
  int jresult ;
  int result;
  
  result = (int)(37);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MOUSE_PAINTMAGICWAND_get() {
  int jresult ;
  int result;
  
  result = (int)(38);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MOUSE_PAINTCOLORRANGE_get() {
  int jresult ;
  int result;
  
  result = (int)(39);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MOUSE_PAINTFILL_get() {
  int jresult ;
  int result;
  
  result = (int)(40);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MOUSE_PAINTPICK_get() {
  int jresult ;
  int result;
  
  result = (int)(41);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MOUSE_PAINTBRUSH_get() {
  int jresult ;
  int result;
  
  result = (int)(42);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MOUSE_PAINTCLONE_get() {
  int jresult ;
  int result;
  
  result = (int)(43);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MOUSE_PAINTTEXT_get() {
  int jresult ;
  int result;
  
  result = (int)(44);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MOUSE_PAINTCROP_get() {
  int jresult ;
  int result;
  
  result = (int)(45);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MOUSE_PAINTLINE_get() {
  int jresult ;
  int result;
  
  result = (int)(46);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MOUSE_PAINTPOLYSHAPE_get() {
  int jresult ;
  int result;
  
  result = (int)(47);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EVMSG_CHANGE_get() {
  int jresult ;
  int result;
  
  result = (int)(604);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_EVMSG_DOCUMENTRECALCULATED_get() {
  char jresult ;
  char result;
  
  result = (char)('drcl');
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EVMSG_TOOLCHANGED_get() {
  int jresult ;
  int result;
  
  result = (int)(0xfff36465);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EVMSG_GRAPHVIEWCHANGED_get() {
  int jresult ;
  int result;
  
  result = (int)(400008000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EVMSG_AUTKEYMODECHANGED_get() {
  int jresult ;
  int result;
  
  result = (int)(200000009);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EVMSG_UPDATEHIGHLIGHT_get() {
  int jresult ;
  int result;
  
  result = (int)(200000073);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EVMSG_SHOWIN_SB_get() {
  int jresult ;
  int result;
  
  result = (int)(-200000074);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EVMSG_SHOWIN_TL_get() {
  int jresult ;
  int result;
  
  result = (int)(-200000075);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EVMSG_SHOWIN_FC_get() {
  int jresult ;
  int result;
  
  result = (int)(-200000076);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EVMSG_SHOWIN_LM_get() {
  int jresult ;
  int result;
  
  result = (int)(-200000077);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EVMSG_TLOM_MERGE_get() {
  int jresult ;
  int result;
  
  result = (int)(-465001000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EVMSG_SHOWIN_MT_get() {
  int jresult ;
  int result;
  
  result = (int)(-200000078);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EVMSG_TIMELINESELECTION_get() {
  int jresult ;
  int result;
  
  result = (int)(-1001);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EVMSG_BROWSERCHANGE_get() {
  int jresult ;
  int result;
  
  result = (int)(-1002);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EVMSG_MATERIALSELECTION_get() {
  int jresult ;
  int result;
  
  result = (int)(-1009);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EVMSG_FCURVECHANGE_get() {
  int jresult ;
  int result;
  
  result = (int)(-1010);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EVMSG_RAYTRACER_FINISHED_get() {
  int jresult ;
  int result;
  
  result = (int)(-1003);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EVMSG_MATERIALPREVIEW_get() {
  int jresult ;
  int result;
  
  result = (int)(-1008);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_EVMSG_ACTIVEVIEWCHANGED_get() {
  char jresult ;
  char result;
  
  result = (char)('acvw');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_EVMSG_ASYNCEDITORMOVE_get() {
  char jresult ;
  char result;
  
  result = (char)('edmv');
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MOVE_START_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MOVE_CONTINUE_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MOVE_END_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_EVMSG_TIMECHANGED_get() {
  char jresult ;
  char result;
  
  result = (char)('tchg');
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EVMSG_VIEWWINDOW_OUTPUT_get() {
  int jresult ;
  int result;
  
  result = (int)(-1011);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EVMSG_VIEWWINDOW_3DPAINTUPD_get() {
  int jresult ;
  int result;
  
  result = (int)(-1012);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_C4DBACKGROUND_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_FILMFORMAT_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_HORIZON_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_GRID_MAJOR_get() {
  int jresult ;
  int result;
  
  result = (int)(3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_GRID_MINOR_get() {
  int jresult ;
  int result;
  
  result = (int)(4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_SPLINESTART_get() {
  int jresult ;
  int result;
  
  result = (int)(5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_SPLINEEND_get() {
  int jresult ;
  int result;
  
  result = (int)(6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_CAMERA_get() {
  int jresult ;
  int result;
  
  result = (int)(7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_PARTICLE_get() {
  int jresult ;
  int result;
  
  result = (int)(8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_PMODIFIER_get() {
  int jresult ;
  int result;
  
  result = (int)(9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DELME_VIEWCOLOR_BONE_get() {
  int jresult ;
  int result;
  
  result = (int)(10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_MODIFIER_get() {
  int jresult ;
  int result;
  
  result = (int)(11);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_ACTIVEPOINT_get() {
  int jresult ;
  int result;
  
  result = (int)(12);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_INACTIVEPOINT_get() {
  int jresult ;
  int result;
  
  result = (int)(13);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_TANGENT_get() {
  int jresult ;
  int result;
  
  result = (int)(14);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_ACTIVEPOLYGON_get() {
  int jresult ;
  int result;
  
  result = (int)(15);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_INACTIVEPOLYGON_get() {
  int jresult ;
  int result;
  
  result = (int)(16);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_TEXTURE_get() {
  int jresult ;
  int result;
  
  result = (int)(17);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_TEXTUREAXIS_get() {
  int jresult ;
  int result;
  
  result = (int)(18);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_ACTIVEBOX_get() {
  int jresult ;
  int result;
  
  result = (int)(19);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_ANIMPATH_get() {
  int jresult ;
  int result;
  
  result = (int)(20);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_XAXIS_get() {
  int jresult ;
  int result;
  
  result = (int)(21);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_YAXIS_get() {
  int jresult ;
  int result;
  
  result = (int)(22);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_ZAXIS_get() {
  int jresult ;
  int result;
  
  result = (int)(23);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_WXAXIS_get() {
  int jresult ;
  int result;
  
  result = (int)(24);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_WYAXIS_get() {
  int jresult ;
  int result;
  
  result = (int)(25);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_WZAXIS_get() {
  int jresult ;
  int result;
  
  result = (int)(26);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_SELECT_AXIS_get() {
  int jresult ;
  int result;
  
  result = (int)(27);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_LAYER0_get() {
  int jresult ;
  int result;
  
  result = (int)(28);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_LAYER1_get() {
  int jresult ;
  int result;
  
  result = (int)(29);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_LAYER2_get() {
  int jresult ;
  int result;
  
  result = (int)(30);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_LAYER3_get() {
  int jresult ;
  int result;
  
  result = (int)(31);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_LAYER4_get() {
  int jresult ;
  int result;
  
  result = (int)(32);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_LAYER5_get() {
  int jresult ;
  int result;
  
  result = (int)(33);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_LAYER6_get() {
  int jresult ;
  int result;
  
  result = (int)(34);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_LAYER7_get() {
  int jresult ;
  int result;
  
  result = (int)(35);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_VERTEXSTART_get() {
  int jresult ;
  int result;
  
  result = (int)(36);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_VERTEXEND_get() {
  int jresult ;
  int result;
  
  result = (int)(37);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_UVMESH_GREYED_get() {
  int jresult ;
  int result;
  
  result = (int)(38);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_UVMESH_APOLY_get() {
  int jresult ;
  int result;
  
  result = (int)(39);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_UVMESH_IAPOLY_get() {
  int jresult ;
  int result;
  
  result = (int)(40);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_UVMESH_APOINT_get() {
  int jresult ;
  int result;
  
  result = (int)(41);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_UVMESH_IAPOINT_get() {
  int jresult ;
  int result;
  
  result = (int)(42);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_NORMAL_get() {
  int jresult ;
  int result;
  
  result = (int)(43);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_ACTIVECHILDBOX_get() {
  int jresult ;
  int result;
  
  result = (int)(44);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_ACTIVEPOLYBOX_get() {
  int jresult ;
  int result;
  
  result = (int)(45);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_ACTIVEPOLYCHILDBOX_get() {
  int jresult ;
  int result;
  
  result = (int)(46);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_SELECTION_PREVIEW_get() {
  int jresult ;
  int result;
  
  result = (int)(47);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_MEASURETOOL_get() {
  int jresult ;
  int result;
  
  result = (int)(48);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_AXIS_BAND_get() {
  int jresult ;
  int result;
  
  result = (int)(49);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_SHADEDWIRE_get() {
  int jresult ;
  int result;
  
  result = (int)(50);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_NGONLINE_get() {
  int jresult ;
  int result;
  
  result = (int)(51);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_FRONTFACING_get() {
  int jresult ;
  int result;
  
  result = (int)(52);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_BACKFACING_get() {
  int jresult ;
  int result;
  
  result = (int)(53);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_MINSOFTSELECT_get() {
  int jresult ;
  int result;
  
  result = (int)(54);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_MAXSOFTSELECT_get() {
  int jresult ;
  int result;
  
  result = (int)(55);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_MINHNWEIGHT_get() {
  int jresult ;
  int result;
  
  result = (int)(56);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_ZEROHNWEIGHT_get() {
  int jresult ;
  int result;
  
  result = (int)(57);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_MAXHNWEIGHT_get() {
  int jresult ;
  int result;
  
  result = (int)(58);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_IRR_get() {
  int jresult ;
  int result;
  
  result = (int)(59);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWCOLOR_MAXCOLORS_get() {
  int jresult ;
  int result;
  
  result = (int)(60);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FORMAT_PREF_get() {
  int jresult ;
  int result;
  
  result = (int)(1000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FORMAT_WAV_get() {
  int jresult ;
  int result;
  
  result = (int)(1018);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FORMAT_L4D_get() {
  int jresult ;
  int result;
  
  result = (int)(1020);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FORMAT_P4D_get() {
  int jresult ;
  int result;
  
  result = (int)(1022);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FORMAT_C4DIMPORT_get() {
  int jresult ;
  int result;
  
  result = (int)(1001025);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FORMAT_C4DEXPORT_get() {
  int jresult ;
  int result;
  
  result = (int)(1001026);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FORMAT_XMLIMPORT_get() {
  int jresult ;
  int result;
  
  result = (int)(1001027);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FORMAT_XMLEXPORT_get() {
  int jresult ;
  int result;
  
  result = (int)(1001028);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FORMAT_C4D4IMPORT_get() {
  int jresult ;
  int result;
  
  result = (int)(1001029);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FORMAT_C4D5IMPORT_get() {
  int jresult ;
  int result;
  
  result = (int)(1001030);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FORMAT_VRML1IMPORT_get() {
  int jresult ;
  int result;
  
  result = (int)(1001031);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FORMAT_VRML1EXPORT_get() {
  int jresult ;
  int result;
  
  result = (int)(1001032);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FORMAT_VRML2IMPORT_get() {
  int jresult ;
  int result;
  
  result = (int)(1001033);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FORMAT_VRML2EXPORT_get() {
  int jresult ;
  int result;
  
  result = (int)(1001034);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FORMAT_DXFIMPORT_get() {
  int jresult ;
  int result;
  
  result = (int)(1001035);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FORMAT_DXFEXPORT_get() {
  int jresult ;
  int result;
  
  result = (int)(1001036);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FORMAT_3DSIMPORT_get() {
  int jresult ;
  int result;
  
  result = (int)(1001037);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FORMAT_3DSEXPORT_get() {
  int jresult ;
  int result;
  
  result = (int)(1001038);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FORMAT_OBJIMPORT_get() {
  int jresult ;
  int result;
  
  result = (int)(1001039);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FORMAT_OBJEXPORT_get() {
  int jresult ;
  int result;
  
  result = (int)(1001040);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FORMAT_Q3DIMPORT_get() {
  int jresult ;
  int result;
  
  result = (int)(1001041);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FORMAT_Q3DEXPORT_get() {
  int jresult ;
  int result;
  
  result = (int)(1001042);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FORMAT_LWSIMPORT_get() {
  int jresult ;
  int result;
  
  result = (int)(1001043);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FORMAT_LWOIMPORT_get() {
  int jresult ;
  int result;
  
  result = (int)(1001044);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FORMAT_AIIMPORT_get() {
  int jresult ;
  int result;
  
  result = (int)(1001045);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FORMAT_DEMIMPORT_get() {
  int jresult ;
  int result;
  
  result = (int)(1001046);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FORMAT_D3DEXPORT_get() {
  int jresult ;
  int result;
  
  result = (int)(1001047);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HIGHLIGHT_TRANSPARENCY_get() {
  int jresult ;
  int result;
  
  result = (int)(-140);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HERMITEFAK_get() {
  double jresult ;
  double result;
  
  result = (double)(4.0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CREATE_GL_HAS_ROOT_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CREATE_GL_IS_ROOT_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DELETE_GL_HAS_ROOT_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DELETE_GL_IS_ROOT_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_PIN_get() {
  int jresult ;
  int result;
  
  result = (int)(9000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_SUBGROUP_get() {
  int jresult ;
  int result;
  
  result = (int)(12678);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_UNLOCKED_get() {
  int jresult ;
  int result;
  
  result = (int)(12679);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_LOCKED_get() {
  int jresult ;
  int result;
  
  result = (int)(-12679);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_HISTOGRAM_get() {
  int jresult ;
  int result;
  
  result = (int)(12680);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_PLUS_get() {
  int jresult ;
  int result;
  
  result = (int)(300000118);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_MINUS_get() {
  int jresult ;
  int result;
  
  result = (int)(300000119);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_ANIM_get() {
  int jresult ;
  int result;
  
  result = (int)(200000122);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_KEY_get() {
  int jresult ;
  int result;
  
  result = (int)(300000121);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_SEQUENCE_get() {
  int jresult ;
  int result;
  
  result = (int)(300000122);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_FOLDER_get() {
  int jresult ;
  int result;
  
  result = (int)(300000123);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_OPENED_get() {
  int jresult ;
  int result;
  
  result = (int)(300000124);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_CLOSED_get() {
  int jresult ;
  int result;
  
  result = (int)(300000125);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_ARROWLEFT_get() {
  int jresult ;
  int result;
  
  result = (int)(300000126);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_ARROWRIGHT_get() {
  int jresult ;
  int result;
  
  result = (int)(300000127);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_ARROWUP_get() {
  int jresult ;
  int result;
  
  result = (int)(300000128);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_AMDUPLICATE_get() {
  int jresult ;
  int result;
  
  result = (int)(300000129);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_MOVE_get() {
  int jresult ;
  int result;
  
  result = (int)(13563);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_SCALE_get() {
  int jresult ;
  int result;
  
  result = (int)(13564);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_ROTATE_get() {
  int jresult ;
  int result;
  
  result = (int)(13565);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_VIEWCHANGE_get() {
  int jresult ;
  int result;
  
  result = (int)(13640);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_FULLSCREEN_get() {
  int jresult ;
  int result;
  
  result = (int)(17301);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_CLOSERRELEASED_get() {
  int jresult ;
  int result;
  
  result = (int)(12097);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_CLOSERPRESSED_get() {
  int jresult ;
  int result;
  
  result = (int)(-12097);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_CANCEL_get() {
  int jresult ;
  int result;
  
  result = (int)(300000130);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_OK_get() {
  int jresult ;
  int result;
  
  result = (int)(300000131);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_OKCANCEL_get() {
  int jresult ;
  int result;
  
  result = (int)(300000132);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_BOOLGROUP_get() {
  int jresult ;
  int result;
  
  result = (int)(300000133);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_ADAPTERGROUP_get() {
  int jresult ;
  int result;
  
  result = (int)(300000134);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_CALCULATEGROUP_get() {
  int jresult ;
  int result;
  
  result = (int)(300000135);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_DEFAULTGROUP_get() {
  int jresult ;
  int result;
  
  result = (int)(300000136);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_DEFAULTOPERATOR_get() {
  int jresult ;
  int result;
  
  result = (int)(300000137);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_GENERALGROUP_get() {
  int jresult ;
  int result;
  
  result = (int)(300000138);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_ITERATORGROUP_get() {
  int jresult ;
  int result;
  
  result = (int)(300000139);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_LOGICALGROUP_get() {
  int jresult ;
  int result;
  
  result = (int)(300000140);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_TPGROUP_get() {
  int jresult ;
  int result;
  
  result = (int)(300000141);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_COFFEESCRIPT_get() {
  int jresult ;
  int result;
  
  result = (int)(300000142);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_UVWTAG_SECONDSTATE_get() {
  int jresult ;
  int result;
  
  result = (int)(300000143);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_INSTANCEOBJECT_SECONDSTATE_get() {
  int jresult ;
  int result;
  
  result = (int)(300000144);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_LIGHT_SHADOWS_get() {
  int jresult ;
  int result;
  
  result = (int)(300000145);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_LIGHT_SPOT_get() {
  int jresult ;
  int result;
  
  result = (int)(300000146);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_LIGHT_SPOTSHADOWS_get() {
  int jresult ;
  int result;
  
  result = (int)(300000147);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_LIGHT_PARALLEL_get() {
  int jresult ;
  int result;
  
  result = (int)(300000148);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_LIGHT_PARALLELSHADOWS_get() {
  int jresult ;
  int result;
  
  result = (int)(300000149);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_LIGHT_AREA_get() {
  int jresult ;
  int result;
  
  result = (int)(300000150);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_LIGHT_AREASHADOWS_get() {
  int jresult ;
  int result;
  
  result = (int)(300000151);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_BASEDRAW_get() {
  int jresult ;
  int result;
  
  result = (int)(300000152);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_CTRACK_get() {
  int jresult ;
  int result;
  
  result = (int)(300000153);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_BASEKEY_get() {
  int jresult ;
  int result;
  
  result = (int)(300000154);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_BASESEQUENCE_get() {
  int jresult ;
  int result;
  
  result = (int)(300000155);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_BASETRACK_get() {
  int jresult ;
  int result;
  
  result = (int)(300000156);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_UNKNOWN_get() {
  int jresult ;
  int result;
  
  result = (int)(300000157);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_BASESHADER_get() {
  int jresult ;
  int result;
  
  result = (int)(300000158);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_PAINTBITMAP_get() {
  int jresult ;
  int result;
  
  result = (int)(300000159);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_MULTIPLE_get() {
  int jresult ;
  int result;
  
  result = (int)(300000160);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_EYEACTIVE_get() {
  int jresult ;
  int result;
  
  result = (int)(300000161);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_EYEINACTIVE_get() {
  int jresult ;
  int result;
  
  result = (int)(300000162);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_PENACTIVE_get() {
  int jresult ;
  int result;
  
  result = (int)(300000163);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_PENINACTIVE_get() {
  int jresult ;
  int result;
  
  result = (int)(300000164);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_ALPHAACTIVE_get() {
  int jresult ;
  int result;
  
  result = (int)(300000165);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_ALPHAINACTIVE_get() {
  int jresult ;
  int result;
  
  result = (int)(300000166);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_LINKEDACTIVE_get() {
  int jresult ;
  int result;
  
  result = (int)(300000167);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_LINKEDINACTIVE_get() {
  int jresult ;
  int result;
  
  result = (int)(300000168);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_BPAXIS_get() {
  int jresult ;
  int result;
  
  result = (int)(300000169);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_BPCROSSED_get() {
  int jresult ;
  int result;
  
  result = (int)(300000170);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_MOCCATREEVIEWNO_get() {
  int jresult ;
  int result;
  
  result = (int)(300000171);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_MOCCATREEVIEWYES_get() {
  int jresult ;
  int result;
  
  result = (int)(300000172);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_MOCCATREEVIEWLOCKED_get() {
  int jresult ;
  int result;
  
  result = (int)(300000173);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_MOCCAIKTAG1_get() {
  int jresult ;
  int result;
  
  result = (int)(300000174);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_MOCCAIKTAG2_get() {
  int jresult ;
  int result;
  
  result = (int)(300000175);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_MOCCAIKTAG3_get() {
  int jresult ;
  int result;
  
  result = (int)(300000176);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_MOCCAIKTAG4_get() {
  int jresult ;
  int result;
  
  result = (int)(300000177);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_MOCCAIKTAG5_get() {
  int jresult ;
  int result;
  
  result = (int)(300000178);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_MOCCAIKTAG6_get() {
  int jresult ;
  int result;
  
  result = (int)(300000185);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_BITMAPFILTERPLUS_get() {
  int jresult ;
  int result;
  
  result = (int)(300000179);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_BITMAPFILTERMINUS_get() {
  int jresult ;
  int result;
  
  result = (int)(300000180);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_CLOTHING1_get() {
  int jresult ;
  int result;
  
  result = (int)(300000181);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_CLOTHING2_get() {
  int jresult ;
  int result;
  
  result = (int)(300000182);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_CLOTHING3_get() {
  int jresult ;
  int result;
  
  result = (int)(300000183);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_CLOTHING4_get() {
  int jresult ;
  int result;
  
  result = (int)(300000184);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_CLEARSELECTION_get() {
  int jresult ;
  int result;
  
  result = (int)(300000187);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_GENERICCOMMAND_get() {
  int jresult ;
  int result;
  
  result = (int)(300000188);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_TIMELINE_KEY1_get() {
  int jresult ;
  int result;
  
  result = (int)(300000191);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_TIMELINE_KEY2_get() {
  int jresult ;
  int result;
  
  result = (int)(300000192);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_AMMODELOCK_1_get() {
  int jresult ;
  int result;
  
  result = (int)(300000193);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_AMMODELOCK_2_get() {
  int jresult ;
  int result;
  
  result = (int)(300000194);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_SCENEBROWSER_HOME_get() {
  int jresult ;
  int result;
  
  result = (int)(300000195);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_SCENEBROWSER_FILTER1_get() {
  int jresult ;
  int result;
  
  result = (int)(300000196);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_SCENEBROWSER_FILTER2_get() {
  int jresult ;
  int result;
  
  result = (int)(300000197);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_SCENEBROWSER_FIND1_get() {
  int jresult ;
  int result;
  
  result = (int)(300000198);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_SCENEBROWSER_FIND2_get() {
  int jresult ;
  int result;
  
  result = (int)(300000199);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_SCENEBROWSER_PATH1_get() {
  int jresult ;
  int result;
  
  result = (int)(300000200);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_SCENEBROWSER_PATH2_get() {
  int jresult ;
  int result;
  
  result = (int)(300000201);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_TIMELINE_STATE1_get() {
  int jresult ;
  int result;
  
  result = (int)(300000202);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_TIMELINE_STATE2_get() {
  int jresult ;
  int result;
  
  result = (int)(300000203);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_TIMELINE_STATE3_get() {
  int jresult ;
  int result;
  
  result = (int)(300000204);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_TIMELINE_STATE4_get() {
  int jresult ;
  int result;
  
  result = (int)(300000205);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_TIMELINE_STATE5_get() {
  int jresult ;
  int result;
  
  result = (int)(300000206);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_TIMELINE_STATE6_get() {
  int jresult ;
  int result;
  
  result = (int)(300000207);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_TIMELINE_KEYSTATE1_get() {
  int jresult ;
  int result;
  
  result = (int)(300000208);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_TIMELINE_KEYSTATE2_get() {
  int jresult ;
  int result;
  
  result = (int)(300000209);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_TIMELINE_KEYSTATE3_get() {
  int jresult ;
  int result;
  
  result = (int)(300000210);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_TIMELINE_KEYSTATE4_get() {
  int jresult ;
  int result;
  
  result = (int)(300000211);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_LAYERMANAGER_STATE1_get() {
  int jresult ;
  int result;
  
  result = (int)(300000212);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_LAYERMANAGER_STATE2_get() {
  int jresult ;
  int result;
  
  result = (int)(300000213);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_LAYERMANAGER_STATE3_get() {
  int jresult ;
  int result;
  
  result = (int)(300000214);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_LAYERMANAGER_STATE4_get() {
  int jresult ;
  int result;
  
  result = (int)(300000215);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_LAYERMANAGER_STATE5_get() {
  int jresult ;
  int result;
  
  result = (int)(300000216);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_LAYERMANAGER_STATE6_get() {
  int jresult ;
  int result;
  
  result = (int)(300000217);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_LAYERMANAGER_STATE7_get() {
  int jresult ;
  int result;
  
  result = (int)(300000218);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_LAYERMANAGER_STATE8_get() {
  int jresult ;
  int result;
  
  result = (int)(300000219);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_LAYERMANAGER_STATE9_get() {
  int jresult ;
  int result;
  
  result = (int)(300000220);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_LAYERMANAGER_STATE10_get() {
  int jresult ;
  int result;
  
  result = (int)(300000221);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_LAYERMANAGER_STATE11_get() {
  int jresult ;
  int result;
  
  result = (int)(300000222);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_LAYERMANAGER_STATE12_get() {
  int jresult ;
  int result;
  
  result = (int)(300000223);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_LAYERMANAGER_STATE13_get() {
  int jresult ;
  int result;
  
  result = (int)(300000224);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_LAYERMANAGER_STATE14_get() {
  int jresult ;
  int result;
  
  result = (int)(300000225);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_LAYERMANAGER_STATE15_get() {
  int jresult ;
  int result;
  
  result = (int)(300000226);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_LAYERMANAGER_STATE16_get() {
  int jresult ;
  int result;
  
  result = (int)(300000227);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_LAYERMANAGER_STATE17_get() {
  int jresult ;
  int result;
  
  result = (int)(300000228);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_LAYERMANAGER_STATE18_get() {
  int jresult ;
  int result;
  
  result = (int)(300000229);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_OBJECTMANAGER_STATE1_get() {
  int jresult ;
  int result;
  
  result = (int)(300000230);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_OBJECTMANAGER_STATE2_get() {
  int jresult ;
  int result;
  
  result = (int)(300000231);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_OBJECTMANAGER_STATE3_get() {
  int jresult ;
  int result;
  
  result = (int)(300000232);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_OBJECTMANAGER_STATE4_get() {
  int jresult ;
  int result;
  
  result = (int)(300000233);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_OBJECTMANAGER_DOT1_get() {
  int jresult ;
  int result;
  
  result = (int)(300000234);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_OBJECTMANAGER_DOT2_get() {
  int jresult ;
  int result;
  
  result = (int)(300000235);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_OBJECTMANAGER_DOT3_get() {
  int jresult ;
  int result;
  
  result = (int)(300000236);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_OBJECTMANAGER_DOT4_get() {
  int jresult ;
  int result;
  
  result = (int)(300000237);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_OBJECTMANAGER_LOCK_get() {
  int jresult ;
  int result;
  
  result = (int)(300000238);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_TIMELINE_FOLDER1_get() {
  int jresult ;
  int result;
  
  result = (int)(300000239);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_TIMELINE_FOLDER2_get() {
  int jresult ;
  int result;
  
  result = (int)(300000240);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_TIMELINE_FOLDER3_get() {
  int jresult ;
  int result;
  
  result = (int)(300000241);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_TIMELINE_FOLDER4_get() {
  int jresult ;
  int result;
  
  result = (int)(300000242);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_TIMELINE_ROOT1_get() {
  int jresult ;
  int result;
  
  result = (int)(300000243);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_TIMELINE_ROOT2_get() {
  int jresult ;
  int result;
  
  result = (int)(300000244);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_TIMELINE_ROOT3_get() {
  int jresult ;
  int result;
  
  result = (int)(300000245);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_OBJECTMANAGER_DISP1_get() {
  int jresult ;
  int result;
  
  result = (int)(300000246);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_OBJECTMANAGER_DISP2_get() {
  int jresult ;
  int result;
  
  result = (int)(300000247);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_OBJECTMANAGER_DISP3_get() {
  int jresult ;
  int result;
  
  result = (int)(300000248);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_OBJECTMANAGER_DISP4_get() {
  int jresult ;
  int result;
  
  result = (int)(300000249);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_BROWSER_DESKTOP_get() {
  int jresult ;
  int result;
  
  result = (int)(300000251);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_BROWSER_HOME_get() {
  int jresult ;
  int result;
  
  result = (int)(300000252);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_BROWSER_PRESET_get() {
  int jresult ;
  int result;
  
  result = (int)(300000253);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_BROWSER_CATALOG_get() {
  int jresult ;
  int result;
  
  result = (int)(300000254);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_BROWSER_SEARCH_get() {
  int jresult ;
  int result;
  
  result = (int)(300000255);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_BROWSER_PLAY_get() {
  int jresult ;
  int result;
  
  result = (int)(300000256);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_BROWSER_PAUSE_get() {
  int jresult ;
  int result;
  
  result = (int)(300000257);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_BROWSER_SMALLVIEW_get() {
  int jresult ;
  int result;
  
  result = (int)(300000258);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_BROWSER_BIGVIEW_get() {
  int jresult ;
  int result;
  
  result = (int)(300000259);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_ONLINEHELP_HOME_get() {
  int jresult ;
  int result;
  
  result = (int)(300000260);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_ARROWDOWN_get() {
  int jresult ;
  int result;
  
  result = (int)(300000263);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_EYETRISTATE_get() {
  int jresult ;
  int result;
  
  result = (int)(300000264);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_PREVIOUSPAGE_get() {
  int jresult ;
  int result;
  
  result = (int)(1022433);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_FOLLOWINGPAGE_get() {
  int jresult ;
  int result;
  
  result = (int)(1022434);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_LIGHT_PHOTOMETRIC_get() {
  int jresult ;
  int result;
  
  result = (int)(300000265);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RESOURCEIMAGE_LIGHT_PHOTOMETRICSHADOWS_get() {
  int jresult ;
  int result;
  
  result = (int)(300000266);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOTKEY_CAMERA_MOVE_get() {
  int jresult ;
  int result;
  
  result = (int)(13563);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOTKEY_CAMERA_SCALE_get() {
  int jresult ;
  int result;
  
  result = (int)(13564);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOTKEY_CAMERA_ROTATE_get() {
  int jresult ;
  int result;
  
  result = (int)(13565);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOTKEY_OBJECT_MOVE_get() {
  int jresult ;
  int result;
  
  result = (int)(13566);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOTKEY_OBJECT_SCALE_get() {
  int jresult ;
  int result;
  
  result = (int)(13567);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOTKEY_OBJECT_ROTATE_get() {
  int jresult ;
  int result;
  
  result = (int)(13568);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOTKEY_MODEL_SCALE_get() {
  int jresult ;
  int result;
  
  result = (int)(13569);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOTKEY_ZOOM_get() {
  int jresult ;
  int result;
  
  result = (int)(13570);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOTKEY_SELECT_FREE_get() {
  int jresult ;
  int result;
  
  result = (int)(13571);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOTKEY_SELECT_LIVE_get() {
  int jresult ;
  int result;
  
  result = (int)(13572);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOTKEY_SELECT_RECT_get() {
  int jresult ;
  int result;
  
  result = (int)(13573);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IDM_UNDO_get() {
  int jresult ;
  int result;
  
  result = (int)(12105);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IDM_REDO_get() {
  int jresult ;
  int result;
  
  result = (int)(12297);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IDM_CUT_get() {
  int jresult ;
  int result;
  
  result = (int)(12106);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IDM_COPY_get() {
  int jresult ;
  int result;
  
  result = (int)(12107);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IDM_PASTE_get() {
  int jresult ;
  int result;
  
  result = (int)(12108);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IDM_DELETE_get() {
  int jresult ;
  int result;
  
  result = (int)(12109);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IDM_SELECTALL_get() {
  int jresult ;
  int result;
  
  result = (int)(12112);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IDM_SELECTNONE_get() {
  int jresult ;
  int result;
  
  result = (int)(12113);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IDM_INVERSION_get() {
  int jresult ;
  int result;
  
  result = (int)(12374);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EXECUTIONPRIORITY_INITIAL_get() {
  int jresult ;
  int result;
  
  result = (int)(1000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EXECUTIONPRIORITY_ANIMATION_get() {
  int jresult ;
  int result;
  
  result = (int)(2000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EXECUTIONPRIORITY_ANIMATION_NLA_get() {
  int jresult ;
  int result;
  
  result = (int)(2010);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EXECUTIONPRIORITY_EXPRESSION_get() {
  int jresult ;
  int result;
  
  result = (int)(3000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EXECUTIONPRIORITY_DYNAMICS_get() {
  int jresult ;
  int result;
  
  result = (int)(4000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EXECUTIONPRIORITY_GENERATOR_get() {
  int jresult ;
  int result;
  
  result = (int)(5000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DLG_OK_get() {
  int jresult ;
  int result;
  
  result = (int)DLG_OK;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DLG_CANCEL_get() {
  int jresult ;
  int result;
  
  result = (int)DLG_CANCEL;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_MT_SOURCECOUNTER_get() {
  int jresult ;
  int result;
  
  result = (int)(465001520);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_GLOBAL_TEXTURE_PATHS_get() {
  int jresult ;
  int result;
  
  result = (int)(10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SHADERPOPUP_SETSHADER_get() {
  int jresult ;
  int result;
  
  result = (int)(99989);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SHADERPOPUP_SETFILENAME_get() {
  int jresult ;
  int result;
  
  result = (int)(99990);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SHADERPOPUP_LOADIMAGE_get() {
  int jresult ;
  int result;
  
  result = (int)(99991);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SHADERPOPUP_EDITPARAMS_get() {
  int jresult ;
  int result;
  
  result = (int)(99999);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SHADERPOPUP_RELOADIMAGE_get() {
  int jresult ;
  int result;
  
  result = (int)(99998);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SHADERPOPUP_EDITIMAGE_get() {
  int jresult ;
  int result;
  
  result = (int)(99997);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SHADERPOPUP_COPYCHANNEL_get() {
  int jresult ;
  int result;
  
  result = (int)(99995);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SHADERPOPUP_PASTECHANNEL_get() {
  int jresult ;
  int result;
  
  result = (int)(99994);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SHADERPOPUP_CREATENEWTEXTURE_get() {
  int jresult ;
  int result;
  
  result = (int)(99993);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SHADERPOPUP_CLEARSHADER_get() {
  int jresult ;
  int result;
  
  result = (int)(99992);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DEFAULTFILENAME_SHADER_SURFACES_get() {
  int jresult ;
  int result;
  
  result = (int)(1001);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DEFAULTFILENAME_SHADER_EFFECTS_get() {
  int jresult ;
  int result;
  
  result = (int)(1002);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DEFAULTFILENAME_SHADER_VOLUME_get() {
  int jresult ;
  int result;
  
  result = (int)(1003);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BACKGROUNDHANDLER_PRIORITY_RENDERACTIVEMATERIAL_get() {
  int jresult ;
  int result;
  
  result = (int)(5000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BACKGROUNDHANDLER_PRIORITY_REDRAWVIEW_get() {
  int jresult ;
  int result;
  
  result = (int)(4000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BACKGROUNDHANDLER_PRIORITY_RENDERINACTIVEMATERIALS_get() {
  int jresult ;
  int result;
  
  result = (int)(3000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BACKGROUNDHANDLER_PRIORITY_RENDEREXTERNAL_get() {
  int jresult ;
  int result;
  
  result = (int)(-1000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BACKGROUNDHANDLER_PRIORITY_REDRAWANTS_get() {
  int jresult ;
  int result;
  
  result = (int)(-2000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BACKGROUNDHANDLER_TYPECLASS_C4D_get() {
  int jresult ;
  int result;
  
  result = (int)(1000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_COFFEESCRIPT_get() {
  int jresult ;
  int result;
  
  result = (int)(1001085);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_COFFEESCRIPT_TEXT_get() {
  int jresult ;
  int result;
  
  result = (int)(1000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_COFFEESCRIPT_SHOWINMENU_get() {
  int jresult ;
  int result;
  
  result = (int)(1002);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_COFFEESCRIPT_ADDEVENT_get() {
  int jresult ;
  int result;
  
  result = (int)(1003);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_COFFEESCRIPT_SCRIPTENABLE_get() {
  int jresult ;
  int result;
  
  result = (int)(1006);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_COFFEESCRIPT_CONTAINER_get() {
  int jresult ;
  int result;
  
  result = (int)(65536);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_COFFEESCRIPT_SCRIPTNAME_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_COFFEESCRIPT_SCRIPTHELP_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_COFFEESCRIPT_EXECUTE_get() {
  int jresult ;
  int result;
  
  result = (int)(1001184);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_COFFEESCRIPT_RETRIEVEBITMAP_get() {
  int jresult ;
  int result;
  
  result = (int)(1001185);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BASEDRAW_DRAWPORTTYPE_get() {
  int jresult ;
  int result;
  
  result = (int)(1888);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BASEDRAW_IS_SHADOWPASS_get() {
  int jresult ;
  int result;
  
  result = (int)(1889);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BASEDRAW_IS_RENDERASEDITOR_get() {
  int jresult ;
  int result;
  
  result = (int)(1890);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BASEDRAW_IS_OGL_PREPASS_get() {
  int jresult ;
  int result;
  
  result = (int)(1891);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BASEDRAW_IS_PICK_OBJECT_get() {
  int jresult ;
  int result;
  
  result = (int)(1892);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_GICSEX_get() {
  int jresult ;
  int result;
  
  result = (int)(1000969);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_GINEW_get() {
  int jresult ;
  int result;
  
  result = (int)(1021096);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OLDCAUSTICS_get() {
  int jresult ;
  int result;
  
  result = (int)(1000970);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VPglobalillumination_get() {
  int jresult ;
  int result;
  
  result = (int)(1021096);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_COFFEEEDITOR_GETSTRING_get() {
  char jresult ;
  char result;
  
  result = (char)('gets');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_COFFEEEDITOR_SETSTRING_get() {
  char jresult ;
  char result;
  
  result = (char)('sets');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_COFFEEEDITOR_COMPILE_get() {
  char jresult ;
  char result;
  
  result = (char)('comp');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_COFFEEEDITOR_GETERROR_RES_get() {
  char jresult ;
  char result;
  
  result = (char)('resr');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_COFFEEEDITOR_GETERROR_STRING_get() {
  char jresult ;
  char result;
  
  result = (char)('ress');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_COFFEEEDITOR_GETERROR_LINE_get() {
  char jresult ;
  char result;
  
  result = (char)('resl');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_COFFEEEDITOR_GETERROR_POS_get() {
  char jresult ;
  char result;
  
  result = (char)('resp');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_COFFEEEDITOR_EXECUTE_get() {
  char jresult ;
  char result;
  
  result = (char)('exec');
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_PIN_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_PIN;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_CHECKBOX_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_CHECKBOX;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_STATICTEXT_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_STATICTEXT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_BUTTON_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_BUTTON;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_ARROWBUTTON_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_ARROWBUTTON;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_EDITTEXT_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_EDITTEXT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_EDITNUMBER_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_EDITNUMBER;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_EDITNUMBERUD_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_EDITNUMBERUD;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_EDITSLIDER_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_EDITSLIDER;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_SLIDER_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_SLIDER;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_COLORFIELD_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_COLORFIELD;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_COLORCHOOSER_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_COLORCHOOSER;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_USERAREA_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_USERAREA;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_RADIOGROUP_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_RADIOGROUP;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_COMBOBOX_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_COMBOBOX;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_POPUPBUTTON_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_POPUPBUTTON;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_CHILD_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_CHILD;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_FREECHILDREN_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_FREECHILDREN;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_DLGGROUP_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_DLGGROUP;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_SETTITLE_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_SETTITLE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_GROUPSPACE_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_GROUPSPACE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_GROUPBORDER_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_GROUPBORDER;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_GROUPBORDERSIZE_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_GROUPBORDERSIZE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_SETIDS_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_SETIDS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_LAYOUTCHANGED_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_LAYOUTCHANGED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_ACTIVATE_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_ACTIVATE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_ADDSUBMENU_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_ADDSUBMENU;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_ENDSUBMENU_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_ENDSUBMENU;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_ADDMENUCMD_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_ADDMENUCMD;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_FLUSHMENU_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_FLUSHMENU;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_INIT_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_INIT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_CHECKNUMBERS_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_CHECKNUMBERS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DELME_DIALOG_SETGROUP_get() {
  int jresult ;
  int result;
  
  result = (int)DELME_DIALOG_SETGROUP;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_FLUSHGROUP_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_FLUSHGROUP;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_SETMENU_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_SETMENU;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_SCREEN2LOCALX_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_SCREEN2LOCALX;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_SCREEN2LOCALY_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_SCREEN2LOCALY;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_ADDMENUSTR_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_ADDMENUSTR;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_RADIOBUTTON_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_RADIOBUTTON;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_ADDMENUSEP_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_ADDMENUSEP;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_SEPARATOR_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_SEPARATOR;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_MULTILINEEDITTEXT_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_MULTILINEEDITTEXT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_INITMENUSTR_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_INITMENUSTR;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_RADIOTEXT_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_RADIOTEXT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_MENURESOURCE_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_MENURESOURCE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_LISTVIEW_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_LISTVIEW;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_SUBDIALOG_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_SUBDIALOG;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_CHECKCLOSE_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_CHECKCLOSE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_GETTRISTATE_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_GETTRISTATE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_SDK_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_SDK;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_SCROLLGROUP_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_SCROLLGROUP;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_ISOPEN_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_ISOPEN;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_REMOVEGADGET_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_REMOVEGADGET;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_MENUGROUPBEGIN_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_MENUGROUPBEGIN;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_NOMENUBAR_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_NOMENUBAR;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_SAVEWEIGHTS_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_SAVEWEIGHTS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_LOADWEIGHTS_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_LOADWEIGHTS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_EDITSHORTCUT_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_EDITSHORTCUT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_ISVISIBLE_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_ISVISIBLE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_HIDEELEMENT_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_HIDEELEMENT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_SETDEFAULTCOLOR_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_SETDEFAULTCOLOR;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_COMBOBUTTON_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_COMBOBUTTON;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG_PRIVATE_NOSTOPEDITORTHREADS_get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_PRIVATE_NOSTOPEDITORTHREADS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DIALOG__get() {
  int jresult ;
  int result;
  
  result = (int)DIALOG_;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EDITTEXT_PASSWORD_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 0));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LV_GETLINECOUNT_get() {
  int jresult ;
  int result;
  
  result = (int)LV_GETLINECOUNT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LV_GETCOLUMNCOUNT_get() {
  int jresult ;
  int result;
  
  result = (int)LV_GETCOLUMNCOUNT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LV_GETLINEHEIGHT_get() {
  int jresult ;
  int result;
  
  result = (int)LV_GETLINEHEIGHT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LV_GETCOLUMNWIDTH_get() {
  int jresult ;
  int result;
  
  result = (int)LV_GETCOLUMNWIDTH;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LV_GETCOLUMTYPE_get() {
  int jresult ;
  int result;
  
  result = (int)LV_GETCOLUMTYPE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LV_COLUMN_TEXT_get() {
  int jresult ;
  int result;
  
  result = (int)LV_COLUMN_TEXT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LV_COLUMN_EDITTEXT_get() {
  int jresult ;
  int result;
  
  result = (int)LV_COLUMN_EDITTEXT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LV_COLUMN_BMP_get() {
  int jresult ;
  int result;
  
  result = (int)LV_COLUMN_BMP;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LV_COLUMN_CHECKBOX_get() {
  int jresult ;
  int result;
  
  result = (int)LV_COLUMN_CHECKBOX;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LV_COLUMN_BUTTON_get() {
  int jresult ;
  int result;
  
  result = (int)LV_COLUMN_BUTTON;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LV_COLUMN_USERDRAW_get() {
  int jresult ;
  int result;
  
  result = (int)LV_COLUMN_USERDRAW;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LV_COLUMN_COLORVIEW_get() {
  int jresult ;
  int result;
  
  result = (int)LV_COLUMN_COLORVIEW;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LV_GETCOLUMDATA_get() {
  int jresult ;
  int result;
  
  result = (int)LV_GETCOLUMDATA;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LV_GETLINESELECTED_get() {
  int jresult ;
  int result;
  
  result = (int)LV_GETLINESELECTED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LV_GETCOLSPACE_get() {
  int jresult ;
  int result;
  
  result = (int)LV_GETCOLSPACE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LV_GETLINESPACE_get() {
  int jresult ;
  int result;
  
  result = (int)LV_GETLINESPACE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LV_GETFIXEDLAYOUT_get() {
  int jresult ;
  int result;
  
  result = (int)LV_GETFIXEDLAYOUT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LV_DESTROYLISTVIEW_get() {
  int jresult ;
  int result;
  
  result = (int)LV_DESTROYLISTVIEW;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LV_INITCACHE_get() {
  int jresult ;
  int result;
  
  result = (int)LV_INITCACHE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LV_NOAUTOCOLUMN_get() {
  int jresult ;
  int result;
  
  result = (int)LV_NOAUTOCOLUMN;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LV_LMOUSEDOWN_get() {
  int jresult ;
  int result;
  
  result = (int)LV_LMOUSEDOWN;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LV_ACTION_get() {
  int jresult ;
  int result;
  
  result = (int)LV_ACTION;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LV_USERDRAW_get() {
  int jresult ;
  int result;
  
  result = (int)LV_USERDRAW;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LV_REDRAW_get() {
  int jresult ;
  int result;
  
  result = (int)LV_REDRAW;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LV_DATACHANGED_get() {
  int jresult ;
  int result;
  
  result = (int)LV_DATACHANGED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LV_SHOWLINE_get() {
  int jresult ;
  int result;
  
  result = (int)LV_SHOWLINE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LV_DRAGRECEIVE_get() {
  int jresult ;
  int result;
  
  result = (int)LV_DRAGRECEIVE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LV_RMOUSEDOWN_get() {
  int jresult ;
  int result;
  
  result = (int)LV_RMOUSEDOWN;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LV_SIMPLE_SELECTIONCHANGED_get() {
  int jresult ;
  int result;
  
  result = (int)LV_SIMPLE_SELECTIONCHANGED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LV_SIMPLE_CHECKBOXCHANGED_get() {
  int jresult ;
  int result;
  
  result = (int)LV_SIMPLE_CHECKBOXCHANGED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LV_SIMPLE_FOCUSITEM_get() {
  int jresult ;
  int result;
  
  result = (int)LV_SIMPLE_FOCUSITEM;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LV_SIMPLE_BUTTONCLICK_get() {
  int jresult ;
  int result;
  
  result = (int)LV_SIMPLE_BUTTONCLICK;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LV_SIMPLE_ITEM_ID_get() {
  int jresult ;
  int result;
  
  result = (int)LV_SIMPLE_ITEM_ID;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LV_SIMPLE_COL_ID_get() {
  int jresult ;
  int result;
  
  result = (int)LV_SIMPLE_COL_ID;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LV_SIMPLE_DATA_get() {
  int jresult ;
  int result;
  
  result = (int)LV_SIMPLE_DATA;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LV_SIMPLE_DOUBLECLICK_get() {
  int jresult ;
  int result;
  
  result = (int)LV_SIMPLE_DOUBLECLICK;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LV_SIMPLE_FOCUSITEM_NC_get() {
  int jresult ;
  int result;
  
  result = (int)LV_SIMPLE_FOCUSITEM_NC;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LV_SIMPLE_RMOUSE_get() {
  int jresult ;
  int result;
  
  result = (int)LV_SIMPLE_RMOUSE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LV_SIMPLE_USERDRAW_get() {
  int jresult ;
  int result;
  
  result = (int)LV_SIMPLE_USERDRAW;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LV_RES_LONG_get() {
  int jresult ;
  int result;
  
  result = (int)LV_RES_LONG;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LV_RES_BITMAP_get() {
  int jresult ;
  int result;
  
  result = (int)LV_RES_BITMAP;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LV_RES_STRING_get() {
  int jresult ;
  int result;
  
  result = (int)LV_RES_STRING;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LV_RES_VECTOR_get() {
  int jresult ;
  int result;
  
  result = (int)LV_RES_VECTOR;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LV_RES_NIL_get() {
  int jresult ;
  int result;
  
  result = (int)LV_RES_NIL;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LV___get() {
  int jresult ;
  int result;
  
  result = (int)LV__;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NEWPARSERERROR_BADSTRING_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 0));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NEWPARSERERROR_BADEXECUTION_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 1));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NEWPARSERERROR_MEMORYERROR_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 2));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NEWPARSERERROR_NUMBERERROR_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 3));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UNIT_NONE_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UNIT_KM_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UNIT_M_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UNIT_CM_get() {
  int jresult ;
  int result;
  
  result = (int)(3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UNIT_MM_get() {
  int jresult ;
  int result;
  
  result = (int)(4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UNIT_UM_get() {
  int jresult ;
  int result;
  
  result = (int)(5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UNIT_NM_get() {
  int jresult ;
  int result;
  
  result = (int)(6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UNIT_MILE_get() {
  int jresult ;
  int result;
  
  result = (int)(7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UNIT_YARD_get() {
  int jresult ;
  int result;
  
  result = (int)(8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UNIT_FEET_get() {
  int jresult ;
  int result;
  
  result = (int)(9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UNIT_INCH_get() {
  int jresult ;
  int result;
  
  result = (int)(10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ANGLE_DEG_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ANGLE_RAD_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ParserCache_CopyTo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ParserCache *arg1 = (ParserCache *) 0 ;
  ParserCache *arg2 = (ParserCache *) 0 ;
  Bool result;
  
  arg1 = (ParserCache *)jarg1; 
  arg2 = (ParserCache *)jarg2; 
  result = (arg1)->CopyTo(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ParserCache_Alloc() {
  void * jresult ;
  ParserCache *result = 0 ;
  
  result = (ParserCache *)ParserCache::Alloc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParserCache_Free(void * jarg1) {
  ParserCache **arg1 = 0 ;
  
  arg1 = (ParserCache **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ParserCache *& type is null", 0);
    return ;
  } 
  ParserCache::Free(*arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Parser_Eval__SWIG_0(void * jarg1, char * /* constString&_ctype */ jarg2, void * jarg3, void * jarg4, int jarg5, int jarg6, int jarg7) {
  unsigned int jresult ;
  Parser *arg1 = (Parser *) 0 ;
  String *arg2 = 0 ;
  LONG *arg3 = (LONG *) 0 ;
  Real *arg4 = (Real *) 0 ;
  LONG arg5 ;
  LONG arg6 ;
  LONG arg7 ;
  Bool result;
  
  arg1 = (Parser *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (LONG *)jarg3; 
  arg4 = (Real *)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (LONG)jarg6; 
  arg7 = (LONG)jarg7; 
  result = (arg1)->Eval((String const &)*arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Parser_Eval__SWIG_1(void * jarg1, char * /* constString&_ctype */ jarg2, void * jarg3, void * jarg4, int jarg5, int jarg6) {
  unsigned int jresult ;
  Parser *arg1 = (Parser *) 0 ;
  String *arg2 = 0 ;
  LONG *arg3 = (LONG *) 0 ;
  Real *arg4 = (Real *) 0 ;
  LONG arg5 ;
  LONG arg6 ;
  Bool result;
  
  arg1 = (Parser *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (LONG *)jarg3; 
  arg4 = (Real *)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (LONG)jarg6; 
  result = (arg1)->Eval((String const &)*arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Parser_Eval__SWIG_2(void * jarg1, char * /* constString&_ctype */ jarg2, void * jarg3, void * jarg4, int jarg5) {
  unsigned int jresult ;
  Parser *arg1 = (Parser *) 0 ;
  String *arg2 = 0 ;
  LONG *arg3 = (LONG *) 0 ;
  Real *arg4 = (Real *) 0 ;
  LONG arg5 ;
  Bool result;
  
  arg1 = (Parser *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (LONG *)jarg3; 
  arg4 = (Real *)jarg4; 
  arg5 = (LONG)jarg5; 
  result = (arg1)->Eval((String const &)*arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Parser_Eval__SWIG_3(void * jarg1, char * /* constString&_ctype */ jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  Parser *arg1 = (Parser *) 0 ;
  String *arg2 = 0 ;
  LONG *arg3 = (LONG *) 0 ;
  Real *arg4 = (Real *) 0 ;
  Bool result;
  
  arg1 = (Parser *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (LONG *)jarg3; 
  arg4 = (Real *)jarg4; 
  result = (arg1)->Eval((String const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Parser_EvalLong(void * jarg1, char * /* constString&_ctype */ jarg2, void * jarg3, void * jarg4, int jarg5, int jarg6) {
  unsigned int jresult ;
  Parser *arg1 = (Parser *) 0 ;
  String *arg2 = 0 ;
  LONG *arg3 = (LONG *) 0 ;
  LONG *arg4 = (LONG *) 0 ;
  LONG arg5 ;
  LONG arg6 ;
  Bool result;
  
  arg1 = (Parser *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (LONG *)jarg3; 
  arg4 = (LONG *)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (LONG)jarg6; 
  result = (arg1)->EvalLong((String const &)*arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Parser_Alloc() {
  void * jresult ;
  Parser *result = 0 ;
  
  result = (Parser *)Parser::Alloc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Parser_Free(void * jarg1) {
  Parser **arg1 = 0 ;
  
  arg1 = (Parser **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Parser *& type is null", 0);
    return ;
  } 
  Parser::Free(*arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Parser_AddVar__SWIG_0(void * jarg1, char * /* constString&_ctype */ jarg2, void * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  Parser *arg1 = (Parser *) 0 ;
  String *arg2 = 0 ;
  Real *arg3 = (Real *) 0 ;
  Bool arg4 ;
  Bool result;
  
  arg1 = (Parser *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (Real *)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (arg1)->AddVar((String const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Parser_AddVar__SWIG_1(void * jarg1, char * /* constString&_ctype */ jarg2, void * jarg3) {
  unsigned int jresult ;
  Parser *arg1 = (Parser *) 0 ;
  String *arg2 = 0 ;
  Real *arg3 = (Real *) 0 ;
  Bool result;
  
  arg1 = (Parser *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (Real *)jarg3; 
  result = (arg1)->AddVar((String const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Parser_RemoveVar__SWIG_0(void * jarg1, char * /* constString&_ctype */ jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  Parser *arg1 = (Parser *) 0 ;
  String *arg2 = 0 ;
  Bool arg3 ;
  Bool result;
  
  arg1 = (Parser *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->RemoveVar((String const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Parser_RemoveVar__SWIG_1(void * jarg1, char * /* constString&_ctype */ jarg2) {
  unsigned int jresult ;
  Parser *arg1 = (Parser *) 0 ;
  String *arg2 = 0 ;
  Bool result;
  
  arg1 = (Parser *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (arg1)->RemoveVar((String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Parser_RemoveAllVars(void * jarg1) {
  unsigned int jresult ;
  Parser *arg1 = (Parser *) 0 ;
  Bool result;
  
  arg1 = (Parser *)jarg1; 
  result = (arg1)->RemoveAllVars();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Parser_GetParserData(void * jarg1, void * jarg2) {
  Parser *arg1 = (Parser *) 0 ;
  ParserCache *arg2 = (ParserCache *) 0 ;
  
  arg1 = (Parser *)jarg1; 
  arg2 = (ParserCache *)jarg2; 
  (arg1)->GetParserData(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Parser_Init__SWIG_0(void * jarg1, char * /* constString&_ctype */ jarg2, void * jarg3, int jarg4, int jarg5, int jarg6) {
  unsigned int jresult ;
  Parser *arg1 = (Parser *) 0 ;
  String *arg2 = 0 ;
  LONG *arg3 = (LONG *) 0 ;
  LONG arg4 ;
  LONG arg5 ;
  LONG arg6 ;
  Bool result;
  
  arg1 = (Parser *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (LONG *)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (LONG)jarg6; 
  result = (arg1)->Init((String const &)*arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Parser_Init__SWIG_1(void * jarg1, char * /* constString&_ctype */ jarg2, void * jarg3, int jarg4, int jarg5) {
  unsigned int jresult ;
  Parser *arg1 = (Parser *) 0 ;
  String *arg2 = 0 ;
  LONG *arg3 = (LONG *) 0 ;
  LONG arg4 ;
  LONG arg5 ;
  Bool result;
  
  arg1 = (Parser *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (LONG *)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (LONG)jarg5; 
  result = (arg1)->Init((String const &)*arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Parser_Init__SWIG_2(void * jarg1, char * /* constString&_ctype */ jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  Parser *arg1 = (Parser *) 0 ;
  String *arg2 = 0 ;
  LONG *arg3 = (LONG *) 0 ;
  LONG arg4 ;
  Bool result;
  
  arg1 = (Parser *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (LONG *)jarg3; 
  arg4 = (LONG)jarg4; 
  result = (arg1)->Init((String const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Parser_Init__SWIG_3(void * jarg1, char * /* constString&_ctype */ jarg2, void * jarg3) {
  unsigned int jresult ;
  Parser *arg1 = (Parser *) 0 ;
  String *arg2 = 0 ;
  LONG *arg3 = (LONG *) 0 ;
  Bool result;
  
  arg1 = (Parser *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (LONG *)jarg3; 
  result = (arg1)->Init((String const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Parser_ReEval(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  Parser *arg1 = (Parser *) 0 ;
  Real *arg2 = (Real *) 0 ;
  LONG *arg3 = (LONG *) 0 ;
  Bool result;
  
  arg1 = (Parser *)jarg1; 
  arg2 = (Real *)jarg2; 
  arg3 = (LONG *)jarg3; 
  result = (arg1)->ReEval(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Parser_Calculate(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  Parser *arg1 = (Parser *) 0 ;
  ParserCache *arg2 = (ParserCache *) 0 ;
  Real *arg3 = (Real *) 0 ;
  LONG *arg4 = (LONG *) 0 ;
  Bool result;
  
  arg1 = (Parser *)jarg1; 
  arg2 = (ParserCache *)jarg2; 
  arg3 = (Real *)jarg3; 
  arg4 = (LONG *)jarg4; 
  result = (arg1)->Calculate((ParserCache const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Parser_AddVarLong__SWIG_0(void * jarg1, char * /* constString&_ctype */ jarg2, void * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  Parser *arg1 = (Parser *) 0 ;
  String *arg2 = 0 ;
  LONG *arg3 = (LONG *) 0 ;
  Bool arg4 ;
  Bool result;
  
  arg1 = (Parser *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (LONG *)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (arg1)->AddVarLong((String const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Parser_AddVarLong__SWIG_1(void * jarg1, char * /* constString&_ctype */ jarg2, void * jarg3) {
  unsigned int jresult ;
  Parser *arg1 = (Parser *) 0 ;
  String *arg2 = 0 ;
  LONG *arg3 = (LONG *) 0 ;
  Bool result;
  
  arg1 = (Parser *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (LONG *)jarg3; 
  result = (arg1)->AddVarLong((String const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Parser_ReEvalLong(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  Parser *arg1 = (Parser *) 0 ;
  LONG *arg2 = (LONG *) 0 ;
  LONG *arg3 = (LONG *) 0 ;
  Bool result;
  
  arg1 = (Parser *)jarg1; 
  arg2 = (LONG *)jarg2; 
  arg3 = (LONG *)jarg3; 
  result = (arg1)->ReEvalLong(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Parser_CalculateLong(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  Parser *arg1 = (Parser *) 0 ;
  ParserCache *arg2 = (ParserCache *) 0 ;
  LONG *arg3 = (LONG *) 0 ;
  LONG *arg4 = (LONG *) 0 ;
  Bool result;
  
  arg1 = (Parser *)jarg1; 
  arg2 = (ParserCache *)jarg2; 
  arg3 = (LONG *)jarg3; 
  arg4 = (LONG *)jarg4; 
  result = (arg1)->CalculateLong((ParserCache const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Parser_Reset__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Parser *arg1 = (Parser *) 0 ;
  ParserCache *arg2 = (ParserCache *) 0 ;
  Bool result;
  
  arg1 = (Parser *)jarg1; 
  arg2 = (ParserCache *)jarg2; 
  result = (arg1)->Reset(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Parser_Reset__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  Parser *arg1 = (Parser *) 0 ;
  Bool result;
  
  arg1 = (Parser *)jarg1; 
  result = (arg1)->Reset();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SerialInfo_nr_set(void * jarg1, char * /* constString&_ctype */ jarg2) {
  SerialInfo *arg1 = (SerialInfo *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (SerialInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->nr = *arg2;
}


SWIGEXPORT char * /* constString&_ctype */ SWIGSTDCALL CSharp_SerialInfo_nr_get(void * jarg1) {
  char * /* constString&_ctype */ jresult ;
  SerialInfo *arg1 = (SerialInfo *) 0 ;
  String *result = 0 ;
  
  arg1 = (SerialInfo *)jarg1; 
  result = (String *) & ((arg1)->nr);
  jresult = SWIG_csharp_string_callback(result->GetCStringCopy()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SerialInfo_name_set(void * jarg1, char * /* constString&_ctype */ jarg2) {
  SerialInfo *arg1 = (SerialInfo *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (SerialInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT char * /* constString&_ctype */ SWIGSTDCALL CSharp_SerialInfo_name_get(void * jarg1) {
  char * /* constString&_ctype */ jresult ;
  SerialInfo *arg1 = (SerialInfo *) 0 ;
  String *result = 0 ;
  
  arg1 = (SerialInfo *)jarg1; 
  result = (String *) & ((arg1)->name);
  jresult = SWIG_csharp_string_callback(result->GetCStringCopy()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SerialInfo_organization_set(void * jarg1, char * /* constString&_ctype */ jarg2) {
  SerialInfo *arg1 = (SerialInfo *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (SerialInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->organization = *arg2;
}


SWIGEXPORT char * /* constString&_ctype */ SWIGSTDCALL CSharp_SerialInfo_organization_get(void * jarg1) {
  char * /* constString&_ctype */ jresult ;
  SerialInfo *arg1 = (SerialInfo *) 0 ;
  String *result = 0 ;
  
  arg1 = (SerialInfo *)jarg1; 
  result = (String *) & ((arg1)->organization);
  jresult = SWIG_csharp_string_callback(result->GetCStringCopy()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SerialInfo_street_set(void * jarg1, char * /* constString&_ctype */ jarg2) {
  SerialInfo *arg1 = (SerialInfo *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (SerialInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->street = *arg2;
}


SWIGEXPORT char * /* constString&_ctype */ SWIGSTDCALL CSharp_SerialInfo_street_get(void * jarg1) {
  char * /* constString&_ctype */ jresult ;
  SerialInfo *arg1 = (SerialInfo *) 0 ;
  String *result = 0 ;
  
  arg1 = (SerialInfo *)jarg1; 
  result = (String *) & ((arg1)->street);
  jresult = SWIG_csharp_string_callback(result->GetCStringCopy()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SerialInfo_city_set(void * jarg1, char * /* constString&_ctype */ jarg2) {
  SerialInfo *arg1 = (SerialInfo *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (SerialInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->city = *arg2;
}


SWIGEXPORT char * /* constString&_ctype */ SWIGSTDCALL CSharp_SerialInfo_city_get(void * jarg1) {
  char * /* constString&_ctype */ jresult ;
  SerialInfo *arg1 = (SerialInfo *) 0 ;
  String *result = 0 ;
  
  arg1 = (SerialInfo *)jarg1; 
  result = (String *) & ((arg1)->city);
  jresult = SWIG_csharp_string_callback(result->GetCStringCopy()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SerialInfo_country_set(void * jarg1, char * /* constString&_ctype */ jarg2) {
  SerialInfo *arg1 = (SerialInfo *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (SerialInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->country = *arg2;
}


SWIGEXPORT char * /* constString&_ctype */ SWIGSTDCALL CSharp_SerialInfo_country_get(void * jarg1) {
  char * /* constString&_ctype */ jresult ;
  SerialInfo *arg1 = (SerialInfo *) 0 ;
  String *result = 0 ;
  
  arg1 = (SerialInfo *)jarg1; 
  result = (String *) & ((arg1)->country);
  jresult = SWIG_csharp_string_callback(result->GetCStringCopy()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SerialInfo() {
  void * jresult ;
  SerialInfo *result = 0 ;
  
  result = (SerialInfo *)new SerialInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SerialInfo(void * jarg1) {
  SerialInfo *arg1 = (SerialInfo *) 0 ;
  
  arg1 = (SerialInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeGetSerialInfo(void * jarg1, void * jarg2) {
  SERIALINFO arg1 ;
  SerialInfo *arg2 = (SerialInfo *) 0 ;
  SERIALINFO *argp1 ;
  
  argp1 = (SERIALINFO *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null SERIALINFO", 0);
    return ;
  }
  arg1 = *argp1; 
  arg2 = (SerialInfo *)jarg2; 
  GeGetSerialInfo(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_GeGetVersionType() {
  int jresult ;
  VERSIONTYPE result;
  
  result = (VERSIONTYPE)GeGetVersionType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsNet() {
  unsigned int jresult ;
  Bool result;
  
  result = IsNet();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GeGetSystemInfo() {
  int jresult ;
  SYSTEMINFO result;
  
  result = (SYSTEMINFO)GeGetSystemInfo();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeShowMouse(int jarg1) {
  LONG arg1 ;
  
  arg1 = (LONG)jarg1; 
  GeShowMouse(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GeGetScreenDimensions(int jarg1, int jarg2, unsigned int jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7) {
  unsigned int jresult ;
  LONG arg1 ;
  LONG arg2 ;
  Bool arg3 ;
  LONG *arg4 = (LONG *) 0 ;
  LONG *arg5 = (LONG *) 0 ;
  LONG *arg6 = (LONG *) 0 ;
  LONG *arg7 = (LONG *) 0 ;
  Bool result;
  
  arg1 = (LONG)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (LONG *)jarg4; 
  arg5 = (LONG *)jarg5; 
  arg6 = (LONG *)jarg6; 
  arg7 = (LONG *)jarg7; 
  result = GeGetScreenDimensions(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GeGetTimer() {
  int jresult ;
  LONG result;
  
  result = GeGetTimer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_GeGetMilliSeconds() {
  double jresult ;
  LReal result;
  
  result = GeGetMilliSeconds();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * /* String_ctype */ SWIGSTDCALL CSharp_GeGetLineEnd() {
  char * /* String_ctype */ jresult ;
  String result;
  
  result = GeGetLineEnd();
  /* <String_out> */ 
  jresult = SWIG_csharp_string_callback((&result)->GetCStringCopy()); 
  /* </String_out> */
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GeGetDefaultFPS() {
  int jresult ;
  LONG result;
  
  result = GeGetDefaultFPS();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GeOutString(char * /* constString&_ctype */ jarg1, int jarg2) {
  int jresult ;
  String *arg1 = 0 ;
  GEMB arg2 ;
  GEMB_R result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (GEMB)jarg2; 
  result = (GEMB_R)GeOutString((String const &)*arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GeGetCurrentOS() {
  int jresult ;
  OPERATINGSYSTEM result;
  
  result = (OPERATINGSYSTEM)GeGetCurrentOS();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GeGetByteOrder() {
  int jresult ;
  BYTEORDER result;
  
  result = (BYTEORDER)GeGetByteOrder();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeGetGray(void * jarg1, void * jarg2, void * jarg3) {
  LONG *arg1 = (LONG *) 0 ;
  LONG *arg2 = (LONG *) 0 ;
  LONG *arg3 = (LONG *) 0 ;
  
  arg1 = (LONG *)jarg1; 
  arg2 = (LONG *)jarg2; 
  arg3 = (LONG *)jarg3; 
  GeGetGray(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GeChooseColor(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Vector *arg1 = (Vector *) 0 ;
  LONG arg2 ;
  Bool result;
  
  arg1 = (Vector *)jarg1; /* Vector*&_in */
  arg2 = (LONG)jarg2; 
  result = GeChooseColor(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GeOpenHTML(char * /* constString&_ctype */ jarg1) {
  unsigned int jresult ;
  String *arg1 = 0 ;
  Bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = GeOpenHTML((String const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GeChooseFont(void * jarg1) {
  unsigned int jresult ;
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  Bool result;
  
  arg1 = (BaseContainer *)jarg1; 
  result = GeChooseFont(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GeRegisterPlugin(int jarg1, int jarg2, char * /* constString&_ctype */ jarg3, void * jarg4, int jarg5) {
  unsigned int jresult ;
  PLUGINTYPE arg1 ;
  LONG arg2 ;
  String *arg3 = 0 ;
  void *arg4 = (void *) 0 ;
  LONG arg5 ;
  Bool result;
  
  arg1 = (PLUGINTYPE)jarg1; 
  arg2 = (LONG)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (void *)jarg4; 
  arg5 = (LONG)jarg5; 
  result = GeRegisterPlugin(arg1,arg2,(String const &)*arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GePrint(char * /* constString&_ctype */ jarg1) {
  String *arg1 = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  String arg1_str(jarg1);
  arg1 = &arg1_str; 
  GePrint((String const &)*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeConsoleOut(char * /* constString&_ctype */ jarg1) {
  String *arg1 = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  String arg1_str(jarg1);
  arg1 = &arg1_str; 
  GeConsoleOut((String const &)*arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GeGetMovieInfo(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  Filename *arg1 = 0 ;
  LONG *arg2 = (LONG *) 0 ;
  Real *arg3 = (Real *) 0 ;
  Bool result;
  
  arg1 = (Filename *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Filename const & type is null", 0);
    return 0;
  } 
  arg2 = (LONG *)jarg2; 
  arg3 = (Real *)jarg3; 
  result = GeGetMovieInfo((Filename const &)*arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RenameDialog(void * jarg1) {
  unsigned int jresult ;
  String *arg1 = (String *) 0 ;
  Bool result;
  
  arg1 = (String *)jarg1; 
  result = RenameDialog(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetC4DVersion() {
  int jresult ;
  LONG result;
  
  result = GetC4DVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * /* String_ctype */ SWIGSTDCALL CSharp_GeGetDegreeChar() {
  char * /* String_ctype */ jresult ;
  String result;
  
  result = GeGetDegreeChar();
  /* <String_out> */ 
  jresult = SWIG_csharp_string_callback((&result)->GetCStringCopy()); 
  /* </String_out> */
  return jresult;
}


SWIGEXPORT char * /* String_ctype */ SWIGSTDCALL CSharp_GeGetPercentChar() {
  char * /* String_ctype */ jresult ;
  String result;
  
  result = GeGetPercentChar();
  /* <String_out> */ 
  jresult = SWIG_csharp_string_callback((&result)->GetCStringCopy()); 
  /* </String_out> */
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_lSwap__SWIG_0(void * jarg1, void * jarg2) {
  void *arg1 = (void *) 0 ;
  VLONG arg2 ;
  VLONG *argp2 ;
  
  arg1 = (void *)jarg1; 
  argp2 = (VLONG *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null VLONG", 0);
    return ;
  }
  arg2 = *argp2; 
  lSwap(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_lSwap__SWIG_1(void * jarg1) {
  void *arg1 = (void *) 0 ;
  
  arg1 = (void *)jarg1; 
  lSwap(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_wSwap__SWIG_0(void * jarg1, void * jarg2) {
  void *arg1 = (void *) 0 ;
  VLONG arg2 ;
  VLONG *argp2 ;
  
  arg1 = (void *)jarg1; 
  argp2 = (VLONG *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null VLONG", 0);
    return ;
  }
  arg2 = *argp2; 
  wSwap(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_wSwap__SWIG_1(void * jarg1) {
  void *arg1 = (void *) 0 ;
  
  arg1 = (void *)jarg1; 
  wSwap(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_lIntel__SWIG_0(void * jarg1, void * jarg2) {
  void *arg1 = (void *) 0 ;
  VLONG arg2 ;
  VLONG *argp2 ;
  
  arg1 = (void *)jarg1; 
  argp2 = (VLONG *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null VLONG", 0);
    return ;
  }
  arg2 = *argp2; 
  lIntel(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_lIntel__SWIG_1(void * jarg1) {
  void *arg1 = (void *) 0 ;
  
  arg1 = (void *)jarg1; 
  lIntel(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_wIntel__SWIG_0(void * jarg1, void * jarg2) {
  void *arg1 = (void *) 0 ;
  VLONG arg2 ;
  VLONG *argp2 ;
  
  arg1 = (void *)jarg1; 
  argp2 = (VLONG *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null VLONG", 0);
    return ;
  }
  arg2 = *argp2; 
  wIntel(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_wIntel__SWIG_1(void * jarg1) {
  void *arg1 = (void *) 0 ;
  
  arg1 = (void *)jarg1; 
  wIntel(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_lMotor__SWIG_0(void * jarg1, void * jarg2) {
  void *arg1 = (void *) 0 ;
  VLONG arg2 ;
  VLONG *argp2 ;
  
  arg1 = (void *)jarg1; 
  argp2 = (VLONG *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null VLONG", 0);
    return ;
  }
  arg2 = *argp2; 
  lMotor(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_lMotor__SWIG_1(void * jarg1) {
  void *arg1 = (void *) 0 ;
  
  arg1 = (void *)jarg1; 
  lMotor(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_wMotor__SWIG_0(void * jarg1, void * jarg2) {
  void *arg1 = (void *) 0 ;
  VLONG arg2 ;
  VLONG *argp2 ;
  
  arg1 = (void *)jarg1; 
  argp2 = (VLONG *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null VLONG", 0);
    return ;
  }
  arg2 = *argp2; 
  wMotor(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_wMotor__SWIG_1(void * jarg1) {
  void *arg1 = (void *) 0 ;
  
  arg1 = (void *)jarg1; 
  wMotor(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_llSwap__SWIG_0(void * jarg1, void * jarg2) {
  void *arg1 = (void *) 0 ;
  VLONG arg2 ;
  VLONG *argp2 ;
  
  arg1 = (void *)jarg1; 
  argp2 = (VLONG *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null VLONG", 0);
    return ;
  }
  arg2 = *argp2; 
  llSwap(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_llSwap__SWIG_1(void * jarg1) {
  void *arg1 = (void *) 0 ;
  
  arg1 = (void *)jarg1; 
  llSwap(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_llIntel__SWIG_0(void * jarg1, void * jarg2) {
  void *arg1 = (void *) 0 ;
  VLONG arg2 ;
  VLONG *argp2 ;
  
  arg1 = (void *)jarg1; 
  argp2 = (VLONG *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null VLONG", 0);
    return ;
  }
  arg2 = *argp2; 
  llIntel(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_llIntel__SWIG_1(void * jarg1) {
  void *arg1 = (void *) 0 ;
  
  arg1 = (void *)jarg1; 
  llIntel(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_llMotor__SWIG_0(void * jarg1, void * jarg2) {
  void *arg1 = (void *) 0 ;
  VLONG arg2 ;
  VLONG *argp2 ;
  
  arg1 = (void *)jarg1; 
  argp2 = (VLONG *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null VLONG", 0);
    return ;
  }
  arg2 = *argp2; 
  llMotor(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_llMotor__SWIG_1(void * jarg1) {
  void *arg1 = (void *) 0 ;
  
  arg1 = (void *)jarg1; 
  llMotor(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_vlSwap__SWIG_0(void * jarg1, int jarg2) {
  void *arg1 = (void *) 0 ;
  LONG arg2 ;
  
  arg1 = (void *)jarg1; 
  arg2 = (LONG)jarg2; 
  vlSwap(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_vlSwap__SWIG_1(void * jarg1) {
  void *arg1 = (void *) 0 ;
  
  arg1 = (void *)jarg1; 
  vlSwap(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_vlIntel__SWIG_0(void * jarg1, int jarg2) {
  void *arg1 = (void *) 0 ;
  LONG arg2 ;
  
  arg1 = (void *)jarg1; 
  arg2 = (LONG)jarg2; 
  vlIntel(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_vlIntel__SWIG_1(void * jarg1) {
  void *arg1 = (void *) 0 ;
  
  arg1 = (void *)jarg1; 
  vlIntel(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_vlMotor__SWIG_0(void * jarg1, int jarg2) {
  void *arg1 = (void *) 0 ;
  LONG arg2 ;
  
  arg1 = (void *)jarg1; 
  arg2 = (LONG)jarg2; 
  vlMotor(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_vlMotor__SWIG_1(void * jarg1) {
  void *arg1 = (void *) 0 ;
  
  arg1 = (void *)jarg1; 
  vlMotor(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeAddBackgroundHandler(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  BackgroundHandler *arg1 = (BackgroundHandler *) 0 ;
  void *arg2 = (void *) 0 ;
  LONG arg3 ;
  LONG arg4 ;
  
  arg1 = (BackgroundHandler *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  GeAddBackgroundHandler(arg1,arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GeRemoveBackgroundHandler(void * jarg1, int jarg2) {
  unsigned int jresult ;
  void *arg1 = (void *) 0 ;
  LONG arg2 ;
  Bool result;
  
  arg1 = (void *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = GeRemoveBackgroundHandler(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeStopBackgroundThreads(int jarg1, int jarg2) {
  LONG arg1 ;
  BACKGROUNDHANDLERFLAGS arg2 ;
  
  arg1 = (LONG)jarg1; 
  arg2 = (BACKGROUNDHANDLERFLAGS)jarg2; 
  GeStopBackgroundThreads(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GeCheckBackgroundThreadsRunning(int jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  LONG arg1 ;
  Bool arg2 ;
  Bool result;
  
  arg1 = (LONG)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = GeCheckBackgroundThreadsRunning(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeProcessBackgroundThreads(int jarg1) {
  LONG arg1 ;
  
  arg1 = (LONG)jarg1; 
  GeProcessBackgroundThreads(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetMousePointer(int jarg1) {
  LONG arg1 ;
  
  arg1 = (LONG)jarg1; 
  SetMousePointer(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ShowBitmap__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  Filename *arg1 = 0 ;
  Bool result;
  
  arg1 = (Filename *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Filename const & type is null", 0);
    return 0;
  } 
  result = ShowBitmap((Filename const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ShowBitmap__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  BaseBitmap *arg1 = (BaseBitmap *) 0 ;
  Bool result;
  
  arg1 = (BaseBitmap *)jarg1; 
  result = ShowBitmap(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StopAllThreads() {
  StopAllThreads();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ShutdownThreads(unsigned int jarg1) {
  unsigned int jresult ;
  Bool arg1 ;
  Bool result;
  
  arg1 = jarg1 ? true : false; 
  result = ShutdownThreads(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatusClear() {
  StatusClear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatusSetSpin() {
  StatusSetSpin();
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatusSetBar(int jarg1) {
  LONG arg1 ;
  
  arg1 = (LONG)jarg1; 
  StatusSetBar(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatusSetText(char * /* constString&_ctype */ jarg1) {
  String *arg1 = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  String arg1_str(jarg1);
  arg1 = &arg1_str; 
  StatusSetText((String const &)*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpecialEventAdd__SWIG_0(int jarg1, void * jarg2, void * jarg3) {
  LONG arg1 ;
  VULONG arg2 ;
  VULONG arg3 ;
  VULONG *argp2 ;
  VULONG *argp3 ;
  
  arg1 = (LONG)jarg1; 
  argp2 = (VULONG *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null VULONG", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (VULONG *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null VULONG", 0);
    return ;
  }
  arg3 = *argp3; 
  SpecialEventAdd(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpecialEventAdd__SWIG_1(int jarg1, void * jarg2) {
  LONG arg1 ;
  VULONG arg2 ;
  VULONG *argp2 ;
  
  arg1 = (LONG)jarg1; 
  argp2 = (VULONG *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null VULONG", 0);
    return ;
  }
  arg2 = *argp2; 
  SpecialEventAdd(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpecialEventAdd__SWIG_2(int jarg1) {
  LONG arg1 ;
  
  arg1 = (LONG)jarg1; 
  SpecialEventAdd(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EventAdd__SWIG_0(int jarg1) {
  EVENT arg1 ;
  
  arg1 = (EVENT)jarg1; 
  EventAdd(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EventAdd__SWIG_1() {
  EventAdd();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GeSyncMessage__SWIG_0(int jarg1, int jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  LONG arg1 ;
  LONG arg2 ;
  VULONG arg3 ;
  VULONG arg4 ;
  VULONG *argp3 ;
  VULONG *argp4 ;
  Bool result;
  
  arg1 = (LONG)jarg1; 
  arg2 = (LONG)jarg2; 
  argp3 = (VULONG *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null VULONG", 0);
    return 0;
  }
  arg3 = *argp3; 
  argp4 = (VULONG *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null VULONG", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = GeSyncMessage(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GeSyncMessage__SWIG_1(int jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  LONG arg1 ;
  LONG arg2 ;
  VULONG arg3 ;
  VULONG *argp3 ;
  Bool result;
  
  arg1 = (LONG)jarg1; 
  arg2 = (LONG)jarg2; 
  argp3 = (VULONG *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null VULONG", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = GeSyncMessage(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GeSyncMessage__SWIG_2(int jarg1, int jarg2) {
  unsigned int jresult ;
  LONG arg1 ;
  LONG arg2 ;
  Bool result;
  
  arg1 = (LONG)jarg1; 
  arg2 = (LONG)jarg2; 
  result = GeSyncMessage(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GeSyncMessage__SWIG_3(int jarg1) {
  unsigned int jresult ;
  LONG arg1 ;
  Bool result;
  
  arg1 = (LONG)jarg1; 
  result = GeSyncMessage(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DrawViews__SWIG_0(int jarg1, void * jarg2) {
  unsigned int jresult ;
  DRAWFLAGS arg1 ;
  BaseDraw *arg2 = (BaseDraw *) 0 ;
  Bool result;
  
  arg1 = (DRAWFLAGS)jarg1; 
  arg2 = (BaseDraw *)jarg2; 
  result = DrawViews(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DrawViews__SWIG_1(int jarg1) {
  unsigned int jresult ;
  DRAWFLAGS arg1 ;
  Bool result;
  
  arg1 = (DRAWFLAGS)jarg1; 
  result = DrawViews(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SendModelingCommand(int jarg1, void * jarg2) {
  unsigned int jresult ;
  LONG arg1 ;
  ModelingCommandData *arg2 = 0 ;
  Bool result;
  
  arg1 = (LONG)jarg1; 
  arg2 = (ModelingCommandData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ModelingCommandData & type is null", 0);
    return 0;
  } 
  result = SendModelingCommand(arg1,*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetGlobalTexturePath(int jarg1) {
  void * jresult ;
  LONG arg1 ;
  Filename result;
  
  arg1 = (LONG)jarg1; 
  result = GetGlobalTexturePath(arg1);
  jresult = new Filename((const Filename &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetGlobalTexturePath(int jarg1, void * jarg2) {
  LONG arg1 ;
  Filename *arg2 = 0 ;
  
  arg1 = (LONG)jarg1; 
  arg2 = (Filename *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Filename const & type is null", 0);
    return ;
  } 
  SetGlobalTexturePath(arg1,(Filename const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GenerateTexturePath(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  Filename *arg1 = 0 ;
  Filename *arg2 = 0 ;
  Filename *arg3 = 0 ;
  Filename *arg4 = (Filename *) 0 ;
  Bool result;
  
  arg1 = (Filename *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Filename const & type is null", 0);
    return 0;
  } 
  arg2 = (Filename *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Filename const & type is null", 0);
    return 0;
  } 
  arg3 = (Filename *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Filename const & type is null", 0);
    return 0;
  } 
  arg4 = (Filename *)jarg4; 
  result = GenerateTexturePath((Filename const &)*arg1,(Filename const &)*arg2,(Filename const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsInSearchPath(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Filename *arg1 = 0 ;
  Filename *arg2 = 0 ;
  Bool result;
  
  arg1 = (Filename *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Filename const & type is null", 0);
    return 0;
  } 
  arg2 = (Filename *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Filename const & type is null", 0);
    return 0;
  } 
  result = IsInSearchPath((Filename const &)*arg1,(Filename const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FlushTexture(void * jarg1, char * /* constString&_ctype */ jarg2, void * jarg3) {
  Filename *arg1 = 0 ;
  String *arg2 = 0 ;
  Filename *arg3 = 0 ;
  
  arg1 = (Filename *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Filename const & type is null", 0);
    return ;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  String arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (Filename *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Filename const & type is null", 0);
    return ;
  } 
  FlushTexture((Filename const &)*arg1,(String const &)*arg2,(Filename const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FlushUnusedTextures() {
  FlushUnusedTextures();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetWorldContainer() {
  void * jresult ;
  BaseContainer result;
  
  result = GetWorldContainer();
  jresult = new BaseContainer((const BaseContainer &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetWorldContainerInstance() {
  void * jresult ;
  BaseContainer *result = 0 ;
  
  result = (BaseContainer *)GetWorldContainerInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetWorldContainer(void * jarg1) {
  BaseContainer *arg1 = 0 ;
  
  arg1 = (BaseContainer *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer const & type is null", 0);
    return ;
  } 
  SetWorldContainer((BaseContainer const &)*arg1);
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_GetViewColor(int jarg1) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  LONG arg1 ;
  Vector result;
  
  arg1 = (LONG)jarg1; 
  result = GetViewColor(arg1);
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetViewColor(int jarg1, void * jarg2) {
  LONG arg1 ;
  Vector *arg2 = 0 ;
  
  arg1 = (LONG)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  SetViewColor(arg1,(Vector const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ErrorStringDialog(int jarg1, double jarg2, double jarg3, int jarg4) {
  CHECKVALUERANGE arg1 ;
  Real arg2 ;
  Real arg3 ;
  CHECKVALUEFORMAT arg4 ;
  
  arg1 = (CHECKVALUERANGE)jarg1; 
  arg2 = (Real)jarg2; 
  arg3 = (Real)jarg3; 
  arg4 = (CHECKVALUEFORMAT)jarg4; 
  ErrorStringDialog(arg1,arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ReadPluginInfo(int jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  LONG arg1 ;
  void *arg2 = (void *) 0 ;
  LONG arg3 ;
  Bool result;
  
  arg1 = (LONG)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (LONG)jarg3; 
  result = ReadPluginInfo(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WritePluginInfo(int jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  LONG arg1 ;
  void *arg2 = (void *) 0 ;
  LONG arg3 ;
  Bool result;
  
  arg1 = (LONG)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (LONG)jarg3; 
  result = WritePluginInfo(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ReadRegInfo(int jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  LONG arg1 ;
  void *arg2 = (void *) 0 ;
  LONG arg3 ;
  Bool result;
  
  arg1 = (LONG)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (LONG)jarg3; 
  result = ReadRegInfo(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WriteRegInfo(int jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  LONG arg1 ;
  void *arg2 = (void *) 0 ;
  LONG arg3 ;
  Bool result;
  
  arg1 = (LONG)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (LONG)jarg3; 
  result = WriteRegInfo(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetWorldPluginData(int jarg1) {
  void * jresult ;
  LONG arg1 ;
  BaseContainer *result = 0 ;
  
  arg1 = (LONG)jarg1; 
  result = (BaseContainer *)GetWorldPluginData(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SetWorldPluginData__SWIG_0(int jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  LONG arg1 ;
  BaseContainer *arg2 = 0 ;
  Bool arg3 ;
  Bool result;
  
  arg1 = (LONG)jarg1; 
  arg2 = (BaseContainer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = SetWorldPluginData(arg1,(BaseContainer const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SetWorldPluginData__SWIG_1(int jarg1, void * jarg2) {
  unsigned int jresult ;
  LONG arg1 ;
  BaseContainer *arg2 = 0 ;
  Bool result;
  
  arg1 = (LONG)jarg1; 
  arg2 = (BaseContainer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer const & type is null", 0);
    return 0;
  } 
  result = SetWorldPluginData(arg1,(BaseContainer const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetToolPluginData(void * jarg1, int jarg2) {
  void * jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  LONG arg2 ;
  BaseContainer *result = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (BaseContainer *)GetToolPluginData(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GeIsActiveToolEnabled() {
  unsigned int jresult ;
  Bool result;
  
  result = GeIsActiveToolEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GeGetLanguage(int jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  LONG arg1 ;
  String *arg2 = (String *) 0 ;
  String *arg3 = (String *) 0 ;
  Bool *arg4 = (Bool *) 0 ;
  Bool result;
  
  arg1 = (LONG)jarg1; 
  arg2 = (String *)jarg2; 
  arg3 = (String *)jarg3; 
  arg4 = (Bool *)jarg4; 
  result = GeGetLanguage(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GeIdentifyFile(void * jarg1, void * jarg2, int jarg3, int jarg4, void * jarg5) {
  int jresult ;
  Filename *arg1 = 0 ;
  UCHAR *arg2 = (UCHAR *) 0 ;
  LONG arg3 ;
  IDENTIFYFILE arg4 ;
  BasePlugin **arg5 = (BasePlugin **) 0 ;
  IDENTIFYFILE result;
  
  arg1 = (Filename *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Filename const & type is null", 0);
    return 0;
  } 
  arg2 = (UCHAR *)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (IDENTIFYFILE)jarg4; 
  arg5 = (BasePlugin **)jarg5; 
  result = (IDENTIFYFILE)GeIdentifyFile((Filename const &)*arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetScriptHead(int jarg1) {
  void * jresult ;
  LONG arg1 ;
  GeListHead *result = 0 ;
  
  arg1 = (LONG)jarg1; 
  result = (GeListHead *)GetScriptHead(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetDynamicScriptID(void * jarg1) {
  int jresult ;
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  LONG result;
  
  arg1 = (BaseList2D *)jarg1; 
  result = GetDynamicScriptID(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GetCommandLineArgs(void * jarg1) {
  unsigned int jresult ;
  C4DPL_CommandLineArgs *arg1 = 0 ;
  Bool result;
  
  arg1 = (C4DPL_CommandLineArgs *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "C4DPL_CommandLineArgs & type is null", 0);
    return 0;
  } 
  result = GetCommandLineArgs(*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * /* String_ctype */ SWIGSTDCALL CSharp_GetObjectName(int jarg1) {
  char * /* String_ctype */ jresult ;
  LONG arg1 ;
  String result;
  
  arg1 = (LONG)jarg1; 
  result = GetObjectName(arg1);
  /* <String_out> */ 
  jresult = SWIG_csharp_string_callback((&result)->GetCStringCopy()); 
  /* </String_out> */
  return jresult;
}


SWIGEXPORT char * /* String_ctype */ SWIGSTDCALL CSharp_GetTagName(int jarg1) {
  char * /* String_ctype */ jresult ;
  LONG arg1 ;
  String result;
  
  arg1 = (LONG)jarg1; 
  result = GetTagName(arg1);
  /* <String_out> */ 
  jresult = SWIG_csharp_string_callback((&result)->GetCStringCopy()); 
  /* </String_out> */
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetObjectType(char * /* constString&_ctype */ jarg1) {
  int jresult ;
  String *arg1 = 0 ;
  LONG result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = GetObjectType((String const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetTagType(char * /* constString&_ctype */ jarg1) {
  int jresult ;
  String *arg1 = 0 ;
  LONG result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = GetTagType((String const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Registry_GetNext(void * jarg1) {
  void * jresult ;
  Registry *arg1 = (Registry *) 0 ;
  Registry *result = 0 ;
  
  arg1 = (Registry *)jarg1; 
  result = (Registry *)(arg1)->GetNext();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Registry_GetPred(void * jarg1) {
  void * jresult ;
  Registry *arg1 = (Registry *) 0 ;
  Registry *result = 0 ;
  
  arg1 = (Registry *)jarg1; 
  result = (Registry *)(arg1)->GetPred();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Registry_GetMainID(void * jarg1) {
  int jresult ;
  Registry *arg1 = (Registry *) 0 ;
  REGISTRYTYPE result;
  
  arg1 = (Registry *)jarg1; 
  result = (REGISTRYTYPE)(arg1)->GetMainID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Registry_GetSubID(void * jarg1) {
  int jresult ;
  Registry *arg1 = (Registry *) 0 ;
  LONG result;
  
  arg1 = (Registry *)jarg1; 
  result = (arg1)->GetSubID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Registry_GetData(void * jarg1) {
  void * jresult ;
  Registry *arg1 = (Registry *) 0 ;
  void *result = 0 ;
  
  arg1 = (Registry *)jarg1; 
  result = (void *)(arg1)->GetData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GeRegistryAdd(int jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  LONG arg1 ;
  REGISTRYTYPE arg2 ;
  void *arg3 = (void *) 0 ;
  Bool result;
  
  arg1 = (LONG)jarg1; 
  arg2 = (REGISTRYTYPE)jarg2; 
  arg3 = (void *)jarg3; 
  result = GeRegistryAdd(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GeRegistryRemove(int jarg1, int jarg2) {
  unsigned int jresult ;
  LONG arg1 ;
  REGISTRYTYPE arg2 ;
  Bool result;
  
  arg1 = (LONG)jarg1; 
  arg2 = (REGISTRYTYPE)jarg2; 
  result = GeRegistryRemove(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GeRegistryFind(int jarg1, int jarg2) {
  void * jresult ;
  LONG arg1 ;
  REGISTRYTYPE arg2 ;
  Registry *result = 0 ;
  
  arg1 = (LONG)jarg1; 
  arg2 = (REGISTRYTYPE)jarg2; 
  result = (Registry *)GeRegistryFind(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GeRegistryGetLast(int jarg1) {
  void * jresult ;
  REGISTRYTYPE arg1 ;
  Registry *result = 0 ;
  
  arg1 = (REGISTRYTYPE)jarg1; 
  result = (Registry *)GeRegistryGetLast(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GeRegistryGetFirst(int jarg1) {
  void * jresult ;
  REGISTRYTYPE arg1 ;
  Registry *result = 0 ;
  
  arg1 = (REGISTRYTYPE)jarg1; 
  result = (Registry *)GeRegistryGetFirst(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GeRegistryGetAutoID(void * jarg1) {
  unsigned int jresult ;
  LONG *arg1 = (LONG *) 0 ;
  Bool result;
  
  arg1 = (LONG *)jarg1; 
  result = GeRegistryGetAutoID(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GePluginMessage(int jarg1, void * jarg2) {
  unsigned int jresult ;
  LONG arg1 ;
  void *arg2 = (void *) 0 ;
  Bool result;
  
  arg1 = (LONG)jarg1; 
  arg2 = (void *)jarg2; 
  result = GePluginMessage(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CheckIsRunning(int jarg1) {
  unsigned int jresult ;
  CHECKISRUNNING arg1 ;
  Bool result;
  
  arg1 = (CHECKISRUNNING)jarg1; 
  result = CheckIsRunning(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * /* String_ctype */ SWIGSTDCALL CSharp_GeGetDefaultFilename(int jarg1) {
  char * /* String_ctype */ jresult ;
  LONG arg1 ;
  String result;
  
  arg1 = (LONG)jarg1; 
  result = GeGetDefaultFilename(arg1);
  /* <String_out> */ 
  jresult = SWIG_csharp_string_callback((&result)->GetCStringCopy()); 
  /* </String_out> */
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FindInManager(void * jarg1) {
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  
  arg1 = (BaseList2D *)jarg1; 
  FindInManager(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeSleep(int jarg1) {
  LONG arg1 ;
  
  arg1 = (LONG)jarg1; 
  GeSleep(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GeIsMainThread() {
  unsigned int jresult ;
  Bool result;
  
  result = GeIsMainThread();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GeDebugSetFloatingPointChecks(int jarg1) {
  int jresult ;
  LONG arg1 ;
  LONG result;
  
  arg1 = (LONG)jarg1; 
  result = GeDebugSetFloatingPointChecks(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GeDebugDisableFPExceptions() {
  void * jresult ;
  GeDebugDisableFPExceptions *result = 0 ;
  
  result = (GeDebugDisableFPExceptions *)new GeDebugDisableFPExceptions();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GeDebugDisableFPExceptions(void * jarg1) {
  GeDebugDisableFPExceptions *arg1 = (GeDebugDisableFPExceptions *) 0 ;
  
  arg1 = (GeDebugDisableFPExceptions *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp__GeDebugBreak(int jarg1, void * jarg2) {
  LONG arg1 ;
  CHAR *arg2 = (CHAR *) 0 ;
  
  arg1 = (LONG)jarg1; 
  arg2 = (CHAR *)jarg2; 
  _GeDebugBreak(arg1,(CHAR const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeDebugOut__SWIG_0(void * jarg1) {
  CHAR *arg1 = (CHAR *) 0 ;
  void *arg2 = 0 ;
  
  arg1 = (CHAR *)jarg1; 
  GeDebugOut((CHAR const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeDebugOut__SWIG_1(char * /* constString&_ctype */ jarg1) {
  String *arg1 = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  String arg1_str(jarg1);
  arg1 = &arg1_str; 
  GeDebugOut((String const &)*arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_sprintf_safe(char * jarg1, int jarg2, char * jarg3) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = 0 ;
  int result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  result = (int)sprintf_safe(arg1,arg2,(char const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vsprintf_safe(char * jarg1, int jarg2, char * jarg3, void * jarg4) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  va_list arg4 ;
  va_list *argp4 ;
  int result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  argp4 = (va_list *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (int)vsprintf_safe(arg1,arg2,(char const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LassoSelection_Start__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6, int jarg7, int jarg8, int jarg9, int jarg10) {
  unsigned int jresult ;
  LassoSelection *arg1 = (LassoSelection *) 0 ;
  GeDialog *arg2 = 0 ;
  LONG arg3 ;
  LONG arg4 ;
  LONG arg5 ;
  LONG arg6 ;
  LONG arg7 ;
  LONG arg8 ;
  LONG arg9 ;
  LONG arg10 ;
  Bool result;
  
  arg1 = (LassoSelection *)jarg1; 
  arg2 = (GeDialog *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeDialog & type is null", 0);
    return 0;
  } 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (LONG)jarg6; 
  arg7 = (LONG)jarg7; 
  arg8 = (LONG)jarg8; 
  arg9 = (LONG)jarg9; 
  arg10 = (LONG)jarg10; 
  result = (arg1)->Start(*arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LassoSelection_Start__SWIG_1(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6, int jarg7, int jarg8, int jarg9) {
  unsigned int jresult ;
  LassoSelection *arg1 = (LassoSelection *) 0 ;
  GeDialog *arg2 = 0 ;
  LONG arg3 ;
  LONG arg4 ;
  LONG arg5 ;
  LONG arg6 ;
  LONG arg7 ;
  LONG arg8 ;
  LONG arg9 ;
  Bool result;
  
  arg1 = (LassoSelection *)jarg1; 
  arg2 = (GeDialog *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeDialog & type is null", 0);
    return 0;
  } 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (LONG)jarg6; 
  arg7 = (LONG)jarg7; 
  arg8 = (LONG)jarg8; 
  arg9 = (LONG)jarg9; 
  result = (arg1)->Start(*arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LassoSelection_Start__SWIG_2(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6, int jarg7, int jarg8) {
  unsigned int jresult ;
  LassoSelection *arg1 = (LassoSelection *) 0 ;
  GeDialog *arg2 = 0 ;
  LONG arg3 ;
  LONG arg4 ;
  LONG arg5 ;
  LONG arg6 ;
  LONG arg7 ;
  LONG arg8 ;
  Bool result;
  
  arg1 = (LassoSelection *)jarg1; 
  arg2 = (GeDialog *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeDialog & type is null", 0);
    return 0;
  } 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (LONG)jarg6; 
  arg7 = (LONG)jarg7; 
  arg8 = (LONG)jarg8; 
  result = (arg1)->Start(*arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LassoSelection_Start__SWIG_3(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6, int jarg7) {
  unsigned int jresult ;
  LassoSelection *arg1 = (LassoSelection *) 0 ;
  GeDialog *arg2 = 0 ;
  LONG arg3 ;
  LONG arg4 ;
  LONG arg5 ;
  LONG arg6 ;
  LONG arg7 ;
  Bool result;
  
  arg1 = (LassoSelection *)jarg1; 
  arg2 = (GeDialog *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeDialog & type is null", 0);
    return 0;
  } 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (LONG)jarg6; 
  arg7 = (LONG)jarg7; 
  result = (arg1)->Start(*arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LassoSelection_Start__SWIG_4(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6) {
  unsigned int jresult ;
  LassoSelection *arg1 = (LassoSelection *) 0 ;
  GeDialog *arg2 = 0 ;
  LONG arg3 ;
  LONG arg4 ;
  LONG arg5 ;
  LONG arg6 ;
  Bool result;
  
  arg1 = (LassoSelection *)jarg1; 
  arg2 = (GeDialog *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeDialog & type is null", 0);
    return 0;
  } 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (LONG)jarg6; 
  result = (arg1)->Start(*arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LassoSelection_Start__SWIG_5(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5) {
  unsigned int jresult ;
  LassoSelection *arg1 = (LassoSelection *) 0 ;
  GeDialog *arg2 = 0 ;
  LONG arg3 ;
  LONG arg4 ;
  LONG arg5 ;
  Bool result;
  
  arg1 = (LassoSelection *)jarg1; 
  arg2 = (GeDialog *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeDialog & type is null", 0);
    return 0;
  } 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (LONG)jarg5; 
  result = (arg1)->Start(*arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LassoSelection_Start__SWIG_6(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  unsigned int jresult ;
  LassoSelection *arg1 = (LassoSelection *) 0 ;
  GeDialog *arg2 = 0 ;
  LONG arg3 ;
  LONG arg4 ;
  Bool result;
  
  arg1 = (LassoSelection *)jarg1; 
  arg2 = (GeDialog *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeDialog & type is null", 0);
    return 0;
  } 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  result = (arg1)->Start(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LassoSelection_Start__SWIG_7(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  LassoSelection *arg1 = (LassoSelection *) 0 ;
  GeDialog *arg2 = 0 ;
  LONG arg3 ;
  Bool result;
  
  arg1 = (LassoSelection *)jarg1; 
  arg2 = (GeDialog *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeDialog & type is null", 0);
    return 0;
  } 
  arg3 = (LONG)jarg3; 
  result = (arg1)->Start(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LassoSelection_Start__SWIG_8(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6, int jarg7, int jarg8, int jarg9, int jarg10) {
  unsigned int jresult ;
  LassoSelection *arg1 = (LassoSelection *) 0 ;
  GeUserArea *arg2 = 0 ;
  LONG arg3 ;
  LONG arg4 ;
  LONG arg5 ;
  LONG arg6 ;
  LONG arg7 ;
  LONG arg8 ;
  LONG arg9 ;
  LONG arg10 ;
  Bool result;
  
  arg1 = (LassoSelection *)jarg1; 
  arg2 = (GeUserArea *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeUserArea & type is null", 0);
    return 0;
  } 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (LONG)jarg6; 
  arg7 = (LONG)jarg7; 
  arg8 = (LONG)jarg8; 
  arg9 = (LONG)jarg9; 
  arg10 = (LONG)jarg10; 
  result = (arg1)->Start(*arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LassoSelection_Start__SWIG_9(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6, int jarg7, int jarg8, int jarg9) {
  unsigned int jresult ;
  LassoSelection *arg1 = (LassoSelection *) 0 ;
  GeUserArea *arg2 = 0 ;
  LONG arg3 ;
  LONG arg4 ;
  LONG arg5 ;
  LONG arg6 ;
  LONG arg7 ;
  LONG arg8 ;
  LONG arg9 ;
  Bool result;
  
  arg1 = (LassoSelection *)jarg1; 
  arg2 = (GeUserArea *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeUserArea & type is null", 0);
    return 0;
  } 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (LONG)jarg6; 
  arg7 = (LONG)jarg7; 
  arg8 = (LONG)jarg8; 
  arg9 = (LONG)jarg9; 
  result = (arg1)->Start(*arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LassoSelection_Start__SWIG_10(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6, int jarg7, int jarg8) {
  unsigned int jresult ;
  LassoSelection *arg1 = (LassoSelection *) 0 ;
  GeUserArea *arg2 = 0 ;
  LONG arg3 ;
  LONG arg4 ;
  LONG arg5 ;
  LONG arg6 ;
  LONG arg7 ;
  LONG arg8 ;
  Bool result;
  
  arg1 = (LassoSelection *)jarg1; 
  arg2 = (GeUserArea *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeUserArea & type is null", 0);
    return 0;
  } 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (LONG)jarg6; 
  arg7 = (LONG)jarg7; 
  arg8 = (LONG)jarg8; 
  result = (arg1)->Start(*arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LassoSelection_Start__SWIG_11(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6, int jarg7) {
  unsigned int jresult ;
  LassoSelection *arg1 = (LassoSelection *) 0 ;
  GeUserArea *arg2 = 0 ;
  LONG arg3 ;
  LONG arg4 ;
  LONG arg5 ;
  LONG arg6 ;
  LONG arg7 ;
  Bool result;
  
  arg1 = (LassoSelection *)jarg1; 
  arg2 = (GeUserArea *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeUserArea & type is null", 0);
    return 0;
  } 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (LONG)jarg6; 
  arg7 = (LONG)jarg7; 
  result = (arg1)->Start(*arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LassoSelection_Start__SWIG_12(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6) {
  unsigned int jresult ;
  LassoSelection *arg1 = (LassoSelection *) 0 ;
  GeUserArea *arg2 = 0 ;
  LONG arg3 ;
  LONG arg4 ;
  LONG arg5 ;
  LONG arg6 ;
  Bool result;
  
  arg1 = (LassoSelection *)jarg1; 
  arg2 = (GeUserArea *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeUserArea & type is null", 0);
    return 0;
  } 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (LONG)jarg6; 
  result = (arg1)->Start(*arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LassoSelection_Start__SWIG_13(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5) {
  unsigned int jresult ;
  LassoSelection *arg1 = (LassoSelection *) 0 ;
  GeUserArea *arg2 = 0 ;
  LONG arg3 ;
  LONG arg4 ;
  LONG arg5 ;
  Bool result;
  
  arg1 = (LassoSelection *)jarg1; 
  arg2 = (GeUserArea *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeUserArea & type is null", 0);
    return 0;
  } 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (LONG)jarg5; 
  result = (arg1)->Start(*arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LassoSelection_Start__SWIG_14(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  unsigned int jresult ;
  LassoSelection *arg1 = (LassoSelection *) 0 ;
  GeUserArea *arg2 = 0 ;
  LONG arg3 ;
  LONG arg4 ;
  Bool result;
  
  arg1 = (LassoSelection *)jarg1; 
  arg2 = (GeUserArea *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeUserArea & type is null", 0);
    return 0;
  } 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  result = (arg1)->Start(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LassoSelection_Start__SWIG_15(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  LassoSelection *arg1 = (LassoSelection *) 0 ;
  GeUserArea *arg2 = 0 ;
  LONG arg3 ;
  Bool result;
  
  arg1 = (LassoSelection *)jarg1; 
  arg2 = (GeUserArea *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeUserArea & type is null", 0);
    return 0;
  } 
  arg3 = (LONG)jarg3; 
  result = (arg1)->Start(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LassoSelection_Start__SWIG_16(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6, int jarg7, int jarg8, int jarg9, int jarg10) {
  unsigned int jresult ;
  LassoSelection *arg1 = (LassoSelection *) 0 ;
  EditorWindow *arg2 = (EditorWindow *) 0 ;
  LONG arg3 ;
  LONG arg4 ;
  LONG arg5 ;
  LONG arg6 ;
  LONG arg7 ;
  LONG arg8 ;
  LONG arg9 ;
  LONG arg10 ;
  Bool result;
  
  arg1 = (LassoSelection *)jarg1; 
  arg2 = (EditorWindow *)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (LONG)jarg6; 
  arg7 = (LONG)jarg7; 
  arg8 = (LONG)jarg8; 
  arg9 = (LONG)jarg9; 
  arg10 = (LONG)jarg10; 
  result = (arg1)->Start(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LassoSelection_Start__SWIG_17(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6, int jarg7, int jarg8, int jarg9) {
  unsigned int jresult ;
  LassoSelection *arg1 = (LassoSelection *) 0 ;
  EditorWindow *arg2 = (EditorWindow *) 0 ;
  LONG arg3 ;
  LONG arg4 ;
  LONG arg5 ;
  LONG arg6 ;
  LONG arg7 ;
  LONG arg8 ;
  LONG arg9 ;
  Bool result;
  
  arg1 = (LassoSelection *)jarg1; 
  arg2 = (EditorWindow *)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (LONG)jarg6; 
  arg7 = (LONG)jarg7; 
  arg8 = (LONG)jarg8; 
  arg9 = (LONG)jarg9; 
  result = (arg1)->Start(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LassoSelection_Start__SWIG_18(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6, int jarg7, int jarg8) {
  unsigned int jresult ;
  LassoSelection *arg1 = (LassoSelection *) 0 ;
  EditorWindow *arg2 = (EditorWindow *) 0 ;
  LONG arg3 ;
  LONG arg4 ;
  LONG arg5 ;
  LONG arg6 ;
  LONG arg7 ;
  LONG arg8 ;
  Bool result;
  
  arg1 = (LassoSelection *)jarg1; 
  arg2 = (EditorWindow *)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (LONG)jarg6; 
  arg7 = (LONG)jarg7; 
  arg8 = (LONG)jarg8; 
  result = (arg1)->Start(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LassoSelection_Start__SWIG_19(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6, int jarg7) {
  unsigned int jresult ;
  LassoSelection *arg1 = (LassoSelection *) 0 ;
  EditorWindow *arg2 = (EditorWindow *) 0 ;
  LONG arg3 ;
  LONG arg4 ;
  LONG arg5 ;
  LONG arg6 ;
  LONG arg7 ;
  Bool result;
  
  arg1 = (LassoSelection *)jarg1; 
  arg2 = (EditorWindow *)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (LONG)jarg6; 
  arg7 = (LONG)jarg7; 
  result = (arg1)->Start(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LassoSelection_Start__SWIG_20(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6) {
  unsigned int jresult ;
  LassoSelection *arg1 = (LassoSelection *) 0 ;
  EditorWindow *arg2 = (EditorWindow *) 0 ;
  LONG arg3 ;
  LONG arg4 ;
  LONG arg5 ;
  LONG arg6 ;
  Bool result;
  
  arg1 = (LassoSelection *)jarg1; 
  arg2 = (EditorWindow *)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (LONG)jarg6; 
  result = (arg1)->Start(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LassoSelection_Start__SWIG_21(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5) {
  unsigned int jresult ;
  LassoSelection *arg1 = (LassoSelection *) 0 ;
  EditorWindow *arg2 = (EditorWindow *) 0 ;
  LONG arg3 ;
  LONG arg4 ;
  LONG arg5 ;
  Bool result;
  
  arg1 = (LassoSelection *)jarg1; 
  arg2 = (EditorWindow *)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (LONG)jarg5; 
  result = (arg1)->Start(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LassoSelection_Start__SWIG_22(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  unsigned int jresult ;
  LassoSelection *arg1 = (LassoSelection *) 0 ;
  EditorWindow *arg2 = (EditorWindow *) 0 ;
  LONG arg3 ;
  LONG arg4 ;
  Bool result;
  
  arg1 = (LassoSelection *)jarg1; 
  arg2 = (EditorWindow *)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  result = (arg1)->Start(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LassoSelection_Start__SWIG_23(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  LassoSelection *arg1 = (LassoSelection *) 0 ;
  EditorWindow *arg2 = (EditorWindow *) 0 ;
  LONG arg3 ;
  Bool result;
  
  arg1 = (LassoSelection *)jarg1; 
  arg2 = (EditorWindow *)jarg2; 
  arg3 = (LONG)jarg3; 
  result = (arg1)->Start(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LassoSelection_CheckSingleClick(void * jarg1) {
  unsigned int jresult ;
  LassoSelection *arg1 = (LassoSelection *) 0 ;
  Bool result;
  
  arg1 = (LassoSelection *)jarg1; 
  result = (arg1)->CheckSingleClick();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LassoSelection_Test(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  LassoSelection *arg1 = (LassoSelection *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  Bool result;
  
  arg1 = (LassoSelection *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  result = (arg1)->Test(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LassoSelection_TestPolygon(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  LassoSelection *arg1 = (LassoSelection *) 0 ;
  Vector *arg2 = 0 ;
  Vector *arg3 = 0 ;
  Vector *arg4 = 0 ;
  Vector *arg5 = 0 ;
  Bool result;
  
  arg1 = (LassoSelection *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  arg3 = (Vector *)jarg3; /* Vector*&_in */
  arg4 = (Vector *)jarg4; /* Vector*&_in */
  arg5 = (Vector *)jarg5; /* Vector*&_in */
  result = (arg1)->TestPolygon((Vector const &)*arg2,(Vector const &)*arg3,(Vector const &)*arg4,(Vector const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LassoSelection_GetMode(void * jarg1) {
  int jresult ;
  LassoSelection *arg1 = (LassoSelection *) 0 ;
  LONG result;
  
  arg1 = (LassoSelection *)jarg1; 
  result = (arg1)->GetMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LassoSelection_GetRectangle(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  LassoSelection *arg1 = (LassoSelection *) 0 ;
  Real *arg2 = 0 ;
  Real *arg3 = 0 ;
  Real *arg4 = 0 ;
  Real *arg5 = 0 ;
  Bool result;
  
  arg1 = (LassoSelection *)jarg1; 
  arg2 = (Real *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Real & type is null", 0);
    return 0;
  } 
  arg3 = (Real *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Real & type is null", 0);
    return 0;
  } 
  arg4 = (Real *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Real & type is null", 0);
    return 0;
  } 
  arg5 = (Real *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Real & type is null", 0);
    return 0;
  } 
  result = (arg1)->GetRectangle(*arg2,*arg3,*arg4,*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LassoSelection_Alloc() {
  void * jresult ;
  LassoSelection *result = 0 ;
  
  result = (LassoSelection *)LassoSelection::Alloc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LassoSelection_Free(void * jarg1) {
  LassoSelection **arg1 = 0 ;
  
  arg1 = (LassoSelection **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LassoSelection *& type is null", 0);
    return ;
  } 
  LassoSelection::Free(*arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SendCoreMessage__SWIG_0(int jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  LONG arg1 ;
  BaseContainer *arg2 = 0 ;
  LONG arg3 ;
  GeData result;
  
  arg1 = (LONG)jarg1; 
  arg2 = (BaseContainer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer const & type is null", 0);
    return 0;
  } 
  arg3 = (LONG)jarg3; 
  result = SendCoreMessage(arg1,(BaseContainer const &)*arg2,arg3);
  jresult = new GeData((const GeData &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SendCoreMessage__SWIG_1(int jarg1, void * jarg2) {
  void * jresult ;
  LONG arg1 ;
  BaseContainer *arg2 = 0 ;
  GeData result;
  
  arg1 = (LONG)jarg1; 
  arg2 = (BaseContainer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer const & type is null", 0);
    return 0;
  } 
  result = SendCoreMessage(arg1,(BaseContainer const &)*arg2);
  jresult = new GeData((const GeData &)result); 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_COREMSG_CINEMA_get() {
  char jresult ;
  char result;
  
  result = (char)('CMci');
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetMachineFeatures() {
  void * jresult ;
  BaseContainer result;
  
  result = GetMachineFeatures();
  jresult = new BaseContainer((const BaseContainer &)result); 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_COREMSG_CINEMA_GETMACHINEFEATURES_get() {
  char jresult ;
  char result;
  
  result = (char)('gOGL');
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OPENGL_SUPPORT_DUALPLANE_ARB_get() {
  int jresult ;
  int result;
  
  result = (int)(1001);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OPENGL_SUPPORT_DUALPLANE_KTX_get() {
  int jresult ;
  int result;
  
  result = (int)(1002);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OPENGL_EXTENSION_STRING_get() {
  int jresult ;
  int result;
  
  result = (int)(1003);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OPENGL_SUPPORT_GL_EXT_SEPARATE_SPECULAR_COLOR_get() {
  int jresult ;
  int result;
  
  result = (int)(1004);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OPENGL_SUPPORT_ENHANCED_get() {
  int jresult ;
  int result;
  
  result = (int)(1005);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OPENGL_RENDERER_NAME_get() {
  int jresult ;
  int result;
  
  result = (int)(1006);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OPENGL_VERSION_STRING_get() {
  int jresult ;
  int result;
  
  result = (int)(1007);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OPENGL_VENDOR_NUM_get() {
  int jresult ;
  int result;
  
  result = (int)(1008);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OPENGL_VENDOR_UNKNOWN_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OPENGL_VENDOR_NVIDIA_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OPENGL_VENDOR_ATI_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OPENGL_VENDOR_INTEL_get() {
  int jresult ;
  int result;
  
  result = (int)(3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OPENGL_VENDOR_NAME_get() {
  int jresult ;
  int result;
  
  result = (int)(1009);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OPENGL_SHADING_LANGUAGE_VERSION_STRING_get() {
  int jresult ;
  int result;
  
  result = (int)(1010);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OPENGL_VERTEXBUFFER_OBJECT_get() {
  int jresult ;
  int result;
  
  result = (int)(1011);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OPENGL_FRAMEBUFFER_OBJECT_get() {
  int jresult ;
  int result;
  
  result = (int)(1012);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OPENGL_MULTITEXTURE_get() {
  int jresult ;
  int result;
  
  result = (int)(1013);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OPENGL_MAX_2DTEXTURE_SIZE_get() {
  int jresult ;
  int result;
  
  result = (int)(1014);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OPENGL_MAX_3DTEXTURE_SIZE_get() {
  int jresult ;
  int result;
  
  result = (int)(1015);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OPENGL_MAX_TEXCOORD_get() {
  int jresult ;
  int result;
  
  result = (int)(1016);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OPENGL_MAX_TEX_IMAGE_UNITS_VERTEX_get() {
  int jresult ;
  int result;
  
  result = (int)(1017);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OPENGL_MAX_TEX_IMAGE_UNITS_FRAGMENT_get() {
  int jresult ;
  int result;
  
  result = (int)(1018);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OPENGL_MAX_VP_INSTRUCTIONS_get() {
  int jresult ;
  int result;
  
  result = (int)(1019);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OPENGL_MAX_FP_INSTRUCTIONS_get() {
  int jresult ;
  int result;
  
  result = (int)(1020);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OPENGL_FLOATINGPOINT_TEXTURE_get() {
  int jresult ;
  int result;
  
  result = (int)(1021);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OPENGL_NONPOWEROF2_TEXTURE_get() {
  int jresult ;
  int result;
  
  result = (int)(1022);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OPENGL_DEPTH_TEXTURE_get() {
  int jresult ;
  int result;
  
  result = (int)(1023);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OPENGL_CG_TOOLKIT_get() {
  int jresult ;
  int result;
  
  result = (int)(1024);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OPENGL_MAX_TEXTURE_INDIRECTIONS_get() {
  int jresult ;
  int result;
  
  result = (int)(1025);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OPENGL_CG_LATEST_VERTEX_PROFILE_get() {
  int jresult ;
  int result;
  
  result = (int)(1026);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OPENGL_CG_LATEST_FRAGMENT_PROFILE_get() {
  int jresult ;
  int result;
  
  result = (int)(1027);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OPENGL_CG_LATEST_VERTEX_PROFILE_NAME_get() {
  int jresult ;
  int result;
  
  result = (int)(1028);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OPENGL_CG_LATEST_FRAGMENT_PROFILE_NAME_get() {
  int jresult ;
  int result;
  
  result = (int)(1029);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OPENGL_DRIVER_VERSION_STRING_get() {
  int jresult ;
  int result;
  
  result = (int)(1030);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OPENGL_CG_VERSION_STRING_get() {
  int jresult ;
  int result;
  
  result = (int)(1031);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OPENGL_FBO_Z_DEPTH_get() {
  int jresult ;
  int result;
  
  result = (int)(1033);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OPENGL_FRAMEBUFFER_OBJECT_MULTISAMPLE_get() {
  int jresult ;
  int result;
  
  result = (int)(1034);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OPENGL_MAX_ELEMENT_VERTICES_get() {
  int jresult ;
  int result;
  
  result = (int)(1035);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OPENGL_MAX_ELEMENT_INDICES_get() {
  int jresult ;
  int result;
  
  result = (int)(1036);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OPENGL_MAX_TEX_IMAGE_UNITS_GEOMETRY_get() {
  int jresult ;
  int result;
  
  result = (int)(1037);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OPENGL_CG_LATEST_GEOMETRY_PROFILE_get() {
  int jresult ;
  int result;
  
  result = (int)(1038);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OPENGL_CG_LATEST_GEOMETRY_PROFILE_NAME_get() {
  int jresult ;
  int result;
  
  result = (int)(1039);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OPENGL_VERSION_INT_get() {
  int jresult ;
  int result;
  
  result = (int)(1040);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OPENGL_GLSL_VERSION_INT_get() {
  int jresult ;
  int result;
  
  result = (int)(1041);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OPENGL_RENDER_TO_FP16_TEXTURE_get() {
  int jresult ;
  int result;
  
  result = (int)(1044);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OPENGL_RENDER_TO_FP32_TEXTURE_get() {
  int jresult ;
  int result;
  
  result = (int)(1045);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OPENGL_STEREO_BUFFER_get() {
  int jresult ;
  int result;
  
  result = (int)(1046);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OPENGL_DRIVER_OUTDATED_get() {
  int jresult ;
  int result;
  
  result = (int)(1047);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MACHINEINFO_OSTYPE_get() {
  int jresult ;
  int result;
  
  result = (int)(2000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MACHINEINFO_OSVERSION_get() {
  int jresult ;
  int result;
  
  result = (int)(2001);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MACHINEINFO_PROCESSORTYPE_get() {
  int jresult ;
  int result;
  
  result = (int)(2002);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MACHINEINFO_PROCESSORNAME_get() {
  int jresult ;
  int result;
  
  result = (int)(2003);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MACHINEINFO_PROCESSORFEATURES_get() {
  int jresult ;
  int result;
  
  result = (int)(2004);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MACHINEINFO_NUMBEROFPROCESSORS_get() {
  int jresult ;
  int result;
  
  result = (int)(2005);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MACHINEINFO_MACHINEMODEL_get() {
  int jresult ;
  int result;
  
  result = (int)(2006);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MACHINEINFO_COMPUTERNAME_get() {
  int jresult ;
  int result;
  
  result = (int)(2007);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MACHINEINFO_USERNAME_get() {
  int jresult ;
  int result;
  
  result = (int)(2008);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MACHINEINFO_PROCESSORSPEED_MHZ_get() {
  int jresult ;
  int result;
  
  result = (int)(2009);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MACHINEINFO_C4DBUILDID_get() {
  int jresult ;
  int result;
  
  result = (int)(2010);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MACHINEINFO_C4DTYPE_get() {
  int jresult ;
  int result;
  
  result = (int)(2011);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MACHINEINFO_PROCESSORHTCOUNT_get() {
  int jresult ;
  int result;
  
  result = (int)(2012);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MACHINEINFO_PHYSICAL_RAM_SIZE_get() {
  int jresult ;
  int result;
  
  result = (int)(2013);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MACHINEINFO_LOADEDPLUGINS_get() {
  int jresult ;
  int result;
  
  result = (int)(3000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GeGetMemoryStat(void * jarg1) {
  unsigned int jresult ;
  BaseContainer *arg1 = 0 ;
  Bool result;
  
  arg1 = (BaseContainer *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  result = GeGetMemoryStat(*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_C4D_MEMORY_STAT_MEMORY_INUSE_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_C4D_MEMORY_STAT_MEMORY_PEAK_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_C4D_MEMORY_STAT_NO_OF_ALLOCATIONS_TOTAL_get() {
  int jresult ;
  int result;
  
  result = (int)(3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_C4D_MEMORY_STAT_NO_OF_ALLOCATIONS_CURRENT_get() {
  int jresult ;
  int result;
  
  result = (int)(4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_C4D_MEMORY_STAT_EOGL_TEXBUFFER_get() {
  int jresult ;
  int result;
  
  result = (int)(5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_C4D_MEMORY_STAT_EOGL_VERTEXBUFFER_get() {
  int jresult ;
  int result;
  
  result = (int)(6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_C4D_MEMORY_STAT_LOWMEMCNT_get() {
  int jresult ;
  int result;
  
  result = (int)(7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_C4D_MEMORY_STAT_EOGL_VERTEXBUFFER_CNT_get() {
  int jresult ;
  int result;
  
  result = (int)(8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_C4D_MEMORY_STAT_EOGL_TEXTUREBUFFER_CNT_get() {
  int jresult ;
  int result;
  
  result = (int)(9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_C4D_MEMORY_STAT_OPENGL_TOTAL_get() {
  int jresult ;
  int result;
  
  result = (int)(10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_C4D_MEMORY_STAT_OPENGL_FREE_get() {
  int jresult ;
  int result;
  
  result = (int)(11);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_POPUPEDITTEXTCALLBACK_TEXTCHANGED_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_POPUPEDITTEXTCALLBACK_CLOSED_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_POPUPEDITTEXTCALLBACK_CANCELED_get() {
  int jresult ;
  int result;
  
  result = (int)(3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_POPUPEDITTEXTCALLBACK_CURSOR_UP_get() {
  int jresult ;
  int result;
  
  result = (int)(4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_POPUPEDITTEXTCALLBACK_CURSOR_DOWN_get() {
  int jresult ;
  int result;
  
  result = (int)(5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PopupEditText(int jarg1, int jarg2, int jarg3, int jarg4, char * /* constString&_ctype */ jarg5, int jarg6, void * jarg7, void * jarg8) {
  unsigned int jresult ;
  LONG arg1 ;
  LONG arg2 ;
  LONG arg3 ;
  LONG arg4 ;
  String *arg5 = 0 ;
  LONG arg6 ;
  PopupEditTextCallback *arg7 = (PopupEditTextCallback *) 0 ;
  void *arg8 = (void *) 0 ;
  Bool result;
  
  arg1 = (LONG)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg5_str(jarg5);
  arg5 = &arg5_str; 
  arg6 = (LONG)jarg6; 
  arg7 = (PopupEditTextCallback *)jarg7; 
  arg8 = (void *)jarg8; 
  result = PopupEditText(arg1,arg2,arg3,arg4,(String const &)*arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StartEditorRender(unsigned int jarg1, unsigned int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, void * jarg7, void * jarg8, unsigned int jarg9) {
  Bool arg1 ;
  Bool arg2 ;
  LONG arg3 ;
  LONG arg4 ;
  LONG arg5 ;
  LONG arg6 ;
  BaseThread *arg7 = (BaseThread *) 0 ;
  BaseDraw *arg8 = (BaseDraw *) 0 ;
  Bool arg9 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = jarg2 ? true : false; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (LONG)jarg6; 
  arg7 = (BaseThread *)jarg7; 
  arg8 = (BaseDraw *)jarg8; 
  arg9 = jarg9 ? true : false; 
  StartEditorRender(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT char * /* String_ctype */ SWIGSTDCALL CSharp_FormatNumber__SWIG_0(void * jarg1, int jarg2, int jarg3, unsigned int jarg4) {
  char * /* String_ctype */ jresult ;
  GeData *arg1 = 0 ;
  LONG arg2 ;
  LONG arg3 ;
  Bool arg4 ;
  String result;
  
  arg1 = (GeData *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeData const & type is null", 0);
    return 0;
  } 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = FormatNumber((GeData const &)*arg1,arg2,arg3,arg4);
  /* <String_out> */ 
  jresult = SWIG_csharp_string_callback((&result)->GetCStringCopy()); 
  /* </String_out> */
  return jresult;
}


SWIGEXPORT char * /* String_ctype */ SWIGSTDCALL CSharp_FormatNumber__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  char * /* String_ctype */ jresult ;
  GeData *arg1 = 0 ;
  LONG arg2 ;
  LONG arg3 ;
  String result;
  
  arg1 = (GeData *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeData const & type is null", 0);
    return 0;
  } 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  result = FormatNumber((GeData const &)*arg1,arg2,arg3);
  /* <String_out> */ 
  jresult = SWIG_csharp_string_callback((&result)->GetCStringCopy()); 
  /* </String_out> */
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringToNumber__SWIG_0(char * /* constString&_ctype */ jarg1, int jarg2, int jarg3, void * jarg4) {
  void * jresult ;
  String *arg1 = 0 ;
  LONG arg2 ;
  LONG arg3 ;
  LENGTHUNIT *arg4 = (LENGTHUNIT *) 0 ;
  GeData result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LENGTHUNIT *)jarg4; 
  result = StringToNumber((String const &)*arg1,arg2,arg3,(enum LENGTHUNIT const *)arg4);
  jresult = new GeData((const GeData &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringToNumber__SWIG_1(char * /* constString&_ctype */ jarg1, int jarg2, int jarg3) {
  void * jresult ;
  String *arg1 = 0 ;
  LONG arg2 ;
  LONG arg3 ;
  GeData result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  result = StringToNumber((String const &)*arg1,arg2,arg3);
  jresult = new GeData((const GeData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallCommand__SWIG_0(int jarg1, int jarg2) {
  LONG arg1 ;
  LONG arg2 ;
  
  arg1 = (LONG)jarg1; 
  arg2 = (LONG)jarg2; 
  CallCommand(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallCommand__SWIG_1(int jarg1) {
  LONG arg1 ;
  
  arg1 = (LONG)jarg1; 
  CallCommand(arg1);
}


SWIGEXPORT char * /* String_ctype */ SWIGSTDCALL CSharp_GetCommandName(int jarg1) {
  char * /* String_ctype */ jresult ;
  LONG arg1 ;
  String result;
  
  arg1 = (LONG)jarg1; 
  result = GetCommandName(arg1);
  /* <String_out> */ 
  jresult = SWIG_csharp_string_callback((&result)->GetCStringCopy()); 
  /* </String_out> */
  return jresult;
}


SWIGEXPORT char * /* String_ctype */ SWIGSTDCALL CSharp_GetCommandHelp(int jarg1) {
  char * /* String_ctype */ jresult ;
  LONG arg1 ;
  String result;
  
  arg1 = (LONG)jarg1; 
  result = GetCommandHelp(arg1);
  /* <String_out> */ 
  jresult = SWIG_csharp_string_callback((&result)->GetCStringCopy()); 
  /* </String_out> */
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsCommandEnabled(int jarg1) {
  unsigned int jresult ;
  LONG arg1 ;
  Bool result;
  
  arg1 = (LONG)jarg1; 
  result = IsCommandEnabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsCommandChecked(int jarg1) {
  unsigned int jresult ;
  LONG arg1 ;
  Bool result;
  
  arg1 = (LONG)jarg1; 
  result = IsCommandChecked(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GeIpOpenListener(void * jarg1, int jarg2, void * jarg3, int jarg4, unsigned int jarg5, void * jarg6) {
  void * jresult ;
  ULONG arg1 ;
  LONG arg2 ;
  BaseThread *arg3 = (BaseThread *) 0 ;
  LONG arg4 ;
  Bool arg5 ;
  LONG *arg6 = (LONG *) 0 ;
  ULONG *argp1 ;
  IpConnection *result = 0 ;
  
  argp1 = (ULONG *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ULONG", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (LONG)jarg2; 
  arg3 = (BaseThread *)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (LONG *)jarg6; 
  result = (IpConnection *)GeIpOpenListener(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GeIpOpenOutgoing(void * jarg1, void * jarg2, int jarg3, int jarg4, unsigned int jarg5, void * jarg6) {
  void * jresult ;
  CHAR *arg1 = (CHAR *) 0 ;
  BaseThread *arg2 = (BaseThread *) 0 ;
  LONG arg3 ;
  LONG arg4 ;
  Bool arg5 ;
  LONG *arg6 = (LONG *) 0 ;
  IpConnection *result = 0 ;
  
  arg1 = (CHAR *)jarg1; 
  arg2 = (BaseThread *)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (LONG *)jarg6; 
  result = (IpConnection *)GeIpOpenOutgoing((CHAR const *)arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GeIpWaitForIncoming(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  IpConnection *arg1 = (IpConnection *) 0 ;
  BaseThread *arg2 = (BaseThread *) 0 ;
  LONG *arg3 = (LONG *) 0 ;
  IpConnection *result = 0 ;
  
  arg1 = (IpConnection *)jarg1; 
  arg2 = (BaseThread *)jarg2; 
  arg3 = (LONG *)jarg3; 
  result = (IpConnection *)GeIpWaitForIncoming(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeIpCloseConnection(void * jarg1) {
  IpConnection **arg1 = 0 ;
  
  arg1 = (IpConnection **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "IpConnection *& type is null", 0);
    return ;
  } 
  GeIpCloseConnection(*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeIpKillConnection(void * jarg1) {
  IpConnection *arg1 = (IpConnection *) 0 ;
  
  arg1 = (IpConnection *)jarg1; 
  GeIpKillConnection(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GeIpBytesInInputBuffer(void * jarg1) {
  void * jresult ;
  IpConnection *arg1 = (IpConnection *) 0 ;
  VLONG result;
  
  arg1 = (IpConnection *)jarg1; 
  result = GeIpBytesInInputBuffer(arg1);
  jresult = new VLONG((const VLONG &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GeIpReadBytes(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  IpConnection *arg1 = (IpConnection *) 0 ;
  void *arg2 = (void *) 0 ;
  VLONG arg3 ;
  VLONG *argp3 ;
  VLONG result;
  
  arg1 = (IpConnection *)jarg1; 
  arg2 = (void *)jarg2; 
  argp3 = (VLONG *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null VLONG", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = GeIpReadBytes(arg1,arg2,arg3);
  jresult = new VLONG((const VLONG &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GeIpSendBytes(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  IpConnection *arg1 = (IpConnection *) 0 ;
  void *arg2 = (void *) 0 ;
  VLONG arg3 ;
  VLONG *argp3 ;
  VLONG result;
  
  arg1 = (IpConnection *)jarg1; 
  arg2 = (void *)jarg2; 
  argp3 = (VLONG *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null VLONG", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = GeIpSendBytes(arg1,(void const *)arg2,arg3);
  jresult = new VLONG((const VLONG &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeIpGetHostAddr(void * jarg1, void * jarg2, int jarg3) {
  IpConnection *arg1 = (IpConnection *) 0 ;
  CHAR *arg2 = (CHAR *) 0 ;
  LONG arg3 ;
  
  arg1 = (IpConnection *)jarg1; 
  arg2 = (CHAR *)jarg2; 
  arg3 = (LONG)jarg3; 
  GeIpGetHostAddr(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeIpGetRemoteAddr(void * jarg1, void * jarg2, int jarg3) {
  IpConnection *arg1 = (IpConnection *) 0 ;
  CHAR *arg2 = (CHAR *) 0 ;
  LONG arg3 ;
  
  arg1 = (IpConnection *)jarg1; 
  arg2 = (CHAR *)jarg2; 
  arg3 = (LONG)jarg3; 
  GeIpGetRemoteAddr(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SendMailAvailable() {
  unsigned int jresult ;
  Bool result;
  
  result = SendMailAvailable();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SendMail(char * /* constString&_ctype */ jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, char * /* constString&_ctype */ jarg6, int jarg7) {
  unsigned int jresult ;
  String *arg1 = 0 ;
  String *arg2 = (String *) 0 ;
  String *arg3 = (String *) 0 ;
  String *arg4 = (String *) 0 ;
  Filename *arg5 = (Filename *) 0 ;
  String *arg6 = 0 ;
  LONG arg7 ;
  Bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (String *)jarg2; 
  arg3 = (String *)jarg3; 
  arg4 = (String *)jarg4; 
  arg5 = (Filename *)jarg5; 
  if (!jarg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg6_str(jarg6);
  arg6 = &arg6_str; 
  arg7 = (LONG)jarg7; 
  result = SendMail((String const &)*arg1,(String const *)arg2,(String const *)arg3,(String const *)arg4,arg5,(String const &)*arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SENDMAIL_SENDDIRECTLY_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GetSystemEnvironmentVariable(char * /* constString&_ctype */ jarg1, void * jarg2) {
  unsigned int jresult ;
  String *arg1 = 0 ;
  String *arg2 = 0 ;
  Bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "String & type is null", 0);
    return 0;
  } 
  result = GetSystemEnvironmentVariable((String const &)*arg1,*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AskForAdministratorPrivileges(char * /* constString&_ctype */ jarg1, char * /* constString&_ctype */ jarg2, unsigned int jarg3, void * jarg4) {
  unsigned int jresult ;
  String *arg1 = 0 ;
  String *arg2 = 0 ;
  Bool arg3 ;
  void **arg4 = (void **) 0 ;
  Bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  arg4 = (void **)jarg4; 
  result = AskForAdministratorPrivileges((String const &)*arg1,(String const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EndAdministratorPrivileges() {
  EndAdministratorPrivileges();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RestartApplication__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  UWORD *arg1 = (UWORD *) 0 ;
  LONG arg2 ;
  UWORD **arg3 = (UWORD **) 0 ;
  
  arg1 = (UWORD *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (UWORD **)jarg3; 
  RestartApplication((UWORD const *)arg1,arg2,(UWORD const **)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RestartApplication__SWIG_1(void * jarg1, int jarg2) {
  UWORD *arg1 = (UWORD *) 0 ;
  LONG arg2 ;
  
  arg1 = (UWORD *)jarg1; 
  arg2 = (LONG)jarg2; 
  RestartApplication((UWORD const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RestartApplication__SWIG_2(void * jarg1) {
  UWORD *arg1 = (UWORD *) 0 ;
  
  arg1 = (UWORD *)jarg1; 
  RestartApplication((UWORD const *)arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RestartApplication__SWIG_3() {
  RestartApplication();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeUpdateUI() {
  GeUpdateUI();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DebugTimer(void * jarg1) {
  void * jresult ;
  CHAR *arg1 = (CHAR *) 0 ;
  DebugTimer *result = 0 ;
  
  arg1 = (CHAR *)jarg1; 
  result = (DebugTimer *)new DebugTimer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DebugTimer(void * jarg1) {
  DebugTimer *arg1 = (DebugTimer *) 0 ;
  
  arg1 = (DebugTimer *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SHORTCUT_PLUGINID_get() {
  int jresult ;
  int result;
  
  result = (int)(1000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SHORTCUT_ADDRESS_get() {
  int jresult ;
  int result;
  
  result = (int)(1001);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SHORTCUT_OPTIONMODE_get() {
  int jresult ;
  int result;
  
  result = (int)(1002);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetShortcutCount() {
  int jresult ;
  LONG result;
  
  result = GetShortcutCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetShortcut(int jarg1) {
  void * jresult ;
  LONG arg1 ;
  BaseContainer result;
  
  arg1 = (LONG)jarg1; 
  result = GetShortcut(arg1);
  jresult = new BaseContainer((const BaseContainer &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AddShortcut(void * jarg1) {
  unsigned int jresult ;
  BaseContainer *arg1 = 0 ;
  Bool result;
  
  arg1 = (BaseContainer *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer const & type is null", 0);
    return 0;
  } 
  result = AddShortcut((BaseContainer const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RemoveShortcut(int jarg1) {
  unsigned int jresult ;
  LONG arg1 ;
  Bool result;
  
  arg1 = (LONG)jarg1; 
  result = RemoveShortcut(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LoadShortcutSet(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Filename *arg1 = 0 ;
  Bool arg2 ;
  Bool result;
  
  arg1 = (Filename *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Filename const & type is null", 0);
    return 0;
  } 
  arg2 = jarg2 ? true : false; 
  result = LoadShortcutSet((Filename const &)*arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SaveShortcutSet(void * jarg1) {
  unsigned int jresult ;
  Filename *arg1 = 0 ;
  Bool result;
  
  arg1 = (Filename *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Filename const & type is null", 0);
    return 0;
  } 
  result = SaveShortcutSet((Filename const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FindShortcutsFromID(int jarg1, void * jarg2, int jarg3) {
  int jresult ;
  LONG arg1 ;
  LONG *arg2 = (LONG *) 0 ;
  LONG arg3 ;
  LONG result;
  
  arg1 = (LONG)jarg1; 
  arg2 = (LONG *)jarg2; 
  arg3 = (LONG)jarg3; 
  result = FindShortcutsFromID(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FindShortcuts(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  BaseContainer *arg1 = 0 ;
  LONG *arg2 = (LONG *) 0 ;
  LONG arg3 ;
  LONG result;
  
  arg1 = (BaseContainer *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer const & type is null", 0);
    return 0;
  } 
  arg2 = (LONG *)jarg2; 
  arg3 = (LONG)jarg3; 
  result = FindShortcuts((BaseContainer const &)*arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CheckCommandShortcut(int jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  LONG arg1 ;
  LONG arg2 ;
  LONG arg3 ;
  Bool result;
  
  arg1 = (LONG)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  result = CheckCommandShortcut(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_InsertCreateObject__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  BaseObject *arg3 = (BaseObject *) 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  arg3 = (BaseObject *)jarg3; 
  InsertCreateObject(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_InsertCreateObject__SWIG_1(void * jarg1, void * jarg2) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  InsertCreateObject(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CLIPBOARDOWNER_BODYPAINT_get() {
  int jresult ;
  int result;
  
  result = (int)(200000243);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CLIPBOARDOWNER_PICTUREVIEWER_get() {
  int jresult ;
  int result;
  
  result = (int)(200000244);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CopyToClipboard__SWIG_0(char * /* constString&_ctype */ jarg1) {
  String *arg1 = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  String arg1_str(jarg1);
  arg1 = &arg1_str; 
  CopyToClipboard((String const &)*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CopyToClipboard__SWIG_1(void * jarg1, int jarg2) {
  BaseBitmap *arg1 = (BaseBitmap *) 0 ;
  LONG arg2 ;
  
  arg1 = (BaseBitmap *)jarg1; 
  arg2 = (LONG)jarg2; 
  CopyToClipboard(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GetStringFromClipboard(void * jarg1) {
  unsigned int jresult ;
  String *arg1 = (String *) 0 ;
  Bool result;
  
  arg1 = (String *)jarg1; 
  result = GetStringFromClipboard(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GetBitmapFromClipboard(void * jarg1) {
  unsigned int jresult ;
  BaseBitmap *arg1 = (BaseBitmap *) 0 ;
  Bool result;
  
  arg1 = (BaseBitmap *)jarg1; 
  result = GetBitmapFromClipboard(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetClipboardType() {
  int jresult ;
  CLIPBOARDTYPE result;
  
  result = (CLIPBOARDTYPE)GetClipboardType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetC4DClipboardOwner() {
  int jresult ;
  LONG result;
  
  result = GetC4DClipboardOwner();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BrowserLibraryPopup(int jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, void * jarg7, void * jarg8) {
  LONG arg1 ;
  LONG arg2 ;
  LONG arg3 ;
  LONG arg4 ;
  LONG arg5 ;
  LONG arg6 ;
  void *arg7 = (void *) 0 ;
  BrowserPopupCallback arg8 ;
  BrowserPopupCallback *argp8 ;
  
  arg1 = (LONG)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (LONG)jarg6; 
  arg7 = (void *)jarg7; 
  argp8 = (BrowserPopupCallback *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BrowserPopupCallback", 0);
    return ;
  }
  arg8 = *argp8; 
  BrowserLibraryPopup(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetCursorBitmap(int jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  LONG arg1 ;
  LONG *arg2 = 0 ;
  LONG *arg3 = 0 ;
  BaseBitmap *result = 0 ;
  
  arg1 = (LONG)jarg1; 
  arg2 = (LONG *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  arg3 = (LONG *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  result = (BaseBitmap *)GetCursorBitmap(arg1,*arg2,*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GeSpinlock() {
  void * jresult ;
  GeSpinlock *result = 0 ;
  
  result = (GeSpinlock *)new GeSpinlock();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeSpinlock_state_set(void * jarg1, int jarg2) {
  GeSpinlock *arg1 = (GeSpinlock *) 0 ;
  LONG arg2 ;
  
  arg1 = (GeSpinlock *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->state = (LONG volatile )arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GeSpinlock_state_get(void * jarg1) {
  int jresult ;
  GeSpinlock *arg1 = (GeSpinlock *) 0 ;
  LONG result;
  
  arg1 = (GeSpinlock *)jarg1; 
  result = (LONG) ((arg1)->state);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeSpinlock_Lock(void * jarg1) {
  GeSpinlock *arg1 = (GeSpinlock *) 0 ;
  
  arg1 = (GeSpinlock *)jarg1; 
  (arg1)->Lock();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeSpinlock_Unlock(void * jarg1) {
  GeSpinlock *arg1 = (GeSpinlock *) 0 ;
  
  arg1 = (GeSpinlock *)jarg1; 
  (arg1)->Unlock();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GeSpinlock_AttemptLock(void * jarg1) {
  unsigned int jresult ;
  GeSpinlock *arg1 = (GeSpinlock *) 0 ;
  Bool result;
  
  arg1 = (GeSpinlock *)jarg1; 
  result = (arg1)->AttemptLock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GeSpinlock(void * jarg1) {
  GeSpinlock *arg1 = (GeSpinlock *) 0 ;
  
  arg1 = (GeSpinlock *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GeRWSpinlock() {
  void * jresult ;
  GeRWSpinlock *result = 0 ;
  
  result = (GeRWSpinlock *)new GeRWSpinlock();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeRWSpinlock_state_set(void * jarg1, int jarg2) {
  GeRWSpinlock *arg1 = (GeRWSpinlock *) 0 ;
  LONG arg2 ;
  
  arg1 = (GeRWSpinlock *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->state = (LONG volatile )arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GeRWSpinlock_state_get(void * jarg1) {
  int jresult ;
  GeRWSpinlock *arg1 = (GeRWSpinlock *) 0 ;
  LONG result;
  
  arg1 = (GeRWSpinlock *)jarg1; 
  result = (LONG) ((arg1)->state);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeRWSpinlock_ReadLock(void * jarg1) {
  GeRWSpinlock *arg1 = (GeRWSpinlock *) 0 ;
  
  arg1 = (GeRWSpinlock *)jarg1; 
  (arg1)->ReadLock();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeRWSpinlock_ReadUnlock(void * jarg1) {
  GeRWSpinlock *arg1 = (GeRWSpinlock *) 0 ;
  
  arg1 = (GeRWSpinlock *)jarg1; 
  (arg1)->ReadUnlock();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeRWSpinlock_WriteLock(void * jarg1) {
  GeRWSpinlock *arg1 = (GeRWSpinlock *) 0 ;
  
  arg1 = (GeRWSpinlock *)jarg1; 
  (arg1)->WriteLock();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeRWSpinlock_WriteUnlock(void * jarg1) {
  GeRWSpinlock *arg1 = (GeRWSpinlock *) 0 ;
  
  arg1 = (GeRWSpinlock *)jarg1; 
  (arg1)->WriteUnlock();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GeRWSpinlock_AttemptWriteLock(void * jarg1) {
  unsigned int jresult ;
  GeRWSpinlock *arg1 = (GeRWSpinlock *) 0 ;
  Bool result;
  
  arg1 = (GeRWSpinlock *)jarg1; 
  result = (arg1)->AttemptWriteLock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GeRWSpinlock(void * jarg1) {
  GeRWSpinlock *arg1 = (GeRWSpinlock *) 0 ;
  
  arg1 = (GeRWSpinlock *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseThread_TestBreak(void * jarg1) {
  unsigned int jresult ;
  BaseThread *arg1 = (BaseThread *) 0 ;
  Bool result;
  
  arg1 = (BaseThread *)jarg1; 
  result = (arg1)->TestBreak();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseThread_End__SWIG_0(void * jarg1, unsigned int jarg2) {
  BaseThread *arg1 = (BaseThread *) 0 ;
  Bool arg2 ;
  
  arg1 = (BaseThread *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->End(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseThread_End__SWIG_1(void * jarg1) {
  BaseThread *arg1 = (BaseThread *) 0 ;
  
  arg1 = (BaseThread *)jarg1; 
  (arg1)->End();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseThread_IsRunning(void * jarg1) {
  unsigned int jresult ;
  BaseThread *arg1 = (BaseThread *) 0 ;
  Bool result;
  
  arg1 = (BaseThread *)jarg1; 
  result = (arg1)->IsRunning();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_C4DThread(void * jarg1) {
  C4DThread *arg1 = (C4DThread *) 0 ;
  
  arg1 = (C4DThread *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_C4DThread_Get(void * jarg1) {
  void * jresult ;
  C4DThread *arg1 = (C4DThread *) 0 ;
  BaseThread *result = 0 ;
  
  arg1 = (C4DThread *)jarg1; 
  result = (BaseThread *)((C4DThread const *)arg1)->Get();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_C4DThread_Start__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  C4DThread *arg1 = (C4DThread *) 0 ;
  THREADMODE arg2 ;
  THREADPRIORITY arg3 ;
  Bool result;
  
  arg1 = (C4DThread *)jarg1; 
  arg2 = (THREADMODE)jarg2; 
  arg3 = (THREADPRIORITY)jarg3; 
  result = (arg1)->Start(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_C4DThread_Start__SWIG_1(void * jarg1, int jarg2) {
  unsigned int jresult ;
  C4DThread *arg1 = (C4DThread *) 0 ;
  THREADMODE arg2 ;
  Bool result;
  
  arg1 = (C4DThread *)jarg1; 
  arg2 = (THREADMODE)jarg2; 
  result = (arg1)->Start(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_C4DThread_Start__SWIG_2(void * jarg1) {
  unsigned int jresult ;
  C4DThread *arg1 = (C4DThread *) 0 ;
  Bool result;
  
  arg1 = (C4DThread *)jarg1; 
  result = (arg1)->Start();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_C4DThread_End__SWIG_0(void * jarg1, unsigned int jarg2) {
  C4DThread *arg1 = (C4DThread *) 0 ;
  Bool arg2 ;
  
  arg1 = (C4DThread *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->End(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_C4DThread_End__SWIG_1(void * jarg1) {
  C4DThread *arg1 = (C4DThread *) 0 ;
  
  arg1 = (C4DThread *)jarg1; 
  (arg1)->End();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_C4DThread_IsRunning(void * jarg1) {
  unsigned int jresult ;
  C4DThread *arg1 = (C4DThread *) 0 ;
  Bool result;
  
  arg1 = (C4DThread *)jarg1; 
  result = (arg1)->IsRunning();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_C4DThread_TestBreak(void * jarg1) {
  unsigned int jresult ;
  C4DThread *arg1 = (C4DThread *) 0 ;
  Bool result;
  
  arg1 = (C4DThread *)jarg1; 
  result = (arg1)->TestBreak();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_C4DThread_Wait(void * jarg1, unsigned int jarg2) {
  C4DThread *arg1 = (C4DThread *) 0 ;
  Bool arg2 ;
  
  arg1 = (C4DThread *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->Wait(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_C4DThread_TestDBreak(void * jarg1) {
  unsigned int jresult ;
  C4DThread *arg1 = (C4DThread *) 0 ;
  Bool result;
  
  arg1 = (C4DThread *)jarg1; 
  result = (arg1)->TestDBreak();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_C4DThread_Main(void * jarg1) {
  C4DThread *arg1 = (C4DThread *) 0 ;
  
  arg1 = (C4DThread *)jarg1; 
  (arg1)->Main();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_C4DThread_GetThreadName(void * jarg1) {
  void * jresult ;
  C4DThread *arg1 = (C4DThread *) 0 ;
  CHAR *result = 0 ;
  
  arg1 = (C4DThread *)jarg1; 
  result = (CHAR *)(arg1)->GetThreadName();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MPThreadPool() {
  void * jresult ;
  MPThreadPool *result = 0 ;
  
  result = (MPThreadPool *)new MPThreadPool();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MPThreadPool(void * jarg1) {
  MPThreadPool *arg1 = (MPThreadPool *) 0 ;
  
  arg1 = (MPThreadPool *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MPThreadPool_Init__SWIG_0(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  MPThreadPool *arg1 = (MPThreadPool *) 0 ;
  BaseThread *arg2 = (BaseThread *) 0 ;
  LONG arg3 ;
  C4DThread **arg4 = (C4DThread **) 0 ;
  Bool result;
  
  arg1 = (MPThreadPool *)jarg1; 
  arg2 = (BaseThread *)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (C4DThread **)jarg4; 
  result = (arg1)->Init(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MPThreadPool_Init__SWIG_1(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  MPThreadPool *arg1 = (MPThreadPool *) 0 ;
  C4DThread *arg2 = 0 ;
  LONG arg3 ;
  C4DThread **arg4 = (C4DThread **) 0 ;
  Bool result;
  
  arg1 = (MPThreadPool *)jarg1; 
  arg2 = (C4DThread *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "C4DThread const & type is null", 0);
    return 0;
  } 
  arg3 = (LONG)jarg3; 
  arg4 = (C4DThread **)jarg4; 
  result = (arg1)->Init((C4DThread const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MPThreadPool_Start(void * jarg1, int jarg2) {
  unsigned int jresult ;
  MPThreadPool *arg1 = (MPThreadPool *) 0 ;
  THREADPRIORITY arg2 ;
  Bool result;
  
  arg1 = (MPThreadPool *)jarg1; 
  arg2 = (THREADPRIORITY)jarg2; 
  result = (arg1)->Start(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MPThreadPool_WaitForNextFree(void * jarg1) {
  void * jresult ;
  MPThreadPool *arg1 = (MPThreadPool *) 0 ;
  C4DThread *result = 0 ;
  
  arg1 = (MPThreadPool *)jarg1; 
  result = (C4DThread *)(arg1)->WaitForNextFree();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MPThreadPool_Wait(void * jarg1) {
  MPThreadPool *arg1 = (MPThreadPool *) 0 ;
  
  arg1 = (MPThreadPool *)jarg1; 
  (arg1)->Wait();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MPThreadPool_End(void * jarg1) {
  MPThreadPool *arg1 = (MPThreadPool *) 0 ;
  
  arg1 = (MPThreadPool *)jarg1; 
  (arg1)->End();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Semaphore_AttemptLock(void * jarg1) {
  unsigned int jresult ;
  Semaphore *arg1 = (Semaphore *) 0 ;
  Bool result;
  
  arg1 = (Semaphore *)jarg1; 
  result = (arg1)->AttemptLock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Semaphore_Lock__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Semaphore *arg1 = (Semaphore *) 0 ;
  BaseThread *arg2 = (BaseThread *) 0 ;
  Bool result;
  
  arg1 = (Semaphore *)jarg1; 
  arg2 = (BaseThread *)jarg2; 
  result = (arg1)->Lock(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Semaphore_Lock__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Semaphore *arg1 = (Semaphore *) 0 ;
  C4DThread *arg2 = (C4DThread *) 0 ;
  Bool result;
  
  arg1 = (Semaphore *)jarg1; 
  arg2 = (C4DThread *)jarg2; 
  result = (arg1)->Lock(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Semaphore_Unlock(void * jarg1) {
  Semaphore *arg1 = (Semaphore *) 0 ;
  
  arg1 = (Semaphore *)jarg1; 
  (arg1)->Unlock();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Semaphore_Alloc() {
  void * jresult ;
  Semaphore *result = 0 ;
  
  result = (Semaphore *)Semaphore::Alloc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Semaphore_Free(void * jarg1) {
  Semaphore **arg1 = 0 ;
  
  arg1 = (Semaphore **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Semaphore *& type is null", 0);
    return ;
  } 
  Semaphore::Free(*arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GeSignal_Init(void * jarg1, int jarg2) {
  unsigned int jresult ;
  GeSignal *arg1 = (GeSignal *) 0 ;
  SIGNALMODE arg2 ;
  Bool result;
  
  arg1 = (GeSignal *)jarg1; 
  arg2 = (SIGNALMODE)jarg2; 
  result = (arg1)->Init(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeSignal_Set(void * jarg1) {
  GeSignal *arg1 = (GeSignal *) 0 ;
  
  arg1 = (GeSignal *)jarg1; 
  (arg1)->Set();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeSignal_Clear(void * jarg1) {
  GeSignal *arg1 = (GeSignal *) 0 ;
  
  arg1 = (GeSignal *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GeSignal_Wait(void * jarg1, int jarg2) {
  unsigned int jresult ;
  GeSignal *arg1 = (GeSignal *) 0 ;
  LONG arg2 ;
  Bool result;
  
  arg1 = (GeSignal *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (arg1)->Wait(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GeSignal_Alloc() {
  void * jresult ;
  GeSignal *result = 0 ;
  
  result = (GeSignal *)GeSignal::Alloc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeSignal_Free(void * jarg1) {
  GeSignal **arg1 = 0 ;
  
  arg1 = (GeSignal **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeSignal *& type is null", 0);
    return ;
  } 
  GeSignal::Free(*arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_GeGetCPUCount() {
  int jresult ;
  LONG result;
  
  result = GeGetCPUCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeThreadLock() {
  GeThreadLock();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeThreadUnlock() {
  GeThreadUnlock();
}


SWIGEXPORT int SWIGSTDCALL CSharp_IdentifyThread(void * jarg1) {
  int jresult ;
  BaseThread *arg1 = (BaseThread *) 0 ;
  THREADTYPE result;
  
  arg1 = (BaseThread *)jarg1; 
  result = (THREADTYPE)IdentifyThread(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GeGetCurrentThreadId() {
  void * jresult ;
  ULONG result;
  
  result = GeGetCurrentThreadId();
  jresult = new ULONG((const ULONG &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GeGetCurrentThread() {
  void * jresult ;
  BaseThread *result = 0 ;
  
  result = (BaseThread *)GeGetCurrentThread();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AutoSpinLock__SWIG_0(void * jarg1) {
  void * jresult ;
  GeSpinlock *arg1 = (GeSpinlock *) 0 ;
  AutoSpinLock *result = 0 ;
  
  arg1 = (GeSpinlock *)jarg1; 
  result = (AutoSpinLock *)new AutoSpinLock(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AutoSpinLock__SWIG_1() {
  void * jresult ;
  AutoSpinLock *result = 0 ;
  
  result = (AutoSpinLock *)new AutoSpinLock();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AutoSpinLock(void * jarg1) {
  AutoSpinLock *arg1 = (AutoSpinLock *) 0 ;
  
  arg1 = (AutoSpinLock *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AutoSpinLock_DoLock(void * jarg1, void * jarg2) {
  AutoSpinLock *arg1 = (AutoSpinLock *) 0 ;
  GeSpinlock *arg2 = (GeSpinlock *) 0 ;
  
  arg1 = (AutoSpinLock *)jarg1; 
  arg2 = (GeSpinlock *)jarg2; 
  (arg1)->DoLock(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AutoSpinLock_Unlock(void * jarg1) {
  AutoSpinLock *arg1 = (AutoSpinLock *) 0 ;
  
  arg1 = (AutoSpinLock *)jarg1; 
  (arg1)->Unlock();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AutoLock() {
  void * jresult ;
  AutoLock *result = 0 ;
  
  result = (AutoLock *)new AutoLock();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AutoLock(void * jarg1) {
  AutoLock *arg1 = (AutoLock *) 0 ;
  
  arg1 = (AutoLock *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AutoLocker__SWIG_0() {
  void * jresult ;
  AutoLocker *result = 0 ;
  
  result = (AutoLocker *)new AutoLocker();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AutoLocker__SWIG_1(void * jarg1) {
  void * jresult ;
  AutoLock *arg1 = 0 ;
  AutoLocker *result = 0 ;
  
  arg1 = (AutoLock *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AutoLock & type is null", 0);
    return 0;
  } 
  result = (AutoLocker *)new AutoLocker(*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AutoLocker(void * jarg1) {
  AutoLocker *arg1 = (AutoLocker *) 0 ;
  
  arg1 = (AutoLocker *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AutoLocker_DoLock(void * jarg1, void * jarg2) {
  AutoLocker *arg1 = (AutoLocker *) 0 ;
  AutoLock *arg2 = 0 ;
  
  arg1 = (AutoLocker *)jarg1; 
  arg2 = (AutoLock *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AutoLock & type is null", 0);
    return ;
  } 
  (arg1)->DoLock(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AutoLocker_Unlock(void * jarg1) {
  AutoLocker *arg1 = (AutoLocker *) 0 ;
  
  arg1 = (AutoLocker *)jarg1; 
  (arg1)->Unlock();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AutoRWLock() {
  void * jresult ;
  AutoRWLock *result = 0 ;
  
  result = (AutoRWLock *)new AutoRWLock();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AutoRWLock(void * jarg1) {
  AutoRWLock *arg1 = (AutoRWLock *) 0 ;
  
  arg1 = (AutoRWLock *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AutoRWLocker__SWIG_0() {
  void * jresult ;
  AutoRWLocker *result = 0 ;
  
  result = (AutoRWLocker *)new AutoRWLocker();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AutoRWLocker__SWIG_1(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  AutoRWLock *arg1 = 0 ;
  Bool arg2 ;
  AutoRWLocker *result = 0 ;
  
  arg1 = (AutoRWLock *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AutoRWLock & type is null", 0);
    return 0;
  } 
  arg2 = jarg2 ? true : false; 
  result = (AutoRWLocker *)new AutoRWLocker(*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AutoRWLocker__SWIG_2(void * jarg1) {
  void * jresult ;
  AutoRWLock *arg1 = 0 ;
  AutoRWLocker *result = 0 ;
  
  arg1 = (AutoRWLock *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AutoRWLock & type is null", 0);
    return 0;
  } 
  result = (AutoRWLocker *)new AutoRWLocker(*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AutoRWLocker(void * jarg1) {
  AutoRWLocker *arg1 = (AutoRWLocker *) 0 ;
  
  arg1 = (AutoRWLocker *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AutoRWLocker_DoLock__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  AutoRWLocker *arg1 = (AutoRWLocker *) 0 ;
  AutoRWLock *arg2 = 0 ;
  Bool arg3 ;
  
  arg1 = (AutoRWLocker *)jarg1; 
  arg2 = (AutoRWLock *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AutoRWLock & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  (arg1)->DoLock(*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AutoRWLocker_DoLock__SWIG_1(void * jarg1, void * jarg2) {
  AutoRWLocker *arg1 = (AutoRWLocker *) 0 ;
  AutoRWLock *arg2 = 0 ;
  
  arg1 = (AutoRWLocker *)jarg1; 
  arg2 = (AutoRWLock *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AutoRWLock & type is null", 0);
    return ;
  } 
  (arg1)->DoLock(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AutoRWLocker_Unlock(void * jarg1) {
  AutoRWLocker *arg1 = (AutoRWLocker *) 0 ;
  
  arg1 = (AutoRWLocker *)jarg1; 
  (arg1)->Unlock();
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_USERDATA_get() {
  int jresult ;
  int result;
  
  result = (int)(700);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_BOOL_PAGEMODE_get() {
  char jresult ;
  char result;
  
  result = (char)('bpmd');
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DTYPE_NONE_get() {
  int jresult ;
  int result;
  
  result = (int)DTYPE_NONE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DTYPE_CHILDREN_get() {
  int jresult ;
  int result;
  
  result = (int)DTYPE_CHILDREN;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DTYPE_GROUP_get() {
  int jresult ;
  int result;
  
  result = (int)DTYPE_GROUP;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DTYPE_COLOR_get() {
  int jresult ;
  int result;
  
  result = (int)DTYPE_COLOR;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DTYPE_SUBCONTAINER_get() {
  int jresult ;
  int result;
  
  result = (int)DTYPE_SUBCONTAINER;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DTYPE_MULTIPLEDATA_get() {
  int jresult ;
  int result;
  
  result = (int)DTYPE_MULTIPLEDATA;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DTYPE_TEXTURE_get() {
  int jresult ;
  int result;
  
  result = (int)DTYPE_TEXTURE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DTYPE_BUTTON_get() {
  int jresult ;
  int result;
  
  result = (int)DTYPE_BUTTON;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DTYPE_DYNAMIC_get() {
  int jresult ;
  int result;
  
  result = (int)DTYPE_DYNAMIC;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DTYPE_SEPARATOR_get() {
  int jresult ;
  int result;
  
  result = (int)DTYPE_SEPARATOR;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DTYPE_STATICTEXT_get() {
  int jresult ;
  int result;
  
  result = (int)DTYPE_STATICTEXT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DTYPE_POPUP_get() {
  int jresult ;
  int result;
  
  result = (int)DTYPE_POPUP;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DTYPE_LONG_get() {
  int jresult ;
  int result;
  
  result = (int)DTYPE_LONG;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DTYPE_REAL_get() {
  int jresult ;
  int result;
  
  result = (int)DTYPE_REAL;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DTYPE_TIME_get() {
  int jresult ;
  int result;
  
  result = (int)DTYPE_TIME;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DTYPE_VECTOR_get() {
  int jresult ;
  int result;
  
  result = (int)DTYPE_VECTOR;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DTYPE_MATRIX_get() {
  int jresult ;
  int result;
  
  result = (int)DTYPE_MATRIX;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DTYPE_STRING_get() {
  int jresult ;
  int result;
  
  result = (int)DTYPE_STRING;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DTYPE_FILENAME_get() {
  int jresult ;
  int result;
  
  result = (int)DTYPE_FILENAME;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DTYPE_BASELISTLINK_get() {
  int jresult ;
  int result;
  
  result = (int)DTYPE_BASELISTLINK;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DTYPE_BOOL_get() {
  int jresult ;
  int result;
  
  result = (int)DTYPE_BOOL;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DTYPE_NORMAL_get() {
  int jresult ;
  int result;
  
  result = (int)DTYPE_NORMAL;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_NAME_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_NAME;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_SHORT_NAME_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_SHORT_NAME;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_VERSION_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_VERSION;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_VERSION_DEMO_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_VERSION_DEMO;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_VERSION_XL_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_VERSION_XL;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_VERSION_ALL_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_VERSION_ALL;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_CHILDREN_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_CHILDREN;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_MIN_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_MIN;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_MAX_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_MAX;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_MINEX_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_MINEX;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_MAXEX_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_MAXEX;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_STEP_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_STEP;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_ANIMATE_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_ANIMATE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_ANIMATE_OFF_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_ANIMATE_OFF;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_ANIMATE_ON_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_ANIMATE_ON;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_ANIMATE_MIX_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_ANIMATE_MIX;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_ASKOBJECT_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_ASKOBJECT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_UNIT_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_UNIT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_UNIT_REAL_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_UNIT_REAL;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_UNIT_LONG_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_UNIT_LONG;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_UNIT_PERCENT_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_UNIT_PERCENT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_UNIT_DEGREE_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_UNIT_DEGREE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_UNIT_METER_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_UNIT_METER;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_UNIT_TIME_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_UNIT_TIME;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_PARENTGROUP_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_PARENTGROUP;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_CYCLE_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_CYCLE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_HIDE_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_HIDE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_DEFAULT_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_DEFAULT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_ACCEPT_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_ACCEPT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_SEPARATORLINE_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_SEPARATORLINE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_REFUSE_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_REFUSE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_PARENTID_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_PARENTID;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_CUSTOMGUI_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_CUSTOMGUI;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_COLUMNS_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_COLUMNS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_LAYOUTGROUP_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_LAYOUTGROUP;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_REMOVEABLE_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_REMOVEABLE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_GUIOPEN_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_GUIOPEN;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_EDITABLE_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_EDITABLE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_MINSLIDER_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_MINSLIDER;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_MAXSLIDER_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_MAXSLIDER;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_GROUPSCALEV_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_GROUPSCALEV;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_SCALEH_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_SCALEH;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_LAYOUTVERSION_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_LAYOUTVERSION;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_ALIGNLEFT_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_ALIGNLEFT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_FITH_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_FITH;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_NEWLINE_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_NEWLINE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_TITLEBAR_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_TITLEBAR;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_CYCLEICONS_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_CYCLEICONS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_CYCLESYMBOLS_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_CYCLESYMBOLS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_PARENT_COLLAPSE_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_PARENT_COLLAPSE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_FORBID_INLINE_FOLDING_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_FORBID_INLINE_FOLDING;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_FORBID_SCALING_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_FORBID_SCALING;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_INPORT_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_INPORT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_OUTPORT_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_OUTPORT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_STATICPORT_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_STATICPORT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_NEEDCONNECTION_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_NEEDCONNECTION;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_MULTIPLE_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_MULTIPLE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_PORTONLY_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_PORTONLY;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_CREATEPORT_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_CREATEPORT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_PORTSMIN_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_PORTSMIN;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_PORTSMAX_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_PORTSMAX;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_NOTMOVABLE_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_NOTMOVABLE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_EDITPORT_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_EDITPORT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_ITERATOR_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_ITERATOR;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_PARENTMSG_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_PARENTMSG;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_MATEDNOTEXT_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_MATEDNOTEXT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_COLUMNSMATED_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_COLUMNSMATED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_SHADERLINKFLAG_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_SHADERLINKFLAG;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_NOGUISWITCH_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_NOGUISWITCH;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_TEMPDESCID_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_TEMPDESCID;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC_IDENT_get() {
  int jresult ;
  int result;
  
  result = (int)DESC_IDENT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DESC__get() {
  int jresult ;
  int result;
  
  result = (int)DESC_;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CUSTOMGUI_REALSLIDER_get() {
  int jresult ;
  int result;
  
  result = (int)(1000489);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CUSTOMGUI_REALSLIDERONLY_get() {
  int jresult ;
  int result;
  
  result = (int)(200000006);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CUSTOMGUI_STRINGMULTI_get() {
  int jresult ;
  int result;
  
  result = (int)(200000007);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CUSTOMGUI_CYCLE_get() {
  int jresult ;
  int result;
  
  result = (int)(200000180);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CUSTOMGUI_CYCLEBUTTON_get() {
  int jresult ;
  int result;
  
  result = (int)(200000255);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CUSTOMGUI_LONGSLIDER_get() {
  int jresult ;
  int result;
  
  result = (int)(1000490);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CUSTOMGUI_COLOR_get() {
  int jresult ;
  int result;
  
  result = (int)(1000492);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CUSTOMGUI_SUBDESCRIPTION_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CUSTOMGUI_PROGRESSBAR_get() {
  int jresult ;
  int result;
  
  result = (int)(200000265);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CUSTOMDATATYPE_DESCID_get() {
  int jresult ;
  int result;
  
  result = (int)(1000486);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VECTOR_X_get() {
  int jresult ;
  int result;
  
  result = (int)VECTOR_X;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VECTOR_Y_get() {
  int jresult ;
  int result;
  
  result = (int)VECTOR_Y;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VECTOR_Z_get() {
  int jresult ;
  int result;
  
  result = (int)VECTOR_Z;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_COLOR_R_get() {
  int jresult ;
  int result;
  
  result = (int)COLOR_R;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_COLOR_G_get() {
  int jresult ;
  int result;
  
  result = (int)COLOR_G;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_COLOR_B_get() {
  int jresult ;
  int result;
  
  result = (int)COLOR_B;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DescLevel_id_set(void * jarg1, int jarg2) {
  DescLevel *arg1 = (DescLevel *) 0 ;
  LONG arg2 ;
  
  arg1 = (DescLevel *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DescLevel_id_get(void * jarg1) {
  int jresult ;
  DescLevel *arg1 = (DescLevel *) 0 ;
  LONG result;
  
  arg1 = (DescLevel *)jarg1; 
  result =  ((arg1)->id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DescLevel_dtype_set(void * jarg1, int jarg2) {
  DescLevel *arg1 = (DescLevel *) 0 ;
  LONG arg2 ;
  
  arg1 = (DescLevel *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->dtype = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DescLevel_dtype_get(void * jarg1) {
  int jresult ;
  DescLevel *arg1 = (DescLevel *) 0 ;
  LONG result;
  
  arg1 = (DescLevel *)jarg1; 
  result =  ((arg1)->dtype);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DescLevel_creator_set(void * jarg1, int jarg2) {
  DescLevel *arg1 = (DescLevel *) 0 ;
  LONG arg2 ;
  
  arg1 = (DescLevel *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->creator = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DescLevel_creator_get(void * jarg1) {
  int jresult ;
  DescLevel *arg1 = (DescLevel *) 0 ;
  LONG result;
  
  arg1 = (DescLevel *)jarg1; 
  result =  ((arg1)->creator);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DescLevel__SWIG_0(int jarg1) {
  void * jresult ;
  LONG arg1 ;
  DescLevel *result = 0 ;
  
  arg1 = (LONG)jarg1; 
  result = (DescLevel *)new DescLevel(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DescLevel__SWIG_1(int jarg1, int jarg2, int jarg3) {
  void * jresult ;
  LONG arg1 ;
  LONG arg2 ;
  LONG arg3 ;
  DescLevel *result = 0 ;
  
  arg1 = (LONG)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  result = (DescLevel *)new DescLevel(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DescLevel(void * jarg1) {
  DescLevel *arg1 = (DescLevel *) 0 ;
  
  arg1 = (DescLevel *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DescID__SWIG_0() {
  void * jresult ;
  DescID *result = 0 ;
  
  result = (DescID *)new DescID();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DescID__SWIG_1(void * jarg1) {
  void * jresult ;
  DescID *arg1 = 0 ;
  DescID *result = 0 ;
  
  arg1 = (DescID *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescID const & type is null", 0);
    return 0;
  } 
  result = (DescID *)new DescID((DescID const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DescID__SWIG_2(int jarg1) {
  void * jresult ;
  LONG arg1 ;
  DescID *result = 0 ;
  
  arg1 = (LONG)jarg1; 
  result = (DescID *)new DescID(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DescID__SWIG_3(void * jarg1) {
  void * jresult ;
  DescLevel *arg1 = 0 ;
  DescID *result = 0 ;
  
  arg1 = (DescLevel *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescLevel const & type is null", 0);
    return 0;
  } 
  result = (DescID *)new DescID((DescLevel const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DescID__SWIG_4(void * jarg1, void * jarg2) {
  void * jresult ;
  DescLevel *arg1 = 0 ;
  DescLevel *arg2 = 0 ;
  DescID *result = 0 ;
  
  arg1 = (DescLevel *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescLevel const & type is null", 0);
    return 0;
  } 
  arg2 = (DescLevel *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescLevel const & type is null", 0);
    return 0;
  } 
  result = (DescID *)new DescID((DescLevel const &)*arg1,(DescLevel const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DescID__SWIG_5(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  DescLevel *arg1 = 0 ;
  DescLevel *arg2 = 0 ;
  DescLevel *arg3 = 0 ;
  DescID *result = 0 ;
  
  arg1 = (DescLevel *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescLevel const & type is null", 0);
    return 0;
  } 
  arg2 = (DescLevel *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescLevel const & type is null", 0);
    return 0;
  } 
  arg3 = (DescLevel *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescLevel const & type is null", 0);
    return 0;
  } 
  result = (DescID *)new DescID((DescLevel const &)*arg1,(DescLevel const &)*arg2,(DescLevel const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DescID(void * jarg1) {
  DescID *arg1 = (DescID *) 0 ;
  
  arg1 = (DescID *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DescID_SetId(void * jarg1, void * jarg2) {
  DescID *arg1 = (DescID *) 0 ;
  DescLevel *arg2 = 0 ;
  
  arg1 = (DescID *)jarg1; 
  arg2 = (DescLevel *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescLevel const & type is null", 0);
    return ;
  } 
  (arg1)->SetId((DescLevel const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DescID_PushId(void * jarg1, void * jarg2) {
  DescID *arg1 = (DescID *) 0 ;
  DescLevel *arg2 = 0 ;
  
  arg1 = (DescID *)jarg1; 
  arg2 = (DescLevel *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescLevel const & type is null", 0);
    return ;
  } 
  (arg1)->PushId((DescLevel const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DescID_PopId(void * jarg1) {
  DescID *arg1 = (DescID *) 0 ;
  
  arg1 = (DescID *)jarg1; 
  (arg1)->PopId();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DescID_Read(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  DescID *arg1 = (DescID *) 0 ;
  HyperFile *arg2 = (HyperFile *) 0 ;
  Bool result;
  
  arg1 = (DescID *)jarg1; 
  arg2 = (HyperFile *)jarg2; 
  result = (arg1)->Read(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DescID_Write(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  DescID *arg1 = (DescID *) 0 ;
  HyperFile *arg2 = (HyperFile *) 0 ;
  Bool result;
  
  arg1 = (DescID *)jarg1; 
  arg2 = (HyperFile *)jarg2; 
  result = (arg1)->Write(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DescID_GetDepth(void * jarg1) {
  int jresult ;
  DescID *arg1 = (DescID *) 0 ;
  LONG result;
  
  arg1 = (DescID *)jarg1; 
  result = ((DescID const *)arg1)->GetDepth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DescID_IsPartOf(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  DescID *arg1 = (DescID *) 0 ;
  DescID *arg2 = 0 ;
  LONG *arg3 = (LONG *) 0 ;
  Bool result;
  
  arg1 = (DescID *)jarg1; 
  arg2 = (DescID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescID const & type is null", 0);
    return 0;
  } 
  arg3 = (LONG *)jarg3; 
  result = ((DescID const *)arg1)->IsPartOf((DescID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DescID_GetAt(void * jarg1, int jarg2) {
  void * jresult ;
  DescID *arg1 = (DescID *) 0 ;
  LONG arg2 ;
  DescLevel *result = 0 ;
  
  arg1 = (DescID *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (DescLevel *) &DescID_GetAt((DescID const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Description_Alloc() {
  void * jresult ;
  Description *result = 0 ;
  
  result = (Description *)Description::Alloc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Description_Free(void * jarg1) {
  Description **arg1 = 0 ;
  
  arg1 = (Description **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Description *& type is null", 0);
    return ;
  } 
  Description::Free(*arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Description_LoadDescription__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  Description *arg1 = (Description *) 0 ;
  BCResourceObj *arg2 = (BCResourceObj *) 0 ;
  Bool arg3 ;
  Bool result;
  
  arg1 = (Description *)jarg1; 
  arg2 = (BCResourceObj *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->LoadDescription((BCResourceObj const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Description_LoadDescription__SWIG_1(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Description *arg1 = (Description *) 0 ;
  LONG arg2 ;
  Bool result;
  
  arg1 = (Description *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (arg1)->LoadDescription(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Description_LoadDescription__SWIG_2(void * jarg1, char * /* constString&_ctype */ jarg2) {
  unsigned int jresult ;
  Description *arg1 = (Description *) 0 ;
  String *arg2 = 0 ;
  Bool result;
  
  arg1 = (Description *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (arg1)->LoadDescription((String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Description_SortGroups(void * jarg1) {
  unsigned int jresult ;
  Description *arg1 = (Description *) 0 ;
  Bool result;
  
  arg1 = (Description *)jarg1; 
  result = (arg1)->SortGroups();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Description_GetDescription(void * jarg1) {
  void * jresult ;
  Description *arg1 = (Description *) 0 ;
  BCResourceObj *result = 0 ;
  
  arg1 = (Description *)jarg1; 
  result = (BCResourceObj *)(arg1)->GetDescription();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Description_GetParameter(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  Description *arg1 = (Description *) 0 ;
  DescID *arg2 = 0 ;
  BaseContainer *arg3 = 0 ;
  AtomArray *arg4 = (AtomArray *) 0 ;
  BaseContainer *result = 0 ;
  
  arg1 = (Description *)jarg1; 
  arg2 = (DescID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescID const & type is null", 0);
    return 0;
  } 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  arg4 = (AtomArray *)jarg4; 
  result = (BaseContainer *)((Description const *)arg1)->GetParameter((DescID const &)*arg2,*arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Description_GetParameterI(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Description *arg1 = (Description *) 0 ;
  DescID *arg2 = 0 ;
  AtomArray *arg3 = (AtomArray *) 0 ;
  BaseContainer *result = 0 ;
  
  arg1 = (Description *)jarg1; 
  arg2 = (DescID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescID const & type is null", 0);
    return 0;
  } 
  arg3 = (AtomArray *)jarg3; 
  result = (BaseContainer *)(arg1)->GetParameterI((DescID const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Description_SetParameter(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  Description *arg1 = (Description *) 0 ;
  DescID *arg2 = 0 ;
  BaseContainer *arg3 = 0 ;
  DescID *arg4 = 0 ;
  Bool result;
  
  arg1 = (Description *)jarg1; 
  arg2 = (DescID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescID const & type is null", 0);
    return 0;
  } 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer const & type is null", 0);
    return 0;
  } 
  arg4 = (DescID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescID const & type is null", 0);
    return 0;
  } 
  result = (arg1)->SetParameter((DescID const &)*arg2,(BaseContainer const &)*arg3,(DescID const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Description_BrowseInit(void * jarg1) {
  void * jresult ;
  Description *arg1 = (Description *) 0 ;
  void *result = 0 ;
  
  arg1 = (Description *)jarg1; 
  result = (void *)(arg1)->BrowseInit();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Description_GetNext__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  Description *arg1 = (Description *) 0 ;
  void *arg2 = (void *) 0 ;
  BaseContainer **arg3 = (BaseContainer **) 0 ;
  DescID *arg4 = 0 ;
  DescID *arg5 = 0 ;
  Bool result;
  
  arg1 = (Description *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (BaseContainer **)jarg3; 
  arg4 = (DescID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescID & type is null", 0);
    return 0;
  } 
  arg5 = (DescID *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescID & type is null", 0);
    return 0;
  } 
  result = (arg1)->GetNext(arg2,(BaseContainer const **)arg3,*arg4,*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Description_BrowseFree(void * jarg1, void * jarg2) {
  Description *arg1 = (Description *) 0 ;
  void **arg2 = 0 ;
  
  arg1 = (Description *)jarg1; 
  arg2 = (void **)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "void *& type is null", 0);
    return ;
  } 
  (arg1)->BrowseFree(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Description_GetFirst(void * jarg1, void * jarg2) {
  void * jresult ;
  Description *arg1 = (Description *) 0 ;
  AtomArray *arg2 = 0 ;
  DescEntry *result = 0 ;
  
  arg1 = (Description *)jarg1; 
  arg2 = (AtomArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AtomArray const & type is null", 0);
    return 0;
  } 
  result = (DescEntry *)(arg1)->GetFirst((AtomArray const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Description_GetNext__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Description *arg1 = (Description *) 0 ;
  DescEntry *arg2 = (DescEntry *) 0 ;
  DescEntry *result = 0 ;
  
  arg1 = (Description *)jarg1; 
  arg2 = (DescEntry *)jarg2; 
  result = (DescEntry *)(arg1)->GetNext(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Description_GetDown(void * jarg1, void * jarg2) {
  void * jresult ;
  Description *arg1 = (Description *) 0 ;
  DescEntry *arg2 = (DescEntry *) 0 ;
  DescEntry *result = 0 ;
  
  arg1 = (Description *)jarg1; 
  arg2 = (DescEntry *)jarg2; 
  result = (DescEntry *)(arg1)->GetDown(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Description_GetDescEntry(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Description *arg1 = (Description *) 0 ;
  DescEntry *arg2 = (DescEntry *) 0 ;
  BaseContainer **arg3 = (BaseContainer **) 0 ;
  DescID *arg4 = 0 ;
  
  arg1 = (Description *)jarg1; 
  arg2 = (DescEntry *)jarg2; 
  arg3 = (BaseContainer **)jarg3; 
  arg4 = (DescID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescID & type is null", 0);
    return ;
  } 
  (arg1)->GetDescEntry(arg2,(BaseContainer const **)arg3,*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Description_CreateDialogI(void * jarg1) {
  void * jresult ;
  Description *arg1 = (Description *) 0 ;
  SubDialog *result = 0 ;
  
  arg1 = (Description *)jarg1; 
  result = (SubDialog *)(arg1)->CreateDialogI();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Description_FreeDialog(void * jarg1, void * jarg2) {
  Description *arg1 = (Description *) 0 ;
  SubDialog *arg2 = (SubDialog *) 0 ;
  
  arg1 = (Description *)jarg1; 
  arg2 = (SubDialog *)jarg2; 
  (arg1)->FreeDialog(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Description_CreatePopupMenu(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Description *arg1 = (Description *) 0 ;
  BaseContainer *arg2 = 0 ;
  Bool result;
  
  arg1 = (Description *)jarg1; 
  arg2 = (BaseContainer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  result = (arg1)->CreatePopupMenu(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Description_GetPopupId(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  Description *arg1 = (Description *) 0 ;
  LONG arg2 ;
  DescID *arg3 = 0 ;
  Bool result;
  
  arg1 = (Description *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (DescID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescID const & type is null", 0);
    return 0;
  } 
  result = (arg1)->GetPopupId(arg2,(DescID const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Description_CheckDescID(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  Description *arg1 = (Description *) 0 ;
  DescID *arg2 = 0 ;
  AtomArray *arg3 = 0 ;
  DescID *arg4 = (DescID *) 0 ;
  Bool result;
  
  arg1 = (Description *)jarg1; 
  arg2 = (DescID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescID const & type is null", 0);
    return 0;
  } 
  arg3 = (AtomArray *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AtomArray const & type is null", 0);
    return 0;
  } 
  arg4 = (DescID *)jarg4; 
  result = (arg1)->CheckDescID((DescID const &)*arg2,(AtomArray const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Description_GetSubDescriptionWithData(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  Description *arg1 = (Description *) 0 ;
  DescID *arg2 = 0 ;
  AtomArray *arg3 = 0 ;
  RESOURCEDATATYPEPLUGIN *arg4 = (RESOURCEDATATYPEPLUGIN *) 0 ;
  BaseContainer *arg5 = 0 ;
  DescID *arg6 = (DescID *) 0 ;
  Bool result;
  
  arg1 = (Description *)jarg1; 
  arg2 = (DescID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescID const & type is null", 0);
    return 0;
  } 
  arg3 = (AtomArray *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AtomArray const & type is null", 0);
    return 0;
  } 
  arg4 = (RESOURCEDATATYPEPLUGIN *)jarg4; 
  arg5 = (BaseContainer *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer const & type is null", 0);
    return 0;
  } 
  arg6 = (DescID *)jarg6; 
  result = (arg1)->GetSubDescriptionWithData((DescID const &)*arg2,(AtomArray const &)*arg3,arg4,(BaseContainer const &)*arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Description_GetSingleDescID(void * jarg1) {
  void * jresult ;
  Description *arg1 = (Description *) 0 ;
  DescID *result = 0 ;
  
  arg1 = (Description *)jarg1; 
  result = (DescID *)(arg1)->GetSingleDescID();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Description_SetSingleDescriptionMode(void * jarg1, void * jarg2) {
  Description *arg1 = (Description *) 0 ;
  DescID *arg2 = 0 ;
  
  arg1 = (Description *)jarg1; 
  arg2 = (DescID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescID const & type is null", 0);
    return ;
  } 
  (arg1)->SetSingleDescriptionMode((DescID const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DynamicDescription_Alloc(void * jarg1, void * jarg2) {
  void * jresult ;
  DynamicDescription *arg1 = (DynamicDescription *) 0 ;
  BaseContainer *arg2 = 0 ;
  DescID result;
  
  arg1 = (DynamicDescription *)jarg1; 
  arg2 = (BaseContainer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer const & type is null", 0);
    return 0;
  } 
  result = (arg1)->Alloc((BaseContainer const &)*arg2);
  jresult = new DescID((const DescID &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DynamicDescription_Set(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  DynamicDescription *arg1 = (DynamicDescription *) 0 ;
  DescID *arg2 = 0 ;
  BaseContainer *arg3 = 0 ;
  BaseList2D *arg4 = (BaseList2D *) 0 ;
  Bool result;
  
  arg1 = (DynamicDescription *)jarg1; 
  arg2 = (DescID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescID const & type is null", 0);
    return 0;
  } 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer const & type is null", 0);
    return 0;
  } 
  arg4 = (BaseList2D *)jarg4; 
  result = (arg1)->Set((DescID const &)*arg2,(BaseContainer const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DynamicDescription_Find(void * jarg1, void * jarg2) {
  void * jresult ;
  DynamicDescription *arg1 = (DynamicDescription *) 0 ;
  DescID *arg2 = 0 ;
  BaseContainer *result = 0 ;
  
  arg1 = (DynamicDescription *)jarg1; 
  arg2 = (DescID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescID const & type is null", 0);
    return 0;
  } 
  result = (BaseContainer *)(arg1)->Find((DescID const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DynamicDescription_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  DynamicDescription *arg1 = (DynamicDescription *) 0 ;
  DescID *arg2 = 0 ;
  Bool result;
  
  arg1 = (DynamicDescription *)jarg1; 
  arg2 = (DescID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescID const & type is null", 0);
    return 0;
  } 
  result = (arg1)->Remove((DescID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DynamicDescription_CopyTo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  DynamicDescription *arg1 = (DynamicDescription *) 0 ;
  DynamicDescription *arg2 = (DynamicDescription *) 0 ;
  Bool result;
  
  arg1 = (DynamicDescription *)jarg1; 
  arg2 = (DynamicDescription *)jarg2; 
  result = (arg1)->CopyTo(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DynamicDescription_BrowseInit(void * jarg1) {
  void * jresult ;
  DynamicDescription *arg1 = (DynamicDescription *) 0 ;
  void *result = 0 ;
  
  arg1 = (DynamicDescription *)jarg1; 
  result = (void *)(arg1)->BrowseInit();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DynamicDescription_BrowseGetNext(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  DynamicDescription *arg1 = (DynamicDescription *) 0 ;
  void *arg2 = (void *) 0 ;
  DescID *arg3 = (DescID *) 0 ;
  BaseContainer **arg4 = (BaseContainer **) 0 ;
  Bool result;
  
  arg1 = (DynamicDescription *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (DescID *)jarg3; 
  arg4 = (BaseContainer **)jarg4; 
  result = (arg1)->BrowseGetNext(arg2,arg3,(BaseContainer const **)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DynamicDescription_BrowseFree(void * jarg1, void * jarg2) {
  DynamicDescription *arg1 = (DynamicDescription *) 0 ;
  void **arg2 = 0 ;
  
  arg1 = (DynamicDescription *)jarg1; 
  arg2 = (void **)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "void *& type is null", 0);
    return ;
  } 
  (arg1)->BrowseFree(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DynamicDescription_FillDefaultContainer(void * jarg1, void * jarg2, int jarg3, char * /* constString&_ctype */ jarg4) {
  unsigned int jresult ;
  DynamicDescription *arg1 = (DynamicDescription *) 0 ;
  BaseContainer *arg2 = 0 ;
  LONG arg3 ;
  String *arg4 = 0 ;
  Bool result;
  
  arg1 = (DynamicDescription *)jarg1; 
  arg2 = (BaseContainer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  arg3 = (LONG)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (arg1)->FillDefaultContainer(*arg2,arg3,(String const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DynamicDescription_GetDirty(void * jarg1) {
  void * jresult ;
  DynamicDescription *arg1 = (DynamicDescription *) 0 ;
  ULONG result;
  
  arg1 = (DynamicDescription *)jarg1; 
  result = ((DynamicDescription const *)arg1)->GetDirty();
  jresult = new ULONG((const ULONG &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DescriptionCommand_id_set(void * jarg1, void * jarg2) {
  DescriptionCommand *arg1 = (DescriptionCommand *) 0 ;
  DescID *arg2 = (DescID *) 0 ;
  
  arg1 = (DescriptionCommand *)jarg1; 
  arg2 = (DescID *)jarg2; 
  if (arg1) (arg1)->id = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DescriptionCommand_id_get(void * jarg1) {
  void * jresult ;
  DescriptionCommand *arg1 = (DescriptionCommand *) 0 ;
  DescID *result = 0 ;
  
  arg1 = (DescriptionCommand *)jarg1; 
  result = (DescID *)& ((arg1)->id);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DescriptionCommand_msg_set(void * jarg1, void * jarg2) {
  DescriptionCommand *arg1 = (DescriptionCommand *) 0 ;
  BaseContainer *arg2 = (BaseContainer *) 0 ;
  
  arg1 = (DescriptionCommand *)jarg1; 
  arg2 = (BaseContainer *)jarg2; 
  if (arg1) (arg1)->msg = (BaseContainer const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DescriptionCommand_msg_get(void * jarg1) {
  void * jresult ;
  DescriptionCommand *arg1 = (DescriptionCommand *) 0 ;
  BaseContainer *result = 0 ;
  
  arg1 = (DescriptionCommand *)jarg1; 
  result = (BaseContainer *) ((arg1)->msg);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DescriptionCommand_descgui_set(void * jarg1, void * jarg2) {
  DescriptionCommand *arg1 = (DescriptionCommand *) 0 ;
  DescriptionCustomGui *arg2 = (DescriptionCustomGui *) 0 ;
  
  arg1 = (DescriptionCommand *)jarg1; 
  arg2 = (DescriptionCustomGui *)jarg2; 
  if (arg1) (arg1)->descgui = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DescriptionCommand_descgui_get(void * jarg1) {
  void * jresult ;
  DescriptionCommand *arg1 = (DescriptionCommand *) 0 ;
  DescriptionCustomGui *result = 0 ;
  
  arg1 = (DescriptionCommand *)jarg1; 
  result = (DescriptionCustomGui *) ((arg1)->descgui);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DescriptionCommand() {
  void * jresult ;
  DescriptionCommand *result = 0 ;
  
  result = (DescriptionCommand *)new DescriptionCommand();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DescriptionCommand(void * jarg1) {
  DescriptionCommand *arg1 = (DescriptionCommand *) 0 ;
  
  arg1 = (DescriptionCommand *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DescriptionPopup_id_set(void * jarg1, void * jarg2) {
  DescriptionPopup *arg1 = (DescriptionPopup *) 0 ;
  DescID *arg2 = (DescID *) 0 ;
  
  arg1 = (DescriptionPopup *)jarg1; 
  arg2 = (DescID *)jarg2; 
  if (arg1) (arg1)->id = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DescriptionPopup_id_get(void * jarg1) {
  void * jresult ;
  DescriptionPopup *arg1 = (DescriptionPopup *) 0 ;
  DescID *result = 0 ;
  
  arg1 = (DescriptionPopup *)jarg1; 
  result = (DescID *)& ((arg1)->id);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DescriptionPopup_chosen_set(void * jarg1, int jarg2) {
  DescriptionPopup *arg1 = (DescriptionPopup *) 0 ;
  LONG arg2 ;
  
  arg1 = (DescriptionPopup *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->chosen = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DescriptionPopup_chosen_get(void * jarg1) {
  int jresult ;
  DescriptionPopup *arg1 = (DescriptionPopup *) 0 ;
  LONG result;
  
  arg1 = (DescriptionPopup *)jarg1; 
  result =  ((arg1)->chosen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DescriptionPopup_msg_set(void * jarg1, void * jarg2) {
  DescriptionPopup *arg1 = (DescriptionPopup *) 0 ;
  BaseContainer *arg2 = (BaseContainer *) 0 ;
  
  arg1 = (DescriptionPopup *)jarg1; 
  arg2 = (BaseContainer *)jarg2; 
  if (arg1) (arg1)->msg = (BaseContainer const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DescriptionPopup_msg_get(void * jarg1) {
  void * jresult ;
  DescriptionPopup *arg1 = (DescriptionPopup *) 0 ;
  BaseContainer *result = 0 ;
  
  arg1 = (DescriptionPopup *)jarg1; 
  result = (BaseContainer *) ((arg1)->msg);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DescriptionPopup_popup_set(void * jarg1, void * jarg2) {
  DescriptionPopup *arg1 = (DescriptionPopup *) 0 ;
  BaseContainer *arg2 = (BaseContainer *) 0 ;
  
  arg1 = (DescriptionPopup *)jarg1; 
  arg2 = (BaseContainer *)jarg2; 
  if (arg1) (arg1)->popup = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DescriptionPopup_popup_get(void * jarg1) {
  void * jresult ;
  DescriptionPopup *arg1 = (DescriptionPopup *) 0 ;
  BaseContainer *result = 0 ;
  
  arg1 = (DescriptionPopup *)jarg1; 
  result = (BaseContainer *)& ((arg1)->popup);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DescriptionPopup() {
  void * jresult ;
  DescriptionPopup *result = 0 ;
  
  result = (DescriptionPopup *)new DescriptionPopup();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DescriptionPopup(void * jarg1) {
  DescriptionPopup *arg1 = (DescriptionPopup *) 0 ;
  
  arg1 = (DescriptionPopup *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DescriptionCheckDragAndDrop_id_set(void * jarg1, void * jarg2) {
  DescriptionCheckDragAndDrop *arg1 = (DescriptionCheckDragAndDrop *) 0 ;
  DescID *arg2 = (DescID *) 0 ;
  
  arg1 = (DescriptionCheckDragAndDrop *)jarg1; 
  arg2 = (DescID *)jarg2; 
  if (arg1) (arg1)->id = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DescriptionCheckDragAndDrop_id_get(void * jarg1) {
  void * jresult ;
  DescriptionCheckDragAndDrop *arg1 = (DescriptionCheckDragAndDrop *) 0 ;
  DescID *result = 0 ;
  
  arg1 = (DescriptionCheckDragAndDrop *)jarg1; 
  result = (DescID *)& ((arg1)->id);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DescriptionCheckDragAndDrop_element_set(void * jarg1, void * jarg2) {
  DescriptionCheckDragAndDrop *arg1 = (DescriptionCheckDragAndDrop *) 0 ;
  GeListNode *arg2 = (GeListNode *) 0 ;
  
  arg1 = (DescriptionCheckDragAndDrop *)jarg1; 
  arg2 = (GeListNode *)jarg2; 
  if (arg1) (arg1)->element = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DescriptionCheckDragAndDrop_element_get(void * jarg1) {
  void * jresult ;
  DescriptionCheckDragAndDrop *arg1 = (DescriptionCheckDragAndDrop *) 0 ;
  GeListNode *result = 0 ;
  
  arg1 = (DescriptionCheckDragAndDrop *)jarg1; 
  result = (GeListNode *) ((arg1)->element);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DescriptionCheckDragAndDrop_result_set(void * jarg1, unsigned int jarg2) {
  DescriptionCheckDragAndDrop *arg1 = (DescriptionCheckDragAndDrop *) 0 ;
  Bool arg2 ;
  
  arg1 = (DescriptionCheckDragAndDrop *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->result = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DescriptionCheckDragAndDrop_result_get(void * jarg1) {
  unsigned int jresult ;
  DescriptionCheckDragAndDrop *arg1 = (DescriptionCheckDragAndDrop *) 0 ;
  Bool result;
  
  arg1 = (DescriptionCheckDragAndDrop *)jarg1; 
  result =  ((arg1)->result);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DescriptionCheckDragAndDrop() {
  void * jresult ;
  DescriptionCheckDragAndDrop *result = 0 ;
  
  result = (DescriptionCheckDragAndDrop *)new DescriptionCheckDragAndDrop();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DescriptionCheckDragAndDrop(void * jarg1) {
  DescriptionCheckDragAndDrop *arg1 = (DescriptionCheckDragAndDrop *) 0 ;
  
  arg1 = (DescriptionCheckDragAndDrop *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DescriptionGetBitmap_id_set(void * jarg1, void * jarg2) {
  DescriptionGetBitmap *arg1 = (DescriptionGetBitmap *) 0 ;
  DescID *arg2 = (DescID *) 0 ;
  
  arg1 = (DescriptionGetBitmap *)jarg1; 
  arg2 = (DescID *)jarg2; 
  if (arg1) (arg1)->id = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DescriptionGetBitmap_id_get(void * jarg1) {
  void * jresult ;
  DescriptionGetBitmap *arg1 = (DescriptionGetBitmap *) 0 ;
  DescID *result = 0 ;
  
  arg1 = (DescriptionGetBitmap *)jarg1; 
  result = (DescID *)& ((arg1)->id);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DescriptionGetBitmap_bmp_set(void * jarg1, void * jarg2) {
  DescriptionGetBitmap *arg1 = (DescriptionGetBitmap *) 0 ;
  BaseBitmap *arg2 = (BaseBitmap *) 0 ;
  
  arg1 = (DescriptionGetBitmap *)jarg1; 
  arg2 = (BaseBitmap *)jarg2; 
  if (arg1) (arg1)->bmp = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DescriptionGetBitmap_bmp_get(void * jarg1) {
  void * jresult ;
  DescriptionGetBitmap *arg1 = (DescriptionGetBitmap *) 0 ;
  BaseBitmap *result = 0 ;
  
  arg1 = (DescriptionGetBitmap *)jarg1; 
  result = (BaseBitmap *) ((arg1)->bmp);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DescriptionGetBitmap_bmpflags_set(void * jarg1, int jarg2) {
  DescriptionGetBitmap *arg1 = (DescriptionGetBitmap *) 0 ;
  ICONDATAFLAGS arg2 ;
  
  arg1 = (DescriptionGetBitmap *)jarg1; 
  arg2 = (ICONDATAFLAGS)jarg2; 
  if (arg1) (arg1)->bmpflags = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DescriptionGetBitmap_bmpflags_get(void * jarg1) {
  int jresult ;
  DescriptionGetBitmap *arg1 = (DescriptionGetBitmap *) 0 ;
  ICONDATAFLAGS result;
  
  arg1 = (DescriptionGetBitmap *)jarg1; 
  result = (ICONDATAFLAGS) ((arg1)->bmpflags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DescriptionGetBitmap() {
  void * jresult ;
  DescriptionGetBitmap *result = 0 ;
  
  result = (DescriptionGetBitmap *)new DescriptionGetBitmap();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DescriptionGetBitmap(void * jarg1) {
  DescriptionGetBitmap *arg1 = (DescriptionGetBitmap *) 0 ;
  
  arg1 = (DescriptionGetBitmap *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DescriptionGetObjects_bc_set(void * jarg1, void * jarg2) {
  DescriptionGetObjects *arg1 = (DescriptionGetObjects *) 0 ;
  BaseContainer *arg2 = (BaseContainer *) 0 ;
  
  arg1 = (DescriptionGetObjects *)jarg1; 
  arg2 = (BaseContainer *)jarg2; 
  if (arg1) (arg1)->bc = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DescriptionGetObjects_bc_get(void * jarg1) {
  void * jresult ;
  DescriptionGetObjects *arg1 = (DescriptionGetObjects *) 0 ;
  BaseContainer *result = 0 ;
  
  arg1 = (DescriptionGetObjects *)jarg1; 
  result = (BaseContainer *)& ((arg1)->bc);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DescriptionGetObjects_descid_set(void * jarg1, void * jarg2) {
  DescriptionGetObjects *arg1 = (DescriptionGetObjects *) 0 ;
  DescID *arg2 = (DescID *) 0 ;
  
  arg1 = (DescriptionGetObjects *)jarg1; 
  arg2 = (DescID *)jarg2; 
  if (arg1) (arg1)->descid = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DescriptionGetObjects_descid_get(void * jarg1) {
  void * jresult ;
  DescriptionGetObjects *arg1 = (DescriptionGetObjects *) 0 ;
  DescID *result = 0 ;
  
  arg1 = (DescriptionGetObjects *)jarg1; 
  result = (DescID *)& ((arg1)->descid);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DescriptionGetObjects() {
  void * jresult ;
  DescriptionGetObjects *result = 0 ;
  
  result = (DescriptionGetObjects *)new DescriptionGetObjects();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DescriptionGetObjects(void * jarg1) {
  DescriptionGetObjects *arg1 = (DescriptionGetObjects *) 0 ;
  
  arg1 = (DescriptionGetObjects *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Description_Register(int jarg1, char * /* constString&_ctype */ jarg2, void * jarg3) {
  unsigned int jresult ;
  LONG arg1 ;
  String *arg2 = 0 ;
  LocalResource *arg3 = (LocalResource *) 0 ;
  Bool result;
  
  arg1 = (LONG)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (LocalResource *)jarg3; 
  result = Description_Register(arg1,(String const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LIBRARY_DESCRIPTIONLIB_get() {
  int jresult ;
  int result;
  
  result = (int)(1000467);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * /* String_ctype */ SWIGSTDCALL CSharp_DescGenerateTitle(void * jarg1) {
  char * /* String_ctype */ jresult ;
  AtomArray *arg1 = (AtomArray *) 0 ;
  String result;
  
  arg1 = (AtomArray *)jarg1; 
  result = DescGenerateTitle(arg1);
  /* <String_out> */ 
  jresult = SWIG_csharp_string_callback((&result)->GetCStringCopy()); 
  /* </String_out> */
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_COLORMODE_MAXCOLOR_get() {
  int jresult ;
  int result;
  
  result = (int)(((1 << 6) -1));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_COLORBYTES_GRAY_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_COLORBYTES_AGRAY_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_COLORBYTES_RGB_get() {
  int jresult ;
  int result;
  
  result = (int)(3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_COLORBYTES_ARGB_get() {
  int jresult ;
  int result;
  
  result = (int)(4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_COLORBYTES_CMYK_get() {
  int jresult ;
  int result;
  
  result = (int)(4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_COLORBYTES_ACMYK_get() {
  int jresult ;
  int result;
  
  result = (int)(5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BASEBITMAP_DATA_NAME_get() {
  int jresult ;
  int result;
  
  result = (int)(1003);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BASEBITMAP_DATA_PROGRESS_TIME_get() {
  int jresult ;
  int result;
  
  result = (int)(1004);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BASEBITMAP_DATA_PROGRESS_ACTION_get() {
  int jresult ;
  int result;
  
  result = (int)(1005);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BASEBITMAP_DATA_PROGRESS_FRAME_get() {
  int jresult ;
  int result;
  
  result = (int)(1006);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BASEBITMAP_DATA_PROGRESS_SEQ_get() {
  int jresult ;
  int result;
  
  result = (int)(1007);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BASEBITMAP_DATA_PROGRESS_FNUM_get() {
  int jresult ;
  int result;
  
  result = (int)(1008);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BASEBITMAP_DATA_DRAW_REGIONS_get() {
  int jresult ;
  int result;
  
  result = (int)(1009);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BASEBITMAP_DATA_SPINMODE_get() {
  int jresult ;
  int result;
  
  result = (int)(1010);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BASEBITMAP_DATA_HOLDTIME_get() {
  int jresult ;
  int result;
  
  result = (int)(1011);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BASEBITMAP_DATA_STARTTIME_get() {
  int jresult ;
  int result;
  
  result = (int)(1012);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BASEBITMAP_DATA_PROGRESS_PHASE_get() {
  int jresult ;
  int result;
  
  result = (int)(1013);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BASEBITMAP_DATA_FRAMETIME_get() {
  int jresult ;
  int result;
  
  result = (int)(1015);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BASEBITMAP_DATA_TEXTURE_ERROR_get() {
  int jresult ;
  int result;
  
  result = (int)(1019);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CUSTOMDATATYPE_COLORPROFILE_get() {
  int jresult ;
  int result;
  
  result = (int)(200000266);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CUSTOMGUI_COLORPROFILE_get() {
  int jresult ;
  int result;
  
  result = (int)(200000267);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorProfile_Alloc() {
  void * jresult ;
  ColorProfile *result = 0 ;
  
  result = (ColorProfile *)ColorProfile::Alloc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorProfile_Free(void * jarg1) {
  ColorProfile **arg1 = 0 ;
  
  arg1 = (ColorProfile **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ColorProfile *& type is null", 0);
    return ;
  } 
  ColorProfile::Free(*arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ColorProfile_CreateDefaultWindow(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ColorProfile *arg1 = (ColorProfile *) 0 ;
  GeDialog *arg2 = (GeDialog *) 0 ;
  Bool result;
  
  arg1 = (ColorProfile *)jarg1; 
  arg2 = (GeDialog *)jarg2; 
  result = (arg1)->CreateDefaultWindow(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ColorProfile_OpenProfileFromFile(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ColorProfile *arg1 = (ColorProfile *) 0 ;
  Filename *arg2 = 0 ;
  Bool result;
  
  arg1 = (ColorProfile *)jarg1; 
  arg2 = (Filename *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Filename const & type is null", 0);
    return 0;
  } 
  result = (arg1)->OpenProfileFromFile((Filename const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ColorProfile_OpenProfileFromMemory(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ColorProfile *arg1 = (ColorProfile *) 0 ;
  void *arg2 = (void *) 0 ;
  LLONG arg3 ;
  LLONG *argp3 ;
  Bool result;
  
  arg1 = (ColorProfile *)jarg1; 
  arg2 = (void *)jarg2; 
  argp3 = (LLONG *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null LLONG", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->OpenProfileFromMemory((void const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ColorProfile_WriteProfileToMemory(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ColorProfile *arg1 = (ColorProfile *) 0 ;
  void **arg2 = 0 ;
  LLONG *arg3 = 0 ;
  Bool result;
  
  arg1 = (ColorProfile *)jarg1; 
  arg2 = (void **)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "void *& type is null", 0);
    return 0;
  } 
  arg3 = (LLONG *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LLONG & type is null", 0);
    return 0;
  } 
  result = ((ColorProfile const *)arg1)->WriteProfileToMemory(*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ColorProfile_WriteProfileToFile(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ColorProfile *arg1 = (ColorProfile *) 0 ;
  Filename *arg2 = 0 ;
  Bool result;
  
  arg1 = (ColorProfile *)jarg1; 
  arg2 = (Filename *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Filename const & type is null", 0);
    return 0;
  } 
  result = ((ColorProfile const *)arg1)->WriteProfileToFile((Filename const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * /* String_ctype */ SWIGSTDCALL CSharp_ColorProfile_GetInfo(void * jarg1, int jarg2) {
  char * /* String_ctype */ jresult ;
  ColorProfile *arg1 = (ColorProfile *) 0 ;
  ColorProfile::COLORPROFILEINFO arg2 ;
  String result;
  
  arg1 = (ColorProfile *)jarg1; 
  arg2 = (ColorProfile::COLORPROFILEINFO)jarg2; 
  result = ((ColorProfile const *)arg1)->GetInfo(arg2);
  /* <String_out> */ 
  jresult = SWIG_csharp_string_callback((&result)->GetCStringCopy()); 
  /* </String_out> */
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ColorProfile_HasProfile(void * jarg1) {
  unsigned int jresult ;
  ColorProfile *arg1 = (ColorProfile *) 0 ;
  Bool result;
  
  arg1 = (ColorProfile *)jarg1; 
  result = ((ColorProfile const *)arg1)->HasProfile();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ColorProfile_IsMonitorProfileMode(void * jarg1) {
  unsigned int jresult ;
  ColorProfile *arg1 = (ColorProfile *) 0 ;
  Bool result;
  
  arg1 = (ColorProfile *)jarg1; 
  result = ((ColorProfile const *)arg1)->IsMonitorProfileMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ColorProfile_SetMonitorProfileMode(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  ColorProfile *arg1 = (ColorProfile *) 0 ;
  Bool arg2 ;
  Bool result;
  
  arg1 = (ColorProfile *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (arg1)->SetMonitorProfileMode(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ColorProfile_CheckColorMode(void * jarg1, int jarg2) {
  unsigned int jresult ;
  ColorProfile *arg1 = (ColorProfile *) 0 ;
  COLORMODE arg2 ;
  Bool result;
  
  arg1 = (ColorProfile *)jarg1; 
  arg2 = (COLORMODE)jarg2; 
  result = ((ColorProfile const *)arg1)->CheckColorMode(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorProfile_GetDefaultSRGB() {
  void * jresult ;
  ColorProfile *result = 0 ;
  
  result = (ColorProfile *)ColorProfile::GetDefaultSRGB();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorProfile_GetDefaultLinearRGB() {
  void * jresult ;
  ColorProfile *result = 0 ;
  
  result = (ColorProfile *)ColorProfile::GetDefaultLinearRGB();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorProfile_GetDefaultSGray() {
  void * jresult ;
  ColorProfile *result = 0 ;
  
  result = (ColorProfile *)ColorProfile::GetDefaultSGray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorProfile_GetDefaultLinearGray() {
  void * jresult ;
  ColorProfile *result = 0 ;
  
  result = (ColorProfile *)ColorProfile::GetDefaultLinearGray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorProfileConvert_Alloc() {
  void * jresult ;
  ColorProfileConvert *result = 0 ;
  
  result = (ColorProfileConvert *)ColorProfileConvert::Alloc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorProfileConvert_Free(void * jarg1) {
  ColorProfileConvert **arg1 = 0 ;
  
  arg1 = (ColorProfileConvert **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ColorProfileConvert *& type is null", 0);
    return ;
  } 
  ColorProfileConvert::Free(*arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ColorProfileConvert_PrepareTransform(void * jarg1, int jarg2, void * jarg3, int jarg4, void * jarg5, unsigned int jarg6) {
  unsigned int jresult ;
  ColorProfileConvert *arg1 = (ColorProfileConvert *) 0 ;
  COLORMODE arg2 ;
  ColorProfile *arg3 = (ColorProfile *) 0 ;
  COLORMODE arg4 ;
  ColorProfile *arg5 = (ColorProfile *) 0 ;
  Bool arg6 ;
  Bool result;
  
  arg1 = (ColorProfileConvert *)jarg1; 
  arg2 = (COLORMODE)jarg2; 
  arg3 = (ColorProfile *)jarg3; 
  arg4 = (COLORMODE)jarg4; 
  arg5 = (ColorProfile *)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (arg1)->PrepareTransform(arg2,(ColorProfile const *)arg3,arg4,(ColorProfile const *)arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorProfileConvert_Convert(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5, int jarg6) {
  ColorProfileConvert *arg1 = (ColorProfileConvert *) 0 ;
  PIX *arg2 = (PIX *) 0 ;
  PIX *arg3 = (PIX *) 0 ;
  LONG arg4 ;
  LONG arg5 ;
  LONG arg6 ;
  
  arg1 = (ColorProfileConvert *)jarg1; 
  arg2 = (PIX *)jarg2; 
  arg3 = (PIX *)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (LONG)jarg6; 
  ((ColorProfileConvert const *)arg1)->Convert((PIX const *)arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseBitmap_GetClone(void * jarg1) {
  void * jresult ;
  BaseBitmap *arg1 = (BaseBitmap *) 0 ;
  BaseBitmap *result = 0 ;
  
  arg1 = (BaseBitmap *)jarg1; 
  result = (BaseBitmap *)((BaseBitmap const *)arg1)->GetClone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseBitmap_GetClonePart(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  void * jresult ;
  BaseBitmap *arg1 = (BaseBitmap *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  LONG arg4 ;
  LONG arg5 ;
  BaseBitmap *result = 0 ;
  
  arg1 = (BaseBitmap *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (LONG)jarg5; 
  result = (BaseBitmap *)((BaseBitmap const *)arg1)->GetClonePart(arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseBitmap_CopyTo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BaseBitmap *arg1 = (BaseBitmap *) 0 ;
  BaseBitmap *arg2 = (BaseBitmap *) 0 ;
  Bool result;
  
  arg1 = (BaseBitmap *)jarg1; 
  arg2 = (BaseBitmap *)jarg2; 
  result = ((BaseBitmap const *)arg1)->CopyTo(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseBitmap_FlushAll(void * jarg1) {
  BaseBitmap *arg1 = (BaseBitmap *) 0 ;
  
  arg1 = (BaseBitmap *)jarg1; 
  (arg1)->FlushAll();
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseBitmap_GetBw(void * jarg1) {
  int jresult ;
  BaseBitmap *arg1 = (BaseBitmap *) 0 ;
  LONG result;
  
  arg1 = (BaseBitmap *)jarg1; 
  result = ((BaseBitmap const *)arg1)->GetBw();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseBitmap_GetBh(void * jarg1) {
  int jresult ;
  BaseBitmap *arg1 = (BaseBitmap *) 0 ;
  LONG result;
  
  arg1 = (BaseBitmap *)jarg1; 
  result = ((BaseBitmap const *)arg1)->GetBh();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseBitmap_GetBt(void * jarg1) {
  int jresult ;
  BaseBitmap *arg1 = (BaseBitmap *) 0 ;
  LONG result;
  
  arg1 = (BaseBitmap *)jarg1; 
  result = ((BaseBitmap const *)arg1)->GetBt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseBitmap_GetBpz(void * jarg1) {
  int jresult ;
  BaseBitmap *arg1 = (BaseBitmap *) 0 ;
  LONG result;
  
  arg1 = (BaseBitmap *)jarg1; 
  result = ((BaseBitmap const *)arg1)->GetBpz();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseBitmap_GetColorMode(void * jarg1) {
  int jresult ;
  BaseBitmap *arg1 = (BaseBitmap *) 0 ;
  COLORMODE result;
  
  arg1 = (BaseBitmap *)jarg1; 
  result = (COLORMODE)((BaseBitmap const *)arg1)->GetColorMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseBitmap_Init__SWIG_0(void * jarg1, void * jarg2, int jarg3, void * jarg4, void * jarg5) {
  int jresult ;
  BaseBitmap **arg1 = 0 ;
  Filename *arg2 = 0 ;
  LONG arg3 ;
  Bool *arg4 = (Bool *) 0 ;
  BitmapLoaderPlugin **arg5 = (BitmapLoaderPlugin **) 0 ;
  IMAGERESULT result;
  
  arg1 = (BaseBitmap **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseBitmap *& type is null", 0);
    return 0;
  } 
  arg2 = (Filename *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Filename const & type is null", 0);
    return 0;
  } 
  arg3 = (LONG)jarg3; 
  arg4 = (Bool *)jarg4; 
  arg5 = (BitmapLoaderPlugin **)jarg5; 
  result = (IMAGERESULT)BaseBitmap::Init(*arg1,(Filename const &)*arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseBitmap_Init__SWIG_1(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  int jresult ;
  BaseBitmap **arg1 = 0 ;
  Filename *arg2 = 0 ;
  LONG arg3 ;
  Bool *arg4 = (Bool *) 0 ;
  IMAGERESULT result;
  
  arg1 = (BaseBitmap **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseBitmap *& type is null", 0);
    return 0;
  } 
  arg2 = (Filename *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Filename const & type is null", 0);
    return 0;
  } 
  arg3 = (LONG)jarg3; 
  arg4 = (Bool *)jarg4; 
  result = (IMAGERESULT)BaseBitmap::Init(*arg1,(Filename const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseBitmap_Init__SWIG_2(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  BaseBitmap **arg1 = 0 ;
  Filename *arg2 = 0 ;
  LONG arg3 ;
  IMAGERESULT result;
  
  arg1 = (BaseBitmap **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseBitmap *& type is null", 0);
    return 0;
  } 
  arg2 = (Filename *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Filename const & type is null", 0);
    return 0;
  } 
  arg3 = (LONG)jarg3; 
  result = (IMAGERESULT)BaseBitmap::Init(*arg1,(Filename const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseBitmap_Init__SWIG_3(void * jarg1, void * jarg2) {
  int jresult ;
  BaseBitmap **arg1 = 0 ;
  Filename *arg2 = 0 ;
  IMAGERESULT result;
  
  arg1 = (BaseBitmap **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseBitmap *& type is null", 0);
    return 0;
  } 
  arg2 = (Filename *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Filename const & type is null", 0);
    return 0;
  } 
  result = (IMAGERESULT)BaseBitmap::Init(*arg1,(Filename const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseBitmap_Init__SWIG_4(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  int jresult ;
  BaseBitmap *arg1 = (BaseBitmap *) 0 ;
  Filename *arg2 = 0 ;
  LONG arg3 ;
  Bool *arg4 = (Bool *) 0 ;
  IMAGERESULT result;
  
  arg1 = (BaseBitmap *)jarg1; 
  arg2 = (Filename *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Filename const & type is null", 0);
    return 0;
  } 
  arg3 = (LONG)jarg3; 
  arg4 = (Bool *)jarg4; 
  result = (IMAGERESULT)(arg1)->Init((Filename const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseBitmap_Init__SWIG_5(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  BaseBitmap *arg1 = (BaseBitmap *) 0 ;
  Filename *arg2 = 0 ;
  LONG arg3 ;
  IMAGERESULT result;
  
  arg1 = (BaseBitmap *)jarg1; 
  arg2 = (Filename *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Filename const & type is null", 0);
    return 0;
  } 
  arg3 = (LONG)jarg3; 
  result = (IMAGERESULT)(arg1)->Init((Filename const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseBitmap_Init__SWIG_6(void * jarg1, void * jarg2) {
  int jresult ;
  BaseBitmap *arg1 = (BaseBitmap *) 0 ;
  Filename *arg2 = 0 ;
  IMAGERESULT result;
  
  arg1 = (BaseBitmap *)jarg1; 
  arg2 = (Filename *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Filename const & type is null", 0);
    return 0;
  } 
  result = (IMAGERESULT)(arg1)->Init((Filename const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseBitmap_Init__SWIG_7(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  int jresult ;
  BaseBitmap *arg1 = (BaseBitmap *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  LONG arg4 ;
  INITBITMAPFLAGS arg5 ;
  IMAGERESULT result;
  
  arg1 = (BaseBitmap *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (INITBITMAPFLAGS)jarg5; 
  result = (IMAGERESULT)(arg1)->Init(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseBitmap_Init__SWIG_8(void * jarg1, int jarg2, int jarg3, int jarg4) {
  int jresult ;
  BaseBitmap *arg1 = (BaseBitmap *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  LONG arg4 ;
  IMAGERESULT result;
  
  arg1 = (BaseBitmap *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  result = (IMAGERESULT)(arg1)->Init(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseBitmap_Init__SWIG_9(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  BaseBitmap *arg1 = (BaseBitmap *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  IMAGERESULT result;
  
  arg1 = (BaseBitmap *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  result = (IMAGERESULT)(arg1)->Init(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseBitmap_Save(void * jarg1, void * jarg2, int jarg3, void * jarg4, int jarg5) {
  int jresult ;
  BaseBitmap *arg1 = (BaseBitmap *) 0 ;
  Filename *arg2 = 0 ;
  LONG arg3 ;
  BaseContainer *arg4 = (BaseContainer *) 0 ;
  SAVEBIT arg5 ;
  IMAGERESULT result;
  
  arg1 = (BaseBitmap *)jarg1; 
  arg2 = (Filename *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Filename const & type is null", 0);
    return 0;
  } 
  arg3 = (LONG)jarg3; 
  arg4 = (BaseContainer *)jarg4; 
  arg5 = (SAVEBIT)jarg5; 
  result = (IMAGERESULT)((BaseBitmap const *)arg1)->Save((Filename const &)*arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseBitmap_SetCMAP(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  BaseBitmap *arg1 = (BaseBitmap *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  LONG arg4 ;
  LONG arg5 ;
  
  arg1 = (BaseBitmap *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (LONG)jarg5; 
  (arg1)->SetCMAP(arg2,arg3,arg4,arg5);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseBitmap_SetPixelCnt(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5, int jarg6, int jarg7, int jarg8) {
  unsigned int jresult ;
  BaseBitmap *arg1 = (BaseBitmap *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  LONG arg4 ;
  UCHAR *arg5 = (UCHAR *) 0 ;
  LONG arg6 ;
  COLORMODE arg7 ;
  PIXELCNT arg8 ;
  Bool result;
  
  arg1 = (BaseBitmap *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (UCHAR *)jarg5; 
  arg6 = (LONG)jarg6; 
  arg7 = (COLORMODE)jarg7; 
  arg8 = (PIXELCNT)jarg8; 
  result = (arg1)->SetPixelCnt(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseBitmap_GetPixelCnt__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5, int jarg6, int jarg7, int jarg8, void * jarg9) {
  BaseBitmap *arg1 = (BaseBitmap *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  LONG arg4 ;
  UCHAR *arg5 = (UCHAR *) 0 ;
  LONG arg6 ;
  COLORMODE arg7 ;
  PIXELCNT arg8 ;
  ColorProfileConvert *arg9 = (ColorProfileConvert *) 0 ;
  
  arg1 = (BaseBitmap *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (UCHAR *)jarg5; 
  arg6 = (LONG)jarg6; 
  arg7 = (COLORMODE)jarg7; 
  arg8 = (PIXELCNT)jarg8; 
  arg9 = (ColorProfileConvert *)jarg9; 
  ((BaseBitmap const *)arg1)->GetPixelCnt(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseBitmap_GetPixelCnt__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5, int jarg6, int jarg7, int jarg8) {
  BaseBitmap *arg1 = (BaseBitmap *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  LONG arg4 ;
  UCHAR *arg5 = (UCHAR *) 0 ;
  LONG arg6 ;
  COLORMODE arg7 ;
  PIXELCNT arg8 ;
  
  arg1 = (BaseBitmap *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (UCHAR *)jarg5; 
  arg6 = (LONG)jarg6; 
  arg7 = (COLORMODE)jarg7; 
  arg8 = (PIXELCNT)jarg8; 
  ((BaseBitmap const *)arg1)->GetPixelCnt(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseBitmap_ScaleIt(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5) {
  BaseBitmap *arg1 = (BaseBitmap *) 0 ;
  BaseBitmap *arg2 = (BaseBitmap *) 0 ;
  LONG arg3 ;
  Bool arg4 ;
  Bool arg5 ;
  
  arg1 = (BaseBitmap *)jarg1; 
  arg2 = (BaseBitmap *)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  ((BaseBitmap const *)arg1)->ScaleIt(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseBitmap_ScaleBicubic(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6, int jarg7, int jarg8, int jarg9, int jarg10) {
  BaseBitmap *arg1 = (BaseBitmap *) 0 ;
  BaseBitmap *arg2 = (BaseBitmap *) 0 ;
  LONG arg3 ;
  LONG arg4 ;
  LONG arg5 ;
  LONG arg6 ;
  LONG arg7 ;
  LONG arg8 ;
  LONG arg9 ;
  LONG arg10 ;
  
  arg1 = (BaseBitmap *)jarg1; 
  arg2 = (BaseBitmap *)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (LONG)jarg6; 
  arg7 = (LONG)jarg7; 
  arg8 = (LONG)jarg8; 
  arg9 = (LONG)jarg9; 
  arg10 = (LONG)jarg10; 
  ((BaseBitmap const *)arg1)->ScaleBicubic(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseBitmap_SetPen(void * jarg1, int jarg2, int jarg3, int jarg4) {
  BaseBitmap *arg1 = (BaseBitmap *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  LONG arg4 ;
  
  arg1 = (BaseBitmap *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  (arg1)->SetPen(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseBitmap_Clear__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4) {
  BaseBitmap *arg1 = (BaseBitmap *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  LONG arg4 ;
  
  arg1 = (BaseBitmap *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  (arg1)->Clear(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseBitmap_Clear__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, int jarg7, int jarg8) {
  BaseBitmap *arg1 = (BaseBitmap *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  LONG arg4 ;
  LONG arg5 ;
  LONG arg6 ;
  LONG arg7 ;
  LONG arg8 ;
  
  arg1 = (BaseBitmap *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (LONG)jarg6; 
  arg7 = (LONG)jarg7; 
  arg8 = (LONG)jarg8; 
  (arg1)->Clear(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseBitmap_Line(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  BaseBitmap *arg1 = (BaseBitmap *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  LONG arg4 ;
  LONG arg5 ;
  
  arg1 = (BaseBitmap *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (LONG)jarg5; 
  (arg1)->Line(arg2,arg3,arg4,arg5);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseBitmap_SetPixel(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6) {
  unsigned int jresult ;
  BaseBitmap *arg1 = (BaseBitmap *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  LONG arg4 ;
  LONG arg5 ;
  LONG arg6 ;
  Bool result;
  
  arg1 = (BaseBitmap *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (LONG)jarg6; 
  result = (arg1)->SetPixel(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseBitmap_GetPixel(void * jarg1, int jarg2, int jarg3, void * jarg4, void * jarg5, void * jarg6) {
  BaseBitmap *arg1 = (BaseBitmap *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  UWORD *arg4 = (UWORD *) 0 ;
  UWORD *arg5 = (UWORD *) 0 ;
  UWORD *arg6 = (UWORD *) 0 ;
  
  arg1 = (BaseBitmap *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (UWORD *)jarg4; 
  arg5 = (UWORD *)jarg5; 
  arg6 = (UWORD *)jarg6; 
  ((BaseBitmap const *)arg1)->GetPixel(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseBitmap_AddChannel(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  BaseBitmap *arg1 = (BaseBitmap *) 0 ;
  Bool arg2 ;
  Bool arg3 ;
  BaseBitmap *result = 0 ;
  
  arg1 = (BaseBitmap *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = (BaseBitmap *)(arg1)->AddChannel(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseBitmap_RemoveChannel(void * jarg1, void * jarg2) {
  BaseBitmap *arg1 = (BaseBitmap *) 0 ;
  BaseBitmap *arg2 = (BaseBitmap *) 0 ;
  
  arg1 = (BaseBitmap *)jarg1; 
  arg2 = (BaseBitmap *)jarg2; 
  (arg1)->RemoveChannel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseBitmap_GetAlphaPixel(void * jarg1, void * jarg2, int jarg3, int jarg4, void * jarg5) {
  BaseBitmap *arg1 = (BaseBitmap *) 0 ;
  BaseBitmap *arg2 = (BaseBitmap *) 0 ;
  LONG arg3 ;
  LONG arg4 ;
  UWORD *arg5 = (UWORD *) 0 ;
  
  arg1 = (BaseBitmap *)jarg1; 
  arg2 = (BaseBitmap *)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (UWORD *)jarg5; 
  ((BaseBitmap const *)arg1)->GetAlphaPixel(arg2,arg3,arg4,arg5);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseBitmap_SetAlphaPixel(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5) {
  unsigned int jresult ;
  BaseBitmap *arg1 = (BaseBitmap *) 0 ;
  BaseBitmap *arg2 = (BaseBitmap *) 0 ;
  LONG arg3 ;
  LONG arg4 ;
  LONG arg5 ;
  Bool result;
  
  arg1 = (BaseBitmap *)jarg1; 
  arg2 = (BaseBitmap *)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (LONG)jarg5; 
  result = (arg1)->SetAlphaPixel(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseBitmap_GetInternalChannel__SWIG_0(void * jarg1) {
  void * jresult ;
  BaseBitmap *arg1 = (BaseBitmap *) 0 ;
  BaseBitmap *result = 0 ;
  
  arg1 = (BaseBitmap *)jarg1; 
  result = (BaseBitmap *)((BaseBitmap const *)arg1)->GetInternalChannel();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseBitmap_GetChannelCount(void * jarg1) {
  int jresult ;
  BaseBitmap *arg1 = (BaseBitmap *) 0 ;
  LONG result;
  
  arg1 = (BaseBitmap *)jarg1; 
  result = ((BaseBitmap const *)arg1)->GetChannelCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseBitmap_GetChannelNum__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  BaseBitmap *arg1 = (BaseBitmap *) 0 ;
  LONG arg2 ;
  BaseBitmap *result = 0 ;
  
  arg1 = (BaseBitmap *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (BaseBitmap *)((BaseBitmap const *)arg1)->GetChannelNum(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseBitmap_IsMultipassBitmap(void * jarg1) {
  unsigned int jresult ;
  BaseBitmap *arg1 = (BaseBitmap *) 0 ;
  Bool result;
  
  arg1 = (BaseBitmap *)jarg1; 
  result = ((BaseBitmap const *)arg1)->IsMultipassBitmap();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseBitmap_SetData(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  BaseBitmap *arg1 = (BaseBitmap *) 0 ;
  LONG arg2 ;
  GeData *arg3 = 0 ;
  Bool result;
  
  arg1 = (BaseBitmap *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (GeData *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeData const & type is null", 0);
    return 0;
  } 
  result = (arg1)->SetData(arg2,(GeData const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseBitmap_GetData(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  BaseBitmap *arg1 = (BaseBitmap *) 0 ;
  LONG arg2 ;
  GeData *arg3 = 0 ;
  GeData result;
  
  arg1 = (BaseBitmap *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (GeData *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeData const & type is null", 0);
    return 0;
  } 
  result = ((BaseBitmap const *)arg1)->GetData(arg2,(GeData const &)*arg3);
  jresult = new GeData((const GeData &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseBitmap_Alloc() {
  void * jresult ;
  BaseBitmap *result = 0 ;
  
  result = (BaseBitmap *)BaseBitmap::Alloc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseBitmap_Free(void * jarg1) {
  BaseBitmap **arg1 = 0 ;
  
  arg1 = (BaseBitmap **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseBitmap *& type is null", 0);
    return ;
  } 
  BaseBitmap::Free(*arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseBitmap_GetDirty(void * jarg1) {
  void * jresult ;
  BaseBitmap *arg1 = (BaseBitmap *) 0 ;
  ULONG result;
  
  arg1 = (BaseBitmap *)jarg1; 
  result = ((BaseBitmap const *)arg1)->GetDirty();
  jresult = new ULONG((const ULONG &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseBitmap_SetDirty(void * jarg1) {
  BaseBitmap *arg1 = (BaseBitmap *) 0 ;
  
  arg1 = (BaseBitmap *)jarg1; 
  (arg1)->SetDirty();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseBitmap_CopyPartTo(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6) {
  unsigned int jresult ;
  BaseBitmap *arg1 = (BaseBitmap *) 0 ;
  BaseBitmap *arg2 = (BaseBitmap *) 0 ;
  LONG arg3 ;
  LONG arg4 ;
  LONG arg5 ;
  LONG arg6 ;
  Bool result;
  
  arg1 = (BaseBitmap *)jarg1; 
  arg2 = (BaseBitmap *)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (LONG)jarg6; 
  result = ((BaseBitmap const *)arg1)->CopyPartTo(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseBitmap_GetMemoryInfo(void * jarg1) {
  void * jresult ;
  BaseBitmap *arg1 = (BaseBitmap *) 0 ;
  VLONG result;
  
  arg1 = (BaseBitmap *)jarg1; 
  result = ((BaseBitmap const *)arg1)->GetMemoryInfo();
  jresult = new VLONG((const VLONG &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseBitmap_GetUpdateRegionBitmap__SWIG_0(void * jarg1) {
  void * jresult ;
  BaseBitmap *arg1 = (BaseBitmap *) 0 ;
  BaseBitmap *result = 0 ;
  
  arg1 = (BaseBitmap *)jarg1; 
  result = (BaseBitmap *)(arg1)->GetUpdateRegionBitmap();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseBitmap_SetColorProfile(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BaseBitmap *arg1 = (BaseBitmap *) 0 ;
  ColorProfile *arg2 = (ColorProfile *) 0 ;
  Bool result;
  
  arg1 = (BaseBitmap *)jarg1; 
  arg2 = (ColorProfile *)jarg2; 
  result = (arg1)->SetColorProfile((ColorProfile const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseBitmap_GetColorProfile(void * jarg1) {
  void * jresult ;
  BaseBitmap *arg1 = (BaseBitmap *) 0 ;
  ColorProfile *result = 0 ;
  
  arg1 = (BaseBitmap *)jarg1; 
  result = (ColorProfile *)((BaseBitmap const *)arg1)->GetColorProfile();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseBitmap_AutoBitmap__SWIG_0(char * /* constString&_ctype */ jarg1) {
  void * jresult ;
  String *arg1 = 0 ;
  BaseBitmap *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (BaseBitmap *)BaseBitmap_AutoBitmap__SWIG_0((String const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseBitmap_AutoBitmap__SWIG_1(int jarg1) {
  void * jresult ;
  LONG arg1 ;
  BaseBitmap *result = 0 ;
  
  arg1 = (LONG)jarg1; 
  result = (BaseBitmap *)BaseBitmap_AutoBitmap__SWIG_1(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MultipassBitmap_GetLayerCount(void * jarg1) {
  int jresult ;
  MultipassBitmap *arg1 = (MultipassBitmap *) 0 ;
  LONG result;
  
  arg1 = (MultipassBitmap *)jarg1; 
  result = ((MultipassBitmap const *)arg1)->GetLayerCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MultipassBitmap_GetAlphaLayerCount(void * jarg1) {
  int jresult ;
  MultipassBitmap *arg1 = (MultipassBitmap *) 0 ;
  LONG result;
  
  arg1 = (MultipassBitmap *)jarg1; 
  result = ((MultipassBitmap const *)arg1)->GetAlphaLayerCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MultipassBitmap_GetHiddenLayerCount(void * jarg1) {
  int jresult ;
  MultipassBitmap *arg1 = (MultipassBitmap *) 0 ;
  LONG result;
  
  arg1 = (MultipassBitmap *)jarg1; 
  result = ((MultipassBitmap const *)arg1)->GetHiddenLayerCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MultipassBitmap_GetSelectedLayer(void * jarg1) {
  void * jresult ;
  MultipassBitmap *arg1 = (MultipassBitmap *) 0 ;
  MultipassBitmap *result = 0 ;
  
  arg1 = (MultipassBitmap *)jarg1; 
  result = (MultipassBitmap *)(arg1)->GetSelectedLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MultipassBitmap_GetLayerNum(void * jarg1, int jarg2) {
  void * jresult ;
  MultipassBitmap *arg1 = (MultipassBitmap *) 0 ;
  LONG arg2 ;
  MultipassBitmap *result = 0 ;
  
  arg1 = (MultipassBitmap *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (MultipassBitmap *)(arg1)->GetLayerNum(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MultipassBitmap_GetAlphaLayerNum(void * jarg1, int jarg2) {
  void * jresult ;
  MultipassBitmap *arg1 = (MultipassBitmap *) 0 ;
  LONG arg2 ;
  MultipassBitmap *result = 0 ;
  
  arg1 = (MultipassBitmap *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (MultipassBitmap *)(arg1)->GetAlphaLayerNum(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MultipassBitmap_GetHiddenLayerNum(void * jarg1, int jarg2) {
  void * jresult ;
  MultipassBitmap *arg1 = (MultipassBitmap *) 0 ;
  LONG arg2 ;
  MultipassBitmap *result = 0 ;
  
  arg1 = (MultipassBitmap *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (MultipassBitmap *)(arg1)->GetHiddenLayerNum(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MultipassBitmap_AddLayer__SWIG_0(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  void * jresult ;
  MultipassBitmap *arg1 = (MultipassBitmap *) 0 ;
  MultipassBitmap *arg2 = (MultipassBitmap *) 0 ;
  COLORMODE arg3 ;
  Bool arg4 ;
  MultipassBitmap *result = 0 ;
  
  arg1 = (MultipassBitmap *)jarg1; 
  arg2 = (MultipassBitmap *)jarg2; 
  arg3 = (COLORMODE)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (MultipassBitmap *)(arg1)->AddLayer(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MultipassBitmap_AddLayer__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  MultipassBitmap *arg1 = (MultipassBitmap *) 0 ;
  MultipassBitmap *arg2 = (MultipassBitmap *) 0 ;
  COLORMODE arg3 ;
  MultipassBitmap *result = 0 ;
  
  arg1 = (MultipassBitmap *)jarg1; 
  arg2 = (MultipassBitmap *)jarg2; 
  arg3 = (COLORMODE)jarg3; 
  result = (MultipassBitmap *)(arg1)->AddLayer(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MultipassBitmap_AddFolder__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  MultipassBitmap *arg1 = (MultipassBitmap *) 0 ;
  MultipassBitmap *arg2 = (MultipassBitmap *) 0 ;
  Bool arg3 ;
  MultipassBitmap *result = 0 ;
  
  arg1 = (MultipassBitmap *)jarg1; 
  arg2 = (MultipassBitmap *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (MultipassBitmap *)(arg1)->AddFolder(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MultipassBitmap_AddFolder__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  MultipassBitmap *arg1 = (MultipassBitmap *) 0 ;
  MultipassBitmap *arg2 = (MultipassBitmap *) 0 ;
  MultipassBitmap *result = 0 ;
  
  arg1 = (MultipassBitmap *)jarg1; 
  arg2 = (MultipassBitmap *)jarg2; 
  result = (MultipassBitmap *)(arg1)->AddFolder(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MultipassBitmap_AddAlpha(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  MultipassBitmap *arg1 = (MultipassBitmap *) 0 ;
  MultipassBitmap *arg2 = (MultipassBitmap *) 0 ;
  COLORMODE arg3 ;
  MultipassBitmap *result = 0 ;
  
  arg1 = (MultipassBitmap *)jarg1; 
  arg2 = (MultipassBitmap *)jarg2; 
  arg3 = (COLORMODE)jarg3; 
  result = (MultipassBitmap *)(arg1)->AddAlpha(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MultipassBitmap_DeleteLayer(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MultipassBitmap *arg1 = (MultipassBitmap *) 0 ;
  MultipassBitmap **arg2 = 0 ;
  Bool result;
  
  arg1 = (MultipassBitmap *)jarg1; 
  arg2 = (MultipassBitmap **)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MultipassBitmap *& type is null", 0);
    return 0;
  } 
  result = (arg1)->DeleteLayer(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MultipassBitmap_FindUserID__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  MultipassBitmap *arg1 = (MultipassBitmap *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  MultipassBitmap *result = 0 ;
  
  arg1 = (MultipassBitmap *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  result = (MultipassBitmap *)(arg1)->FindUserID(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MultipassBitmap_FindUserID__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  MultipassBitmap *arg1 = (MultipassBitmap *) 0 ;
  LONG arg2 ;
  MultipassBitmap *result = 0 ;
  
  arg1 = (MultipassBitmap *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (MultipassBitmap *)(arg1)->FindUserID(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MultipassBitmap_ClearImageData(void * jarg1) {
  MultipassBitmap *arg1 = (MultipassBitmap *) 0 ;
  
  arg1 = (MultipassBitmap *)jarg1; 
  (arg1)->ClearImageData();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MultipassBitmap_GetPaintBitmap(void * jarg1) {
  void * jresult ;
  MultipassBitmap *arg1 = (MultipassBitmap *) 0 ;
  PaintBitmap *result = 0 ;
  
  arg1 = (MultipassBitmap *)jarg1; 
  result = (PaintBitmap *)(arg1)->GetPaintBitmap();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MultipassBitmap_FreeHiddenLayers(void * jarg1) {
  MultipassBitmap *arg1 = (MultipassBitmap *) 0 ;
  
  arg1 = (MultipassBitmap *)jarg1; 
  (arg1)->FreeHiddenLayers();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MultipassBitmap_SetMasterAlpha(void * jarg1, void * jarg2) {
  MultipassBitmap *arg1 = (MultipassBitmap *) 0 ;
  BaseBitmap *arg2 = (BaseBitmap *) 0 ;
  
  arg1 = (MultipassBitmap *)jarg1; 
  arg2 = (BaseBitmap *)jarg2; 
  (arg1)->SetMasterAlpha(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MultipassBitmap_GetParameter(void * jarg1, int jarg2) {
  void * jresult ;
  MultipassBitmap *arg1 = (MultipassBitmap *) 0 ;
  MPBTYPE arg2 ;
  GeData result;
  
  arg1 = (MultipassBitmap *)jarg1; 
  arg2 = (MPBTYPE)jarg2; 
  result = ((MultipassBitmap const *)arg1)->GetParameter(arg2);
  jresult = new GeData((const GeData &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MultipassBitmap_SetParameter(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  MultipassBitmap *arg1 = (MultipassBitmap *) 0 ;
  MPBTYPE arg2 ;
  GeData *arg3 = 0 ;
  Bool result;
  
  arg1 = (MultipassBitmap *)jarg1; 
  arg2 = (MPBTYPE)jarg2; 
  arg3 = (GeData *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeData const & type is null", 0);
    return 0;
  } 
  result = (arg1)->SetParameter(arg2,(GeData const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MultipassBitmap_Alloc(int jarg1, int jarg2, int jarg3) {
  void * jresult ;
  LONG arg1 ;
  LONG arg2 ;
  COLORMODE arg3 ;
  MultipassBitmap *result = 0 ;
  
  arg1 = (LONG)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (COLORMODE)jarg3; 
  result = (MultipassBitmap *)MultipassBitmap::Alloc(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MultipassBitmap_AllocWrapper(void * jarg1) {
  void * jresult ;
  BaseBitmap *arg1 = (BaseBitmap *) 0 ;
  MultipassBitmap *result = 0 ;
  
  arg1 = (BaseBitmap *)jarg1; 
  result = (MultipassBitmap *)MultipassBitmap::AllocWrapper(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MultipassBitmap_Free(void * jarg1) {
  MultipassBitmap **arg1 = 0 ;
  
  arg1 = (MultipassBitmap **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MultipassBitmap *& type is null", 0);
    return ;
  } 
  MultipassBitmap::Free(*arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MultipassBitmap_GetLayers__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  MultipassBitmap *arg1 = (MultipassBitmap *) 0 ;
  GeTempDynArray< BaseBitmap > *arg2 = 0 ;
  MPB_GETLAYERS arg3 ;
  Bool result;
  
  arg1 = (MultipassBitmap *)jarg1; 
  arg2 = (GeTempDynArray< BaseBitmap > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeTempDynArray< BaseBitmap > & type is null", 0);
    return 0;
  } 
  arg3 = (MPB_GETLAYERS)jarg3; 
  result = (arg1)->GetLayers(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MultipassBitmap_GetLayers__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MultipassBitmap *arg1 = (MultipassBitmap *) 0 ;
  GeTempDynArray< BaseBitmap > *arg2 = 0 ;
  Bool result;
  
  arg1 = (MultipassBitmap *)jarg1; 
  arg2 = (GeTempDynArray< BaseBitmap > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeTempDynArray< BaseBitmap > & type is null", 0);
    return 0;
  } 
  result = (arg1)->GetLayers(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MultipassBitmap_GetLayers__SWIG_2(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  MultipassBitmap *arg1 = (MultipassBitmap *) 0 ;
  GeTempDynArray< MultipassBitmap > *arg2 = 0 ;
  MPB_GETLAYERS arg3 ;
  Bool result;
  
  arg1 = (MultipassBitmap *)jarg1; 
  arg2 = (GeTempDynArray< MultipassBitmap > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeTempDynArray< MultipassBitmap > & type is null", 0);
    return 0;
  } 
  arg3 = (MPB_GETLAYERS)jarg3; 
  result = (arg1)->GetLayers(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MultipassBitmap_GetLayers__SWIG_3(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MultipassBitmap *arg1 = (MultipassBitmap *) 0 ;
  GeTempDynArray< MultipassBitmap > *arg2 = 0 ;
  Bool result;
  
  arg1 = (MultipassBitmap *)jarg1; 
  arg2 = (GeTempDynArray< MultipassBitmap > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeTempDynArray< MultipassBitmap > & type is null", 0);
    return 0;
  } 
  result = (arg1)->GetLayers(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MultipassBitmap_SetTempColorProfile(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  MultipassBitmap *arg1 = (MultipassBitmap *) 0 ;
  ColorProfile *arg2 = (ColorProfile *) 0 ;
  Bool arg3 ;
  Bool result;
  
  arg1 = (MultipassBitmap *)jarg1; 
  arg2 = (ColorProfile *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->SetTempColorProfile((ColorProfile const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseBitmapLink_Get(void * jarg1) {
  void * jresult ;
  BaseBitmapLink *arg1 = (BaseBitmapLink *) 0 ;
  BaseBitmap *result = 0 ;
  
  arg1 = (BaseBitmapLink *)jarg1; 
  result = (BaseBitmap *)((BaseBitmapLink const *)arg1)->Get();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseBitmapLink_Set(void * jarg1, void * jarg2) {
  BaseBitmapLink *arg1 = (BaseBitmapLink *) 0 ;
  BaseBitmap *arg2 = (BaseBitmap *) 0 ;
  
  arg1 = (BaseBitmapLink *)jarg1; 
  arg2 = (BaseBitmap *)jarg2; 
  (arg1)->Set(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseBitmapLink_Alloc() {
  void * jresult ;
  BaseBitmapLink *result = 0 ;
  
  result = (BaseBitmapLink *)BaseBitmapLink::Alloc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseBitmapLink_Free(void * jarg1) {
  BaseBitmapLink **arg1 = 0 ;
  
  arg1 = (BaseBitmapLink **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseBitmapLink *& type is null", 0);
    return ;
  } 
  BaseBitmapLink::Free(*arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MovieLoader_Alloc() {
  void * jresult ;
  MovieLoader *result = 0 ;
  
  result = (MovieLoader *)MovieLoader::Alloc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MovieLoader_Free(void * jarg1) {
  MovieLoader **arg1 = 0 ;
  
  arg1 = (MovieLoader **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MovieLoader *& type is null", 0);
    return ;
  } 
  MovieLoader::Free(*arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_MovieLoader_Open(void * jarg1, void * jarg2) {
  int jresult ;
  MovieLoader *arg1 = (MovieLoader *) 0 ;
  Filename *arg2 = 0 ;
  IMAGERESULT result;
  
  arg1 = (MovieLoader *)jarg1; 
  arg2 = (Filename *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Filename const & type is null", 0);
    return 0;
  } 
  result = (IMAGERESULT)(arg1)->Open((Filename const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MovieLoader_Close(void * jarg1) {
  MovieLoader *arg1 = (MovieLoader *) 0 ;
  
  arg1 = (MovieLoader *)jarg1; 
  (arg1)->Close();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MovieLoader_Read__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  MovieLoader *arg1 = (MovieLoader *) 0 ;
  LONG arg2 ;
  LONG *arg3 = (LONG *) 0 ;
  BaseBitmap *result = 0 ;
  
  arg1 = (MovieLoader *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG *)jarg3; 
  result = (BaseBitmap *)(arg1)->Read(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MovieLoader_Read__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  MovieLoader *arg1 = (MovieLoader *) 0 ;
  LONG arg2 ;
  BaseBitmap *result = 0 ;
  
  arg1 = (MovieLoader *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (BaseBitmap *)(arg1)->Read(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MovieLoader_Read__SWIG_2(void * jarg1) {
  void * jresult ;
  MovieLoader *arg1 = (MovieLoader *) 0 ;
  BaseBitmap *result = 0 ;
  
  arg1 = (MovieLoader *)jarg1; 
  result = (BaseBitmap *)(arg1)->Read();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MovieLoader_GetInfo(void * jarg1, void * jarg2) {
  int jresult ;
  MovieLoader *arg1 = (MovieLoader *) 0 ;
  Real *arg2 = (Real *) 0 ;
  LONG result;
  
  arg1 = (MovieLoader *)jarg1; 
  arg2 = (Real *)jarg2; 
  result = (arg1)->GetInfo(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MovieSaver_Open__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5, void * jarg6, int jarg7, void * jarg8) {
  int jresult ;
  MovieSaver *arg1 = (MovieSaver *) 0 ;
  Filename *arg2 = 0 ;
  BaseBitmap *arg3 = (BaseBitmap *) 0 ;
  LONG arg4 ;
  LONG arg5 ;
  BaseContainer *arg6 = (BaseContainer *) 0 ;
  SAVEBIT arg7 ;
  BaseSound *arg8 = (BaseSound *) 0 ;
  IMAGERESULT result;
  
  arg1 = (MovieSaver *)jarg1; 
  arg2 = (Filename *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Filename const & type is null", 0);
    return 0;
  } 
  arg3 = (BaseBitmap *)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (BaseContainer *)jarg6; 
  arg7 = (SAVEBIT)jarg7; 
  arg8 = (BaseSound *)jarg8; 
  result = (IMAGERESULT)(arg1)->Open((Filename const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MovieSaver_Open__SWIG_1(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5, void * jarg6, int jarg7) {
  int jresult ;
  MovieSaver *arg1 = (MovieSaver *) 0 ;
  Filename *arg2 = 0 ;
  BaseBitmap *arg3 = (BaseBitmap *) 0 ;
  LONG arg4 ;
  LONG arg5 ;
  BaseContainer *arg6 = (BaseContainer *) 0 ;
  SAVEBIT arg7 ;
  IMAGERESULT result;
  
  arg1 = (MovieSaver *)jarg1; 
  arg2 = (Filename *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Filename const & type is null", 0);
    return 0;
  } 
  arg3 = (BaseBitmap *)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (BaseContainer *)jarg6; 
  arg7 = (SAVEBIT)jarg7; 
  result = (IMAGERESULT)(arg1)->Open((Filename const &)*arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MovieSaver_Write(void * jarg1, void * jarg2) {
  int jresult ;
  MovieSaver *arg1 = (MovieSaver *) 0 ;
  BaseBitmap *arg2 = (BaseBitmap *) 0 ;
  IMAGERESULT result;
  
  arg1 = (MovieSaver *)jarg1; 
  arg2 = (BaseBitmap *)jarg2; 
  result = (IMAGERESULT)(arg1)->Write(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MovieSaver_Close(void * jarg1) {
  MovieSaver *arg1 = (MovieSaver *) 0 ;
  
  arg1 = (MovieSaver *)jarg1; 
  (arg1)->Close();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MovieSaver_Choose(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  MovieSaver *arg1 = (MovieSaver *) 0 ;
  LONG arg2 ;
  BaseContainer *arg3 = (BaseContainer *) 0 ;
  Bool result;
  
  arg1 = (MovieSaver *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (BaseContainer *)jarg3; 
  result = (arg1)->Choose(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MovieSaver_Alloc() {
  void * jresult ;
  MovieSaver *result = 0 ;
  
  result = (MovieSaver *)MovieSaver::Alloc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MovieSaver_Free(void * jarg1) {
  MovieSaver **arg1 = 0 ;
  
  arg1 = (MovieSaver **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MovieSaver *& type is null", 0);
    return ;
  } 
  MovieSaver::Free(*arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BitmapLoaderPlugin_BmIdentify(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  BitmapLoaderPlugin *arg1 = (BitmapLoaderPlugin *) 0 ;
  Filename *arg2 = 0 ;
  UCHAR *arg3 = (UCHAR *) 0 ;
  LONG arg4 ;
  Bool result;
  
  arg1 = (BitmapLoaderPlugin *)jarg1; 
  arg2 = (Filename *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Filename const & type is null", 0);
    return 0;
  } 
  arg3 = (UCHAR *)jarg3; 
  arg4 = (LONG)jarg4; 
  result = (arg1)->BmIdentify((Filename const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BitmapLoaderPlugin_BmLoad(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  int jresult ;
  BitmapLoaderPlugin *arg1 = (BitmapLoaderPlugin *) 0 ;
  Filename *arg2 = 0 ;
  BaseBitmap *arg3 = (BaseBitmap *) 0 ;
  LONG arg4 ;
  IMAGERESULT result;
  
  arg1 = (BitmapLoaderPlugin *)jarg1; 
  arg2 = (Filename *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Filename const & type is null", 0);
    return 0;
  } 
  arg3 = (BaseBitmap *)jarg3; 
  arg4 = (LONG)jarg4; 
  result = (IMAGERESULT)(arg1)->BmLoad((Filename const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BitmapLoaderPlugin_BmGetSaver(void * jarg1) {
  int jresult ;
  BitmapLoaderPlugin *arg1 = (BitmapLoaderPlugin *) 0 ;
  LONG result;
  
  arg1 = (BitmapLoaderPlugin *)jarg1; 
  result = (arg1)->BmGetSaver();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BitmapLoaderPlugin_BmGetInformation(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  BitmapLoaderPlugin *arg1 = (BitmapLoaderPlugin *) 0 ;
  Filename *arg2 = 0 ;
  LONG *arg3 = (LONG *) 0 ;
  Real *arg4 = (Real *) 0 ;
  Bool result;
  
  arg1 = (BitmapLoaderPlugin *)jarg1; 
  arg2 = (Filename *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Filename const & type is null", 0);
    return 0;
  } 
  arg3 = (LONG *)jarg3; 
  arg4 = (Real *)jarg4; 
  result = (arg1)->BmGetInformation((Filename const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BitmapLoaderPlugin_BmLoadAnimated(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  int jresult ;
  BitmapLoaderPlugin *arg1 = (BitmapLoaderPlugin *) 0 ;
  BitmapLoaderAnimatedData *arg2 = (BitmapLoaderAnimatedData *) 0 ;
  BITMAPLOADERACTION arg3 ;
  BaseBitmap *arg4 = (BaseBitmap *) 0 ;
  LONG arg5 ;
  BITMAPLOADERACTION *argp3 ;
  IMAGERESULT result;
  
  arg1 = (BitmapLoaderPlugin *)jarg1; 
  arg2 = (BitmapLoaderAnimatedData *)jarg2; 
  argp3 = (BITMAPLOADERACTION *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BITMAPLOADERACTION", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (BaseBitmap *)jarg4; 
  arg5 = (LONG)jarg5; 
  result = (IMAGERESULT)(arg1)->BmLoadAnimated(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BitmapLoaderPlugin_BmExtractSound(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  BitmapLoaderPlugin *arg1 = (BitmapLoaderPlugin *) 0 ;
  BitmapLoaderAnimatedData *arg2 = (BitmapLoaderAnimatedData *) 0 ;
  BaseSound *arg3 = (BaseSound *) 0 ;
  IMAGERESULT result;
  
  arg1 = (BitmapLoaderPlugin *)jarg1; 
  arg2 = (BitmapLoaderAnimatedData *)jarg2; 
  arg3 = (BaseSound *)jarg3; 
  result = (IMAGERESULT)(arg1)->BmExtractSound(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BitmapSaverPlugin_BmGetDetails(void * jarg1, void * jarg2, void * jarg3) {
  BitmapSaverPlugin *arg1 = (BitmapSaverPlugin *) 0 ;
  LONG *arg2 = (LONG *) 0 ;
  String *arg3 = (String *) 0 ;
  
  arg1 = (BitmapSaverPlugin *)jarg1; 
  arg2 = (LONG *)jarg2; 
  arg3 = (String *)jarg3; 
  (arg1)->BmGetDetails(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BitmapSaverPlugin_BmEdit(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BitmapSaverPlugin *arg1 = (BitmapSaverPlugin *) 0 ;
  BaseContainer *arg2 = (BaseContainer *) 0 ;
  Bool result;
  
  arg1 = (BitmapSaverPlugin *)jarg1; 
  arg2 = (BaseContainer *)jarg2; 
  result = (arg1)->BmEdit(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BitmapSaverPlugin_BmGetMaxResolution(void * jarg1, unsigned int jarg2) {
  int jresult ;
  BitmapSaverPlugin *arg1 = (BitmapSaverPlugin *) 0 ;
  Bool arg2 ;
  LONG result;
  
  arg1 = (BitmapSaverPlugin *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (arg1)->BmGetMaxResolution(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BitmapSaverPlugin_BmSave(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  int jresult ;
  BitmapSaverPlugin *arg1 = (BitmapSaverPlugin *) 0 ;
  Filename *arg2 = 0 ;
  BaseBitmap *arg3 = (BaseBitmap *) 0 ;
  BaseContainer *arg4 = (BaseContainer *) 0 ;
  SAVEBIT arg5 ;
  IMAGERESULT result;
  
  arg1 = (BitmapSaverPlugin *)jarg1; 
  arg2 = (Filename *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Filename const & type is null", 0);
    return 0;
  } 
  arg3 = (BaseBitmap *)jarg3; 
  arg4 = (BaseContainer *)jarg4; 
  arg5 = (SAVEBIT)jarg5; 
  result = (IMAGERESULT)(arg1)->BmSave((Filename const &)*arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BitmapSaverPlugin_BmOpen(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, int jarg6, int jarg7) {
  int jresult ;
  BitmapSaverPlugin *arg1 = (BitmapSaverPlugin *) 0 ;
  PluginMovieData **arg2 = 0 ;
  Filename *arg3 = 0 ;
  BaseBitmap *arg4 = (BaseBitmap *) 0 ;
  BaseContainer *arg5 = (BaseContainer *) 0 ;
  SAVEBIT arg6 ;
  LONG arg7 ;
  IMAGERESULT result;
  
  arg1 = (BitmapSaverPlugin *)jarg1; 
  arg2 = (PluginMovieData **)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PluginMovieData *& type is null", 0);
    return 0;
  } 
  arg3 = (Filename *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Filename const & type is null", 0);
    return 0;
  } 
  arg4 = (BaseBitmap *)jarg4; 
  arg5 = (BaseContainer *)jarg5; 
  arg6 = (SAVEBIT)jarg6; 
  arg7 = (LONG)jarg7; 
  result = (IMAGERESULT)(arg1)->BmOpen(*arg2,(Filename const &)*arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BitmapSaverPlugin_BmWrite(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  BitmapSaverPlugin *arg1 = (BitmapSaverPlugin *) 0 ;
  PluginMovieData *arg2 = (PluginMovieData *) 0 ;
  BaseBitmap *arg3 = (BaseBitmap *) 0 ;
  IMAGERESULT result;
  
  arg1 = (BitmapSaverPlugin *)jarg1; 
  arg2 = (PluginMovieData *)jarg2; 
  arg3 = (BaseBitmap *)jarg3; 
  result = (IMAGERESULT)(arg1)->BmWrite(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BitmapSaverPlugin_BmClose(void * jarg1, void * jarg2) {
  BitmapSaverPlugin *arg1 = (BitmapSaverPlugin *) 0 ;
  PluginMovieData **arg2 = 0 ;
  
  arg1 = (BitmapSaverPlugin *)jarg1; 
  arg2 = (PluginMovieData **)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PluginMovieData *& type is null", 0);
    return ;
  } 
  (arg1)->BmClose(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_InitResourceBitmap(int jarg1) {
  void * jresult ;
  LONG arg1 ;
  BaseBitmap *result = 0 ;
  
  arg1 = (LONG)jarg1; 
  result = (BaseBitmap *)InitResourceBitmap(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DA_NIL_get() {
  int jresult ;
  int result;
  
  result = (int)DA_NIL;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DA_VOID_get() {
  int jresult ;
  int result;
  
  result = (int)DA_VOID;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DA_LONG_get() {
  int jresult ;
  int result;
  
  result = (int)DA_LONG;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DA_REAL_get() {
  int jresult ;
  int result;
  
  result = (int)DA_REAL;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DA_TIME_get() {
  int jresult ;
  int result;
  
  result = (int)DA_TIME;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DA_VECTOR_get() {
  int jresult ;
  int result;
  
  result = (int)DA_VECTOR;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DA_MATRIX_get() {
  int jresult ;
  int result;
  
  result = (int)DA_MATRIX;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DA_LLONG_get() {
  int jresult ;
  int result;
  
  result = (int)DA_LLONG;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DA_BYTEARRAY_get() {
  int jresult ;
  int result;
  
  result = (int)DA_BYTEARRAY;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DA_STRING_get() {
  int jresult ;
  int result;
  
  result = (int)DA_STRING;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DA_FILENAME_get() {
  int jresult ;
  int result;
  
  result = (int)DA_FILENAME;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DA_CONTAINER_get() {
  int jresult ;
  int result;
  
  result = (int)DA_CONTAINER;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DA_ALIASLINK_get() {
  int jresult ;
  int result;
  
  result = (int)DA_ALIASLINK;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DA_MARKER_get() {
  int jresult ;
  int result;
  
  result = (int)DA_MARKER;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DA_MISSINGPLUG_get() {
  int jresult ;
  int result;
  
  result = (int)DA_MISSINGPLUG;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DA_CUSTOMDATATYPE_get() {
  int jresult ;
  int result;
  
  result = (int)DA_CUSTOMDATATYPE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DA_END_get() {
  int jresult ;
  int result;
  
  result = (int)DA_END;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GeData__SWIG_0() {
  void * jresult ;
  GeData *result = 0 ;
  
  result = (GeData *)new GeData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GeData__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  GeData *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (GeData *)new GeData(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GeData__SWIG_2(double jarg1) {
  void * jresult ;
  double arg1 ;
  GeData *result = 0 ;
  
  arg1 = (double)jarg1; 
  result = (GeData *)new GeData(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GeData__SWIG_3(void * jarg1) {
  void * jresult ;
  GeData *arg1 = 0 ;
  GeData *result = 0 ;
  
  arg1 = (GeData *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeData const & type is null", 0);
    return 0;
  } 
  result = (GeData *)new GeData((GeData const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GeData__SWIG_5(float jarg1) {
  void * jresult ;
  SReal arg1 ;
  GeData *result = 0 ;
  
  arg1 = (SReal)jarg1; 
  result = (GeData *)new GeData(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GeData__SWIG_6(void * jarg1, int jarg2) {
  void * jresult ;
  void *arg1 = (void *) 0 ;
  VOIDVALUETYPE arg2 ;
  GeData *result = 0 ;
  
  arg1 = (void *)jarg1; 
  arg2 = (VOIDVALUETYPE)jarg2; 
  result = (GeData *)new GeData(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GeData__SWIG_7(void * jarg1, int jarg2) {
  void * jresult ;
  LLONG arg1 ;
  LLONGVALUETYPE arg2 ;
  LLONG *argp1 ;
  GeData *result = 0 ;
  
  argp1 = (LLONG *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null LLONG", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (LLONGVALUETYPE)jarg2; 
  result = (GeData *)new GeData(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GeData__SWIG_8(void * jarg1) {
  void * jresult ;
  Vector *arg1 = 0 ;
  GeData *result = 0 ;
  
  arg1 = (Vector *)jarg1; /* Vector*&_in */
  result = (GeData *)new GeData((Vector const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GeData__SWIG_9(void * jarg1) {
  void * jresult ;
  CHAR *arg1 = (CHAR *) 0 ;
  GeData *result = 0 ;
  
  arg1 = (CHAR *)jarg1; 
  result = (GeData *)new GeData((CHAR const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GeData__SWIG_10(char * /* constString&_ctype */ jarg1) {
  void * jresult ;
  String *arg1 = 0 ;
  GeData *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (GeData *)new GeData((String const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GeData__SWIG_11(void * jarg1) {
  void * jresult ;
  Filename *arg1 = 0 ;
  GeData *result = 0 ;
  
  arg1 = (Filename *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Filename const & type is null", 0);
    return 0;
  } 
  result = (GeData *)new GeData((Filename const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GeData__SWIG_12(void * jarg1) {
  void * jresult ;
  BaseTime *arg1 = 0 ;
  GeData *result = 0 ;
  
  arg1 = (BaseTime *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseTime const & type is null", 0);
    return 0;
  } 
  result = (GeData *)new GeData((BaseTime const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GeData__SWIG_13(void * jarg1) {
  void * jresult ;
  BaseContainer *arg1 = 0 ;
  GeData *result = 0 ;
  
  arg1 = (BaseContainer *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer const & type is null", 0);
    return 0;
  } 
  result = (GeData *)new GeData((BaseContainer const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GeData__SWIG_14(void * jarg1) {
  void * jresult ;
  BaseLink *arg1 = (BaseLink *) 0 ;
  GeData *result = 0 ;
  
  arg1 = (BaseLink *)jarg1; 
  result = (GeData *)new GeData((BaseLink const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GeData__SWIG_15(int jarg1, void * jarg2) {
  void * jresult ;
  LONG arg1 ;
  CustomDataType *arg2 = 0 ;
  GeData *result = 0 ;
  
  arg1 = (LONG)jarg1; 
  arg2 = (CustomDataType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CustomDataType const & type is null", 0);
    return 0;
  } 
  result = (GeData *)new GeData(arg1,(CustomDataType const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GeData__SWIG_16(int jarg1, int jarg2) {
  void * jresult ;
  LONG arg1 ;
  DEFAULTVALUETYPE arg2 ;
  GeData *result = 0 ;
  
  arg1 = (LONG)jarg1; 
  arg2 = (DEFAULTVALUETYPE)jarg2; 
  result = (GeData *)new GeData(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GeData_SetDefault(void * jarg1, int jarg2) {
  unsigned int jresult ;
  GeData *arg1 = (GeData *) 0 ;
  LONG arg2 ;
  Bool result;
  
  arg1 = (GeData *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (arg1)->SetDefault(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeData_Free(void * jarg1) {
  GeData *arg1 = (GeData *) 0 ;
  
  arg1 = (GeData *)jarg1; 
  (arg1)->Free();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GeData(void * jarg1) {
  GeData *arg1 = (GeData *) 0 ;
  
  arg1 = (GeData *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GeData_GetType(void * jarg1) {
  int jresult ;
  GeData *arg1 = (GeData *) 0 ;
  LONG result;
  
  arg1 = (GeData *)jarg1; 
  result = ((GeData const *)arg1)->GetType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GeData_GetBool(void * jarg1) {
  unsigned int jresult ;
  GeData *arg1 = (GeData *) 0 ;
  Bool result;
  
  arg1 = (GeData *)jarg1; 
  result = ((GeData const *)arg1)->GetBool();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GeData_GetLong(void * jarg1) {
  int jresult ;
  GeData *arg1 = (GeData *) 0 ;
  LONG result;
  
  arg1 = (GeData *)jarg1; 
  result = ((GeData const *)arg1)->GetLong();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GeData_GetLLong(void * jarg1) {
  void * jresult ;
  GeData *arg1 = (GeData *) 0 ;
  LLONG result;
  
  arg1 = (GeData *)jarg1; 
  result = ((GeData const *)arg1)->GetLLong();
  jresult = new LLONG((const LLONG &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_GeData_GetReal(void * jarg1) {
  double jresult ;
  GeData *arg1 = (GeData *) 0 ;
  Real result;
  
  arg1 = (GeData *)jarg1; 
  result = ((GeData const *)arg1)->GetReal();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GeData_GetVoid(void * jarg1) {
  void * jresult ;
  GeData *arg1 = (GeData *) 0 ;
  void *result = 0 ;
  
  arg1 = (GeData *)jarg1; 
  result = (void *)((GeData const *)arg1)->GetVoid();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GeData_GetVector(void * jarg1) {
  void * jresult ;
  GeData *arg1 = (GeData *) 0 ;
  Vector *result = 0 ;
  
  arg1 = (GeData *)jarg1; 
  result = (Vector *) &((GeData const *)arg1)->GetVector();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GeData_GetMatrix(void * jarg1) {
  void * jresult ;
  GeData *arg1 = (GeData *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (GeData *)jarg1; 
  result = (Matrix *) &((GeData const *)arg1)->GetMatrix();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * /* constString&_ctype */ SWIGSTDCALL CSharp_GeData_GetString(void * jarg1) {
  char * /* constString&_ctype */ jresult ;
  GeData *arg1 = (GeData *) 0 ;
  String *result = 0 ;
  
  arg1 = (GeData *)jarg1; 
  result = (String *) &((GeData const *)arg1)->GetString();
  jresult = SWIG_csharp_string_callback(result->GetCStringCopy()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GeData_GetFilename(void * jarg1) {
  void * jresult ;
  GeData *arg1 = (GeData *) 0 ;
  Filename *result = 0 ;
  
  arg1 = (GeData *)jarg1; 
  result = (Filename *) &((GeData const *)arg1)->GetFilename();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GeData_GetTime(void * jarg1) {
  void * jresult ;
  GeData *arg1 = (GeData *) 0 ;
  BaseTime *result = 0 ;
  
  arg1 = (GeData *)jarg1; 
  result = (BaseTime *) &((GeData const *)arg1)->GetTime();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GeData_GetContainer(void * jarg1) {
  void * jresult ;
  GeData *arg1 = (GeData *) 0 ;
  BaseContainer *result = 0 ;
  
  arg1 = (GeData *)jarg1; 
  result = (BaseContainer *)((GeData const *)arg1)->GetContainer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GeData_GetBaseLink(void * jarg1) {
  void * jresult ;
  GeData *arg1 = (GeData *) 0 ;
  BaseLink *result = 0 ;
  
  arg1 = (GeData *)jarg1; 
  result = (BaseLink *)((GeData const *)arg1)->GetBaseLink();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GeData_GetCustomDataType(void * jarg1, int jarg2) {
  void * jresult ;
  GeData *arg1 = (GeData *) 0 ;
  LONG arg2 ;
  CustomDataType *result = 0 ;
  
  arg1 = (GeData *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (CustomDataType *)((GeData const *)arg1)->GetCustomDataType(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GeData_GetLink__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  GeData *arg1 = (GeData *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  LONG arg3 ;
  BaseList2D *result = 0 ;
  
  arg1 = (GeData *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (LONG)jarg3; 
  result = (BaseList2D *)((GeData const *)arg1)->GetLink(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GeData_GetLink__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  GeData *arg1 = (GeData *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  BaseList2D *result = 0 ;
  
  arg1 = (GeData *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  result = (BaseList2D *)((GeData const *)arg1)->GetLink(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GeData_GetLinkAtom__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  GeData *arg1 = (GeData *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  LONG arg3 ;
  C4DAtomGoal *result = 0 ;
  
  arg1 = (GeData *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (LONG)jarg3; 
  result = (C4DAtomGoal *)((GeData const *)arg1)->GetLinkAtom(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GeData_GetLinkAtom__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  GeData *arg1 = (GeData *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  C4DAtomGoal *result = 0 ;
  
  arg1 = (GeData *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  result = (C4DAtomGoal *)((GeData const *)arg1)->GetLinkAtom(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeData_CopyData(void * jarg1, void * jarg2, void * jarg3) {
  GeData *arg1 = (GeData *) 0 ;
  GeData *arg2 = (GeData *) 0 ;
  AliasTrans *arg3 = (AliasTrans *) 0 ;
  
  arg1 = (GeData *)jarg1; 
  arg2 = (GeData *)jarg2; 
  arg3 = (AliasTrans *)jarg3; 
  ((GeData const *)arg1)->CopyData(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeData_SetReal(void * jarg1, double jarg2) {
  GeData *arg1 = (GeData *) 0 ;
  Real arg2 ;
  
  arg1 = (GeData *)jarg1; 
  arg2 = (Real)jarg2; 
  (arg1)->SetReal(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeData_SetLong(void * jarg1, int jarg2) {
  GeData *arg1 = (GeData *) 0 ;
  LONG arg2 ;
  
  arg1 = (GeData *)jarg1; 
  arg2 = (LONG)jarg2; 
  (arg1)->SetLong(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeData_SetLLong(void * jarg1, void * jarg2) {
  GeData *arg1 = (GeData *) 0 ;
  LLONG *arg2 = 0 ;
  
  arg1 = (GeData *)jarg1; 
  arg2 = (LLONG *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LLONG const & type is null", 0);
    return ;
  } 
  (arg1)->SetLLong((LLONG const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeData_SetVoid(void * jarg1, void * jarg2) {
  GeData *arg1 = (GeData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (GeData *)jarg1; 
  arg2 = (void *)jarg2; 
  (arg1)->SetVoid(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeData_SetVector(void * jarg1, void * jarg2) {
  GeData *arg1 = (GeData *) 0 ;
  Vector *arg2 = 0 ;
  
  arg1 = (GeData *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  (arg1)->SetVector((Vector const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeData_SetMatrix(void * jarg1, void * jarg2) {
  GeData *arg1 = (GeData *) 0 ;
  Matrix *arg2 = 0 ;
  
  arg1 = (GeData *)jarg1; 
  arg2 = (Matrix *)jarg2; /* constMatrix&_in */
  (arg1)->SetMatrix((Matrix const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeData_SetString(void * jarg1, char * /* constString&_ctype */ jarg2) {
  GeData *arg1 = (GeData *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (GeData *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  String arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->SetString((String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeData_SetFilename(void * jarg1, void * jarg2) {
  GeData *arg1 = (GeData *) 0 ;
  Filename *arg2 = 0 ;
  
  arg1 = (GeData *)jarg1; 
  arg2 = (Filename *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Filename const & type is null", 0);
    return ;
  } 
  (arg1)->SetFilename((Filename const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeData_SetBaseTime(void * jarg1, void * jarg2) {
  GeData *arg1 = (GeData *) 0 ;
  BaseTime *arg2 = 0 ;
  
  arg1 = (GeData *)jarg1; 
  arg2 = (BaseTime *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseTime const & type is null", 0);
    return ;
  } 
  (arg1)->SetBaseTime((BaseTime const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeData_SetContainer(void * jarg1, void * jarg2) {
  GeData *arg1 = (GeData *) 0 ;
  BaseContainer *arg2 = 0 ;
  
  arg1 = (GeData *)jarg1; 
  arg2 = (BaseContainer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer const & type is null", 0);
    return ;
  } 
  (arg1)->SetContainer((BaseContainer const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeData_SetBaseLink(void * jarg1, void * jarg2) {
  GeData *arg1 = (GeData *) 0 ;
  BaseLink *arg2 = 0 ;
  
  arg1 = (GeData *)jarg1; 
  arg2 = (BaseLink *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseLink const & type is null", 0);
    return ;
  } 
  (arg1)->SetBaseLink((BaseLink const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeData_SetCustomDataType(void * jarg1, int jarg2, void * jarg3) {
  GeData *arg1 = (GeData *) 0 ;
  LONG arg2 ;
  CustomDataType *arg3 = 0 ;
  
  arg1 = (GeData *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (CustomDataType *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CustomDataType const & type is null", 0);
    return ;
  } 
  (arg1)->SetCustomDataType(arg2,(CustomDataType const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BrowseContainer(void * jarg1) {
  void * jresult ;
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  BrowseContainer *result = 0 ;
  
  arg1 = (BaseContainer *)jarg1; 
  result = (BrowseContainer *)new BrowseContainer((BaseContainer const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BrowseContainer_Reset(void * jarg1) {
  BrowseContainer *arg1 = (BrowseContainer *) 0 ;
  
  arg1 = (BrowseContainer *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BrowseContainer_GetNext(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  BrowseContainer *arg1 = (BrowseContainer *) 0 ;
  LONG *arg2 = (LONG *) 0 ;
  GeData **arg3 = (GeData **) 0 ;
  Bool result;
  
  arg1 = (BrowseContainer *)jarg1; 
  arg2 = (LONG *)jarg2; 
  arg3 = (GeData **)jarg3; 
  result = (arg1)->GetNext(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BrowseContainer(void * jarg1) {
  BrowseContainer *arg1 = (BrowseContainer *) 0 ;
  
  arg1 = (BrowseContainer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NodeData_Get(void * jarg1) {
  void * jresult ;
  NodeData *arg1 = (NodeData *) 0 ;
  GeListNode *result = 0 ;
  
  arg1 = (NodeData *)jarg1; 
  result = (GeListNode *)((NodeData const *)arg1)->Get();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NodeData_Init(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  NodeData *arg1 = (NodeData *) 0 ;
  GeListNode *arg2 = (GeListNode *) 0 ;
  Bool result;
  
  arg1 = (NodeData *)jarg1; 
  arg2 = (GeListNode *)jarg2; 
  result = (arg1)->Init(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NodeData_Free(void * jarg1, void * jarg2) {
  NodeData *arg1 = (NodeData *) 0 ;
  GeListNode *arg2 = (GeListNode *) 0 ;
  
  arg1 = (NodeData *)jarg1; 
  arg2 = (GeListNode *)jarg2; 
  (arg1)->Free(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NodeData_Read(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  NodeData *arg1 = (NodeData *) 0 ;
  GeListNode *arg2 = (GeListNode *) 0 ;
  HyperFile *arg3 = (HyperFile *) 0 ;
  LONG arg4 ;
  Bool result;
  
  arg1 = (NodeData *)jarg1; 
  arg2 = (GeListNode *)jarg2; 
  arg3 = (HyperFile *)jarg3; 
  arg4 = (LONG)jarg4; 
  result = (arg1)->Read(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NodeData_Write(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  NodeData *arg1 = (NodeData *) 0 ;
  GeListNode *arg2 = (GeListNode *) 0 ;
  HyperFile *arg3 = (HyperFile *) 0 ;
  Bool result;
  
  arg1 = (NodeData *)jarg1; 
  arg2 = (GeListNode *)jarg2; 
  arg3 = (HyperFile *)jarg3; 
  result = (arg1)->Write(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NodeData_Message(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  NodeData *arg1 = (NodeData *) 0 ;
  GeListNode *arg2 = (GeListNode *) 0 ;
  LONG arg3 ;
  void *arg4 = (void *) 0 ;
  Bool result;
  
  arg1 = (NodeData *)jarg1; 
  arg2 = (GeListNode *)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (void *)jarg4; 
  result = (arg1)->Message(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NodeData_CopyTo(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, void * jarg6) {
  unsigned int jresult ;
  NodeData *arg1 = (NodeData *) 0 ;
  NodeData *arg2 = (NodeData *) 0 ;
  GeListNode *arg3 = (GeListNode *) 0 ;
  GeListNode *arg4 = (GeListNode *) 0 ;
  COPYFLAGS arg5 ;
  AliasTrans *arg6 = (AliasTrans *) 0 ;
  Bool result;
  
  arg1 = (NodeData *)jarg1; 
  arg2 = (NodeData *)jarg2; 
  arg3 = (GeListNode *)jarg3; 
  arg4 = (GeListNode *)jarg4; 
  arg5 = (COPYFLAGS)jarg5; 
  arg6 = (AliasTrans *)jarg6; 
  result = (arg1)->CopyTo(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NodeData_GetBubbleHelp(void * jarg1, void * jarg2, void * jarg3) {
  NodeData *arg1 = (NodeData *) 0 ;
  GeListNode *arg2 = (GeListNode *) 0 ;
  String *arg3 = 0 ;
  
  arg1 = (NodeData *)jarg1; 
  arg2 = (GeListNode *)jarg2; 
  arg3 = (String *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "String & type is null", 0);
    return ;
  } 
  (arg1)->GetBubbleHelp(arg2,*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NodeData_GetDocument(void * jarg1, void * jarg2) {
  void * jresult ;
  NodeData *arg1 = (NodeData *) 0 ;
  GeListNode *arg2 = (GeListNode *) 0 ;
  BaseDocument *result = 0 ;
  
  arg1 = (NodeData *)jarg1; 
  arg2 = (GeListNode *)jarg2; 
  result = (BaseDocument *)(arg1)->GetDocument(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NodeData_GetBranchInfo(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5) {
  int jresult ;
  NodeData *arg1 = (NodeData *) 0 ;
  GeListNode *arg2 = (GeListNode *) 0 ;
  BranchInfo *arg3 = (BranchInfo *) 0 ;
  LONG arg4 ;
  GETBRANCHINFO arg5 ;
  LONG result;
  
  arg1 = (NodeData *)jarg1; 
  arg2 = (GeListNode *)jarg2; 
  arg3 = (BranchInfo *)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (GETBRANCHINFO)jarg5; 
  result = (arg1)->GetBranchInfo(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NodeData_IsInstanceOf(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  NodeData *arg1 = (NodeData *) 0 ;
  GeListNode *arg2 = (GeListNode *) 0 ;
  LONG arg3 ;
  Bool result;
  
  arg1 = (NodeData *)jarg1; 
  arg2 = (GeListNode *)jarg2; 
  arg3 = (LONG)jarg3; 
  result = ((NodeData const *)arg1)->IsInstanceOf((GeListNode const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NodeData_GetDDescription(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  NodeData *arg1 = (NodeData *) 0 ;
  GeListNode *arg2 = (GeListNode *) 0 ;
  Description *arg3 = (Description *) 0 ;
  DESCFLAGS_DESC *arg4 = 0 ;
  Bool result;
  
  arg1 = (NodeData *)jarg1; 
  arg2 = (GeListNode *)jarg2; 
  arg3 = (Description *)jarg3; 
  arg4 = (DESCFLAGS_DESC *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DESCFLAGS_DESC & type is null", 0);
    return 0;
  } 
  result = (arg1)->GetDDescription(arg2,arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NodeData_GetDParameter(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  NodeData *arg1 = (NodeData *) 0 ;
  GeListNode *arg2 = (GeListNode *) 0 ;
  DescID *arg3 = 0 ;
  GeData *arg4 = 0 ;
  DESCFLAGS_GET *arg5 = 0 ;
  Bool result;
  
  arg1 = (NodeData *)jarg1; 
  arg2 = (GeListNode *)jarg2; 
  arg3 = (DescID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescID const & type is null", 0);
    return 0;
  } 
  arg4 = (GeData *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeData & type is null", 0);
    return 0;
  } 
  arg5 = (DESCFLAGS_GET *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DESCFLAGS_GET & type is null", 0);
    return 0;
  } 
  result = (arg1)->GetDParameter(arg2,(DescID const &)*arg3,*arg4,*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NodeData_GetDEnabling(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, void * jarg6) {
  unsigned int jresult ;
  NodeData *arg1 = (NodeData *) 0 ;
  GeListNode *arg2 = (GeListNode *) 0 ;
  DescID *arg3 = 0 ;
  GeData *arg4 = 0 ;
  DESCFLAGS_ENABLE arg5 ;
  BaseContainer *arg6 = (BaseContainer *) 0 ;
  Bool result;
  
  arg1 = (NodeData *)jarg1; 
  arg2 = (GeListNode *)jarg2; 
  arg3 = (DescID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescID const & type is null", 0);
    return 0;
  } 
  arg4 = (GeData *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeData const & type is null", 0);
    return 0;
  } 
  arg5 = (DESCFLAGS_ENABLE)jarg5; 
  arg6 = (BaseContainer *)jarg6; 
  result = (arg1)->GetDEnabling(arg2,(DescID const &)*arg3,(GeData const &)*arg4,arg5,(BaseContainer const *)arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NodeData_SetDParameter(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  NodeData *arg1 = (NodeData *) 0 ;
  GeListNode *arg2 = (GeListNode *) 0 ;
  DescID *arg3 = 0 ;
  GeData *arg4 = 0 ;
  DESCFLAGS_SET *arg5 = 0 ;
  Bool result;
  
  arg1 = (NodeData *)jarg1; 
  arg2 = (GeListNode *)jarg2; 
  arg3 = (DescID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescID const & type is null", 0);
    return 0;
  } 
  arg4 = (GeData *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeData const & type is null", 0);
    return 0;
  } 
  arg5 = (DESCFLAGS_SET *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DESCFLAGS_SET & type is null", 0);
    return 0;
  } 
  result = (arg1)->SetDParameter(arg2,(DescID const &)*arg3,(GeData const &)*arg4,*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NodeData_TranslateDescID(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  NodeData *arg1 = (NodeData *) 0 ;
  GeListNode *arg2 = (GeListNode *) 0 ;
  DescID *arg3 = 0 ;
  DescID *arg4 = 0 ;
  C4DAtom **arg5 = 0 ;
  Bool result;
  
  arg1 = (NodeData *)jarg1; 
  arg2 = (GeListNode *)jarg2; 
  arg3 = (DescID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescID const & type is null", 0);
    return 0;
  } 
  arg4 = (DescID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescID & type is null", 0);
    return 0;
  } 
  arg5 = (C4DAtom **)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "C4DAtom *& type is null", 0);
    return 0;
  } 
  result = (arg1)->TranslateDescID(arg2,(DescID const &)*arg3,*arg4,*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NodeData_IsDocumentRelated(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  NodeData *arg1 = (NodeData *) 0 ;
  GeListNode *arg2 = (GeListNode *) 0 ;
  Bool *arg3 = 0 ;
  Bool result;
  
  arg1 = (NodeData *)jarg1; 
  arg2 = (GeListNode *)jarg2; 
  arg3 = (Bool *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Bool & type is null", 0);
    return 0;
  } 
  result = ((NodeData const *)arg1)->IsDocumentRelated((GeListNode const *)arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NodeData() {
  void * jresult ;
  NodeData *result = 0 ;
  
  result = (NodeData *)new NodeData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NodeData(void * jarg1) {
  NodeData *arg1 = (NodeData *) 0 ;
  
  arg1 = (NodeData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FillNodePlugin__SWIG_0(void * jarg1, int jarg2, void* /* DataAllocator*_ctype */ jarg3, void * jarg4, int jarg5, void * jarg6) {
  NODEPLUGIN *arg1 = (NODEPLUGIN *) 0 ;
  LONG arg2 ;
  DataAllocator *arg3 = (DataAllocator *) 0 ;
  BaseBitmap *arg4 = (BaseBitmap *) 0 ;
  LONG arg5 ;
  void *arg6 = (void *) 0 ;
  
  arg1 = (NODEPLUGIN *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (DataAllocator*)jarg3; /* DataAllocator*_in */
  arg4 = (BaseBitmap *)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (void *)jarg6; 
  FillNodePlugin(arg1,arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FillNodePlugin__SWIG_1(void * jarg1, int jarg2, void* /* DataAllocator*_ctype */ jarg3, void * jarg4, int jarg5) {
  NODEPLUGIN *arg1 = (NODEPLUGIN *) 0 ;
  LONG arg2 ;
  DataAllocator *arg3 = (DataAllocator *) 0 ;
  BaseBitmap *arg4 = (BaseBitmap *) 0 ;
  LONG arg5 ;
  
  arg1 = (NODEPLUGIN *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (DataAllocator*)jarg3; /* DataAllocator*_in */
  arg4 = (BaseBitmap *)jarg4; 
  arg5 = (LONG)jarg5; 
  FillNodePlugin(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RegisterNodePlugin(int jarg1, char * /* constString&_ctype */ jarg2, int jarg3, void* /* DataAllocator*_ctype */ jarg4, void * jarg5, int jarg6, void * jarg7) {
  unsigned int jresult ;
  LONG arg1 ;
  String *arg2 = 0 ;
  LONG arg3 ;
  DataAllocator *arg4 = (DataAllocator *) 0 ;
  BaseBitmap *arg5 = (BaseBitmap *) 0 ;
  LONG arg6 ;
  LONG *arg7 = (LONG *) 0 ;
  Bool result;
  
  arg1 = (LONG)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (LONG)jarg3; 
  arg4 = (DataAllocator*)jarg4; /* DataAllocator*_in */
  arg5 = (BaseBitmap *)jarg5; 
  arg6 = (LONG)jarg6; 
  arg7 = (LONG *)jarg7; 
  result = RegisterNodePlugin(arg1,(String const &)*arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_BASEOBJECT_VISIBILITY_EDITOR_get() {
  int jresult ;
  int result;
  
  result = (int)ID_BASEOBJECT_VISIBILITY_EDITOR;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_BASEOBJECT_VISIBILITY_RENDER_get() {
  int jresult ;
  int result;
  
  result = (int)ID_BASEOBJECT_VISIBILITY_RENDER;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OBJECT_ON_get() {
  int jresult ;
  int result;
  
  result = (int)OBJECT_ON;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OBJECT_OFF_get() {
  int jresult ;
  int result;
  
  result = (int)OBJECT_OFF;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OBJECT_UNDEF_get() {
  int jresult ;
  int result;
  
  result = (int)OBJECT_UNDEF;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_BASEOBJECT_REL_POSITION_get() {
  int jresult ;
  int result;
  
  result = (int)ID_BASEOBJECT_REL_POSITION;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_BASEOBJECT_REL_ROTATION_get() {
  int jresult ;
  int result;
  
  result = (int)ID_BASEOBJECT_REL_ROTATION;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_BASEOBJECT_REL_SCALE_get() {
  int jresult ;
  int result;
  
  result = (int)ID_BASEOBJECT_REL_SCALE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_BASEOBJECT_GENERATOR_FLAG_get() {
  int jresult ;
  int result;
  
  result = (int)ID_BASEOBJECT_GENERATOR_FLAG;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_BASEOBJECT_USECOLOR_get() {
  int jresult ;
  int result;
  
  result = (int)ID_BASEOBJECT_USECOLOR;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_BASEOBJECT_USECOLOR_OFF_get() {
  int jresult ;
  int result;
  
  result = (int)ID_BASEOBJECT_USECOLOR_OFF;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_BASEOBJECT_USECOLOR_AUTOMATIC_get() {
  int jresult ;
  int result;
  
  result = (int)ID_BASEOBJECT_USECOLOR_AUTOMATIC;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_BASEOBJECT_USECOLOR_ALWAYS_get() {
  int jresult ;
  int result;
  
  result = (int)ID_BASEOBJECT_USECOLOR_ALWAYS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_BASEOBJECT_USECOLOR_LAYER_get() {
  int jresult ;
  int result;
  
  result = (int)ID_BASEOBJECT_USECOLOR_LAYER;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_BASEOBJECT_COLOR_get() {
  int jresult ;
  int result;
  
  result = (int)ID_BASEOBJECT_COLOR;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_BASEOBJECT_XRAY_get() {
  int jresult ;
  int result;
  
  result = (int)ID_BASEOBJECT_XRAY;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_BASEOBJECT_GLOBAL_POSITION_get() {
  int jresult ;
  int result;
  
  result = (int)ID_BASEOBJECT_GLOBAL_POSITION;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_BASEOBJECT_GLOBAL_ROTATION_get() {
  int jresult ;
  int result;
  
  result = (int)ID_BASEOBJECT_GLOBAL_ROTATION;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_BASEOBJECT_SHADEDWIRECOLOR_get() {
  int jresult ;
  int result;
  
  result = (int)ID_BASEOBJECT_SHADEDWIRECOLOR;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_BASEOBJECT_SHADEDWIRECOLORMODE_get() {
  int jresult ;
  int result;
  
  result = (int)ID_BASEOBJECT_SHADEDWIRECOLORMODE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_BASEOBJECT_SHADEDWIRECOLORMODE_OFF_get() {
  int jresult ;
  int result;
  
  result = (int)ID_BASEOBJECT_SHADEDWIRECOLORMODE_OFF;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_BASEOBJECT_SHADEDWIRECOLORMODE_AUTO_get() {
  int jresult ;
  int result;
  
  result = (int)ID_BASEOBJECT_SHADEDWIRECOLORMODE_AUTO;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_BASEOBJECT_SHADEDWIRECOLORMODE_ALWAYS_get() {
  int jresult ;
  int result;
  
  result = (int)ID_BASEOBJECT_SHADEDWIRECOLORMODE_ALWAYS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_BASEOBJECT_FROZEN_POSITION_get() {
  int jresult ;
  int result;
  
  result = (int)ID_BASEOBJECT_FROZEN_POSITION;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_BASEOBJECT_FROZEN_ROTATION_get() {
  int jresult ;
  int result;
  
  result = (int)ID_BASEOBJECT_FROZEN_ROTATION;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_BASEOBJECT_FROZEN_SCALE_get() {
  int jresult ;
  int result;
  
  result = (int)ID_BASEOBJECT_FROZEN_SCALE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_BASEOBJECT_FREEZE_get() {
  int jresult ;
  int result;
  
  result = (int)ID_BASEOBJECT_FREEZE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_BASEOBJECT_FROZEN_RESET_get() {
  int jresult ;
  int result;
  
  result = (int)ID_BASEOBJECT_FROZEN_RESET;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_BASEOBJECT_FREEZE_P_get() {
  int jresult ;
  int result;
  
  result = (int)ID_BASEOBJECT_FREEZE_P;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_BASEOBJECT_FREEZE_R_get() {
  int jresult ;
  int result;
  
  result = (int)ID_BASEOBJECT_FREEZE_R;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_BASEOBJECT_FREEZE_S_get() {
  int jresult ;
  int result;
  
  result = (int)ID_BASEOBJECT_FREEZE_S;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_BASEOBJECT_ABS_POSITION_get() {
  int jresult ;
  int result;
  
  result = (int)ID_BASEOBJECT_ABS_POSITION;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_BASEOBJECT_ABS_ROTATION_get() {
  int jresult ;
  int result;
  
  result = (int)ID_BASEOBJECT_ABS_ROTATION;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_BASEOBJECT_ABS_SCALE_get() {
  int jresult ;
  int result;
  
  result = (int)ID_BASEOBJECT_ABS_SCALE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_BASEOBJECT_ROTATION_ORDER_get() {
  int jresult ;
  int result;
  
  result = (int)ID_BASEOBJECT_ROTATION_ORDER;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_BASEOBJECT_ROTATION_ORDER_YXZ_get() {
  int jresult ;
  int result;
  
  result = (int)ID_BASEOBJECT_ROTATION_ORDER_YXZ;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_BASEOBJECT_ROTATION_ORDER_YZX_get() {
  int jresult ;
  int result;
  
  result = (int)ID_BASEOBJECT_ROTATION_ORDER_YZX;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_BASEOBJECT_ROTATION_ORDER_ZYX_get() {
  int jresult ;
  int result;
  
  result = (int)ID_BASEOBJECT_ROTATION_ORDER_ZYX;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_BASEOBJECT_ROTATION_ORDER_ZXY_get() {
  int jresult ;
  int result;
  
  result = (int)ID_BASEOBJECT_ROTATION_ORDER_ZXY;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_BASEOBJECT_ROTATION_ORDER_XZY_get() {
  int jresult ;
  int result;
  
  result = (int)ID_BASEOBJECT_ROTATION_ORDER_XZY;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_BASEOBJECT_ROTATION_ORDER_XYZ_get() {
  int jresult ;
  int result;
  
  result = (int)ID_BASEOBJECT_ROTATION_ORDER_XYZ;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_BASEOBJECT_ROTATION_ORDER_HPB_get() {
  int jresult ;
  int result;
  
  result = (int)ID_BASEOBJECT_ROTATION_ORDER_HPB;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_BASEOBJECT_GROUP1_get() {
  int jresult ;
  int result;
  
  result = (int)ID_BASEOBJECT_GROUP1;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_BASEOBJECT_GROUPVIS_get() {
  int jresult ;
  int result;
  
  result = (int)ID_BASEOBJECT_GROUPVIS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OBJECTPROPERTIES_get() {
  int jresult ;
  int result;
  
  result = (int)ID_OBJECTPROPERTIES;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_TAGLIST_get() {
  int jresult ;
  int result;
  
  result = (int)ID_TAGLIST;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_BASEOBJECT_FROZEN_COORDS_get() {
  int jresult ;
  int result;
  
  result = (int)ID_BASEOBJECT_FROZEN_COORDS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_BASEOBJECT_DUMMY_get() {
  int jresult ;
  int result;
  
  result = (int)ID_BASEOBJECT_DUMMY;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_REDIRECT_FLAG_PROCESSED_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 0));
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RedirectMsgData_type_set(void * jarg1, int jarg2) {
  RedirectMsgData *arg1 = (RedirectMsgData *) 0 ;
  LONG arg2 ;
  
  arg1 = (RedirectMsgData *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RedirectMsgData_type_get(void * jarg1) {
  int jresult ;
  RedirectMsgData *arg1 = (RedirectMsgData *) 0 ;
  LONG result;
  
  arg1 = (RedirectMsgData *)jarg1; 
  result =  ((arg1)->type);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RedirectMsgData_data_set(void * jarg1, void * jarg2) {
  RedirectMsgData *arg1 = (RedirectMsgData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (RedirectMsgData *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->data = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RedirectMsgData_data_get(void * jarg1) {
  void * jresult ;
  RedirectMsgData *arg1 = (RedirectMsgData *) 0 ;
  void *result = 0 ;
  
  arg1 = (RedirectMsgData *)jarg1; 
  result = (void *) ((arg1)->data);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RedirectMsgData_bl_set(void * jarg1, void * jarg2) {
  RedirectMsgData *arg1 = (RedirectMsgData *) 0 ;
  BaseList2D *arg2 = (BaseList2D *) 0 ;
  
  arg1 = (RedirectMsgData *)jarg1; 
  arg2 = (BaseList2D *)jarg2; 
  if (arg1) (arg1)->bl = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RedirectMsgData_bl_get(void * jarg1) {
  void * jresult ;
  RedirectMsgData *arg1 = (RedirectMsgData *) 0 ;
  BaseList2D *result = 0 ;
  
  arg1 = (RedirectMsgData *)jarg1; 
  result = (BaseList2D *) ((arg1)->bl);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RedirectMsgData_flags_set(void * jarg1, int jarg2) {
  RedirectMsgData *arg1 = (RedirectMsgData *) 0 ;
  LONG arg2 ;
  
  arg1 = (RedirectMsgData *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RedirectMsgData_flags_get(void * jarg1) {
  int jresult ;
  RedirectMsgData *arg1 = (RedirectMsgData *) 0 ;
  LONG result;
  
  arg1 = (RedirectMsgData *)jarg1; 
  result =  ((arg1)->flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RedirectMsgData() {
  void * jresult ;
  RedirectMsgData *result = 0 ;
  
  result = (RedirectMsgData *)new RedirectMsgData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RedirectMsgData(void * jarg1) {
  RedirectMsgData *arg1 = (RedirectMsgData *) 0 ;
  
  arg1 = (RedirectMsgData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToolTransformMsgData_scl_set(void * jarg1, double jarg2) {
  ToolTransformMsgData *arg1 = (ToolTransformMsgData *) 0 ;
  Real arg2 ;
  
  arg1 = (ToolTransformMsgData *)jarg1; 
  arg2 = (Real)jarg2; 
  if (arg1) (arg1)->scl = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ToolTransformMsgData_scl_get(void * jarg1) {
  double jresult ;
  ToolTransformMsgData *arg1 = (ToolTransformMsgData *) 0 ;
  Real result;
  
  arg1 = (ToolTransformMsgData *)jarg1; 
  result =  ((arg1)->scl);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToolTransformMsgData_tm_set(void * jarg1, Matrix_POD /* Matrix_ctype */ jarg2) {
  ToolTransformMsgData *arg1 = (ToolTransformMsgData *) 0 ;
  Matrix arg2 ;
  
  arg1 = (ToolTransformMsgData *)jarg1; 
  /* <Matrix_in> */ 
  arg2 = *((Matrix *)(&jarg2)); 
  /* </Matrix_in> */
  if (arg1) (arg1)->tm = arg2;
}


SWIGEXPORT Matrix_POD /* Matrix_ctype */ SWIGSTDCALL CSharp_ToolTransformMsgData_tm_get(void * jarg1) {
  Matrix_POD /* Matrix_ctype */ jresult ;
  ToolTransformMsgData *arg1 = (ToolTransformMsgData *) 0 ;
  Matrix result;
  
  arg1 = (ToolTransformMsgData *)jarg1; 
  result =  ((arg1)->tm);
  /* <Matrix_out> */ 
  jresult = *((Matrix_POD *)(&result)); 
  /* </Matrix_out> */
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToolTransformMsgData_mm_set(void * jarg1, Matrix_POD /* Matrix_ctype */ jarg2) {
  ToolTransformMsgData *arg1 = (ToolTransformMsgData *) 0 ;
  Matrix arg2 ;
  
  arg1 = (ToolTransformMsgData *)jarg1; 
  /* <Matrix_in> */ 
  arg2 = *((Matrix *)(&jarg2)); 
  /* </Matrix_in> */
  if (arg1) (arg1)->mm = arg2;
}


SWIGEXPORT Matrix_POD /* Matrix_ctype */ SWIGSTDCALL CSharp_ToolTransformMsgData_mm_get(void * jarg1) {
  Matrix_POD /* Matrix_ctype */ jresult ;
  ToolTransformMsgData *arg1 = (ToolTransformMsgData *) 0 ;
  Matrix result;
  
  arg1 = (ToolTransformMsgData *)jarg1; 
  result =  ((arg1)->mm);
  /* <Matrix_out> */ 
  jresult = *((Matrix_POD *)(&result)); 
  /* </Matrix_out> */
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToolTransformMsgData_up_set(void * jarg1, Matrix_POD /* Matrix_ctype */ jarg2) {
  ToolTransformMsgData *arg1 = (ToolTransformMsgData *) 0 ;
  Matrix arg2 ;
  
  arg1 = (ToolTransformMsgData *)jarg1; 
  /* <Matrix_in> */ 
  arg2 = *((Matrix *)(&jarg2)); 
  /* </Matrix_in> */
  if (arg1) (arg1)->up = arg2;
}


SWIGEXPORT Matrix_POD /* Matrix_ctype */ SWIGSTDCALL CSharp_ToolTransformMsgData_up_get(void * jarg1) {
  Matrix_POD /* Matrix_ctype */ jresult ;
  ToolTransformMsgData *arg1 = (ToolTransformMsgData *) 0 ;
  Matrix result;
  
  arg1 = (ToolTransformMsgData *)jarg1; 
  result =  ((arg1)->up);
  /* <Matrix_out> */ 
  jresult = *((Matrix_POD *)(&result)); 
  /* </Matrix_out> */
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToolTransformMsgData_children_set(void * jarg1, unsigned int jarg2) {
  ToolTransformMsgData *arg1 = (ToolTransformMsgData *) 0 ;
  Bool arg2 ;
  
  arg1 = (ToolTransformMsgData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->children = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ToolTransformMsgData_children_get(void * jarg1) {
  unsigned int jresult ;
  ToolTransformMsgData *arg1 = (ToolTransformMsgData *) 0 ;
  Bool result;
  
  arg1 = (ToolTransformMsgData *)jarg1; 
  result =  ((arg1)->children);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToolTransformMsgData_undo_set(void * jarg1, void * jarg2) {
  ToolTransformMsgData *arg1 = (ToolTransformMsgData *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  
  arg1 = (ToolTransformMsgData *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  if (arg1) (arg1)->undo = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ToolTransformMsgData_undo_get(void * jarg1) {
  void * jresult ;
  ToolTransformMsgData *arg1 = (ToolTransformMsgData *) 0 ;
  BaseObject *result = 0 ;
  
  arg1 = (ToolTransformMsgData *)jarg1; 
  result = (BaseObject *) ((arg1)->undo);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToolTransformMsgData_flags_set(void * jarg1, int jarg2) {
  ToolTransformMsgData *arg1 = (ToolTransformMsgData *) 0 ;
  TOOLTRANSFORM_FLAG arg2 ;
  
  arg1 = (ToolTransformMsgData *)jarg1; 
  arg2 = (TOOLTRANSFORM_FLAG)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ToolTransformMsgData_flags_get(void * jarg1) {
  int jresult ;
  ToolTransformMsgData *arg1 = (ToolTransformMsgData *) 0 ;
  TOOLTRANSFORM_FLAG result;
  
  arg1 = (ToolTransformMsgData *)jarg1; 
  result = (TOOLTRANSFORM_FLAG) ((arg1)->flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ToolTransformMsgData() {
  void * jresult ;
  ToolTransformMsgData *result = 0 ;
  
  result = (ToolTransformMsgData *)new ToolTransformMsgData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ToolTransformMsgData(void * jarg1) {
  ToolTransformMsgData *arg1 = (ToolTransformMsgData *) 0 ;
  
  arg1 = (ToolTransformMsgData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectTransformMsgData_undo_set(void * jarg1, void * jarg2) {
  ObjectTransformMsgData *arg1 = (ObjectTransformMsgData *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  
  arg1 = (ObjectTransformMsgData *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  if (arg1) (arg1)->undo = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectTransformMsgData_undo_get(void * jarg1) {
  void * jresult ;
  ObjectTransformMsgData *arg1 = (ObjectTransformMsgData *) 0 ;
  BaseObject *result = 0 ;
  
  arg1 = (ObjectTransformMsgData *)jarg1; 
  result = (BaseObject *) ((arg1)->undo);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectTransformMsgData_tm_set(void * jarg1, Matrix_POD /* Matrix_ctype */ jarg2) {
  ObjectTransformMsgData *arg1 = (ObjectTransformMsgData *) 0 ;
  Matrix arg2 ;
  
  arg1 = (ObjectTransformMsgData *)jarg1; 
  /* <Matrix_in> */ 
  arg2 = *((Matrix *)(&jarg2)); 
  /* </Matrix_in> */
  if (arg1) (arg1)->tm = arg2;
}


SWIGEXPORT Matrix_POD /* Matrix_ctype */ SWIGSTDCALL CSharp_ObjectTransformMsgData_tm_get(void * jarg1) {
  Matrix_POD /* Matrix_ctype */ jresult ;
  ObjectTransformMsgData *arg1 = (ObjectTransformMsgData *) 0 ;
  Matrix result;
  
  arg1 = (ObjectTransformMsgData *)jarg1; 
  result =  ((arg1)->tm);
  /* <Matrix_out> */ 
  jresult = *((Matrix_POD *)(&result)); 
  /* </Matrix_out> */
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectTransformMsgData_sdown_set(void * jarg1, unsigned int jarg2) {
  ObjectTransformMsgData *arg1 = (ObjectTransformMsgData *) 0 ;
  Bool arg2 ;
  
  arg1 = (ObjectTransformMsgData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->sdown = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ObjectTransformMsgData_sdown_get(void * jarg1) {
  unsigned int jresult ;
  ObjectTransformMsgData *arg1 = (ObjectTransformMsgData *) 0 ;
  Bool result;
  
  arg1 = (ObjectTransformMsgData *)jarg1; 
  result =  ((arg1)->sdown);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectTransformMsgData_useselection_set(void * jarg1, unsigned int jarg2) {
  ObjectTransformMsgData *arg1 = (ObjectTransformMsgData *) 0 ;
  Bool arg2 ;
  
  arg1 = (ObjectTransformMsgData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->useselection = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ObjectTransformMsgData_useselection_get(void * jarg1) {
  unsigned int jresult ;
  ObjectTransformMsgData *arg1 = (ObjectTransformMsgData *) 0 ;
  Bool result;
  
  arg1 = (ObjectTransformMsgData *)jarg1; 
  result =  ((arg1)->useselection);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectTransformMsgData_mode_set(void * jarg1, int jarg2) {
  ObjectTransformMsgData *arg1 = (ObjectTransformMsgData *) 0 ;
  LONG arg2 ;
  
  arg1 = (ObjectTransformMsgData *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->mode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ObjectTransformMsgData_mode_get(void * jarg1) {
  int jresult ;
  ObjectTransformMsgData *arg1 = (ObjectTransformMsgData *) 0 ;
  LONG result;
  
  arg1 = (ObjectTransformMsgData *)jarg1; 
  result =  ((arg1)->mode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectTransformMsgData_bd_set(void * jarg1, void * jarg2) {
  ObjectTransformMsgData *arg1 = (ObjectTransformMsgData *) 0 ;
  BaseDraw *arg2 = (BaseDraw *) 0 ;
  
  arg1 = (ObjectTransformMsgData *)jarg1; 
  arg2 = (BaseDraw *)jarg2; 
  if (arg1) (arg1)->bd = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectTransformMsgData_bd_get(void * jarg1) {
  void * jresult ;
  ObjectTransformMsgData *arg1 = (ObjectTransformMsgData *) 0 ;
  BaseDraw *result = 0 ;
  
  arg1 = (ObjectTransformMsgData *)jarg1; 
  result = (BaseDraw *) ((arg1)->bd);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ObjectTransformMsgData() {
  void * jresult ;
  ObjectTransformMsgData *result = 0 ;
  
  result = (ObjectTransformMsgData *)new ObjectTransformMsgData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ObjectTransformMsgData(void * jarg1) {
  ObjectTransformMsgData *arg1 = (ObjectTransformMsgData *) 0 ;
  
  arg1 = (ObjectTransformMsgData *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_POINTS_CHANGED_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_POLYGONS_CHANGED_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_UPDATE_get() {
  int jresult ;
  int result;
  
  result = (int)(5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_SMALLUPDATE_get() {
  int jresult ;
  int result;
  
  result = (int)(6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_CHANGE_get() {
  int jresult ;
  int result;
  
  result = (int)(7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_BASECONTAINER_get() {
  int jresult ;
  int result;
  
  result = (int)(9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_SEGMENTS_CHANGED_get() {
  int jresult ;
  int result;
  
  result = (int)(10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_FILTER_get() {
  int jresult ;
  int result;
  
  result = (int)(14);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_TRANSFERGOALS_get() {
  int jresult ;
  int result;
  
  result = (int)(15);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_DESCRIPTION_INITUNDO_get() {
  int jresult ;
  int result;
  
  result = (int)(16);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_DESCRIPTION_CHECKUPDATE_get() {
  int jresult ;
  int result;
  
  result = (int)(17);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_DESCRIPTION_CHECKUPDATE_DOCUMENT_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 1));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_DESCRIPTION_CHECKUPDATE_AUTOKEY_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 2));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_DESCRIPTION_CHECKUPDATE_SYNC_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 4));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_DESCRIPTION_CHECKUPDATE_ANIMATE_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 5));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_DESCRIPTION_CHECKUPDATE_NOSCENEUPDATE_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 23));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_DESCRIPTION_COMMAND_get() {
  int jresult ;
  int result;
  
  result = (int)(18);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_DESCRIPTION_POPUP_get() {
  int jresult ;
  int result;
  
  result = (int)(300001046);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_DESCRIPTION_POSTSETPARAMETER_get() {
  int jresult ;
  int result;
  
  result = (int)(19);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_DESCRIPTION_VALIDATE_get() {
  int jresult ;
  int result;
  
  result = (int)(20);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_EDIT_get() {
  int jresult ;
  int result;
  
  result = (int)(21);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_MENUPREPARE_get() {
  int jresult ;
  int result;
  
  result = (int)(22);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_RETRIEVEPRIVATEDATA_get() {
  int jresult ;
  int result;
  
  result = (int)(23);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_DESCRIPTION_REMOVE_ENTRY_get() {
  int jresult ;
  int result;
  
  result = (int)(24);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_DESCRIPTION_EDIT_ENTRY_get() {
  int jresult ;
  int result;
  
  result = (int)(25);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_DESCRIPTION_CHECKDRAGANDDROP_get() {
  int jresult ;
  int result;
  
  result = (int)(26);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_DESCRIPTION_GETBITMAP_get() {
  int jresult ;
  int result;
  
  result = (int)(27);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_DESCRIPTION_GETOBJECTS_get() {
  int jresult ;
  int result;
  
  result = (int)(30);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_DESCRIPTION_USERINTERACTION_END_get() {
  int jresult ;
  int result;
  
  result = (int)(31);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_DESCRIPTION_GETINLINEOBJECT_get() {
  int jresult ;
  int result;
  
  result = (int)(200000169);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_MOVE_FINISHED_get() {
  int jresult ;
  int result;
  
  result = (int)(32);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_MOVE_START_get() {
  int jresult ;
  int result;
  
  result = (int)(1021543);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_EDITABLE_END_get() {
  int jresult ;
  int result;
  
  result = (int)(33);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_GETCUSTOMICON_get() {
  int jresult ;
  int result;
  
  result = (int)(1001090);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_MATERIALDRAGANDDROP_get() {
  int jresult ;
  int result;
  
  result = (int)(1001069);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_DRAGANDDROP_get() {
  int jresult ;
  int result;
  
  result = (int)(1018756);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_INITIALCHANNEL_get() {
  int jresult ;
  int result;
  
  result = (int)(1001073);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_PYTHON_RESET_get() {
  int jresult ;
  int result;
  
  result = (int)(1024114);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_DOCUMENTINFO_get() {
  int jresult ;
  int result;
  
  result = (int)(1001078);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_DOCUMENTINFO_TYPE_SETACTIVE_get() {
  int jresult ;
  int result;
  
  result = (int)(1000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_DOCUMENTINFO_TYPE_LOAD_get() {
  int jresult ;
  int result;
  
  result = (int)(1001);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_DOCUMENTINFO_TYPE_MERGE_get() {
  int jresult ;
  int result;
  
  result = (int)(1002);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_DOCUMENTINFO_TYPE_BEFOREMERGE_get() {
  int jresult ;
  int result;
  
  result = (int)(1003);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_DOCUMENTINFO_TYPE_SAVE_BEFORE_get() {
  int jresult ;
  int result;
  
  result = (int)(1004);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_DOCUMENTINFO_TYPE_SAVE_AFTER_get() {
  int jresult ;
  int result;
  
  result = (int)(1005);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_DOCUMENTINFO_TYPE_SAVEPROJECT_BEFORE_get() {
  int jresult ;
  int result;
  
  result = (int)(1006);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_DOCUMENTINFO_TYPE_SAVEPROJECT_AFTER_get() {
  int jresult ;
  int result;
  
  result = (int)(1007);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_DOCUMENTINFO_TYPE_REMOVE_get() {
  int jresult ;
  int result;
  
  result = (int)(1008);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_DOCUMENTINFO_TYPE_TOOL_CHANGED_get() {
  int jresult ;
  int result;
  
  result = (int)(1009);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_DOCUMENTINFO_TYPE_OBJECT_INSERT_get() {
  int jresult ;
  int result;
  
  result = (int)(1010);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_DOCUMENTINFO_TYPE_TAG_INSERT_get() {
  int jresult ;
  int result;
  
  result = (int)(1011);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_DOCUMENTINFO_TYPE_MATERIAL_INSERT_get() {
  int jresult ;
  int result;
  
  result = (int)(1012);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_DOCUMENTINFO_TYPE_UNDO_get() {
  int jresult ;
  int result;
  
  result = (int)(1013);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_DOCUMENTINFO_TYPE_REDO_get() {
  int jresult ;
  int result;
  
  result = (int)(1014);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_DOCUMENTINFO_TYPE_PASTE_get() {
  int jresult ;
  int result;
  
  result = (int)(1015);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_DOCUMENTINFO_TYPE_COPY_get() {
  int jresult ;
  int result;
  
  result = (int)(1016);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_GETSELECTION_get() {
  int jresult ;
  int result;
  
  result = (int)(1022176);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_REDIRECT_get() {
  int jresult ;
  int result;
  
  result = (int)(1023019);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_TOOL_TRANSFORM_get() {
  int jresult ;
  int result;
  
  result = (int)(1025528);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_GETACTIVEREDIRECT_get() {
  int jresult ;
  int result;
  
  result = (int)(1025664);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_MULTI_RENDERNOTIFICATION_get() {
  int jresult ;
  int result;
  
  result = (int)(1001071);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_MULTI_MARKMATERIALS_get() {
  int jresult ;
  int result;
  
  result = (int)((4|(1 << 30)));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_MULTI_DOCUMENTCLONED_get() {
  int jresult ;
  int result;
  
  result = (int)(11);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_MULTI_DOCUMENTIMPORTED_get() {
  int jresult ;
  int result;
  
  result = (int)(13);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_MULTI_SETNEWMARKERS_get() {
  int jresult ;
  int result;
  
  result = (int)(200000161);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_MULTI_CLEARSUGGESTEDFOLDER_get() {
  int jresult ;
  int result;
  
  result = (int)(200000040);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_TRANSLATE_POINTS_get() {
  int jresult ;
  int result;
  
  result = (int)(1015632);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_TRANSLATE_POLYGONS_get() {
  int jresult ;
  int result;
  
  result = (int)(1015633);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_TRANSLATE_NGONS_get() {
  int jresult ;
  int result;
  
  result = (int)(1015634);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_TRANSLATE_SEGMENTS_get() {
  int jresult ;
  int result;
  
  result = (int)(1015831);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_PRETRANSLATE_POINTS_get() {
  int jresult ;
  int result;
  
  result = (int)(1015822);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_PRETRANSLATE_POLYGONS_get() {
  int jresult ;
  int result;
  
  result = (int)(1015823);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_PRETRANSLATE_NGONS_get() {
  int jresult ;
  int result;
  
  result = (int)(1015824);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_PRETRANSLATE_SEGMENTS_get() {
  int jresult ;
  int result;
  
  result = (int)(1015832);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_UPDATE_NGONS_get() {
  int jresult ;
  int result;
  
  result = (int)(475000000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_DOCUMENT_MODE_CHANGED_get() {
  int jresult ;
  int result;
  
  result = (int)(200000091);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_TOOL_RESTART_get() {
  int jresult ;
  int result;
  
  result = (int)(200000096);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_DEFORMMODECHANGED_get() {
  int jresult ;
  int result;
  
  result = (int)(200000125);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_ANIMATE_get() {
  int jresult ;
  int result;
  
  result = (int)(300001037);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_CALCMEMUSAGE_get() {
  int jresult ;
  int result;
  
  result = (int)(200000160);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_SCALEDOCUMENT_get() {
  int jresult ;
  int result;
  
  result = (int)(300001069);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_GET_INHERITANCECONTAINER_get() {
  int jresult ;
  int result;
  
  result = (int)(300001052);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_SOFTTAG_UPDATE_get() {
  int jresult ;
  int result;
  
  result = (int)(1016685);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_TRANSFORM_OBJECT_get() {
  int jresult ;
  int result;
  
  result = (int)(440000109);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_STRINGUNDO_get() {
  int jresult ;
  int result;
  
  result = (int)(300001071);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VariableChanged() {
  void * jresult ;
  VariableChanged *result = 0 ;
  
  result = (VariableChanged *)new VariableChanged();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VariableChanged_old_cnt_set(void * jarg1, int jarg2) {
  VariableChanged *arg1 = (VariableChanged *) 0 ;
  LONG arg2 ;
  
  arg1 = (VariableChanged *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->old_cnt = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VariableChanged_old_cnt_get(void * jarg1) {
  int jresult ;
  VariableChanged *arg1 = (VariableChanged *) 0 ;
  LONG result;
  
  arg1 = (VariableChanged *)jarg1; 
  result =  ((arg1)->old_cnt);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VariableChanged_new_cnt_set(void * jarg1, int jarg2) {
  VariableChanged *arg1 = (VariableChanged *) 0 ;
  LONG arg2 ;
  
  arg1 = (VariableChanged *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->new_cnt = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VariableChanged_new_cnt_get(void * jarg1) {
  int jresult ;
  VariableChanged *arg1 = (VariableChanged *) 0 ;
  LONG result;
  
  arg1 = (VariableChanged *)jarg1; 
  result =  ((arg1)->new_cnt);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VariableChanged_map_set(void * jarg1, void * jarg2) {
  VariableChanged *arg1 = (VariableChanged *) 0 ;
  LONG *arg2 = (LONG *) 0 ;
  
  arg1 = (VariableChanged *)jarg1; 
  arg2 = (LONG *)jarg2; 
  if (arg1) (arg1)->map = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VariableChanged_map_get(void * jarg1) {
  void * jresult ;
  VariableChanged *arg1 = (VariableChanged *) 0 ;
  LONG *result = 0 ;
  
  arg1 = (VariableChanged *)jarg1; 
  result = (LONG *) ((arg1)->map);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VariableChanged_vc_flags_set(void * jarg1, int jarg2) {
  VariableChanged *arg1 = (VariableChanged *) 0 ;
  LONG arg2 ;
  
  arg1 = (VariableChanged *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->vc_flags = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VariableChanged_vc_flags_get(void * jarg1) {
  int jresult ;
  VariableChanged *arg1 = (VariableChanged *) 0 ;
  LONG result;
  
  arg1 = (VariableChanged *)jarg1; 
  result =  ((arg1)->vc_flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VC_SAFETY_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 0));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VC_DONTCOPYDATA_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 1));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VC_DONTCLEARDATA_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 2));
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VariableChanged(void * jarg1) {
  VariableChanged *arg1 = (VariableChanged *) 0 ;
  
  arg1 = (VariableChanged *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DocumentImported() {
  void * jresult ;
  DocumentImported *result = 0 ;
  
  result = (DocumentImported *)new DocumentImported();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DocumentImported_doc_set(void * jarg1, void * jarg2) {
  DocumentImported *arg1 = (DocumentImported *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  
  arg1 = (DocumentImported *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  if (arg1) (arg1)->doc = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DocumentImported_doc_get(void * jarg1) {
  void * jresult ;
  DocumentImported *arg1 = (DocumentImported *) 0 ;
  BaseDocument *result = 0 ;
  
  arg1 = (DocumentImported *)jarg1; 
  result = (BaseDocument *) ((arg1)->doc);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DocumentImported_c4dversion_set(void * jarg1, int jarg2) {
  DocumentImported *arg1 = (DocumentImported *) 0 ;
  LONG arg2 ;
  
  arg1 = (DocumentImported *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->c4dversion = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DocumentImported_c4dversion_get(void * jarg1) {
  int jresult ;
  DocumentImported *arg1 = (DocumentImported *) 0 ;
  LONG result;
  
  arg1 = (DocumentImported *)jarg1; 
  result =  ((arg1)->c4dversion);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DocumentImported_fileformat_set(void * jarg1, int jarg2) {
  DocumentImported *arg1 = (DocumentImported *) 0 ;
  LONG arg2 ;
  
  arg1 = (DocumentImported *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->fileformat = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DocumentImported_fileformat_get(void * jarg1) {
  int jresult ;
  DocumentImported *arg1 = (DocumentImported *) 0 ;
  LONG result;
  
  arg1 = (DocumentImported *)jarg1; 
  result =  ((arg1)->fileformat);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DocumentImported_gui_allowed_set(void * jarg1, unsigned int jarg2) {
  DocumentImported *arg1 = (DocumentImported *) 0 ;
  Bool arg2 ;
  
  arg1 = (DocumentImported *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->gui_allowed = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DocumentImported_gui_allowed_get(void * jarg1) {
  unsigned int jresult ;
  DocumentImported *arg1 = (DocumentImported *) 0 ;
  Bool result;
  
  arg1 = (DocumentImported *)jarg1; 
  result =  ((arg1)->gui_allowed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DocumentImported(void * jarg1) {
  DocumentImported *arg1 = (DocumentImported *) 0 ;
  
  arg1 = (DocumentImported *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MarkMaterials() {
  void * jresult ;
  MarkMaterials *result = 0 ;
  
  result = (MarkMaterials *)new MarkMaterials();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MarkMaterials_omat_set(void * jarg1, void * jarg2) {
  MarkMaterials *arg1 = (MarkMaterials *) 0 ;
  BaseMaterial *arg2 = (BaseMaterial *) 0 ;
  
  arg1 = (MarkMaterials *)jarg1; 
  arg2 = (BaseMaterial *)jarg2; 
  if (arg1) (arg1)->omat = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MarkMaterials_omat_get(void * jarg1) {
  void * jresult ;
  MarkMaterials *arg1 = (MarkMaterials *) 0 ;
  BaseMaterial *result = 0 ;
  
  arg1 = (MarkMaterials *)jarg1; 
  result = (BaseMaterial *) ((arg1)->omat);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MarkMaterials_nmat_set(void * jarg1, void * jarg2) {
  MarkMaterials *arg1 = (MarkMaterials *) 0 ;
  BaseMaterial *arg2 = (BaseMaterial *) 0 ;
  
  arg1 = (MarkMaterials *)jarg1; 
  arg2 = (BaseMaterial *)jarg2; 
  if (arg1) (arg1)->nmat = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MarkMaterials_nmat_get(void * jarg1) {
  void * jresult ;
  MarkMaterials *arg1 = (MarkMaterials *) 0 ;
  BaseMaterial *result = 0 ;
  
  arg1 = (MarkMaterials *)jarg1; 
  result = (BaseMaterial *) ((arg1)->nmat);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MarkMaterials(void * jarg1) {
  MarkMaterials *arg1 = (MarkMaterials *) 0 ;
  
  arg1 = (MarkMaterials *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DescriptionInitUndo() {
  void * jresult ;
  DescriptionInitUndo *result = 0 ;
  
  result = (DescriptionInitUndo *)new DescriptionInitUndo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DescriptionInitUndo_doc_set(void * jarg1, void * jarg2) {
  DescriptionInitUndo *arg1 = (DescriptionInitUndo *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  
  arg1 = (DescriptionInitUndo *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  if (arg1) (arg1)->doc = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DescriptionInitUndo_doc_get(void * jarg1) {
  void * jresult ;
  DescriptionInitUndo *arg1 = (DescriptionInitUndo *) 0 ;
  BaseDocument *result = 0 ;
  
  arg1 = (DescriptionInitUndo *)jarg1; 
  result = (BaseDocument *) ((arg1)->doc);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DescriptionInitUndo_descid_set(void * jarg1, void * jarg2) {
  DescriptionInitUndo *arg1 = (DescriptionInitUndo *) 0 ;
  DescID *arg2 = (DescID *) 0 ;
  
  arg1 = (DescriptionInitUndo *)jarg1; 
  arg2 = (DescID *)jarg2; 
  if (arg1) (arg1)->descid = (DescID const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DescriptionInitUndo_descid_get(void * jarg1) {
  void * jresult ;
  DescriptionInitUndo *arg1 = (DescriptionInitUndo *) 0 ;
  DescID *result = 0 ;
  
  arg1 = (DescriptionInitUndo *)jarg1; 
  result = (DescID *) ((arg1)->descid);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DescriptionInitUndo(void * jarg1) {
  DescriptionInitUndo *arg1 = (DescriptionInitUndo *) 0 ;
  
  arg1 = (DescriptionInitUndo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DescriptionCheckUpdate() {
  void * jresult ;
  DescriptionCheckUpdate *result = 0 ;
  
  result = (DescriptionCheckUpdate *)new DescriptionCheckUpdate();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DescriptionCheckUpdate_doc_set(void * jarg1, void * jarg2) {
  DescriptionCheckUpdate *arg1 = (DescriptionCheckUpdate *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  
  arg1 = (DescriptionCheckUpdate *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  if (arg1) (arg1)->doc = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DescriptionCheckUpdate_doc_get(void * jarg1) {
  void * jresult ;
  DescriptionCheckUpdate *arg1 = (DescriptionCheckUpdate *) 0 ;
  BaseDocument *result = 0 ;
  
  arg1 = (DescriptionCheckUpdate *)jarg1; 
  result = (BaseDocument *) ((arg1)->doc);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DescriptionCheckUpdate_drawflags_set(void * jarg1, int jarg2) {
  DescriptionCheckUpdate *arg1 = (DescriptionCheckUpdate *) 0 ;
  LONG arg2 ;
  
  arg1 = (DescriptionCheckUpdate *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->drawflags = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DescriptionCheckUpdate_drawflags_get(void * jarg1) {
  int jresult ;
  DescriptionCheckUpdate *arg1 = (DescriptionCheckUpdate *) 0 ;
  LONG result;
  
  arg1 = (DescriptionCheckUpdate *)jarg1; 
  result =  ((arg1)->drawflags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DescriptionCheckUpdate_descid_set(void * jarg1, void * jarg2) {
  DescriptionCheckUpdate *arg1 = (DescriptionCheckUpdate *) 0 ;
  DescID *arg2 = (DescID *) 0 ;
  
  arg1 = (DescriptionCheckUpdate *)jarg1; 
  arg2 = (DescID *)jarg2; 
  if (arg1) (arg1)->descid = (DescID const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DescriptionCheckUpdate_descid_get(void * jarg1) {
  void * jresult ;
  DescriptionCheckUpdate *arg1 = (DescriptionCheckUpdate *) 0 ;
  DescID *result = 0 ;
  
  arg1 = (DescriptionCheckUpdate *)jarg1; 
  result = (DescID *) ((arg1)->descid);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DescriptionCheckUpdate(void * jarg1) {
  DescriptionCheckUpdate *arg1 = (DescriptionCheckUpdate *) 0 ;
  
  arg1 = (DescriptionCheckUpdate *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DescriptionValidate() {
  void * jresult ;
  DescriptionValidate *result = 0 ;
  
  result = (DescriptionValidate *)new DescriptionValidate();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DescriptionValidate_flags_set(void * jarg1, int jarg2) {
  DescriptionValidate *arg1 = (DescriptionValidate *) 0 ;
  LONG arg2 ;
  
  arg1 = (DescriptionValidate *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DescriptionValidate_flags_get(void * jarg1) {
  int jresult ;
  DescriptionValidate *arg1 = (DescriptionValidate *) 0 ;
  LONG result;
  
  arg1 = (DescriptionValidate *)jarg1; 
  result =  ((arg1)->flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DescriptionValidate(void * jarg1) {
  DescriptionValidate *arg1 = (DescriptionValidate *) 0 ;
  
  arg1 = (DescriptionValidate *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DescriptionPostSetValue() {
  void * jresult ;
  DescriptionPostSetValue *result = 0 ;
  
  result = (DescriptionPostSetValue *)new DescriptionPostSetValue();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DescriptionPostSetValue_descid_set(void * jarg1, void * jarg2) {
  DescriptionPostSetValue *arg1 = (DescriptionPostSetValue *) 0 ;
  DescID *arg2 = (DescID *) 0 ;
  
  arg1 = (DescriptionPostSetValue *)jarg1; 
  arg2 = (DescID *)jarg2; 
  if (arg1) (arg1)->descid = (DescID const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DescriptionPostSetValue_descid_get(void * jarg1) {
  void * jresult ;
  DescriptionPostSetValue *arg1 = (DescriptionPostSetValue *) 0 ;
  DescID *result = 0 ;
  
  arg1 = (DescriptionPostSetValue *)jarg1; 
  result = (DescID *) ((arg1)->descid);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DescriptionPostSetValue(void * jarg1) {
  DescriptionPostSetValue *arg1 = (DescriptionPostSetValue *) 0 ;
  
  arg1 = (DescriptionPostSetValue *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RetrievePrivateData() {
  void * jresult ;
  RetrievePrivateData *result = 0 ;
  
  result = (RetrievePrivateData *)new RetrievePrivateData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RetrievePrivateData_flags_set(void * jarg1, int jarg2) {
  RetrievePrivateData *arg1 = (RetrievePrivateData *) 0 ;
  LONG arg2 ;
  
  arg1 = (RetrievePrivateData *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RetrievePrivateData_flags_get(void * jarg1) {
  int jresult ;
  RetrievePrivateData *arg1 = (RetrievePrivateData *) 0 ;
  LONG result;
  
  arg1 = (RetrievePrivateData *)jarg1; 
  result =  ((arg1)->flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RetrievePrivateData_data_set(void * jarg1, void * jarg2) {
  RetrievePrivateData *arg1 = (RetrievePrivateData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (RetrievePrivateData *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->data = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RetrievePrivateData_data_get(void * jarg1) {
  void * jresult ;
  RetrievePrivateData *arg1 = (RetrievePrivateData *) 0 ;
  void *result = 0 ;
  
  arg1 = (RetrievePrivateData *)jarg1; 
  result = (void *) ((arg1)->data);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RetrievePrivateData(void * jarg1) {
  RetrievePrivateData *arg1 = (RetrievePrivateData *) 0 ;
  
  arg1 = (RetrievePrivateData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MaterialDragAndDrop() {
  void * jresult ;
  MaterialDragAndDrop *result = 0 ;
  
  result = (MaterialDragAndDrop *)new MaterialDragAndDrop();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MaterialDragAndDrop_doc_set(void * jarg1, void * jarg2) {
  MaterialDragAndDrop *arg1 = (MaterialDragAndDrop *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  
  arg1 = (MaterialDragAndDrop *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  if (arg1) (arg1)->doc = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MaterialDragAndDrop_doc_get(void * jarg1) {
  void * jresult ;
  MaterialDragAndDrop *arg1 = (MaterialDragAndDrop *) 0 ;
  BaseDocument *result = 0 ;
  
  arg1 = (MaterialDragAndDrop *)jarg1; 
  result = (BaseDocument *) ((arg1)->doc);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MaterialDragAndDrop_op_set(void * jarg1, void * jarg2) {
  MaterialDragAndDrop *arg1 = (MaterialDragAndDrop *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  
  arg1 = (MaterialDragAndDrop *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  if (arg1) (arg1)->op = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MaterialDragAndDrop_op_get(void * jarg1) {
  void * jresult ;
  MaterialDragAndDrop *arg1 = (MaterialDragAndDrop *) 0 ;
  BaseObject *result = 0 ;
  
  arg1 = (MaterialDragAndDrop *)jarg1; 
  result = (BaseObject *) ((arg1)->op);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MaterialDragAndDrop_result_set(void * jarg1, void * jarg2) {
  MaterialDragAndDrop *arg1 = (MaterialDragAndDrop *) 0 ;
  BaseTag *arg2 = (BaseTag *) 0 ;
  
  arg1 = (MaterialDragAndDrop *)jarg1; 
  arg2 = (BaseTag *)jarg2; 
  if (arg1) (arg1)->result = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MaterialDragAndDrop_result_get(void * jarg1) {
  void * jresult ;
  MaterialDragAndDrop *arg1 = (MaterialDragAndDrop *) 0 ;
  BaseTag *result = 0 ;
  
  arg1 = (MaterialDragAndDrop *)jarg1; 
  result = (BaseTag *) ((arg1)->result);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MaterialDragAndDrop(void * jarg1) {
  MaterialDragAndDrop *arg1 = (MaterialDragAndDrop *) 0 ;
  
  arg1 = (MaterialDragAndDrop *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DRAGANDDROP_FLAG_RECEIVE_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DRAGANDDROP_FLAG_DROP_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DRAGANDDROP_FLAG_ACCEPT_get() {
  int jresult ;
  int result;
  
  result = (int)(4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DRAGANDDROP_FLAG_MSGVALID_get() {
  int jresult ;
  int result;
  
  result = (int)(8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DRAGANDDROP_FLAG_FORBID_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 4));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DRAGANDDROP_FLAG_SOURCE_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 5));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DRAGANDDROP_FLAG_BEFORE_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 6));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DRAGANDDROP_FLAG_AFTER_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 7));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DRAGANDDROP_FLAG_LEFT_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 8));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DRAGANDDROP_FLAG_RIGHT_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 9));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OBJSELDATA_FLAG_QUERYSELECTION_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OBJSELDATA_FLAG_HASSELECTION_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DragAndDrop() {
  void * jresult ;
  DragAndDrop *result = 0 ;
  
  result = (DragAndDrop *)new DragAndDrop();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DragAndDrop_doc_set(void * jarg1, void * jarg2) {
  DragAndDrop *arg1 = (DragAndDrop *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  
  arg1 = (DragAndDrop *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  if (arg1) (arg1)->doc = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DragAndDrop_doc_get(void * jarg1) {
  void * jresult ;
  DragAndDrop *arg1 = (DragAndDrop *) 0 ;
  BaseDocument *result = 0 ;
  
  arg1 = (DragAndDrop *)jarg1; 
  result = (BaseDocument *) ((arg1)->doc);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DragAndDrop_sender_set(void * jarg1, void * jarg2) {
  DragAndDrop *arg1 = (DragAndDrop *) 0 ;
  C4DAtom *arg2 = (C4DAtom *) 0 ;
  
  arg1 = (DragAndDrop *)jarg1; 
  arg2 = (C4DAtom *)jarg2; 
  if (arg1) (arg1)->sender = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DragAndDrop_sender_get(void * jarg1) {
  void * jresult ;
  DragAndDrop *arg1 = (DragAndDrop *) 0 ;
  C4DAtom *result = 0 ;
  
  arg1 = (DragAndDrop *)jarg1; 
  result = (C4DAtom *) ((arg1)->sender);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DragAndDrop_flags_set(void * jarg1, void * jarg2) {
  DragAndDrop *arg1 = (DragAndDrop *) 0 ;
  ULONG arg2 ;
  ULONG *argp2 ;
  
  arg1 = (DragAndDrop *)jarg1; 
  argp2 = (ULONG *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ULONG", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DragAndDrop_flags_get(void * jarg1) {
  void * jresult ;
  DragAndDrop *arg1 = (DragAndDrop *) 0 ;
  ULONG result;
  
  arg1 = (DragAndDrop *)jarg1; 
  result =  ((arg1)->flags);
  jresult = new ULONG((const ULONG &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DragAndDrop_type_set(void * jarg1, int jarg2) {
  DragAndDrop *arg1 = (DragAndDrop *) 0 ;
  LONG arg2 ;
  
  arg1 = (DragAndDrop *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DragAndDrop_type_get(void * jarg1) {
  int jresult ;
  DragAndDrop *arg1 = (DragAndDrop *) 0 ;
  LONG result;
  
  arg1 = (DragAndDrop *)jarg1; 
  result =  ((arg1)->type);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DragAndDrop_data_set(void * jarg1, void * jarg2) {
  DragAndDrop *arg1 = (DragAndDrop *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (DragAndDrop *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->data = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DragAndDrop_data_get(void * jarg1) {
  void * jresult ;
  DragAndDrop *arg1 = (DragAndDrop *) 0 ;
  void *result = 0 ;
  
  arg1 = (DragAndDrop *)jarg1; 
  result = (void *) ((arg1)->data);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DragAndDrop_x_set(void * jarg1, int jarg2) {
  DragAndDrop *arg1 = (DragAndDrop *) 0 ;
  LONG arg2 ;
  
  arg1 = (DragAndDrop *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DragAndDrop_x_get(void * jarg1) {
  int jresult ;
  DragAndDrop *arg1 = (DragAndDrop *) 0 ;
  LONG result;
  
  arg1 = (DragAndDrop *)jarg1; 
  result =  ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DragAndDrop_y_set(void * jarg1, int jarg2) {
  DragAndDrop *arg1 = (DragAndDrop *) 0 ;
  LONG arg2 ;
  
  arg1 = (DragAndDrop *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DragAndDrop_y_get(void * jarg1) {
  int jresult ;
  DragAndDrop *arg1 = (DragAndDrop *) 0 ;
  LONG result;
  
  arg1 = (DragAndDrop *)jarg1; 
  result =  ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DragAndDrop_msg_set(void * jarg1, void * jarg2) {
  DragAndDrop *arg1 = (DragAndDrop *) 0 ;
  BaseContainer *arg2 = (BaseContainer *) 0 ;
  
  arg1 = (DragAndDrop *)jarg1; 
  arg2 = (BaseContainer *)jarg2; 
  if (arg1) (arg1)->msg = (BaseContainer const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DragAndDrop_msg_get(void * jarg1) {
  void * jresult ;
  DragAndDrop *arg1 = (DragAndDrop *) 0 ;
  BaseContainer *result = 0 ;
  
  arg1 = (DragAndDrop *)jarg1; 
  result = (BaseContainer *) ((arg1)->msg);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DragAndDrop_result_set(void * jarg1, int jarg2) {
  DragAndDrop *arg1 = (DragAndDrop *) 0 ;
  LONG arg2 ;
  
  arg1 = (DragAndDrop *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->result = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DragAndDrop_result_get(void * jarg1) {
  int jresult ;
  DragAndDrop *arg1 = (DragAndDrop *) 0 ;
  LONG result;
  
  arg1 = (DragAndDrop *)jarg1; 
  result =  ((arg1)->result);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DragAndDrop(void * jarg1) {
  DragAndDrop *arg1 = (DragAndDrop *) 0 ;
  
  arg1 = (DragAndDrop *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ObjectSelectionData() {
  void * jresult ;
  ObjectSelectionData *result = 0 ;
  
  result = (ObjectSelectionData *)new ObjectSelectionData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectSelectionData_doc_set(void * jarg1, void * jarg2) {
  ObjectSelectionData *arg1 = (ObjectSelectionData *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  
  arg1 = (ObjectSelectionData *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  if (arg1) (arg1)->doc = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectSelectionData_doc_get(void * jarg1) {
  void * jresult ;
  ObjectSelectionData *arg1 = (ObjectSelectionData *) 0 ;
  BaseDocument *result = 0 ;
  
  arg1 = (ObjectSelectionData *)jarg1; 
  result = (BaseDocument *) ((arg1)->doc);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectSelectionData_table_set(void * jarg1, void * jarg2) {
  ObjectSelectionData *arg1 = (ObjectSelectionData *) 0 ;
  InclusionTable *arg2 = (InclusionTable *) 0 ;
  
  arg1 = (ObjectSelectionData *)jarg1; 
  arg2 = (InclusionTable *)jarg2; 
  if (arg1) (arg1)->table = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectSelectionData_table_get(void * jarg1) {
  void * jresult ;
  ObjectSelectionData *arg1 = (ObjectSelectionData *) 0 ;
  InclusionTable *result = 0 ;
  
  arg1 = (ObjectSelectionData *)jarg1; 
  result = (InclusionTable *) ((arg1)->table);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectSelectionData_flags_set(void * jarg1, void * jarg2) {
  ObjectSelectionData *arg1 = (ObjectSelectionData *) 0 ;
  ULONG arg2 ;
  ULONG *argp2 ;
  
  arg1 = (ObjectSelectionData *)jarg1; 
  argp2 = (ULONG *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ULONG", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectSelectionData_flags_get(void * jarg1) {
  void * jresult ;
  ObjectSelectionData *arg1 = (ObjectSelectionData *) 0 ;
  ULONG result;
  
  arg1 = (ObjectSelectionData *)jarg1; 
  result =  ((arg1)->flags);
  jresult = new ULONG((const ULONG &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ObjectSelectionData(void * jarg1) {
  ObjectSelectionData *arg1 = (ObjectSelectionData *) 0 ;
  
  arg1 = (ObjectSelectionData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RenderNotificationData() {
  void * jresult ;
  RenderNotificationData *result = 0 ;
  
  result = (RenderNotificationData *)new RenderNotificationData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderNotificationData_doc_set(void * jarg1, void * jarg2) {
  RenderNotificationData *arg1 = (RenderNotificationData *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  
  arg1 = (RenderNotificationData *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  if (arg1) (arg1)->doc = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RenderNotificationData_doc_get(void * jarg1) {
  void * jresult ;
  RenderNotificationData *arg1 = (RenderNotificationData *) 0 ;
  BaseDocument *result = 0 ;
  
  arg1 = (RenderNotificationData *)jarg1; 
  result = (BaseDocument *) ((arg1)->doc);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderNotificationData_start_set(void * jarg1, unsigned int jarg2) {
  RenderNotificationData *arg1 = (RenderNotificationData *) 0 ;
  Bool arg2 ;
  
  arg1 = (RenderNotificationData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->start = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RenderNotificationData_start_get(void * jarg1) {
  unsigned int jresult ;
  RenderNotificationData *arg1 = (RenderNotificationData *) 0 ;
  Bool result;
  
  arg1 = (RenderNotificationData *)jarg1; 
  result =  ((arg1)->start);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderNotificationData_animated_set(void * jarg1, unsigned int jarg2) {
  RenderNotificationData *arg1 = (RenderNotificationData *) 0 ;
  Bool arg2 ;
  
  arg1 = (RenderNotificationData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->animated = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RenderNotificationData_animated_get(void * jarg1) {
  unsigned int jresult ;
  RenderNotificationData *arg1 = (RenderNotificationData *) 0 ;
  Bool result;
  
  arg1 = (RenderNotificationData *)jarg1; 
  result =  ((arg1)->animated);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderNotificationData_external_set(void * jarg1, unsigned int jarg2) {
  RenderNotificationData *arg1 = (RenderNotificationData *) 0 ;
  Bool arg2 ;
  
  arg1 = (RenderNotificationData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->external = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RenderNotificationData_external_get(void * jarg1) {
  unsigned int jresult ;
  RenderNotificationData *arg1 = (RenderNotificationData *) 0 ;
  Bool result;
  
  arg1 = (RenderNotificationData *)jarg1; 
  result =  ((arg1)->external);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderNotificationData_render_set(void * jarg1, void * jarg2) {
  RenderNotificationData *arg1 = (RenderNotificationData *) 0 ;
  Render *arg2 = (Render *) 0 ;
  
  arg1 = (RenderNotificationData *)jarg1; 
  arg2 = (Render *)jarg2; 
  if (arg1) (arg1)->render = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RenderNotificationData_render_get(void * jarg1) {
  void * jresult ;
  RenderNotificationData *arg1 = (RenderNotificationData *) 0 ;
  Render *result = 0 ;
  
  arg1 = (RenderNotificationData *)jarg1; 
  result = (Render *) ((arg1)->render);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RenderNotificationData(void * jarg1) {
  RenderNotificationData *arg1 = (RenderNotificationData *) 0 ;
  
  arg1 = (RenderNotificationData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GetCustomIconData() {
  void * jresult ;
  GetCustomIconData *result = 0 ;
  
  result = (GetCustomIconData *)new GetCustomIconData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GetCustomIconData_dat_set(void * jarg1, void * jarg2) {
  GetCustomIconData *arg1 = (GetCustomIconData *) 0 ;
  IconData *arg2 = (IconData *) 0 ;
  
  arg1 = (GetCustomIconData *)jarg1; 
  arg2 = (IconData *)jarg2; 
  if (arg1) (arg1)->dat = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetCustomIconData_dat_get(void * jarg1) {
  void * jresult ;
  GetCustomIconData *arg1 = (GetCustomIconData *) 0 ;
  IconData *result = 0 ;
  
  arg1 = (GetCustomIconData *)jarg1; 
  result = (IconData *) ((arg1)->dat);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GetCustomIconData_filled_set(void * jarg1, unsigned int jarg2) {
  GetCustomIconData *arg1 = (GetCustomIconData *) 0 ;
  Bool arg2 ;
  
  arg1 = (GetCustomIconData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->filled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GetCustomIconData_filled_get(void * jarg1) {
  unsigned int jresult ;
  GetCustomIconData *arg1 = (GetCustomIconData *) 0 ;
  Bool result;
  
  arg1 = (GetCustomIconData *)jarg1; 
  result =  ((arg1)->filled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GetCustomIconData(void * jarg1) {
  GetCustomIconData *arg1 = (GetCustomIconData *) 0 ;
  
  arg1 = (GetCustomIconData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DescriptionInlineObjectMsg() {
  void * jresult ;
  DescriptionInlineObjectMsg *result = 0 ;
  
  result = (DescriptionInlineObjectMsg *)new DescriptionInlineObjectMsg();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DescriptionInlineObjectMsg_id_set(void * jarg1, void * jarg2) {
  DescriptionInlineObjectMsg *arg1 = (DescriptionInlineObjectMsg *) 0 ;
  DescID *arg2 = (DescID *) 0 ;
  
  arg1 = (DescriptionInlineObjectMsg *)jarg1; 
  arg2 = (DescID *)jarg2; 
  if (arg1) (arg1)->id = (DescID const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DescriptionInlineObjectMsg_id_get(void * jarg1) {
  void * jresult ;
  DescriptionInlineObjectMsg *arg1 = (DescriptionInlineObjectMsg *) 0 ;
  DescID *result = 0 ;
  
  arg1 = (DescriptionInlineObjectMsg *)jarg1; 
  result = (DescID *) ((arg1)->id);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DescriptionInlineObjectMsg_objects_set(void * jarg1, void * jarg2) {
  DescriptionInlineObjectMsg *arg1 = (DescriptionInlineObjectMsg *) 0 ;
  AtomArray *arg2 = (AtomArray *) 0 ;
  
  arg1 = (DescriptionInlineObjectMsg *)jarg1; 
  arg2 = (AtomArray *)jarg2; 
  if (arg1) (arg1)->objects = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DescriptionInlineObjectMsg_objects_get(void * jarg1) {
  void * jresult ;
  DescriptionInlineObjectMsg *arg1 = (DescriptionInlineObjectMsg *) 0 ;
  AtomArray *result = 0 ;
  
  arg1 = (DescriptionInlineObjectMsg *)jarg1; 
  result = (AtomArray *) ((arg1)->objects);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DescriptionInlineObjectMsg(void * jarg1) {
  DescriptionInlineObjectMsg *arg1 = (DescriptionInlineObjectMsg *) 0 ;
  
  arg1 = (DescriptionInlineObjectMsg *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MessageScaleDocument() {
  void * jresult ;
  MessageScaleDocument *result = 0 ;
  
  result = (MessageScaleDocument *)new MessageScaleDocument();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MessageScaleDocument_scale_set(void * jarg1, double jarg2) {
  MessageScaleDocument *arg1 = (MessageScaleDocument *) 0 ;
  Real arg2 ;
  
  arg1 = (MessageScaleDocument *)jarg1; 
  arg2 = (Real)jarg2; 
  if (arg1) (arg1)->scale = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MessageScaleDocument_scale_get(void * jarg1) {
  double jresult ;
  MessageScaleDocument *arg1 = (MessageScaleDocument *) 0 ;
  Real result;
  
  arg1 = (MessageScaleDocument *)jarg1; 
  result =  ((arg1)->scale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MessageScaleDocument(void * jarg1) {
  MessageScaleDocument *arg1 = (MessageScaleDocument *) 0 ;
  
  arg1 = (MessageScaleDocument *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MessageFilter() {
  void * jresult ;
  MessageFilter *result = 0 ;
  
  result = (MessageFilter *)new MessageFilter();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MessageFilter_type_set(void * jarg1, int jarg2) {
  MessageFilter *arg1 = (MessageFilter *) 0 ;
  LONG arg2 ;
  
  arg1 = (MessageFilter *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MessageFilter_type_get(void * jarg1) {
  int jresult ;
  MessageFilter *arg1 = (MessageFilter *) 0 ;
  LONG result;
  
  arg1 = (MessageFilter *)jarg1; 
  result =  ((arg1)->type);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MessageFilter_route_set(void * jarg1, int jarg2) {
  MessageFilter *arg1 = (MessageFilter *) 0 ;
  MULTIMSG_ROUTE arg2 ;
  
  arg1 = (MessageFilter *)jarg1; 
  arg2 = (MULTIMSG_ROUTE)jarg2; 
  if (arg1) (arg1)->route = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MessageFilter_route_get(void * jarg1) {
  int jresult ;
  MessageFilter *arg1 = (MessageFilter *) 0 ;
  MULTIMSG_ROUTE result;
  
  arg1 = (MessageFilter *)jarg1; 
  result = (MULTIMSG_ROUTE) ((arg1)->route);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MessageFilter_data_set(void * jarg1, void * jarg2) {
  MessageFilter *arg1 = (MessageFilter *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (MessageFilter *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->data = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MessageFilter_data_get(void * jarg1) {
  void * jresult ;
  MessageFilter *arg1 = (MessageFilter *) 0 ;
  void *result = 0 ;
  
  arg1 = (MessageFilter *)jarg1; 
  result = (void *) ((arg1)->data);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MessageFilter(void * jarg1) {
  MessageFilter *arg1 = (MessageFilter *) 0 ;
  
  arg1 = (MessageFilter *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BranchInfo_head_set(void * jarg1, void * jarg2) {
  BranchInfo *arg1 = (BranchInfo *) 0 ;
  GeListHead *arg2 = (GeListHead *) 0 ;
  
  arg1 = (BranchInfo *)jarg1; 
  arg2 = (GeListHead *)jarg2; 
  if (arg1) (arg1)->head = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BranchInfo_head_get(void * jarg1) {
  void * jresult ;
  BranchInfo *arg1 = (BranchInfo *) 0 ;
  GeListHead *result = 0 ;
  
  arg1 = (BranchInfo *)jarg1; 
  result = (GeListHead *) ((arg1)->head);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BranchInfo_name_set(void * jarg1, void * jarg2) {
  BranchInfo *arg1 = (BranchInfo *) 0 ;
  String *arg2 = (String *) 0 ;
  
  arg1 = (BranchInfo *)jarg1; 
  arg2 = (String *)jarg2; 
  if (arg1) (arg1)->name = (String const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BranchInfo_name_get(void * jarg1) {
  void * jresult ;
  BranchInfo *arg1 = (BranchInfo *) 0 ;
  String *result = 0 ;
  
  arg1 = (BranchInfo *)jarg1; 
  result = (String *) ((arg1)->name);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BranchInfo_id_set(void * jarg1, int jarg2) {
  BranchInfo *arg1 = (BranchInfo *) 0 ;
  LONG arg2 ;
  
  arg1 = (BranchInfo *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BranchInfo_id_get(void * jarg1) {
  int jresult ;
  BranchInfo *arg1 = (BranchInfo *) 0 ;
  LONG result;
  
  arg1 = (BranchInfo *)jarg1; 
  result =  ((arg1)->id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BranchInfo_flags_set(void * jarg1, int jarg2) {
  BranchInfo *arg1 = (BranchInfo *) 0 ;
  BRANCHINFOFLAGS arg2 ;
  
  arg1 = (BranchInfo *)jarg1; 
  arg2 = (BRANCHINFOFLAGS)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BranchInfo_flags_get(void * jarg1) {
  int jresult ;
  BranchInfo *arg1 = (BranchInfo *) 0 ;
  BRANCHINFOFLAGS result;
  
  arg1 = (BranchInfo *)jarg1; 
  result = (BRANCHINFOFLAGS) ((arg1)->flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BranchInfo() {
  void * jresult ;
  BranchInfo *result = 0 ;
  
  result = (BranchInfo *)new BranchInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BranchInfo(void * jarg1) {
  BranchInfo *arg1 = (BranchInfo *) 0 ;
  
  arg1 = (BranchInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_NOTIFY_EVENT_get() {
  int jresult ;
  int result;
  
  result = (int)(1024639);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NotifyEventMsg() {
  void * jresult ;
  NotifyEventMsg *result = 0 ;
  
  result = (NotifyEventMsg *)new NotifyEventMsg();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NotifyEventMsg_msg_id_set(void * jarg1, int jarg2) {
  NotifyEventMsg *arg1 = (NotifyEventMsg *) 0 ;
  LONG arg2 ;
  
  arg1 = (NotifyEventMsg *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->msg_id = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NotifyEventMsg_msg_id_get(void * jarg1) {
  int jresult ;
  NotifyEventMsg *arg1 = (NotifyEventMsg *) 0 ;
  LONG result;
  
  arg1 = (NotifyEventMsg *)jarg1; 
  result =  ((arg1)->msg_id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NotifyEventMsg_msg_data_set(void * jarg1, void * jarg2) {
  NotifyEventMsg *arg1 = (NotifyEventMsg *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (NotifyEventMsg *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->msg_data = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NotifyEventMsg_msg_data_get(void * jarg1) {
  void * jresult ;
  NotifyEventMsg *arg1 = (NotifyEventMsg *) 0 ;
  void *result = 0 ;
  
  arg1 = (NotifyEventMsg *)jarg1; 
  result = (void *) ((arg1)->msg_data);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NotifyEventMsg(void * jarg1) {
  NotifyEventMsg *arg1 = (NotifyEventMsg *) 0 ;
  
  arg1 = (NotifyEventMsg *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NotifyEventCopy() {
  void * jresult ;
  NotifyEventCopy *result = 0 ;
  
  result = (NotifyEventCopy *)new NotifyEventCopy();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NotifyEventCopy_cpy_dst_set(void * jarg1, void * jarg2) {
  NotifyEventCopy *arg1 = (NotifyEventCopy *) 0 ;
  BaseList2D *arg2 = (BaseList2D *) 0 ;
  
  arg1 = (NotifyEventCopy *)jarg1; 
  arg2 = (BaseList2D *)jarg2; 
  if (arg1) (arg1)->cpy_dst = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NotifyEventCopy_cpy_dst_get(void * jarg1) {
  void * jresult ;
  NotifyEventCopy *arg1 = (NotifyEventCopy *) 0 ;
  BaseList2D *result = 0 ;
  
  arg1 = (NotifyEventCopy *)jarg1; 
  result = (BaseList2D *) ((arg1)->cpy_dst);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NotifyEventCopy_cpy_flags_set(void * jarg1, int jarg2) {
  NotifyEventCopy *arg1 = (NotifyEventCopy *) 0 ;
  COPYFLAGS arg2 ;
  
  arg1 = (NotifyEventCopy *)jarg1; 
  arg2 = (COPYFLAGS)jarg2; 
  if (arg1) (arg1)->cpy_flags = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NotifyEventCopy_cpy_flags_get(void * jarg1) {
  int jresult ;
  NotifyEventCopy *arg1 = (NotifyEventCopy *) 0 ;
  COPYFLAGS result;
  
  arg1 = (NotifyEventCopy *)jarg1; 
  result = (COPYFLAGS) ((arg1)->cpy_flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NotifyEventCopy_cpy_trans_set(void * jarg1, void * jarg2) {
  NotifyEventCopy *arg1 = (NotifyEventCopy *) 0 ;
  AliasTrans *arg2 = (AliasTrans *) 0 ;
  
  arg1 = (NotifyEventCopy *)jarg1; 
  arg2 = (AliasTrans *)jarg2; 
  if (arg1) (arg1)->cpy_trans = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NotifyEventCopy_cpy_trans_get(void * jarg1) {
  void * jresult ;
  NotifyEventCopy *arg1 = (NotifyEventCopy *) 0 ;
  AliasTrans *result = 0 ;
  
  arg1 = (NotifyEventCopy *)jarg1; 
  result = (AliasTrans *) ((arg1)->cpy_trans);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NotifyEventCopy(void * jarg1) {
  NotifyEventCopy *arg1 = (NotifyEventCopy *) 0 ;
  
  arg1 = (NotifyEventCopy *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NotifyEventData() {
  void * jresult ;
  NotifyEventData *result = 0 ;
  
  result = (NotifyEventData *)new NotifyEventData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NotifyEventData_doc_set(void * jarg1, void * jarg2) {
  NotifyEventData *arg1 = (NotifyEventData *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  
  arg1 = (NotifyEventData *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  if (arg1) (arg1)->doc = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NotifyEventData_doc_get(void * jarg1) {
  void * jresult ;
  NotifyEventData *arg1 = (NotifyEventData *) 0 ;
  BaseDocument *result = 0 ;
  
  arg1 = (NotifyEventData *)jarg1; 
  result = (BaseDocument *) ((arg1)->doc);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NotifyEventData_bl_set(void * jarg1, void * jarg2) {
  NotifyEventData *arg1 = (NotifyEventData *) 0 ;
  BaseList2D *arg2 = (BaseList2D *) 0 ;
  
  arg1 = (NotifyEventData *)jarg1; 
  arg2 = (BaseList2D *)jarg2; 
  if (arg1) (arg1)->bl = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NotifyEventData_bl_get(void * jarg1) {
  void * jresult ;
  NotifyEventData *arg1 = (NotifyEventData *) 0 ;
  BaseList2D *result = 0 ;
  
  arg1 = (NotifyEventData *)jarg1; 
  result = (BaseList2D *) ((arg1)->bl);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NotifyEventData_eventid_set(void * jarg1, int jarg2) {
  NotifyEventData *arg1 = (NotifyEventData *) 0 ;
  NOTIFY_EVENT arg2 ;
  
  arg1 = (NotifyEventData *)jarg1; 
  arg2 = (NOTIFY_EVENT)jarg2; 
  if (arg1) (arg1)->eventid = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NotifyEventData_eventid_get(void * jarg1) {
  int jresult ;
  NotifyEventData *arg1 = (NotifyEventData *) 0 ;
  NOTIFY_EVENT result;
  
  arg1 = (NotifyEventData *)jarg1; 
  result = (NOTIFY_EVENT) ((arg1)->eventid);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NotifyEventData_user_data_set(void * jarg1, void * jarg2) {
  NotifyEventData *arg1 = (NotifyEventData *) 0 ;
  BaseContainer *arg2 = (BaseContainer *) 0 ;
  
  arg1 = (NotifyEventData *)jarg1; 
  arg2 = (BaseContainer *)jarg2; 
  if (arg1) (arg1)->user_data = (BaseContainer const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NotifyEventData_user_data_get(void * jarg1) {
  void * jresult ;
  NotifyEventData *arg1 = (NotifyEventData *) 0 ;
  BaseContainer *result = 0 ;
  
  arg1 = (NotifyEventData *)jarg1; 
  result = (BaseContainer *) ((arg1)->user_data);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NotifyEventData_event_data_set(void * jarg1, void * jarg2) {
  NotifyEventData *arg1 = (NotifyEventData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (NotifyEventData *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->event_data = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NotifyEventData_event_data_get(void * jarg1) {
  void * jresult ;
  NotifyEventData *arg1 = (NotifyEventData *) 0 ;
  void *result = 0 ;
  
  arg1 = (NotifyEventData *)jarg1; 
  result = (void *) ((arg1)->event_data);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NotifyEventData(void * jarg1) {
  NotifyEventData *arg1 = (NotifyEventData *) 0 ;
  
  arg1 = (NotifyEventData *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GeMarker_Content(void * jarg1) {
  unsigned int jresult ;
  GeMarker *arg1 = (GeMarker *) 0 ;
  Bool result;
  
  arg1 = (GeMarker *)jarg1; 
  result = ((GeMarker const *)arg1)->Content();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GeMarker_IsEqual(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GeMarker *arg1 = (GeMarker *) 0 ;
  GeMarker *arg2 = 0 ;
  Bool result;
  
  arg1 = (GeMarker *)jarg1; 
  arg2 = (GeMarker *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeMarker const & type is null", 0);
    return 0;
  } 
  result = ((GeMarker const *)arg1)->IsEqual((GeMarker const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GeMarker_Compare(void * jarg1, void * jarg2) {
  int jresult ;
  GeMarker *arg1 = (GeMarker *) 0 ;
  GeMarker *arg2 = 0 ;
  LONG result;
  
  arg1 = (GeMarker *)jarg1; 
  arg2 = (GeMarker *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeMarker const & type is null", 0);
    return 0;
  } 
  result = ((GeMarker const *)arg1)->Compare((GeMarker const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeMarker_Set(void * jarg1, void * jarg2) {
  GeMarker *arg1 = (GeMarker *) 0 ;
  GeMarker *arg2 = 0 ;
  
  arg1 = (GeMarker *)jarg1; 
  arg2 = (GeMarker *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeMarker const & type is null", 0);
    return ;
  } 
  (arg1)->Set((GeMarker const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GeMarker_Read(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GeMarker *arg1 = (GeMarker *) 0 ;
  HyperFile *arg2 = (HyperFile *) 0 ;
  Bool result;
  
  arg1 = (GeMarker *)jarg1; 
  arg2 = (HyperFile *)jarg2; 
  result = (arg1)->Read(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GeMarker_Write(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GeMarker *arg1 = (GeMarker *) 0 ;
  HyperFile *arg2 = (HyperFile *) 0 ;
  Bool result;
  
  arg1 = (GeMarker *)jarg1; 
  arg2 = (HyperFile *)jarg2; 
  result = ((GeMarker const *)arg1)->Write(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeMarker_GetMemory(void * jarg1, void * jarg2, void * jarg3) {
  GeMarker *arg1 = (GeMarker *) 0 ;
  void **arg2 = 0 ;
  LONG *arg3 = 0 ;
  
  arg1 = (GeMarker *)jarg1; 
  arg2 = (void **)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "void *& type is null", 0);
    return ;
  } 
  arg3 = (LONG *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return ;
  } 
  ((GeMarker const *)arg1)->GetMemory(*arg2,*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GeMarker_Alloc() {
  void * jresult ;
  GeMarker *result = 0 ;
  
  result = (GeMarker *)GeMarker::Alloc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeMarker_Free(void * jarg1) {
  GeMarker **arg1 = 0 ;
  
  arg1 = (GeMarker **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeMarker *& type is null", 0);
    return ;
  } 
  GeMarker::Free(*arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_C4DAtom_GetType(void * jarg1) {
  int jresult ;
  C4DAtom *arg1 = (C4DAtom *) 0 ;
  LONG result;
  
  arg1 = (C4DAtom *)jarg1; 
  result = ((C4DAtom const *)arg1)->GetType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_C4DAtom_GetRealType(void * jarg1) {
  int jresult ;
  C4DAtom *arg1 = (C4DAtom *) 0 ;
  LONG result;
  
  arg1 = (C4DAtom *)jarg1; 
  result = ((C4DAtom const *)arg1)->GetRealType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_C4DAtom_GetDiskType(void * jarg1) {
  int jresult ;
  C4DAtom *arg1 = (C4DAtom *) 0 ;
  LONG result;
  
  arg1 = (C4DAtom *)jarg1; 
  result = ((C4DAtom const *)arg1)->GetDiskType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_C4DAtom_IsInstanceOf(void * jarg1, int jarg2) {
  unsigned int jresult ;
  C4DAtom *arg1 = (C4DAtom *) 0 ;
  LONG arg2 ;
  Bool result;
  
  arg1 = (C4DAtom *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = ((C4DAtom const *)arg1)->IsInstanceOf(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_C4DAtom_GetClassification(void * jarg1) {
  int jresult ;
  C4DAtom *arg1 = (C4DAtom *) 0 ;
  LONG result;
  
  arg1 = (C4DAtom *)jarg1; 
  result = ((C4DAtom const *)arg1)->GetClassification();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_C4DAtom_Message__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  C4DAtom *arg1 = (C4DAtom *) 0 ;
  LONG arg2 ;
  void *arg3 = (void *) 0 ;
  Bool result;
  
  arg1 = (C4DAtom *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (void *)jarg3; 
  result = (arg1)->Message(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_C4DAtom_Message__SWIG_1(void * jarg1, int jarg2) {
  unsigned int jresult ;
  C4DAtom *arg1 = (C4DAtom *) 0 ;
  LONG arg2 ;
  Bool result;
  
  arg1 = (C4DAtom *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (arg1)->Message(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_C4DAtom_MultiMessage(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  C4DAtom *arg1 = (C4DAtom *) 0 ;
  MULTIMSG_ROUTE arg2 ;
  LONG arg3 ;
  void *arg4 = (void *) 0 ;
  Bool result;
  
  arg1 = (C4DAtom *)jarg1; 
  arg2 = (MULTIMSG_ROUTE)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (void *)jarg4; 
  result = (arg1)->MultiMessage(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_C4DAtom_GetClone(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  C4DAtom *arg1 = (C4DAtom *) 0 ;
  COPYFLAGS arg2 ;
  AliasTrans *arg3 = (AliasTrans *) 0 ;
  C4DAtom *result = 0 ;
  
  arg1 = (C4DAtom *)jarg1; 
  arg2 = (COPYFLAGS)jarg2; 
  arg3 = (AliasTrans *)jarg3; 
  result = (C4DAtom *)(arg1)->GetClone(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_C4DAtom_CopyTo(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  C4DAtom *arg1 = (C4DAtom *) 0 ;
  C4DAtom *arg2 = (C4DAtom *) 0 ;
  COPYFLAGS arg3 ;
  AliasTrans *arg4 = (AliasTrans *) 0 ;
  Bool result;
  
  arg1 = (C4DAtom *)jarg1; 
  arg2 = (C4DAtom *)jarg2; 
  arg3 = (COPYFLAGS)jarg3; 
  arg4 = (AliasTrans *)jarg4; 
  result = (arg1)->CopyTo(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_C4DAtom_Read(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  unsigned int jresult ;
  C4DAtom *arg1 = (C4DAtom *) 0 ;
  HyperFile *arg2 = (HyperFile *) 0 ;
  LONG arg3 ;
  LONG arg4 ;
  Bool result;
  
  arg1 = (C4DAtom *)jarg1; 
  arg2 = (HyperFile *)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  result = (arg1)->Read(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_C4DAtom_Write(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  C4DAtom *arg1 = (C4DAtom *) 0 ;
  HyperFile *arg2 = (HyperFile *) 0 ;
  Bool result;
  
  arg1 = (C4DAtom *)jarg1; 
  arg2 = (HyperFile *)jarg2; 
  result = (arg1)->Write(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_C4DAtom_ReadObject(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  C4DAtom *arg1 = (C4DAtom *) 0 ;
  HyperFile *arg2 = (HyperFile *) 0 ;
  Bool arg3 ;
  Bool result;
  
  arg1 = (C4DAtom *)jarg1; 
  arg2 = (HyperFile *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->ReadObject(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_C4DAtom_WriteObject(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  C4DAtom *arg1 = (C4DAtom *) 0 ;
  HyperFile *arg2 = (HyperFile *) 0 ;
  Bool result;
  
  arg1 = (C4DAtom *)jarg1; 
  arg2 = (HyperFile *)jarg2; 
  result = (arg1)->WriteObject(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_C4DAtom_GetDescription(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  C4DAtom *arg1 = (C4DAtom *) 0 ;
  Description *arg2 = (Description *) 0 ;
  DESCFLAGS_DESC arg3 ;
  Bool result;
  
  arg1 = (C4DAtom *)jarg1; 
  arg2 = (Description *)jarg2; 
  arg3 = (DESCFLAGS_DESC)jarg3; 
  result = (arg1)->GetDescription(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_C4DAtom_GetParameter(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  C4DAtom *arg1 = (C4DAtom *) 0 ;
  DescID *arg2 = 0 ;
  GeData *arg3 = 0 ;
  DESCFLAGS_GET arg4 ;
  Bool result;
  
  arg1 = (C4DAtom *)jarg1; 
  arg2 = (DescID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescID const & type is null", 0);
    return 0;
  } 
  arg3 = (GeData *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeData & type is null", 0);
    return 0;
  } 
  arg4 = (DESCFLAGS_GET)jarg4; 
  result = (arg1)->GetParameter((DescID const &)*arg2,*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_C4DAtom_SetParameter(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  C4DAtom *arg1 = (C4DAtom *) 0 ;
  DescID *arg2 = 0 ;
  GeData *arg3 = 0 ;
  DESCFLAGS_SET arg4 ;
  Bool result;
  
  arg1 = (C4DAtom *)jarg1; 
  arg2 = (DescID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescID const & type is null", 0);
    return 0;
  } 
  arg3 = (GeData *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeData const & type is null", 0);
    return 0;
  } 
  arg4 = (DESCFLAGS_SET)jarg4; 
  result = (arg1)->SetParameter((DescID const &)*arg2,(GeData const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_C4DAtom_GetDynamicDescription(void * jarg1) {
  void * jresult ;
  C4DAtom *arg1 = (C4DAtom *) 0 ;
  DynamicDescription *result = 0 ;
  
  arg1 = (C4DAtom *)jarg1; 
  result = (DynamicDescription *)(arg1)->GetDynamicDescription();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_C4DAtom_GetEnabling(void * jarg1, void * jarg2, void * jarg3, int jarg4, void * jarg5) {
  unsigned int jresult ;
  C4DAtom *arg1 = (C4DAtom *) 0 ;
  DescID *arg2 = 0 ;
  GeData *arg3 = 0 ;
  DESCFLAGS_ENABLE arg4 ;
  BaseContainer *arg5 = (BaseContainer *) 0 ;
  Bool result;
  
  arg1 = (C4DAtom *)jarg1; 
  arg2 = (DescID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescID const & type is null", 0);
    return 0;
  } 
  arg3 = (GeData *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeData const & type is null", 0);
    return 0;
  } 
  arg4 = (DESCFLAGS_ENABLE)jarg4; 
  arg5 = (BaseContainer *)jarg5; 
  result = (arg1)->GetEnabling((DescID const &)*arg2,(GeData const &)*arg3,arg4,(BaseContainer const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_C4DAtom_TranslateDescID(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  C4DAtom *arg1 = (C4DAtom *) 0 ;
  DescID *arg2 = 0 ;
  DescID *arg3 = 0 ;
  C4DAtom **arg4 = 0 ;
  Bool result;
  
  arg1 = (C4DAtom *)jarg1; 
  arg2 = (DescID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescID const & type is null", 0);
    return 0;
  } 
  arg3 = (DescID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescID & type is null", 0);
    return 0;
  } 
  arg4 = (C4DAtom **)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "C4DAtom *& type is null", 0);
    return 0;
  } 
  result = (arg1)->TranslateDescID((DescID const &)*arg2,*arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_C4DAtom_GetDirty(void * jarg1, int jarg2) {
  void * jresult ;
  C4DAtom *arg1 = (C4DAtom *) 0 ;
  DIRTYFLAGS arg2 ;
  ULONG result;
  
  arg1 = (C4DAtom *)jarg1; 
  arg2 = (DIRTYFLAGS)jarg2; 
  result = ((C4DAtom const *)arg1)->GetDirty(arg2);
  jresult = new ULONG((const ULONG &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_C4DAtom_SetDirty(void * jarg1, int jarg2) {
  C4DAtom *arg1 = (C4DAtom *) 0 ;
  DIRTYFLAGS arg2 ;
  
  arg1 = (C4DAtom *)jarg1; 
  arg2 = (DIRTYFLAGS)jarg2; 
  (arg1)->SetDirty(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_C4DAtom_GetHDirty(void * jarg1, int jarg2) {
  void * jresult ;
  C4DAtom *arg1 = (C4DAtom *) 0 ;
  HDIRTYFLAGS arg2 ;
  ULONG result;
  
  arg1 = (C4DAtom *)jarg1; 
  arg2 = (HDIRTYFLAGS)jarg2; 
  result = ((C4DAtom const *)arg1)->GetHDirty(arg2);
  jresult = new ULONG((const ULONG &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_C4DAtom_SetHDirty(void * jarg1, int jarg2) {
  C4DAtom *arg1 = (C4DAtom *) 0 ;
  HDIRTYFLAGS arg2 ;
  
  arg1 = (C4DAtom *)jarg1; 
  arg2 = (HDIRTYFLAGS)jarg2; 
  (arg1)->SetHDirty(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AtomArray_Alloc() {
  void * jresult ;
  AtomArray *result = 0 ;
  
  result = (AtomArray *)AtomArray::Alloc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AtomArray_Free(void * jarg1) {
  AtomArray **arg1 = 0 ;
  
  arg1 = (AtomArray **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AtomArray *& type is null", 0);
    return ;
  } 
  AtomArray::Free(*arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_AtomArray_GetCount__SWIG_0(void * jarg1) {
  int jresult ;
  AtomArray *arg1 = (AtomArray *) 0 ;
  LONG result;
  
  arg1 = (AtomArray *)jarg1; 
  result = ((AtomArray const *)arg1)->GetCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AtomArray_GetCount__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  AtomArray *arg1 = (AtomArray *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  LONG result;
  
  arg1 = (AtomArray *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  result = ((AtomArray const *)arg1)->GetCount(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AtomArray_GetIndex(void * jarg1, int jarg2) {
  void * jresult ;
  AtomArray *arg1 = (AtomArray *) 0 ;
  LONG arg2 ;
  C4DAtom *result = 0 ;
  
  arg1 = (AtomArray *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (C4DAtom *)((AtomArray const *)arg1)->GetIndex(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AtomArray_Append__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  AtomArray *arg1 = (AtomArray *) 0 ;
  C4DAtom *arg2 = (C4DAtom *) 0 ;
  Bool result;
  
  arg1 = (AtomArray *)jarg1; 
  arg2 = (C4DAtom *)jarg2; 
  result = (arg1)->Append(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AtomArray_Flush(void * jarg1) {
  AtomArray *arg1 = (AtomArray *) 0 ;
  
  arg1 = (AtomArray *)jarg1; 
  (arg1)->Flush();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AtomArray_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  AtomArray *arg1 = (AtomArray *) 0 ;
  C4DAtom *arg2 = (C4DAtom *) 0 ;
  Bool result;
  
  arg1 = (AtomArray *)jarg1; 
  arg2 = (C4DAtom *)jarg2; 
  result = (arg1)->Remove(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AtomArray_CopyTo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  AtomArray *arg1 = (AtomArray *) 0 ;
  AtomArray *arg2 = (AtomArray *) 0 ;
  Bool result;
  
  arg1 = (AtomArray *)jarg1; 
  arg2 = (AtomArray *)jarg2; 
  result = ((AtomArray const *)arg1)->CopyTo(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AtomArray_CopyToFilter__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  AtomArray *arg1 = (AtomArray *) 0 ;
  AtomArray *arg2 = (AtomArray *) 0 ;
  LONG arg3 ;
  LONG arg4 ;
  Bool arg5 ;
  Bool result;
  
  arg1 = (AtomArray *)jarg1; 
  arg2 = (AtomArray *)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = ((AtomArray const *)arg1)->CopyToFilter(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AtomArray_CopyToFilter__SWIG_1(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  unsigned int jresult ;
  AtomArray *arg1 = (AtomArray *) 0 ;
  AtomArray *arg2 = (AtomArray *) 0 ;
  LONG arg3 ;
  LONG arg4 ;
  Bool result;
  
  arg1 = (AtomArray *)jarg1; 
  arg2 = (AtomArray *)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  result = ((AtomArray const *)arg1)->CopyToFilter(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AtomArray_GetUserID(void * jarg1) {
  int jresult ;
  AtomArray *arg1 = (AtomArray *) 0 ;
  LONG result;
  
  arg1 = (AtomArray *)jarg1; 
  result = ((AtomArray const *)arg1)->GetUserID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AtomArray_SetUserID(void * jarg1, int jarg2) {
  AtomArray *arg1 = (AtomArray *) 0 ;
  LONG arg2 ;
  
  arg1 = (AtomArray *)jarg1; 
  arg2 = (LONG)jarg2; 
  (arg1)->SetUserID(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AtomArray_GetUserData(void * jarg1) {
  void * jresult ;
  AtomArray *arg1 = (AtomArray *) 0 ;
  void *result = 0 ;
  
  arg1 = (AtomArray *)jarg1; 
  result = (void *)((AtomArray const *)arg1)->GetUserData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AtomArray_SetUserData(void * jarg1, void * jarg2) {
  AtomArray *arg1 = (AtomArray *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (AtomArray *)jarg1; 
  arg2 = (void *)jarg2; 
  (arg1)->SetUserData(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AtomArray_GetPreferred(void * jarg1) {
  void * jresult ;
  AtomArray *arg1 = (AtomArray *) 0 ;
  C4DAtom *result = 0 ;
  
  arg1 = (AtomArray *)jarg1; 
  result = (C4DAtom *)((AtomArray const *)arg1)->GetPreferred();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AtomArray_SetPreferred(void * jarg1, void * jarg2) {
  AtomArray *arg1 = (AtomArray *) 0 ;
  C4DAtom *arg2 = (C4DAtom *) 0 ;
  
  arg1 = (AtomArray *)jarg1; 
  arg2 = (C4DAtom *)jarg2; 
  (arg1)->SetPreferred(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AtomArray_FilterObject__SWIG_0(void * jarg1, int jarg2, int jarg3, unsigned int jarg4) {
  AtomArray *arg1 = (AtomArray *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  Bool arg4 ;
  
  arg1 = (AtomArray *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->FilterObject(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AtomArray_FilterObject__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  AtomArray *arg1 = (AtomArray *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  
  arg1 = (AtomArray *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  (arg1)->FilterObject(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AtomArray_FilterObjectChildren(void * jarg1) {
  AtomArray *arg1 = (AtomArray *) 0 ;
  
  arg1 = (AtomArray *)jarg1; 
  (arg1)->FilterObjectChildren();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AtomArray_Append__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  AtomArray *arg1 = (AtomArray *) 0 ;
  AtomArray *arg2 = (AtomArray *) 0 ;
  Bool result;
  
  arg1 = (AtomArray *)jarg1; 
  arg2 = (AtomArray *)jarg2; 
  result = (arg1)->Append(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AtomArray_Find(void * jarg1, void * jarg2) {
  int jresult ;
  AtomArray *arg1 = (AtomArray *) 0 ;
  C4DAtom *arg2 = (C4DAtom *) 0 ;
  LONG result;
  
  arg1 = (AtomArray *)jarg1; 
  arg2 = (C4DAtom *)jarg2; 
  result = (arg1)->Find(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AtomArray_Compare(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  AtomArray *arg1 = (AtomArray *) 0 ;
  AtomArray *arg2 = (AtomArray *) 0 ;
  Bool result;
  
  arg1 = (AtomArray *)jarg1; 
  arg2 = (AtomArray *)jarg2; 
  result = (arg1)->Compare(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GeListNode_GetNext(void * jarg1) {
  void * jresult ;
  GeListNode *arg1 = (GeListNode *) 0 ;
  GeListNode *result = 0 ;
  
  arg1 = (GeListNode *)jarg1; 
  result = (GeListNode *)(arg1)->GetNext();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GeListNode_GetPred(void * jarg1) {
  void * jresult ;
  GeListNode *arg1 = (GeListNode *) 0 ;
  GeListNode *result = 0 ;
  
  arg1 = (GeListNode *)jarg1; 
  result = (GeListNode *)(arg1)->GetPred();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GeListNode_GetDown(void * jarg1) {
  void * jresult ;
  GeListNode *arg1 = (GeListNode *) 0 ;
  GeListNode *result = 0 ;
  
  arg1 = (GeListNode *)jarg1; 
  result = (GeListNode *)(arg1)->GetDown();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GeListNode_GetUp(void * jarg1) {
  void * jresult ;
  GeListNode *arg1 = (GeListNode *) 0 ;
  GeListNode *result = 0 ;
  
  arg1 = (GeListNode *)jarg1; 
  result = (GeListNode *)(arg1)->GetUp();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GeListNode_GetDownLast(void * jarg1) {
  void * jresult ;
  GeListNode *arg1 = (GeListNode *) 0 ;
  GeListNode *result = 0 ;
  
  arg1 = (GeListNode *)jarg1; 
  result = (GeListNode *)(arg1)->GetDownLast();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeListNode_InsertBefore(void * jarg1, void * jarg2) {
  GeListNode *arg1 = (GeListNode *) 0 ;
  GeListNode *arg2 = (GeListNode *) 0 ;
  
  arg1 = (GeListNode *)jarg1; 
  arg2 = (GeListNode *)jarg2; 
  (arg1)->InsertBefore(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeListNode_InsertAfter(void * jarg1, void * jarg2) {
  GeListNode *arg1 = (GeListNode *) 0 ;
  GeListNode *arg2 = (GeListNode *) 0 ;
  
  arg1 = (GeListNode *)jarg1; 
  arg2 = (GeListNode *)jarg2; 
  (arg1)->InsertAfter(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeListNode_InsertUnder(void * jarg1, void * jarg2) {
  GeListNode *arg1 = (GeListNode *) 0 ;
  GeListNode *arg2 = (GeListNode *) 0 ;
  
  arg1 = (GeListNode *)jarg1; 
  arg2 = (GeListNode *)jarg2; 
  (arg1)->InsertUnder(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeListNode_InsertUnderLast(void * jarg1, void * jarg2) {
  GeListNode *arg1 = (GeListNode *) 0 ;
  GeListNode *arg2 = (GeListNode *) 0 ;
  
  arg1 = (GeListNode *)jarg1; 
  arg2 = (GeListNode *)jarg2; 
  (arg1)->InsertUnderLast(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeListNode_Remove(void * jarg1) {
  GeListNode *arg1 = (GeListNode *) 0 ;
  
  arg1 = (GeListNode *)jarg1; 
  (arg1)->Remove();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GeListNode_GetListHead(void * jarg1) {
  void * jresult ;
  GeListNode *arg1 = (GeListNode *) 0 ;
  GeListHead *result = 0 ;
  
  arg1 = (GeListNode *)jarg1; 
  result = (GeListHead *)(arg1)->GetListHead();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GeListNode_GetNodeID__SWIG_0(void * jarg1, int jarg2) {
  int jresult ;
  GeListNode *arg1 = (GeListNode *) 0 ;
  LONG arg2 ;
  LONG result;
  
  arg1 = (GeListNode *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = ((GeListNode const *)arg1)->GetNodeID(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GeListNode_GetNodeID__SWIG_1(void * jarg1) {
  int jresult ;
  GeListNode *arg1 = (GeListNode *) 0 ;
  LONG result;
  
  arg1 = (GeListNode *)jarg1; 
  result = ((GeListNode const *)arg1)->GetNodeID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GeListNode_GetNodeData__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  GeListNode *arg1 = (GeListNode *) 0 ;
  LONG arg2 ;
  NodeData *result = 0 ;
  
  arg1 = (GeListNode *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (NodeData *)((GeListNode const *)arg1)->GetNodeData(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GeListNode_GetNodeData__SWIG_1(void * jarg1) {
  void * jresult ;
  GeListNode *arg1 = (GeListNode *) 0 ;
  NodeData *result = 0 ;
  
  arg1 = (GeListNode *)jarg1; 
  result = (NodeData *)((GeListNode const *)arg1)->GetNodeData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeListNode_SetCustomData(void * jarg1, void * jarg2) {
  GeListNode *arg1 = (GeListNode *) 0 ;
  GeListNode *arg2 = (GeListNode *) 0 ;
  
  arg1 = (GeListNode *)jarg1; 
  arg2 = (GeListNode *)jarg2; 
  (arg1)->SetCustomData(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GeListNode_GetCustomData(void * jarg1) {
  void * jresult ;
  GeListNode *arg1 = (GeListNode *) 0 ;
  GeListNode *result = 0 ;
  
  arg1 = (GeListNode *)jarg1; 
  result = (GeListNode *)(arg1)->GetCustomData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GeListNode_GetDocument(void * jarg1) {
  void * jresult ;
  GeListNode *arg1 = (GeListNode *) 0 ;
  BaseDocument *result = 0 ;
  
  arg1 = (GeListNode *)jarg1; 
  result = (BaseDocument *)(arg1)->GetDocument();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GeListNode_GetBranchInfo(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  int jresult ;
  GeListNode *arg1 = (GeListNode *) 0 ;
  BranchInfo *arg2 = (BranchInfo *) 0 ;
  LONG arg3 ;
  GETBRANCHINFO arg4 ;
  LONG result;
  
  arg1 = (GeListNode *)jarg1; 
  arg2 = (BranchInfo *)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (GETBRANCHINFO)jarg4; 
  result = (arg1)->GetBranchInfo(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GeListNode_IsDocumentRelated(void * jarg1) {
  unsigned int jresult ;
  GeListNode *arg1 = (GeListNode *) 0 ;
  Bool result;
  
  arg1 = (GeListNode *)jarg1; 
  result = (arg1)->IsDocumentRelated();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GeListNode_GetNBit(void * jarg1, int jarg2) {
  unsigned int jresult ;
  GeListNode *arg1 = (GeListNode *) 0 ;
  NBIT arg2 ;
  Bool result;
  
  arg1 = (GeListNode *)jarg1; 
  arg2 = (NBIT)jarg2; 
  result = ((GeListNode const *)arg1)->GetNBit(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GeListNode_ChangeNBit(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  GeListNode *arg1 = (GeListNode *) 0 ;
  NBIT arg2 ;
  NBITCONTROL arg3 ;
  Bool result;
  
  arg1 = (GeListNode *)jarg1; 
  arg2 = (NBIT)jarg2; 
  arg3 = (NBITCONTROL)jarg3; 
  result = (arg1)->ChangeNBit(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GeListNode_GetInfo(void * jarg1) {
  int jresult ;
  GeListNode *arg1 = (GeListNode *) 0 ;
  LONG result;
  
  arg1 = (GeListNode *)jarg1; 
  result = (arg1)->GetInfo();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeListHead_SetParent(void * jarg1, void * jarg2) {
  GeListHead *arg1 = (GeListHead *) 0 ;
  GeListNode *arg2 = (GeListNode *) 0 ;
  
  arg1 = (GeListHead *)jarg1; 
  arg2 = (GeListNode *)jarg2; 
  (arg1)->SetParent(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GeListHead_GetParent(void * jarg1) {
  void * jresult ;
  GeListHead *arg1 = (GeListHead *) 0 ;
  GeListNode *result = 0 ;
  
  arg1 = (GeListHead *)jarg1; 
  result = (GeListNode *)(arg1)->GetParent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GeListHead_GetFirst(void * jarg1) {
  void * jresult ;
  GeListHead *arg1 = (GeListHead *) 0 ;
  GeListNode *result = 0 ;
  
  arg1 = (GeListHead *)jarg1; 
  result = (GeListNode *)(arg1)->GetFirst();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GeListHead_GetLast(void * jarg1) {
  void * jresult ;
  GeListHead *arg1 = (GeListHead *) 0 ;
  GeListNode *result = 0 ;
  
  arg1 = (GeListHead *)jarg1; 
  result = (GeListNode *)(arg1)->GetLast();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeListHead_FlushAll(void * jarg1) {
  GeListHead *arg1 = (GeListHead *) 0 ;
  
  arg1 = (GeListHead *)jarg1; 
  (arg1)->FlushAll();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeListHead_InsertFirst(void * jarg1, void * jarg2) {
  GeListHead *arg1 = (GeListHead *) 0 ;
  GeListNode *arg2 = (GeListNode *) 0 ;
  
  arg1 = (GeListHead *)jarg1; 
  arg2 = (GeListNode *)jarg2; 
  (arg1)->InsertFirst(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeListHead_InsertLast(void * jarg1, void * jarg2) {
  GeListHead *arg1 = (GeListHead *) 0 ;
  GeListNode *arg2 = (GeListNode *) 0 ;
  
  arg1 = (GeListHead *)jarg1; 
  arg2 = (GeListNode *)jarg2; 
  (arg1)->InsertLast(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeListHead_Insert(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  GeListHead *arg1 = (GeListHead *) 0 ;
  GeListNode *arg2 = (GeListNode *) 0 ;
  GeListNode *arg3 = (GeListNode *) 0 ;
  GeListNode *arg4 = (GeListNode *) 0 ;
  
  arg1 = (GeListHead *)jarg1; 
  arg2 = (GeListNode *)jarg2; 
  arg3 = (GeListNode *)jarg3; 
  arg4 = (GeListNode *)jarg4; 
  (arg1)->Insert(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GeListHead_Alloc() {
  void * jresult ;
  GeListHead *result = 0 ;
  
  result = (GeListHead *)GeListHead::Alloc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeListHead_Free(void * jarg1) {
  GeListHead **arg1 = 0 ;
  
  arg1 = (GeListHead **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeListHead *& type is null", 0);
    return ;
  } 
  GeListHead::Free(*arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseList2D_GetNext(void * jarg1) {
  void * jresult ;
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  BaseList2D *result = 0 ;
  
  arg1 = (BaseList2D *)jarg1; 
  result = (BaseList2D *)(arg1)->GetNext();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseList2D_GetPred(void * jarg1) {
  void * jresult ;
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  BaseList2D *result = 0 ;
  
  arg1 = (BaseList2D *)jarg1; 
  result = (BaseList2D *)(arg1)->GetPred();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseList2D_SetBit(void * jarg1, int jarg2) {
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  LONG arg2 ;
  
  arg1 = (BaseList2D *)jarg1; 
  arg2 = (LONG)jarg2; 
  (arg1)->SetBit(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseList2D_GetBit(void * jarg1, int jarg2) {
  unsigned int jresult ;
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  LONG arg2 ;
  Bool result;
  
  arg1 = (BaseList2D *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (arg1)->GetBit(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseList2D_DelBit(void * jarg1, int jarg2) {
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  LONG arg2 ;
  
  arg1 = (BaseList2D *)jarg1; 
  arg2 = (LONG)jarg2; 
  (arg1)->DelBit(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseList2D_ToggleBit(void * jarg1, int jarg2) {
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  LONG arg2 ;
  
  arg1 = (BaseList2D *)jarg1; 
  arg2 = (LONG)jarg2; 
  (arg1)->ToggleBit(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseList2D_GetAllBits(void * jarg1) {
  int jresult ;
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  LONG result;
  
  arg1 = (BaseList2D *)jarg1; 
  result = (arg1)->GetAllBits();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseList2D_SetAllBits(void * jarg1, int jarg2) {
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  LONG arg2 ;
  
  arg1 = (BaseList2D *)jarg1; 
  arg2 = (LONG)jarg2; 
  (arg1)->SetAllBits(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseList2D_GetData(void * jarg1) {
  void * jresult ;
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  BaseContainer result;
  
  arg1 = (BaseList2D *)jarg1; 
  result = (arg1)->GetData();
  jresult = new BaseContainer((const BaseContainer &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseList2D_SetData__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  BaseContainer *arg2 = 0 ;
  Bool arg3 ;
  
  arg1 = (BaseList2D *)jarg1; 
  arg2 = (BaseContainer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetData((BaseContainer const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseList2D_SetData__SWIG_1(void * jarg1, void * jarg2) {
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  BaseContainer *arg2 = 0 ;
  
  arg1 = (BaseList2D *)jarg1; 
  arg2 = (BaseContainer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer const & type is null", 0);
    return ;
  } 
  (arg1)->SetData((BaseContainer const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseList2D_GetDataInstance__SWIG_0(void * jarg1) {
  void * jresult ;
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  BaseContainer *result = 0 ;
  
  arg1 = (BaseList2D *)jarg1; 
  result = (BaseContainer *)((BaseList2D const *)arg1)->GetDataInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * /* constString&_ctype */ SWIGSTDCALL CSharp_BaseList2D_GetName(void * jarg1) {
  char * /* constString&_ctype */ jresult ;
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  String *result = 0 ;
  
  arg1 = (BaseList2D *)jarg1; 
  result = (String *) &((BaseList2D const *)arg1)->GetName();
  jresult = SWIG_csharp_string_callback(result->GetCStringCopy()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseList2D_SetName(void * jarg1, char * /* constString&_ctype */ jarg2) {
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (BaseList2D *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  String arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->SetName((String const &)*arg2);
}


SWIGEXPORT char * /* String_ctype */ SWIGSTDCALL CSharp_BaseList2D_GetBubbleHelp(void * jarg1) {
  char * /* String_ctype */ jresult ;
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  String result;
  
  arg1 = (BaseList2D *)jarg1; 
  result = (arg1)->GetBubbleHelp();
  /* <String_out> */ 
  jresult = SWIG_csharp_string_callback((&result)->GetCStringCopy()); 
  /* </String_out> */
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseList2D_TransferGoal(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  BaseList2D *arg2 = (BaseList2D *) 0 ;
  Bool arg3 ;
  Bool result;
  
  arg1 = (BaseList2D *)jarg1; 
  arg2 = (BaseList2D *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->TransferGoal(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseList2D_TransferMarker(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  BaseList2D *arg2 = (BaseList2D *) 0 ;
  Bool result;
  
  arg1 = (BaseList2D *)jarg1; 
  arg2 = (BaseList2D *)jarg2; 
  result = ((BaseList2D const *)arg1)->TransferMarker(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseList2D_GetMarkerStampEx(void * jarg1, void * jarg2, void * jarg3) {
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  ULONG *arg2 = (ULONG *) 0 ;
  ULONG *arg3 = (ULONG *) 0 ;
  
  arg1 = (BaseList2D *)jarg1; 
  arg2 = (ULONG *)jarg2; 
  arg3 = (ULONG *)jarg3; 
  (arg1)->GetMarkerStampEx(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseList2D_GetMarker(void * jarg1) {
  void * jresult ;
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  GeMarker *result = 0 ;
  
  arg1 = (BaseList2D *)jarg1; 
  result = (GeMarker *) &((BaseList2D const *)arg1)->GetMarker();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseList2D_SetMarker(void * jarg1, void * jarg2) {
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  GeMarker *arg2 = 0 ;
  
  arg1 = (BaseList2D *)jarg1; 
  arg2 = (GeMarker *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeMarker const & type is null", 0);
    return ;
  } 
  (arg1)->SetMarker((GeMarker const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseList2D_AddUniqueID(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  LONG arg2 ;
  CHAR *arg3 = (CHAR *) (CHAR *)0 ;
  VLONG arg4 ;
  VLONG *argp4 ;
  Bool result;
  
  arg1 = (BaseList2D *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (CHAR *)jarg3; 
  argp4 = (VLONG *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null VLONG", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (arg1)->AddUniqueID(arg2,(CHAR const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseList2D_FindUniqueID(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  LONG arg2 ;
  CHAR **arg3 = 0 ;
  VLONG *arg4 = 0 ;
  Bool result;
  
  arg1 = (BaseList2D *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (CHAR **)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CHAR const *& type is null", 0);
    return 0;
  } 
  arg4 = (VLONG *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VLONG & type is null", 0);
    return 0;
  } 
  result = ((BaseList2D const *)arg1)->FindUniqueID(arg2,(CHAR const *&)*arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseList2D_GetUniqueIDCount(void * jarg1) {
  int jresult ;
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  LONG result;
  
  arg1 = (BaseList2D *)jarg1; 
  result = ((BaseList2D const *)arg1)->GetUniqueIDCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseList2D_GetUniqueIDIndex(void * jarg1, int jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  LONG arg2 ;
  LONG *arg3 = 0 ;
  CHAR **arg4 = 0 ;
  VLONG *arg5 = 0 ;
  Bool result;
  
  arg1 = (BaseList2D *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  arg4 = (CHAR **)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CHAR const *& type is null", 0);
    return 0;
  } 
  arg5 = (VLONG *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VLONG & type is null", 0);
    return 0;
  } 
  result = ((BaseList2D const *)arg1)->GetUniqueIDIndex(arg2,*arg3,(CHAR const *&)*arg4,*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseList2D_SetAnimatedParameter(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, double jarg6, int jarg7) {
  unsigned int jresult ;
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  CTrack *arg2 = (CTrack *) 0 ;
  DescID *arg3 = 0 ;
  GeData *arg4 = 0 ;
  GeData *arg5 = 0 ;
  Real arg6 ;
  DESCFLAGS_SET arg7 ;
  Bool result;
  
  arg1 = (BaseList2D *)jarg1; 
  arg2 = (CTrack *)jarg2; 
  arg3 = (DescID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescID const & type is null", 0);
    return 0;
  } 
  arg4 = (GeData *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeData const & type is null", 0);
    return 0;
  } 
  arg5 = (GeData *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeData const & type is null", 0);
    return 0;
  } 
  arg6 = (Real)jarg6; 
  arg7 = (DESCFLAGS_SET)jarg7; 
  result = (arg1)->SetAnimatedParameter(arg2,(DescID const &)*arg3,(GeData const &)*arg4,(GeData const &)*arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseList2D_GetAnimatedParameter(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, int jarg6) {
  unsigned int jresult ;
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  DescID *arg2 = 0 ;
  GeData *arg3 = 0 ;
  GeData *arg4 = 0 ;
  Real *arg5 = 0 ;
  DESCFLAGS_GET arg6 ;
  Bool result;
  
  arg1 = (BaseList2D *)jarg1; 
  arg2 = (DescID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescID const & type is null", 0);
    return 0;
  } 
  arg3 = (GeData *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeData & type is null", 0);
    return 0;
  } 
  arg4 = (GeData *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeData & type is null", 0);
    return 0;
  } 
  arg5 = (Real *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Real & type is null", 0);
    return 0;
  } 
  arg6 = (DESCFLAGS_GET)jarg6; 
  result = (arg1)->GetAnimatedParameter((DescID const &)*arg2,*arg3,*arg4,*arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseList2D_Scale(void * jarg1, double jarg2) {
  unsigned int jresult ;
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  Real arg2 ;
  Bool result;
  
  arg1 = (BaseList2D *)jarg1; 
  arg2 = (Real)jarg2; 
  result = (arg1)->Scale(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseList2D_GetFirstShader(void * jarg1) {
  void * jresult ;
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  BaseShader *result = 0 ;
  
  arg1 = (BaseList2D *)jarg1; 
  result = (BaseShader *)((BaseList2D const *)arg1)->GetFirstShader();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseList2D_InsertShader__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  BaseShader *arg2 = (BaseShader *) 0 ;
  BaseShader *arg3 = (BaseShader *) 0 ;
  
  arg1 = (BaseList2D *)jarg1; 
  arg2 = (BaseShader *)jarg2; 
  arg3 = (BaseShader *)jarg3; 
  (arg1)->InsertShader(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseList2D_InsertShader__SWIG_1(void * jarg1, void * jarg2) {
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  BaseShader *arg2 = (BaseShader *) 0 ;
  
  arg1 = (BaseList2D *)jarg1; 
  arg2 = (BaseShader *)jarg2; 
  (arg1)->InsertShader(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseList2D_Edit(void * jarg1) {
  unsigned int jresult ;
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  Bool result;
  
  arg1 = (BaseList2D *)jarg1; 
  result = (arg1)->Edit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseList2D_GetIcon(void * jarg1, void * jarg2) {
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  IconData *arg2 = (IconData *) 0 ;
  
  arg1 = (BaseList2D *)jarg1; 
  arg2 = (IconData *)jarg2; 
  (arg1)->GetIcon(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseList2D_ClearKeyframeSelection(void * jarg1) {
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  
  arg1 = (BaseList2D *)jarg1; 
  (arg1)->ClearKeyframeSelection();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseList2D_FindKeyframeSelection(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  DescID *arg2 = 0 ;
  Bool result;
  
  arg1 = (BaseList2D *)jarg1; 
  arg2 = (DescID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescID const & type is null", 0);
    return 0;
  } 
  result = (arg1)->FindKeyframeSelection((DescID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseList2D_SetKeyframeSelection(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  DescID *arg2 = 0 ;
  Bool arg3 ;
  Bool result;
  
  arg1 = (BaseList2D *)jarg1; 
  arg2 = (DescID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescID const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->SetKeyframeSelection((DescID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseList2D_KeyframeSelectionContent(void * jarg1) {
  unsigned int jresult ;
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  Bool result;
  
  arg1 = (BaseList2D *)jarg1; 
  result = (arg1)->KeyframeSelectionContent();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseList2D_GetLayerObject(void * jarg1, void * jarg2) {
  void * jresult ;
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  LayerObject *result = 0 ;
  
  arg1 = (BaseList2D *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  result = (LayerObject *)(arg1)->GetLayerObject(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseList2D_SetLayerObject(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  LayerObject *arg2 = (LayerObject *) 0 ;
  Bool result;
  
  arg1 = (BaseList2D *)jarg1; 
  arg2 = (LayerObject *)jarg2; 
  result = (arg1)->SetLayerObject(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseList2D_GetLayerData__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  Bool arg3 ;
  LayerData *result = 0 ;
  
  arg1 = (BaseList2D *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (LayerData *)(arg1)->GetLayerData(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseList2D_GetLayerData__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  LayerData *result = 0 ;
  
  arg1 = (BaseList2D *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  result = (LayerData *)(arg1)->GetLayerData(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseList2D_SetLayerData(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  LayerData *arg3 = 0 ;
  Bool result;
  
  arg1 = (BaseList2D *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (LayerData *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LayerData const & type is null", 0);
    return 0;
  } 
  result = (arg1)->SetLayerData(arg2,(LayerData const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseList2D_GetCTrackRoot(void * jarg1) {
  void * jresult ;
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  GeListHead *result = 0 ;
  
  arg1 = (BaseList2D *)jarg1; 
  result = (GeListHead *)(arg1)->GetCTrackRoot();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseList2D_GetFirstCTrack(void * jarg1) {
  void * jresult ;
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  CTrack *result = 0 ;
  
  arg1 = (BaseList2D *)jarg1; 
  result = (CTrack *)(arg1)->GetFirstCTrack();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseList2D_FindCTrack(void * jarg1, void * jarg2) {
  void * jresult ;
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  DescID *arg2 = 0 ;
  CTrack *result = 0 ;
  
  arg1 = (BaseList2D *)jarg1; 
  arg2 = (DescID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescID const & type is null", 0);
    return 0;
  } 
  result = (CTrack *)(arg1)->FindCTrack((DescID const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseList2D_GetNLARoot(void * jarg1) {
  void * jresult ;
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  GeListHead *result = 0 ;
  
  arg1 = (BaseList2D *)jarg1; 
  result = (GeListHead *)(arg1)->GetNLARoot();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseList2D_AnimationLayerRemap__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  BaseObject **arg2 = (BaseObject **) 0 ;
  BaseList2D *result = 0 ;
  
  arg1 = (BaseList2D *)jarg1; 
  arg2 = (BaseObject **)jarg2; 
  result = (BaseList2D *)(arg1)->AnimationLayerRemap(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseList2D_AnimationLayerRemap__SWIG_1(void * jarg1) {
  void * jresult ;
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  BaseList2D *result = 0 ;
  
  arg1 = (BaseList2D *)jarg1; 
  result = (BaseList2D *)(arg1)->AnimationLayerRemap();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * /* constString&_ctype */ SWIGSTDCALL CSharp_BaseList2D_GetTypeName(void * jarg1) {
  char * /* constString&_ctype */ jresult ;
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  String *result = 0 ;
  
  arg1 = (BaseList2D *)jarg1; 
  result = (String *) &(arg1)->GetTypeName();
  jresult = SWIG_csharp_string_callback(result->GetCStringCopy()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseList2D_GetMain(void * jarg1) {
  void * jresult ;
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  BaseList2D *result = 0 ;
  
  arg1 = (BaseList2D *)jarg1; 
  result = (BaseList2D *)((BaseList2D const *)arg1)->GetMain();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseList2D_InsertTrackSorted(void * jarg1, void * jarg2) {
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  CTrack *arg2 = (CTrack *) 0 ;
  
  arg1 = (BaseList2D *)jarg1; 
  arg2 = (CTrack *)jarg2; 
  (arg1)->InsertTrackSorted(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseList2D_AddEventNotification(void * jarg1, void * jarg2, int jarg3, int jarg4, void * jarg5) {
  unsigned int jresult ;
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  BaseList2D *arg2 = (BaseList2D *) 0 ;
  NOTIFY_EVENT arg3 ;
  NOTIFY_EVENT_FLAG arg4 ;
  BaseContainer *arg5 = (BaseContainer *) 0 ;
  Bool result;
  
  arg1 = (BaseList2D *)jarg1; 
  arg2 = (BaseList2D *)jarg2; 
  arg3 = (NOTIFY_EVENT)jarg3; 
  arg4 = (NOTIFY_EVENT_FLAG)jarg4; 
  arg5 = (BaseContainer *)jarg5; 
  result = (arg1)->AddEventNotification(arg2,arg3,arg4,(BaseContainer const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseList2D_RemoveEventNotification(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  BaseList2D *arg3 = (BaseList2D *) 0 ;
  NOTIFY_EVENT arg4 ;
  Bool result;
  
  arg1 = (BaseList2D *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (BaseList2D *)jarg3; 
  arg4 = (NOTIFY_EVENT)jarg4; 
  result = (arg1)->RemoveEventNotification(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseList2D_FindEventNotification(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  BaseList2D *arg3 = (BaseList2D *) 0 ;
  NOTIFY_EVENT arg4 ;
  Bool result;
  
  arg1 = (BaseList2D *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (BaseList2D *)jarg3; 
  arg4 = (NOTIFY_EVENT)jarg4; 
  result = (arg1)->FindEventNotification(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseList2D_SetDescIDState(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  DescID *arg2 = 0 ;
  DESCIDSTATE arg3 ;
  DESCIDSTATE *argp3 ;
  Bool result;
  
  arg1 = (BaseList2D *)jarg1; 
  arg2 = (DescID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescID const & type is null", 0);
    return 0;
  } 
  argp3 = (DESCIDSTATE *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null DESCIDSTATE", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->SetDescIDState((DescID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseList2D_GetDescIDState(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  BaseList2D *arg1 = (BaseList2D *) 0 ;
  DescID *arg2 = 0 ;
  Bool arg3 ;
  DESCIDSTATE result;
  
  arg1 = (BaseList2D *)jarg1; 
  arg2 = (DescID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescID const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((BaseList2D const *)arg1)->GetDescIDState((DescID const &)*arg2,arg3);
  jresult = new DESCIDSTATE((const DESCIDSTATE &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseList2D_Alloc(int jarg1) {
  void * jresult ;
  LONG arg1 ;
  BaseList2D *result = 0 ;
  
  arg1 = (LONG)jarg1; 
  result = (BaseList2D *)BaseList2D::Alloc(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseList2D_Free(void * jarg1) {
  BaseList2D **arg1 = 0 ;
  
  arg1 = (BaseList2D **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseList2D *& type is null", 0);
    return ;
  } 
  BaseList2D::Free(*arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AllocListHead() {
  void * jresult ;
  GeListHead *result = 0 ;
  
  result = (GeListHead *)AllocListHead();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AllocListNode(int jarg1) {
  void * jresult ;
  LONG arg1 ;
  GeListNode *result = 0 ;
  
  arg1 = (LONG)jarg1; 
  result = (GeListNode *)AllocListNode(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AllocSmallListNode(int jarg1) {
  void * jresult ;
  LONG arg1 ;
  GeListNode *result = 0 ;
  
  arg1 = (LONG)jarg1; 
  result = (GeListNode *)AllocSmallListNode(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AllocMultiNode(void * jarg1, int jarg2) {
  void * jresult ;
  LONG *arg1 = (LONG *) 0 ;
  LONG arg2 ;
  GeListNode *result = 0 ;
  
  arg1 = (LONG *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (GeListNode *)AllocMultiNode(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseLink_GetLink__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  BaseLink *arg1 = (BaseLink *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  LONG arg3 ;
  BaseList2D *result = 0 ;
  
  arg1 = (BaseLink *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (LONG)jarg3; 
  result = (BaseList2D *)((BaseLink const *)arg1)->GetLink((BaseDocument const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseLink_GetLink__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  BaseLink *arg1 = (BaseLink *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  BaseList2D *result = 0 ;
  
  arg1 = (BaseLink *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  result = (BaseList2D *)((BaseLink const *)arg1)->GetLink((BaseDocument const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseLink_GetLinkAtom__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  BaseLink *arg1 = (BaseLink *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  LONG arg3 ;
  C4DAtomGoal *result = 0 ;
  
  arg1 = (BaseLink *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (LONG)jarg3; 
  result = (C4DAtomGoal *)((BaseLink const *)arg1)->GetLinkAtom((BaseDocument const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseLink_GetLinkAtom__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  BaseLink *arg1 = (BaseLink *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  C4DAtomGoal *result = 0 ;
  
  arg1 = (BaseLink *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  result = (C4DAtomGoal *)((BaseLink const *)arg1)->GetLinkAtom((BaseDocument const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseLink_ForceGetLink(void * jarg1) {
  void * jresult ;
  BaseLink *arg1 = (BaseLink *) 0 ;
  BaseList2D *result = 0 ;
  
  arg1 = (BaseLink *)jarg1; 
  result = (BaseList2D *)((BaseLink const *)arg1)->ForceGetLink();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseLink_ForceGetLinkAtom(void * jarg1) {
  void * jresult ;
  BaseLink *arg1 = (BaseLink *) 0 ;
  C4DAtomGoal *result = 0 ;
  
  arg1 = (BaseLink *)jarg1; 
  result = (C4DAtomGoal *)((BaseLink const *)arg1)->ForceGetLinkAtom();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseLink_SetLink(void * jarg1, void * jarg2) {
  BaseLink *arg1 = (BaseLink *) 0 ;
  C4DAtomGoal *arg2 = (C4DAtomGoal *) 0 ;
  
  arg1 = (BaseLink *)jarg1; 
  arg2 = (C4DAtomGoal *)jarg2; 
  (arg1)->SetLink(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseLink_Read(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BaseLink *arg1 = (BaseLink *) 0 ;
  HyperFile *arg2 = (HyperFile *) 0 ;
  Bool result;
  
  arg1 = (BaseLink *)jarg1; 
  arg2 = (HyperFile *)jarg2; 
  result = (arg1)->Read(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseLink_Write(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BaseLink *arg1 = (BaseLink *) 0 ;
  HyperFile *arg2 = (HyperFile *) 0 ;
  Bool result;
  
  arg1 = (BaseLink *)jarg1; 
  arg2 = (HyperFile *)jarg2; 
  result = ((BaseLink const *)arg1)->Write(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseLink_GetClone(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  BaseLink *arg1 = (BaseLink *) 0 ;
  COPYFLAGS arg2 ;
  AliasTrans *arg3 = (AliasTrans *) 0 ;
  BaseLink *result = 0 ;
  
  arg1 = (BaseLink *)jarg1; 
  arg2 = (COPYFLAGS)jarg2; 
  arg3 = (AliasTrans *)jarg3; 
  result = (BaseLink *)((BaseLink const *)arg1)->GetClone(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseLink_CopyTo(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  BaseLink *arg1 = (BaseLink *) 0 ;
  BaseLink *arg2 = (BaseLink *) 0 ;
  COPYFLAGS arg3 ;
  AliasTrans *arg4 = (AliasTrans *) 0 ;
  Bool result;
  
  arg1 = (BaseLink *)jarg1; 
  arg2 = (BaseLink *)jarg2; 
  arg3 = (COPYFLAGS)jarg3; 
  arg4 = (AliasTrans *)jarg4; 
  result = ((BaseLink const *)arg1)->CopyTo(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseLink_IsCacheLink(void * jarg1) {
  unsigned int jresult ;
  BaseLink *arg1 = (BaseLink *) 0 ;
  Bool result;
  
  arg1 = (BaseLink *)jarg1; 
  result = ((BaseLink const *)arg1)->IsCacheLink();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseLink_Alloc() {
  void * jresult ;
  BaseLink *result = 0 ;
  
  result = (BaseLink *)BaseLink::Alloc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseLink_Free(void * jarg1) {
  BaseLink **arg1 = 0 ;
  
  arg1 = (BaseLink **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseLink *& type is null", 0);
    return ;
  } 
  BaseLink::Free(*arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AliasTrans_Init(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  AliasTrans *arg1 = (AliasTrans *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  Bool result;
  
  arg1 = (AliasTrans *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  result = (arg1)->Init(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AliasTrans_Translate(void * jarg1, unsigned int jarg2) {
  AliasTrans *arg1 = (AliasTrans *) 0 ;
  Bool arg2 ;
  
  arg1 = (AliasTrans *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->Translate(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AliasTrans_Alloc() {
  void * jresult ;
  AliasTrans *result = 0 ;
  
  result = (AliasTrans *)AliasTrans::Alloc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AliasTrans_Free(void * jarg1) {
  AliasTrans **arg1 = 0 ;
  
  arg1 = (AliasTrans **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AliasTrans *& type is null", 0);
    return ;
  } 
  AliasTrans::Free(*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HandleShaderMessage(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  GeListNode *arg1 = (GeListNode *) 0 ;
  BaseShader *arg2 = (BaseShader *) 0 ;
  LONG arg3 ;
  void *arg4 = (void *) 0 ;
  
  arg1 = (GeListNode *)jarg1; 
  arg2 = (BaseShader *)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (void *)jarg4; 
  HandleShaderMessage(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HandleInitialChannel(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  GeListNode *arg1 = (GeListNode *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  void *arg4 = (void *) 0 ;
  
  arg1 = (GeListNode *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (void *)jarg4; 
  HandleInitialChannel(arg1,arg2,arg3,arg4);
}


SWIGEXPORT double SWIGSTDCALL CSharp_CalculateTranslationScale__SWIG_0(void * jarg1, void * jarg2) {
  double jresult ;
  UnitScaleData *arg1 = (UnitScaleData *) 0 ;
  UnitScaleData *arg2 = (UnitScaleData *) 0 ;
  Real result;
  
  arg1 = (UnitScaleData *)jarg1; 
  arg2 = (UnitScaleData *)jarg2; 
  result = CalculateTranslationScale((UnitScaleData const *)arg1,(UnitScaleData const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CalculateTranslationScale__SWIG_1(void * jarg1, void * jarg2) {
  double jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  Real result;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  result = CalculateTranslationScale(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MODE_ON_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MODE_OFF_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MODE_UNDEF_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPolygon_a_set(void * jarg1, int jarg2) {
  CPolygon *arg1 = (CPolygon *) 0 ;
  LONG arg2 ;
  
  arg1 = (CPolygon *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->a = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CPolygon_a_get(void * jarg1) {
  int jresult ;
  CPolygon *arg1 = (CPolygon *) 0 ;
  LONG result;
  
  arg1 = (CPolygon *)jarg1; 
  result =  ((arg1)->a);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPolygon_b_set(void * jarg1, int jarg2) {
  CPolygon *arg1 = (CPolygon *) 0 ;
  LONG arg2 ;
  
  arg1 = (CPolygon *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CPolygon_b_get(void * jarg1) {
  int jresult ;
  CPolygon *arg1 = (CPolygon *) 0 ;
  LONG result;
  
  arg1 = (CPolygon *)jarg1; 
  result =  ((arg1)->b);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPolygon_c_set(void * jarg1, int jarg2) {
  CPolygon *arg1 = (CPolygon *) 0 ;
  LONG arg2 ;
  
  arg1 = (CPolygon *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->c = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CPolygon_c_get(void * jarg1) {
  int jresult ;
  CPolygon *arg1 = (CPolygon *) 0 ;
  LONG result;
  
  arg1 = (CPolygon *)jarg1; 
  result =  ((arg1)->c);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPolygon_d_set(void * jarg1, int jarg2) {
  CPolygon *arg1 = (CPolygon *) 0 ;
  LONG arg2 ;
  
  arg1 = (CPolygon *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->d = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CPolygon_d_get(void * jarg1) {
  int jresult ;
  CPolygon *arg1 = (CPolygon *) 0 ;
  LONG result;
  
  arg1 = (CPolygon *)jarg1; 
  result =  ((arg1)->d);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CPolygon__SWIG_0() {
  void * jresult ;
  CPolygon *result = 0 ;
  
  result = (CPolygon *)new CPolygon();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CPolygon__SWIG_1(int jarg1, int jarg2, int jarg3) {
  void * jresult ;
  LONG arg1 ;
  LONG arg2 ;
  LONG arg3 ;
  CPolygon *result = 0 ;
  
  arg1 = (LONG)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  result = (CPolygon *)new CPolygon(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CPolygon__SWIG_2(int jarg1, int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  LONG arg1 ;
  LONG arg2 ;
  LONG arg3 ;
  LONG arg4 ;
  CPolygon *result = 0 ;
  
  arg1 = (LONG)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  result = (CPolygon *)new CPolygon(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CPolygon_IsTriangle(void * jarg1) {
  unsigned int jresult ;
  CPolygon *arg1 = (CPolygon *) 0 ;
  Bool result;
  
  arg1 = (CPolygon *)jarg1; 
  result = ((CPolygon const *)arg1)->IsTriangle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CPolygon_Find(void * jarg1, int jarg2) {
  int jresult ;
  CPolygon *arg1 = (CPolygon *) 0 ;
  LONG arg2 ;
  LONG result;
  
  arg1 = (CPolygon *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = ((CPolygon const *)arg1)->Find(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CPolygon_FindEdge(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  CPolygon *arg1 = (CPolygon *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  LONG result;
  
  arg1 = (CPolygon *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  result = ((CPolygon const *)arg1)->FindEdge(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CPolygon(void * jarg1) {
  CPolygon *arg1 = (CPolygon *) 0 ;
  
  arg1 = (CPolygon *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tangent_vl_set(void * jarg1, Vector /* Vector_ctype */ jarg2) {
  Tangent *arg1 = (Tangent *) 0 ;
  Vector arg2 ;
  
  arg1 = (Tangent *)jarg1; 
  
  /* <Vector_in> */
  arg2 = *((Vector *)&(jarg2));
  /* </Vector_in> */
  
  if (arg1) (arg1)->vl = arg2;
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_Tangent_vl_get(void * jarg1) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  Tangent *arg1 = (Tangent *) 0 ;
  Vector result;
  
  arg1 = (Tangent *)jarg1; 
  result =  ((arg1)->vl);
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tangent_vr_set(void * jarg1, Vector /* Vector_ctype */ jarg2) {
  Tangent *arg1 = (Tangent *) 0 ;
  Vector arg2 ;
  
  arg1 = (Tangent *)jarg1; 
  
  /* <Vector_in> */
  arg2 = *((Vector *)&(jarg2));
  /* </Vector_in> */
  
  if (arg1) (arg1)->vr = arg2;
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_Tangent_vr_get(void * jarg1) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  Tangent *arg1 = (Tangent *) 0 ;
  Vector result;
  
  arg1 = (Tangent *)jarg1; 
  result =  ((arg1)->vr);
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Tangent() {
  void * jresult ;
  Tangent *result = 0 ;
  
  result = (Tangent *)new Tangent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Tangent(void * jarg1) {
  Tangent *arg1 = (Tangent *) 0 ;
  
  arg1 = (Tangent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Segment_cnt_set(void * jarg1, int jarg2) {
  Segment *arg1 = (Segment *) 0 ;
  LONG arg2 ;
  
  arg1 = (Segment *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->cnt = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Segment_cnt_get(void * jarg1) {
  int jresult ;
  Segment *arg1 = (Segment *) 0 ;
  LONG result;
  
  arg1 = (Segment *)jarg1; 
  result =  ((arg1)->cnt);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Segment_closed_set(void * jarg1, unsigned int jarg2) {
  Segment *arg1 = (Segment *) 0 ;
  Bool arg2 ;
  
  arg1 = (Segment *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->closed = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Segment_closed_get(void * jarg1) {
  unsigned int jresult ;
  Segment *arg1 = (Segment *) 0 ;
  Bool result;
  
  arg1 = (Segment *)jarg1; 
  result =  ((arg1)->closed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Segment() {
  void * jresult ;
  Segment *result = 0 ;
  
  result = (Segment *)new Segment();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Segment(void * jarg1) {
  Segment *arg1 = (Segment *) 0 ;
  
  arg1 = (Segment *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectColorProperties_usecolor_set(void * jarg1, int jarg2) {
  ObjectColorProperties *arg1 = (ObjectColorProperties *) 0 ;
  LONG arg2 ;
  
  arg1 = (ObjectColorProperties *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->usecolor = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ObjectColorProperties_usecolor_get(void * jarg1) {
  int jresult ;
  ObjectColorProperties *arg1 = (ObjectColorProperties *) 0 ;
  LONG result;
  
  arg1 = (ObjectColorProperties *)jarg1; 
  result =  ((arg1)->usecolor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectColorProperties_color_set(void * jarg1, Vector /* Vector_ctype */ jarg2) {
  ObjectColorProperties *arg1 = (ObjectColorProperties *) 0 ;
  Vector arg2 ;
  
  arg1 = (ObjectColorProperties *)jarg1; 
  
  /* <Vector_in> */
  arg2 = *((Vector *)&(jarg2));
  /* </Vector_in> */
  
  if (arg1) (arg1)->color = arg2;
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_ObjectColorProperties_color_get(void * jarg1) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  ObjectColorProperties *arg1 = (ObjectColorProperties *) 0 ;
  Vector result;
  
  arg1 = (ObjectColorProperties *)jarg1; 
  result =  ((arg1)->color);
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectColorProperties_xray_set(void * jarg1, unsigned int jarg2) {
  ObjectColorProperties *arg1 = (ObjectColorProperties *) 0 ;
  Bool arg2 ;
  
  arg1 = (ObjectColorProperties *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->xray = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ObjectColorProperties_xray_get(void * jarg1) {
  unsigned int jresult ;
  ObjectColorProperties *arg1 = (ObjectColorProperties *) 0 ;
  Bool result;
  
  arg1 = (ObjectColorProperties *)jarg1; 
  result =  ((arg1)->xray);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ObjectColorProperties() {
  void * jresult ;
  ObjectColorProperties *result = 0 ;
  
  result = (ObjectColorProperties *)new ObjectColorProperties();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ObjectColorProperties(void * jarg1) {
  ObjectColorProperties *arg1 = (ObjectColorProperties *) 0 ;
  
  arg1 = (ObjectColorProperties *)jarg1; 
  delete arg1;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HierarchyHelp_GetLOD(void * jarg1) {
  double jresult ;
  HierarchyHelp *arg1 = (HierarchyHelp *) 0 ;
  Real result;
  
  arg1 = (HierarchyHelp *)jarg1; 
  result = (arg1)->GetLOD();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HierarchyHelp_GetBuildFlags(void * jarg1) {
  int jresult ;
  HierarchyHelp *arg1 = (HierarchyHelp *) 0 ;
  BUILDFLAGS result;
  
  arg1 = (HierarchyHelp *)jarg1; 
  result = (BUILDFLAGS)(arg1)->GetBuildFlags();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HierarchyHelp_GetMg(void * jarg1) {
  void * jresult ;
  HierarchyHelp *arg1 = (HierarchyHelp *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (HierarchyHelp *)jarg1; 
  result = (Matrix *) &(arg1)->GetMg();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HierarchyHelp_GetThread(void * jarg1) {
  void * jresult ;
  HierarchyHelp *arg1 = (HierarchyHelp *) 0 ;
  BaseThread *result = 0 ;
  
  arg1 = (HierarchyHelp *)jarg1; 
  result = (BaseThread *)(arg1)->GetThread();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HierarchyHelp_GetDocument(void * jarg1) {
  void * jresult ;
  HierarchyHelp *arg1 = (HierarchyHelp *) 0 ;
  BaseDocument *result = 0 ;
  
  arg1 = (HierarchyHelp *)jarg1; 
  result = (BaseDocument *)(arg1)->GetDocument();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseObject_GetNext(void * jarg1) {
  void * jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  BaseObject *result = 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  result = (BaseObject *)(arg1)->GetNext();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseObject_GetPred(void * jarg1) {
  void * jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  BaseObject *result = 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  result = (BaseObject *)(arg1)->GetPred();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseObject_GetUp(void * jarg1) {
  void * jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  BaseObject *result = 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  result = (BaseObject *)(arg1)->GetUp();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseObject_GetDown(void * jarg1) {
  void * jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  BaseObject *result = 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  result = (BaseObject *)(arg1)->GetDown();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseObject_GetDownLast(void * jarg1) {
  void * jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  BaseObject *result = 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  result = (BaseObject *)(arg1)->GetDownLast();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_BaseObject_GetVisibility(void * jarg1, double jarg2) {
  double jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  Real arg2 ;
  Real result;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = (Real)jarg2; 
  result = (arg1)->GetVisibility(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_BaseObject_GetAbsPos(void * jarg1) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  Vector result;
  
  arg1 = (BaseObject *)jarg1; 
  result = ((BaseObject const *)arg1)->GetAbsPos();
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseObject_SetAbsPos(void * jarg1, void * jarg2) {
  BaseObject *arg1 = (BaseObject *) 0 ;
  Vector *arg2 = 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  (arg1)->SetAbsPos((Vector const &)*arg2);
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_BaseObject_GetAbsScale(void * jarg1) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  Vector result;
  
  arg1 = (BaseObject *)jarg1; 
  result = ((BaseObject const *)arg1)->GetAbsScale();
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseObject_SetAbsScale(void * jarg1, void * jarg2) {
  BaseObject *arg1 = (BaseObject *) 0 ;
  Vector *arg2 = 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  (arg1)->SetAbsScale((Vector const &)*arg2);
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_BaseObject_GetAbsRot(void * jarg1) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  Vector result;
  
  arg1 = (BaseObject *)jarg1; 
  result = ((BaseObject const *)arg1)->GetAbsRot();
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseObject_SetAbsRot(void * jarg1, void * jarg2) {
  BaseObject *arg1 = (BaseObject *) 0 ;
  Vector *arg2 = 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  (arg1)->SetAbsRot((Vector const &)*arg2);
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_BaseObject_GetFrozenPos(void * jarg1) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  Vector result;
  
  arg1 = (BaseObject *)jarg1; 
  result = ((BaseObject const *)arg1)->GetFrozenPos();
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseObject_SetFrozenPos(void * jarg1, void * jarg2) {
  BaseObject *arg1 = (BaseObject *) 0 ;
  Vector *arg2 = 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  (arg1)->SetFrozenPos((Vector const &)*arg2);
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_BaseObject_GetFrozenScale(void * jarg1) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  Vector result;
  
  arg1 = (BaseObject *)jarg1; 
  result = ((BaseObject const *)arg1)->GetFrozenScale();
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseObject_SetFrozenScale(void * jarg1, void * jarg2) {
  BaseObject *arg1 = (BaseObject *) 0 ;
  Vector *arg2 = 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  (arg1)->SetFrozenScale((Vector const &)*arg2);
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_BaseObject_GetFrozenRot(void * jarg1) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  Vector result;
  
  arg1 = (BaseObject *)jarg1; 
  result = ((BaseObject const *)arg1)->GetFrozenRot();
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseObject_SetFrozenRot(void * jarg1, void * jarg2) {
  BaseObject *arg1 = (BaseObject *) 0 ;
  Vector *arg2 = 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  (arg1)->SetFrozenRot((Vector const &)*arg2);
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_BaseObject_GetRelPos(void * jarg1) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  Vector result;
  
  arg1 = (BaseObject *)jarg1; 
  result = ((BaseObject const *)arg1)->GetRelPos();
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseObject_SetRelPos(void * jarg1, void * jarg2) {
  BaseObject *arg1 = (BaseObject *) 0 ;
  Vector *arg2 = 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  (arg1)->SetRelPos((Vector const &)*arg2);
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_BaseObject_GetRelScale(void * jarg1) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  Vector result;
  
  arg1 = (BaseObject *)jarg1; 
  result = ((BaseObject const *)arg1)->GetRelScale();
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseObject_SetRelScale(void * jarg1, void * jarg2) {
  BaseObject *arg1 = (BaseObject *) 0 ;
  Vector *arg2 = 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  (arg1)->SetRelScale((Vector const &)*arg2);
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_BaseObject_GetRelRot(void * jarg1) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  Vector result;
  
  arg1 = (BaseObject *)jarg1; 
  result = ((BaseObject const *)arg1)->GetRelRot();
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseObject_SetRelRot(void * jarg1, void * jarg2) {
  BaseObject *arg1 = (BaseObject *) 0 ;
  Vector *arg2 = 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  (arg1)->SetRelRot((Vector const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseObject_GetMl(void * jarg1) {
  void * jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  result = (Matrix *) &((BaseObject const *)arg1)->GetMl();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseObject_SetMl(void * jarg1, void * jarg2) {
  BaseObject *arg1 = (BaseObject *) 0 ;
  Matrix *arg2 = 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = (Matrix *)jarg2; /* constMatrix&_in */
  (arg1)->SetMl((Matrix const &)*arg2);
}


SWIGEXPORT Matrix_POD /* Matrix_ctype */ SWIGSTDCALL CSharp_BaseObject_GetFrozenMln(void * jarg1) {
  Matrix_POD /* Matrix_ctype */ jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  Matrix result;
  
  arg1 = (BaseObject *)jarg1; 
  result = ((BaseObject const *)arg1)->GetFrozenMln();
  /* <Matrix_out> */ 
  jresult = *((Matrix_POD *)(&result)); 
  /* </Matrix_out> */
  return jresult;
}


SWIGEXPORT Matrix_POD /* Matrix_ctype */ SWIGSTDCALL CSharp_BaseObject_GetRelMln(void * jarg1) {
  Matrix_POD /* Matrix_ctype */ jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  Matrix result;
  
  arg1 = (BaseObject *)jarg1; 
  result = ((BaseObject const *)arg1)->GetRelMln();
  /* <Matrix_out> */ 
  jresult = *((Matrix_POD *)(&result)); 
  /* </Matrix_out> */
  return jresult;
}


SWIGEXPORT Matrix_POD /* Matrix_ctype */ SWIGSTDCALL CSharp_BaseObject_GetRelMl(void * jarg1) {
  Matrix_POD /* Matrix_ctype */ jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  Matrix result;
  
  arg1 = (BaseObject *)jarg1; 
  result = ((BaseObject const *)arg1)->GetRelMl();
  /* <Matrix_out> */ 
  jresult = *((Matrix_POD *)(&result)); 
  /* </Matrix_out> */
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseObject_SetRelMl(void * jarg1, void * jarg2) {
  BaseObject *arg1 = (BaseObject *) 0 ;
  Matrix *arg2 = 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = (Matrix *)jarg2; /* constMatrix&_in */
  (arg1)->SetRelMl((Matrix const &)*arg2);
}


SWIGEXPORT Matrix_POD /* Matrix_ctype */ SWIGSTDCALL CSharp_BaseObject_GetMg(void * jarg1) {
  Matrix_POD /* Matrix_ctype */ jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  Matrix result;
  
  arg1 = (BaseObject *)jarg1; 
  result = ((BaseObject const *)arg1)->GetMg();
  /* <Matrix_out> */ 
  jresult = *((Matrix_POD *)(&result)); 
  /* </Matrix_out> */
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseObject_SetMg(void * jarg1, void * jarg2) {
  BaseObject *arg1 = (BaseObject *) 0 ;
  Matrix *arg2 = 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = (Matrix *)jarg2; /* constMatrix&_in */
  (arg1)->SetMg((Matrix const &)*arg2);
}


SWIGEXPORT Matrix_POD /* Matrix_ctype */ SWIGSTDCALL CSharp_BaseObject_GetMln(void * jarg1) {
  Matrix_POD /* Matrix_ctype */ jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  Matrix result;
  
  arg1 = (BaseObject *)jarg1; 
  result = ((BaseObject const *)arg1)->GetMln();
  /* <Matrix_out> */ 
  jresult = *((Matrix_POD *)(&result)); 
  /* </Matrix_out> */
  return jresult;
}


SWIGEXPORT Matrix_POD /* Matrix_ctype */ SWIGSTDCALL CSharp_BaseObject_GetMgn(void * jarg1) {
  Matrix_POD /* Matrix_ctype */ jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  Matrix result;
  
  arg1 = (BaseObject *)jarg1; 
  result = ((BaseObject const *)arg1)->GetMgn();
  /* <Matrix_out> */ 
  jresult = *((Matrix_POD *)(&result)); 
  /* </Matrix_out> */
  return jresult;
}


SWIGEXPORT Matrix_POD /* Matrix_ctype */ SWIGSTDCALL CSharp_BaseObject_GetUpMg(void * jarg1) {
  Matrix_POD /* Matrix_ctype */ jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  Matrix result;
  
  arg1 = (BaseObject *)jarg1; 
  result = ((BaseObject const *)arg1)->GetUpMg();
  /* <Matrix_out> */ 
  jresult = *((Matrix_POD *)(&result)); 
  /* </Matrix_out> */
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseObject_CopyMatrixTo(void * jarg1, void * jarg2) {
  BaseObject *arg1 = (BaseObject *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  (arg1)->CopyMatrixTo(arg2);
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_BaseObject_GetMp(void * jarg1) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  Vector result;
  
  arg1 = (BaseObject *)jarg1; 
  result = (arg1)->GetMp();
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_BaseObject_GetRad(void * jarg1) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  Vector result;
  
  arg1 = (BaseObject *)jarg1; 
  result = (arg1)->GetRad();
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseObject_GetEditorMode(void * jarg1) {
  int jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  LONG result;
  
  arg1 = (BaseObject *)jarg1; 
  result = (arg1)->GetEditorMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseObject_SetEditorMode(void * jarg1, int jarg2) {
  BaseObject *arg1 = (BaseObject *) 0 ;
  LONG arg2 ;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = (LONG)jarg2; 
  (arg1)->SetEditorMode(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseObject_GetRenderMode(void * jarg1) {
  int jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  LONG result;
  
  arg1 = (BaseObject *)jarg1; 
  result = (arg1)->GetRenderMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseObject_SetRenderMode(void * jarg1, int jarg2) {
  BaseObject *arg1 = (BaseObject *) 0 ;
  LONG arg2 ;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = (LONG)jarg2; 
  (arg1)->SetRenderMode(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseObject_GetDeformMode(void * jarg1) {
  unsigned int jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  Bool result;
  
  arg1 = (BaseObject *)jarg1; 
  result = (arg1)->GetDeformMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseObject_SetDeformMode(void * jarg1, unsigned int jarg2) {
  BaseObject *arg1 = (BaseObject *) 0 ;
  Bool arg2 ;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetDeformMode(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseObject_GetUniqueIP(void * jarg1) {
  int jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  LONG result;
  
  arg1 = (BaseObject *)jarg1; 
  result = (arg1)->GetUniqueIP();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseObject_SetUniqueIP(void * jarg1, int jarg2) {
  BaseObject *arg1 = (BaseObject *) 0 ;
  LONG arg2 ;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = (LONG)jarg2; 
  (arg1)->SetUniqueIP(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseObject_SetOrigin(void * jarg1, void * jarg2) {
  BaseObject *arg1 = (BaseObject *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  (arg1)->SetOrigin(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseObject_GetOrigin(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  Bool arg2 ;
  BaseObject *result = 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (BaseObject *)(arg1)->GetOrigin(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseObject_GetTopOrigin(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  Bool arg2 ;
  Bool arg3 ;
  BaseObject *result = 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = (BaseObject *)(arg1)->GetTopOrigin(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseObject_GetEditObject(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  BaseObject **arg2 = (BaseObject **) 0 ;
  DISPLAYEDITSTATE arg3 ;
  BaseObject *result = 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = (BaseObject **)jarg2; 
  arg3 = (DISPLAYEDITSTATE)jarg3; 
  result = (BaseObject *)(arg1)->GetEditObject(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseObject_GetFirstTag(void * jarg1) {
  void * jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  BaseTag *result = 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  result = (BaseTag *)(arg1)->GetFirstTag();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseObject_GetTag__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  BaseTag *result = 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  result = (BaseTag *)(arg1)->GetTag(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseObject_GetTag__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  LONG arg2 ;
  BaseTag *result = 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (BaseTag *)(arg1)->GetTag(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseObject_GetTagDataR__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  void *result = 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  result = (void *)((BaseObject const *)arg1)->GetTagDataR(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseObject_GetTagDataR__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  LONG arg2 ;
  void *result = 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (void *)((BaseObject const *)arg1)->GetTagDataR(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseObject_GetTagDataW__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  void *result = 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  result = (void *)(arg1)->GetTagDataW(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseObject_GetTagDataW__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  LONG arg2 ;
  void *result = 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (void *)(arg1)->GetTagDataW(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseObject_GetTagDataCount(void * jarg1, int jarg2) {
  int jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  LONG arg2 ;
  LONG result;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = ((BaseObject const *)arg1)->GetTagDataCount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseObject_MakeTag__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  LONG arg2 ;
  BaseTag *arg3 = (BaseTag *) 0 ;
  BaseTag *result = 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (BaseTag *)jarg3; 
  result = (BaseTag *)(arg1)->MakeTag(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseObject_MakeTag__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  LONG arg2 ;
  BaseTag *result = 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (BaseTag *)(arg1)->MakeTag(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseObject_MakeVariableTag__SWIG_0(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  void * jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  BaseTag *arg4 = (BaseTag *) 0 ;
  VariableTag *result = 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (BaseTag *)jarg4; 
  result = (VariableTag *)(arg1)->MakeVariableTag(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseObject_MakeVariableTag__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  VariableTag *result = 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  result = (VariableTag *)(arg1)->MakeVariableTag(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseObject_InsertTag__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  BaseObject *arg1 = (BaseObject *) 0 ;
  BaseTag *arg2 = (BaseTag *) 0 ;
  BaseTag *arg3 = (BaseTag *) 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = (BaseTag *)jarg2; 
  arg3 = (BaseTag *)jarg3; 
  (arg1)->InsertTag(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseObject_InsertTag__SWIG_1(void * jarg1, void * jarg2) {
  BaseObject *arg1 = (BaseObject *) 0 ;
  BaseTag *arg2 = (BaseTag *) 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = (BaseTag *)jarg2; 
  (arg1)->InsertTag(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseObject_KillTag__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  BaseObject *arg1 = (BaseObject *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  (arg1)->KillTag(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseObject_KillTag__SWIG_1(void * jarg1, int jarg2) {
  BaseObject *arg1 = (BaseObject *) 0 ;
  LONG arg2 ;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = (LONG)jarg2; 
  (arg1)->KillTag(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseObject_GetCache__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  HierarchyHelp *arg2 = (HierarchyHelp *) 0 ;
  BaseObject *result = 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = (HierarchyHelp *)jarg2; 
  result = (BaseObject *)(arg1)->GetCache(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseObject_GetCache__SWIG_1(void * jarg1) {
  void * jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  BaseObject *result = 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  result = (BaseObject *)(arg1)->GetCache();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseObject_GetDeformCache(void * jarg1) {
  void * jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  BaseObject *result = 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  result = (BaseObject *)(arg1)->GetDeformCache();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseObject_GetIsoparm(void * jarg1) {
  void * jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  LineObject *result = 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  result = (LineObject *)(arg1)->GetIsoparm();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseObject_SetIsoparm(void * jarg1, void * jarg2) {
  BaseObject *arg1 = (BaseObject *) 0 ;
  LineObject *arg2 = (LineObject *) 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = (LineObject *)jarg2; 
  (arg1)->SetIsoparm(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseObject_GetCacheParent(void * jarg1) {
  void * jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  BaseObject *result = 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  result = (BaseObject *)(arg1)->GetCacheParent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseObject_CopyTagsTo(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, void * jarg6) {
  unsigned int jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  LONG arg3 ;
  LONG arg4 ;
  LONG arg5 ;
  AliasTrans *arg6 = (AliasTrans *) 0 ;
  Bool result;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (AliasTrans *)jarg6; 
  result = (arg1)->CopyTagsTo(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseObject_SetPhong(void * jarg1, unsigned int jarg2, unsigned int jarg3, double jarg4) {
  unsigned int jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  Bool arg2 ;
  Bool arg3 ;
  Real arg4 ;
  Bool result;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = (Real)jarg4; 
  result = (arg1)->SetPhong(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseObject_IsDirty(void * jarg1, int jarg2) {
  unsigned int jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  DIRTYFLAGS arg2 ;
  Bool result;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = (DIRTYFLAGS)jarg2; 
  result = (arg1)->IsDirty(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseObject_SetDirty(void * jarg1, int jarg2) {
  BaseObject *arg1 = (BaseObject *) 0 ;
  DIRTYFLAGS arg2 ;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = (DIRTYFLAGS)jarg2; 
  (arg1)->SetDirty(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseObject_CheckCache(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  HierarchyHelp *arg2 = (HierarchyHelp *) 0 ;
  Bool result;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = (HierarchyHelp *)jarg2; 
  result = (arg1)->CheckCache(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseObject_Touch(void * jarg1) {
  BaseObject *arg1 = (BaseObject *) 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  (arg1)->Touch();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseObject_SetColorProperties(void * jarg1, void * jarg2) {
  BaseObject *arg1 = (BaseObject *) 0 ;
  ObjectColorProperties *arg2 = (ObjectColorProperties *) 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = (ObjectColorProperties *)jarg2; 
  (arg1)->SetColorProperties(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseObject_GetColorProperties(void * jarg1, void * jarg2) {
  BaseObject *arg1 = (BaseObject *) 0 ;
  ObjectColorProperties *arg2 = (ObjectColorProperties *) 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = (ObjectColorProperties *)jarg2; 
  (arg1)->GetColorProperties(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseObject_GetRealSpline(void * jarg1) {
  void * jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  SplineObject *result = 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  result = (SplineObject *)(arg1)->GetRealSpline();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseObject_GetHighlightHandle(void * jarg1, void * jarg2) {
  int jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  BaseDraw *arg2 = (BaseDraw *) 0 ;
  LONG result;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = (BaseDraw *)jarg2; 
  result = (arg1)->GetHighlightHandle(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseObject_Alloc(int jarg1) {
  void * jresult ;
  LONG arg1 ;
  BaseObject *result = 0 ;
  
  arg1 = (LONG)jarg1; 
  result = (BaseObject *)BaseObject::Alloc(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseObject_Free(void * jarg1) {
  BaseObject **arg1 = 0 ;
  
  arg1 = (BaseObject **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseObject *& type is null", 0);
    return ;
  } 
  BaseObject::Free(*arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseObject_GetModelingAxis(void * jarg1, void * jarg2) {
  void * jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  result = (Matrix *) &(arg1)->GetModelingAxis(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseObject_SetModelingAxis(void * jarg1, void * jarg2) {
  BaseObject *arg1 = (BaseObject *) 0 ;
  Matrix *arg2 = 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = (Matrix *)jarg2; /* constMatrix&_in */
  (arg1)->SetModelingAxis((Matrix const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseObject_GetAndCheckHierarchyClone(void * jarg1, void * jarg2, void * jarg3, int jarg4, void * jarg5, void * jarg6, unsigned int jarg7) {
  void * jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  HierarchyHelp *arg2 = (HierarchyHelp *) 0 ;
  BaseObject *arg3 = (BaseObject *) 0 ;
  HIERARCHYCLONEFLAGS arg4 ;
  Bool *arg5 = (Bool *) 0 ;
  AliasTrans *arg6 = (AliasTrans *) 0 ;
  Bool arg7 ;
  BaseObject *result = 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = (HierarchyHelp *)jarg2; 
  arg3 = (BaseObject *)jarg3; 
  arg4 = (HIERARCHYCLONEFLAGS)jarg4; 
  arg5 = (Bool *)jarg5; 
  arg6 = (AliasTrans *)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = (BaseObject *)(arg1)->GetAndCheckHierarchyClone(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseObject_GetHierarchyClone(void * jarg1, void * jarg2, void * jarg3, int jarg4, void * jarg5, void * jarg6) {
  void * jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  HierarchyHelp *arg2 = (HierarchyHelp *) 0 ;
  BaseObject *arg3 = (BaseObject *) 0 ;
  HIERARCHYCLONEFLAGS arg4 ;
  Bool *arg5 = (Bool *) 0 ;
  AliasTrans *arg6 = (AliasTrans *) 0 ;
  BaseObject *result = 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = (HierarchyHelp *)jarg2; 
  arg3 = (BaseObject *)jarg3; 
  arg4 = (HIERARCHYCLONEFLAGS)jarg4; 
  arg5 = (Bool *)jarg5; 
  arg6 = (AliasTrans *)jarg6; 
  result = (BaseObject *)(arg1)->GetHierarchyClone(arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseObject_NewDependenceList(void * jarg1) {
  BaseObject *arg1 = (BaseObject *) 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  (arg1)->NewDependenceList();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseObject_CompareDependenceList(void * jarg1) {
  unsigned int jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  Bool result;
  
  arg1 = (BaseObject *)jarg1; 
  result = (arg1)->CompareDependenceList();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseObject_AddDependence(void * jarg1, void * jarg2, void * jarg3) {
  BaseObject *arg1 = (BaseObject *) 0 ;
  HierarchyHelp *arg2 = (HierarchyHelp *) 0 ;
  BaseObject *arg3 = (BaseObject *) 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = (HierarchyHelp *)jarg2; 
  arg3 = (BaseObject *)jarg3; 
  (arg1)->AddDependence(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseObject_TouchDependenceList(void * jarg1) {
  BaseObject *arg1 = (BaseObject *) 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  (arg1)->TouchDependenceList();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseObject_RemoveFromCache(void * jarg1) {
  BaseObject *arg1 = (BaseObject *) 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  (arg1)->RemoveFromCache();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseObject_SearchHierarchy(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  Bool result;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  result = (arg1)->SearchHierarchy(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseObject_SetRotationOrder(void * jarg1, void * jarg2) {
  BaseObject *arg1 = (BaseObject *) 0 ;
  ROTATIONORDER arg2 ;
  ROTATIONORDER *argp2 ;
  
  arg1 = (BaseObject *)jarg1; 
  argp2 = (ROTATIONORDER *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ROTATIONORDER", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetRotationOrder(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseObject_GetRotationOrder(void * jarg1) {
  void * jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  ROTATIONORDER result;
  
  arg1 = (BaseObject *)jarg1; 
  result = ((BaseObject const *)arg1)->GetRotationOrder();
  jresult = new ROTATIONORDER((const ROTATIONORDER &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CameraObject_GetProjection(void * jarg1) {
  int jresult ;
  CameraObject *arg1 = (CameraObject *) 0 ;
  LONG result;
  
  arg1 = (CameraObject *)jarg1; 
  result = (arg1)->GetProjection();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CameraObject_GetFocus(void * jarg1) {
  double jresult ;
  CameraObject *arg1 = (CameraObject *) 0 ;
  Real result;
  
  arg1 = (CameraObject *)jarg1; 
  result = (arg1)->GetFocus();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CameraObject_GetZoom(void * jarg1) {
  double jresult ;
  CameraObject *arg1 = (CameraObject *) 0 ;
  Real result;
  
  arg1 = (CameraObject *)jarg1; 
  result = (arg1)->GetZoom();
  jresult = result; 
  return jresult;
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_CameraObject_GetOffset(void * jarg1) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  CameraObject *arg1 = (CameraObject *) 0 ;
  Vector result;
  
  arg1 = (CameraObject *)jarg1; 
  result = (arg1)->GetOffset();
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CameraObject_GetAperture(void * jarg1) {
  double jresult ;
  CameraObject *arg1 = (CameraObject *) 0 ;
  Real result;
  
  arg1 = (CameraObject *)jarg1; 
  result = (arg1)->GetAperture();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CameraObject_SetProjection(void * jarg1, int jarg2) {
  unsigned int jresult ;
  CameraObject *arg1 = (CameraObject *) 0 ;
  LONG arg2 ;
  Bool result;
  
  arg1 = (CameraObject *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (arg1)->SetProjection(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CameraObject_SetFocus(void * jarg1, double jarg2) {
  unsigned int jresult ;
  CameraObject *arg1 = (CameraObject *) 0 ;
  Real arg2 ;
  Bool result;
  
  arg1 = (CameraObject *)jarg1; 
  arg2 = (Real)jarg2; 
  result = (arg1)->SetFocus(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CameraObject_SetAperture(void * jarg1, double jarg2) {
  unsigned int jresult ;
  CameraObject *arg1 = (CameraObject *) 0 ;
  Real arg2 ;
  Bool result;
  
  arg1 = (CameraObject *)jarg1; 
  arg2 = (Real)jarg2; 
  result = (arg1)->SetAperture(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CameraObject_SetZoom(void * jarg1, double jarg2) {
  unsigned int jresult ;
  CameraObject *arg1 = (CameraObject *) 0 ;
  Real arg2 ;
  Bool result;
  
  arg1 = (CameraObject *)jarg1; 
  arg2 = (Real)jarg2; 
  result = (arg1)->SetZoom(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CameraObject_SetOffset(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  CameraObject *arg1 = (CameraObject *) 0 ;
  Vector *arg2 = 0 ;
  Bool result;
  
  arg1 = (CameraObject *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  result = (arg1)->SetOffset((Vector const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CameraObject_StereoGetCameraCount(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  int jresult ;
  CameraObject *arg1 = (CameraObject *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  BaseDraw *arg3 = (BaseDraw *) 0 ;
  RenderData *arg4 = (RenderData *) 0 ;
  LONG arg5 ;
  LONG result;
  
  arg1 = (CameraObject *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (BaseDraw *)jarg3; 
  arg4 = (RenderData *)jarg4; 
  arg5 = (LONG)jarg5; 
  result = ((CameraObject const *)arg1)->StereoGetCameraCount(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CameraObject_StereoGetCameraInfo(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, void * jarg6, int jarg7) {
  unsigned int jresult ;
  CameraObject *arg1 = (CameraObject *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  BaseDraw *arg3 = (BaseDraw *) 0 ;
  RenderData *arg4 = (RenderData *) 0 ;
  LONG arg5 ;
  StereoCameraInfo *arg6 = 0 ;
  LONG arg7 ;
  Bool result;
  
  arg1 = (CameraObject *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (BaseDraw *)jarg3; 
  arg4 = (RenderData *)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (StereoCameraInfo *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StereoCameraInfo & type is null", 0);
    return 0;
  } 
  arg7 = (LONG)jarg7; 
  result = ((CameraObject const *)arg1)->StereoGetCameraInfo(arg2,arg3,arg4,arg5,*arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CameraObject_Alloc() {
  void * jresult ;
  CameraObject *result = 0 ;
  
  result = (CameraObject *)CameraObject::Alloc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CameraObject_Free(void * jarg1) {
  CameraObject **arg1 = 0 ;
  
  arg1 = (CameraObject **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CameraObject *& type is null", 0);
    return ;
  } 
  CameraObject::Free(*arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PointObject_GetPointS(void * jarg1) {
  void * jresult ;
  PointObject *arg1 = (PointObject *) 0 ;
  BaseSelect *result = 0 ;
  
  arg1 = (PointObject *)jarg1; 
  result = (BaseSelect *)(arg1)->GetPointS();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PointObject_GetPointH(void * jarg1) {
  void * jresult ;
  PointObject *arg1 = (PointObject *) 0 ;
  BaseSelect *result = 0 ;
  
  arg1 = (PointObject *)jarg1; 
  result = (BaseSelect *)(arg1)->GetPointH();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PointObject_GetPointR(void * jarg1) {
  void * jresult ;
  PointObject *arg1 = (PointObject *) 0 ;
  Vector *result = 0 ;
  
  arg1 = (PointObject *)jarg1; 
  result = (Vector *)((PointObject const *)arg1)->GetPointR();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PointObject_GetPointW(void * jarg1) {
  void * jresult ;
  PointObject *arg1 = (PointObject *) 0 ;
  Vector *result = 0 ;
  
  arg1 = (PointObject *)jarg1; 
  result = (Vector *)(arg1)->GetPointW();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PointObject_GetPointCount(void * jarg1) {
  int jresult ;
  PointObject *arg1 = (PointObject *) 0 ;
  LONG result;
  
  arg1 = (PointObject *)jarg1; 
  result = ((PointObject const *)arg1)->GetPointCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PointObject_CalcVertexMap(void * jarg1, void * jarg2) {
  void * jresult ;
  PointObject *arg1 = (PointObject *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  SReal *result = 0 ;
  
  arg1 = (PointObject *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  result = (SReal *)(arg1)->CalcVertexMap(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PointObject_ResizeObject(void * jarg1, int jarg2) {
  unsigned int jresult ;
  PointObject *arg1 = (PointObject *) 0 ;
  LONG arg2 ;
  Bool result;
  
  arg1 = (PointObject *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (arg1)->ResizeObject(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_PointObject_GetPointAt(void * jarg1, int jarg2) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  PointObject *arg1 = (PointObject *) 0 ;
  LONG arg2 ;
  Vector result;
  
  arg1 = (PointObject *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = PointObject_GetPointAt(arg1,arg2);
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PointObject_SetPointAt(void * jarg1, int jarg2, Vector /* Vector_ctype */ jarg3) {
  PointObject *arg1 = (PointObject *) 0 ;
  LONG arg2 ;
  Vector arg3 ;
  
  arg1 = (PointObject *)jarg1; 
  arg2 = (LONG)jarg2; 
  
  /* <Vector_in> */
  arg3 = *((Vector *)&(jarg3));
  /* </Vector_in> */
  
  PointObject_SetPointAt(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PointObject_GetPointObject(void * jarg1) {
  void * jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  PointObject *result = 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  result = (PointObject *)PointObject_GetPointObject(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CLine_t_set(void * jarg1, double jarg2) {
  CLine *arg1 = (CLine *) 0 ;
  Real arg2 ;
  
  arg1 = (CLine *)jarg1; 
  arg2 = (Real)jarg2; 
  if (arg1) (arg1)->t = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CLine_t_get(void * jarg1) {
  double jresult ;
  CLine *arg1 = (CLine *) 0 ;
  Real result;
  
  arg1 = (CLine *)jarg1; 
  result =  ((arg1)->t);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CLine_pos_set(void * jarg1, double jarg2) {
  CLine *arg1 = (CLine *) 0 ;
  Real arg2 ;
  
  arg1 = (CLine *)jarg1; 
  arg2 = (Real)jarg2; 
  if (arg1) (arg1)->pos = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CLine_pos_get(void * jarg1) {
  double jresult ;
  CLine *arg1 = (CLine *) 0 ;
  Real result;
  
  arg1 = (CLine *)jarg1; 
  result =  ((arg1)->pos);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CLine() {
  void * jresult ;
  CLine *result = 0 ;
  
  result = (CLine *)new CLine();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CLine(void * jarg1) {
  CLine *arg1 = (CLine *) 0 ;
  
  arg1 = (CLine *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LineObject_GetSegmentR(void * jarg1) {
  void * jresult ;
  LineObject *arg1 = (LineObject *) 0 ;
  Segment *result = 0 ;
  
  arg1 = (LineObject *)jarg1; 
  result = (Segment *)(arg1)->GetSegmentR();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LineObject_GetSegmentW(void * jarg1) {
  void * jresult ;
  LineObject *arg1 = (LineObject *) 0 ;
  Segment *result = 0 ;
  
  arg1 = (LineObject *)jarg1; 
  result = (Segment *)(arg1)->GetSegmentW();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LineObject_GetSegmentCount(void * jarg1) {
  int jresult ;
  LineObject *arg1 = (LineObject *) 0 ;
  LONG result;
  
  arg1 = (LineObject *)jarg1; 
  result = (arg1)->GetSegmentCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LineObject_GetLineR(void * jarg1) {
  void * jresult ;
  LineObject *arg1 = (LineObject *) 0 ;
  CLine *result = 0 ;
  
  arg1 = (LineObject *)jarg1; 
  result = (CLine *)(arg1)->GetLineR();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LineObject_GetLineW(void * jarg1) {
  void * jresult ;
  LineObject *arg1 = (LineObject *) 0 ;
  CLine *result = 0 ;
  
  arg1 = (LineObject *)jarg1; 
  result = (CLine *)(arg1)->GetLineW();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LineObject_ResizeObject(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  LineObject *arg1 = (LineObject *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  Bool result;
  
  arg1 = (LineObject *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  result = (arg1)->ResizeObject(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LineObject_Triangulate(void * jarg1, double jarg2, void * jarg3) {
  void * jresult ;
  LineObject *arg1 = (LineObject *) 0 ;
  Real arg2 ;
  BaseThread *arg3 = (BaseThread *) 0 ;
  PolygonObject *result = 0 ;
  
  arg1 = (LineObject *)jarg1; 
  arg2 = (Real)jarg2; 
  arg3 = (BaseThread *)jarg3; 
  result = (PolygonObject *)(arg1)->Triangulate(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LineObject_Alloc(int jarg1, int jarg2) {
  void * jresult ;
  LONG arg1 ;
  LONG arg2 ;
  LineObject *result = 0 ;
  
  arg1 = (LONG)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (LineObject *)LineObject::Alloc(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LineObject_Free(void * jarg1) {
  LineObject **arg1 = 0 ;
  
  arg1 = (LineObject **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LineObject *& type is null", 0);
    return ;
  } 
  LineObject::Free(*arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_POLYOBJECT_VBO_VERTEX_get() {
  int jresult ;
  int result;
  
  result = (int)(0x00000001);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_POLYOBJECT_VBO_PHONG_NORMAL_get() {
  int jresult ;
  int result;
  
  result = (int)(0x00000002);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_POLYOBJECT_VBO_POLYGON_NORMAL_get() {
  int jresult ;
  int result;
  
  result = (int)(0x00000004);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_POLYOBJECT_VBO_DISPLACE_NORMAL_get() {
  int jresult ;
  int result;
  
  result = (int)(0x00000008);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_POLYOBJECT_VBO_STICK_TEXTURE_get() {
  int jresult ;
  int result;
  
  result = (int)(0x00000010);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_POLYOBJECT_VBO_COLOR_get() {
  int jresult ;
  int result;
  
  result = (int)(0x00000020);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolygonObject_GetPolygonS(void * jarg1) {
  void * jresult ;
  PolygonObject *arg1 = (PolygonObject *) 0 ;
  BaseSelect *result = 0 ;
  
  arg1 = (PolygonObject *)jarg1; 
  result = (BaseSelect *)(arg1)->GetPolygonS();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolygonObject_GetPolygonH(void * jarg1) {
  void * jresult ;
  PolygonObject *arg1 = (PolygonObject *) 0 ;
  BaseSelect *result = 0 ;
  
  arg1 = (PolygonObject *)jarg1; 
  result = (BaseSelect *)(arg1)->GetPolygonH();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolygonObject_GetEdgeS(void * jarg1) {
  void * jresult ;
  PolygonObject *arg1 = (PolygonObject *) 0 ;
  BaseSelect *result = 0 ;
  
  arg1 = (PolygonObject *)jarg1; 
  result = (BaseSelect *)(arg1)->GetEdgeS();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolygonObject_GetEdgeH(void * jarg1) {
  void * jresult ;
  PolygonObject *arg1 = (PolygonObject *) 0 ;
  BaseSelect *result = 0 ;
  
  arg1 = (PolygonObject *)jarg1; 
  result = (BaseSelect *)(arg1)->GetEdgeH();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolygonObject_GetPhongBreak(void * jarg1) {
  void * jresult ;
  PolygonObject *arg1 = (PolygonObject *) 0 ;
  BaseSelect *result = 0 ;
  
  arg1 = (PolygonObject *)jarg1; 
  result = (BaseSelect *)(arg1)->GetPhongBreak();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolygonObject_GetPolygonR(void * jarg1) {
  void * jresult ;
  PolygonObject *arg1 = (PolygonObject *) 0 ;
  CPolygon *result = 0 ;
  
  arg1 = (PolygonObject *)jarg1; 
  result = (CPolygon *)(arg1)->GetPolygonR();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolygonObject_GetPolygonW(void * jarg1) {
  void * jresult ;
  PolygonObject *arg1 = (PolygonObject *) 0 ;
  CPolygon *result = 0 ;
  
  arg1 = (PolygonObject *)jarg1; 
  result = (CPolygon *)(arg1)->GetPolygonW();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PolygonObject_GetPolygonCount(void * jarg1) {
  int jresult ;
  PolygonObject *arg1 = (PolygonObject *) 0 ;
  LONG result;
  
  arg1 = (PolygonObject *)jarg1; 
  result = (arg1)->GetPolygonCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PolygonObject_ResizeObject__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  PolygonObject *arg1 = (PolygonObject *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  Bool result;
  
  arg1 = (PolygonObject *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  result = (arg1)->ResizeObject(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PolygonObject_ResizeObject__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4) {
  unsigned int jresult ;
  PolygonObject *arg1 = (PolygonObject *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  LONG arg4 ;
  Bool result;
  
  arg1 = (PolygonObject *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  result = (arg1)->ResizeObject(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PolygonObject_ResizeObject__SWIG_2(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  unsigned int jresult ;
  PolygonObject *arg1 = (PolygonObject *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  LONG arg4 ;
  LONG arg5 ;
  Bool result;
  
  arg1 = (PolygonObject *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (LONG)jarg5; 
  result = (arg1)->ResizeObject(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolygonObject_GetSelectedEdges__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  PolygonObject *arg1 = (PolygonObject *) 0 ;
  Neighbor *arg2 = (Neighbor *) 0 ;
  EDGESELECTIONTYPE arg3 ;
  BaseSelect *result = 0 ;
  
  arg1 = (PolygonObject *)jarg1; 
  arg2 = (Neighbor *)jarg2; 
  arg3 = (EDGESELECTIONTYPE)jarg3; 
  result = (BaseSelect *)(arg1)->GetSelectedEdges(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolygonObject_GetSelectedEdges__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  PolygonObject *arg1 = (PolygonObject *) 0 ;
  Neighbor *arg2 = (Neighbor *) 0 ;
  BaseSelect *arg3 = (BaseSelect *) 0 ;
  BaseSelect *result = 0 ;
  
  arg1 = (PolygonObject *)jarg1; 
  arg2 = (Neighbor *)jarg2; 
  arg3 = (BaseSelect *)jarg3; 
  result = (BaseSelect *)(arg1)->GetSelectedEdges(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PolygonObject_SetSelectedEdges(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  PolygonObject *arg1 = (PolygonObject *) 0 ;
  Neighbor *arg2 = (Neighbor *) 0 ;
  BaseSelect *arg3 = (BaseSelect *) 0 ;
  EDGESELECTIONTYPE arg4 ;
  Bool result;
  
  arg1 = (PolygonObject *)jarg1; 
  arg2 = (Neighbor *)jarg2; 
  arg3 = (BaseSelect *)jarg3; 
  arg4 = (EDGESELECTIONTYPE)jarg4; 
  result = (arg1)->SetSelectedEdges(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolygonObject_CreatePhongNormals(void * jarg1) {
  void * jresult ;
  PolygonObject *arg1 = (PolygonObject *) 0 ;
  SVector *result = 0 ;
  
  arg1 = (PolygonObject *)jarg1; 
  result = (SVector *)(arg1)->CreatePhongNormals();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PolygonObject_GetPolygonTranslationMap(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  PolygonObject *arg1 = (PolygonObject *) 0 ;
  LONG *arg2 = 0 ;
  LONG **arg3 = 0 ;
  Bool result;
  
  arg1 = (PolygonObject *)jarg1; 
  arg2 = (LONG *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  arg3 = (LONG **)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG *& type is null", 0);
    return 0;
  } 
  result = (arg1)->GetPolygonTranslationMap(*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PolygonObject_GetNGonTranslationMap(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  PolygonObject *arg1 = (PolygonObject *) 0 ;
  LONG arg2 ;
  LONG *arg3 = (LONG *) 0 ;
  LONG ***arg4 = 0 ;
  Bool result;
  
  arg1 = (PolygonObject *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG *)jarg3; 
  arg4 = (LONG ***)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG **& type is null", 0);
    return 0;
  } 
  result = (arg1)->GetNGonTranslationMap(arg2,arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolygonObject_GetAndBuildNgon(void * jarg1) {
  void * jresult ;
  PolygonObject *arg1 = (PolygonObject *) 0 ;
  Pgon *result = 0 ;
  
  arg1 = (PolygonObject *)jarg1; 
  result = (Pgon *)(arg1)->GetAndBuildNgon();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PolygonObject_GetNgonCount(void * jarg1) {
  int jresult ;
  PolygonObject *arg1 = (PolygonObject *) 0 ;
  LONG result;
  
  arg1 = (PolygonObject *)jarg1; 
  result = (arg1)->GetNgonCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolygonObject_GetSelectedNgons(void * jarg1, void * jarg2) {
  PolygonObject *arg1 = (PolygonObject *) 0 ;
  BaseSelect *arg2 = (BaseSelect *) 0 ;
  
  arg1 = (PolygonObject *)jarg1; 
  arg2 = (BaseSelect *)jarg2; 
  (arg1)->GetSelectedNgons(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolygonObject_GetHiddenNgons(void * jarg1, void * jarg2) {
  PolygonObject *arg1 = (PolygonObject *) 0 ;
  BaseSelect *arg2 = (BaseSelect *) 0 ;
  
  arg1 = (PolygonObject *)jarg1; 
  arg2 = (BaseSelect *)jarg2; 
  (arg1)->GetHiddenNgons(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolygonObject_GetNgonBase(void * jarg1) {
  void * jresult ;
  PolygonObject *arg1 = (PolygonObject *) 0 ;
  NgonBase *result = 0 ;
  
  arg1 = (PolygonObject *)jarg1; 
  result = (NgonBase *)(arg1)->GetNgonBase();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PolygonObject_ValidateEdgeSelection__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  PolygonObject *arg1 = (PolygonObject *) 0 ;
  BaseSelect *arg2 = (BaseSelect *) 0 ;
  Bool result;
  
  arg1 = (PolygonObject *)jarg1; 
  arg2 = (BaseSelect *)jarg2; 
  result = (arg1)->ValidateEdgeSelection(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PolygonObject_ValidateEdgeSelection__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  PolygonObject *arg1 = (PolygonObject *) 0 ;
  Bool result;
  
  arg1 = (PolygonObject *)jarg1; 
  result = (arg1)->ValidateEdgeSelection();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PolygonObject_GetEdgeSelection(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  PolygonObject *arg1 = (PolygonObject *) 0 ;
  BaseSelect *arg2 = (BaseSelect *) 0 ;
  EDGESELECTIONTYPE arg3 ;
  Bool result;
  
  arg1 = (PolygonObject *)jarg1; 
  arg2 = (BaseSelect *)jarg2; 
  arg3 = (EDGESELECTIONTYPE)jarg3; 
  result = (arg1)->GetEdgeSelection(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolygonObject_GetNgonEdgesCompact(void * jarg1, void * jarg2) {
  PolygonObject *arg1 = (PolygonObject *) 0 ;
  UCHAR **arg2 = 0 ;
  
  arg1 = (PolygonObject *)jarg1; 
  arg2 = (UCHAR **)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UCHAR *& type is null", 0);
    return ;
  } 
  (arg1)->GetNgonEdgesCompact(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolygonObject_VBOInitUpdate(void * jarg1, void * jarg2) {
  void * jresult ;
  PolygonObject *arg1 = (PolygonObject *) 0 ;
  BaseDraw *arg2 = (BaseDraw *) 0 ;
  ULONG result;
  
  arg1 = (PolygonObject *)jarg1; 
  arg2 = (BaseDraw *)jarg2; 
  result = (arg1)->VBOInitUpdate(arg2);
  jresult = new ULONG((const ULONG &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PolygonObject_VBOStartUpdate(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  PolygonObject *arg1 = (PolygonObject *) 0 ;
  BaseDraw *arg2 = (BaseDraw *) 0 ;
  GlVertexBufferAccessFlags arg3 ;
  Bool arg4 ;
  Bool result;
  
  arg1 = (PolygonObject *)jarg1; 
  arg2 = (BaseDraw *)jarg2; 
  arg3 = (GlVertexBufferAccessFlags)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (arg1)->VBOStartUpdate(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolygonObject_VBOUpdateVectorGetAttribute(void * jarg1, void * jarg2) {
  void * jresult ;
  PolygonObject *arg1 = (PolygonObject *) 0 ;
  ULONG arg2 ;
  ULONG *argp2 ;
  GlVertexBufferAttributeInfo *result = 0 ;
  
  arg1 = (PolygonObject *)jarg1; 
  argp2 = (ULONG *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ULONG", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (GlVertexBufferAttributeInfo *)(arg1)->VBOUpdateVectorGetAttribute(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolygonObject_VBOUpdateVector(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  PolygonObject *arg1 = (PolygonObject *) 0 ;
  LONG arg2 ;
  SVector *arg3 = 0 ;
  GlVertexBufferAttributeInfo *arg4 = (GlVertexBufferAttributeInfo *) 0 ;
  
  arg1 = (PolygonObject *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (SVector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SVector const & type is null", 0);
    return ;
  } 
  arg4 = (GlVertexBufferAttributeInfo *)jarg4; 
  (arg1)->VBOUpdateVector(arg2,(SVector const &)*arg3,(GlVertexBufferAttributeInfo const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolygonObject_VBOEndUpdate(void * jarg1, void * jarg2) {
  PolygonObject *arg1 = (PolygonObject *) 0 ;
  BaseDraw *arg2 = (BaseDraw *) 0 ;
  
  arg1 = (PolygonObject *)jarg1; 
  arg2 = (BaseDraw *)jarg2; 
  (arg1)->VBOEndUpdate(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolygonObject_VBOFreeUpdate(void * jarg1) {
  PolygonObject *arg1 = (PolygonObject *) 0 ;
  
  arg1 = (PolygonObject *)jarg1; 
  (arg1)->VBOFreeUpdate();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolygonObject_Alloc(int jarg1, int jarg2) {
  void * jresult ;
  LONG arg1 ;
  LONG arg2 ;
  PolygonObject *result = 0 ;
  
  arg1 = (LONG)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (PolygonObject *)PolygonObject::Alloc(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolygonObject_Free(void * jarg1) {
  PolygonObject **arg1 = 0 ;
  
  arg1 = (PolygonObject **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PolygonObject *& type is null", 0);
    return ;
  } 
  PolygonObject::Free(*arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SplineLengthData_Init__SWIG_0(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  SplineLengthData *arg1 = (SplineLengthData *) 0 ;
  SplineObject *arg2 = (SplineObject *) 0 ;
  LONG arg3 ;
  Vector *arg4 = (Vector *) 0 ;
  Bool result;
  
  arg1 = (SplineLengthData *)jarg1; 
  arg2 = (SplineObject *)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (Vector *)jarg4; /* Vector*&_in */
  result = (arg1)->Init(arg2,arg3,(Vector const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SplineLengthData_Init__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  SplineLengthData *arg1 = (SplineLengthData *) 0 ;
  SplineObject *arg2 = (SplineObject *) 0 ;
  LONG arg3 ;
  Bool result;
  
  arg1 = (SplineLengthData *)jarg1; 
  arg2 = (SplineObject *)jarg2; 
  arg3 = (LONG)jarg3; 
  result = (arg1)->Init(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SplineLengthData_Init__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SplineLengthData *arg1 = (SplineLengthData *) 0 ;
  SplineObject *arg2 = (SplineObject *) 0 ;
  Bool result;
  
  arg1 = (SplineLengthData *)jarg1; 
  arg2 = (SplineObject *)jarg2; 
  result = (arg1)->Init(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SplineLengthData_UniformToNatural(void * jarg1, double jarg2) {
  double jresult ;
  SplineLengthData *arg1 = (SplineLengthData *) 0 ;
  Real arg2 ;
  Real result;
  
  arg1 = (SplineLengthData *)jarg1; 
  arg2 = (Real)jarg2; 
  result = (arg1)->UniformToNatural(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SplineLengthData_GetLength(void * jarg1) {
  double jresult ;
  SplineLengthData *arg1 = (SplineLengthData *) 0 ;
  Real result;
  
  arg1 = (SplineLengthData *)jarg1; 
  result = (arg1)->GetLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SplineLengthData_GetSegmentLength(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  SplineLengthData *arg1 = (SplineLengthData *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  Real result;
  
  arg1 = (SplineLengthData *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  result = (arg1)->GetSegmentLength(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SplineLengthData_Alloc() {
  void * jresult ;
  SplineLengthData *result = 0 ;
  
  result = (SplineLengthData *)SplineLengthData::Alloc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SplineLengthData_Free(void * jarg1) {
  SplineLengthData **arg1 = 0 ;
  
  arg1 = (SplineLengthData **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SplineLengthData *& type is null", 0);
    return ;
  } 
  SplineLengthData::Free(*arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SplineObject_GetInterpolationType(void * jarg1) {
  int jresult ;
  SplineObject *arg1 = (SplineObject *) 0 ;
  SPLINETYPE result;
  
  arg1 = (SplineObject *)jarg1; 
  result = (SPLINETYPE)((SplineObject const *)arg1)->GetInterpolationType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SplineObject_IsClosed(void * jarg1) {
  unsigned int jresult ;
  SplineObject *arg1 = (SplineObject *) 0 ;
  Bool result;
  
  arg1 = (SplineObject *)jarg1; 
  result = (arg1)->IsClosed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_SplineObject_GetSplinePoint__SWIG_0(void * jarg1, double jarg2, int jarg3, void * jarg4) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  SplineObject *arg1 = (SplineObject *) 0 ;
  Real arg2 ;
  LONG arg3 ;
  Vector *arg4 = (Vector *) 0 ;
  Vector result;
  
  arg1 = (SplineObject *)jarg1; 
  arg2 = (Real)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (Vector *)jarg4; /* Vector*&_in */
  result = (arg1)->GetSplinePoint(arg2,arg3,(Vector const *)arg4);
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_SplineObject_GetSplinePoint__SWIG_1(void * jarg1, double jarg2, int jarg3) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  SplineObject *arg1 = (SplineObject *) 0 ;
  Real arg2 ;
  LONG arg3 ;
  Vector result;
  
  arg1 = (SplineObject *)jarg1; 
  arg2 = (Real)jarg2; 
  arg3 = (LONG)jarg3; 
  result = (arg1)->GetSplinePoint(arg2,arg3);
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_SplineObject_GetSplinePoint__SWIG_2(void * jarg1, double jarg2) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  SplineObject *arg1 = (SplineObject *) 0 ;
  Real arg2 ;
  Vector result;
  
  arg1 = (SplineObject *)jarg1; 
  arg2 = (Real)jarg2; 
  result = (arg1)->GetSplinePoint(arg2);
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_SplineObject_GetSplineTangent__SWIG_0(void * jarg1, double jarg2, int jarg3, void * jarg4) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  SplineObject *arg1 = (SplineObject *) 0 ;
  Real arg2 ;
  LONG arg3 ;
  Vector *arg4 = (Vector *) 0 ;
  Vector result;
  
  arg1 = (SplineObject *)jarg1; 
  arg2 = (Real)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (Vector *)jarg4; /* Vector*&_in */
  result = (arg1)->GetSplineTangent(arg2,arg3,(Vector const *)arg4);
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_SplineObject_GetSplineTangent__SWIG_1(void * jarg1, double jarg2, int jarg3) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  SplineObject *arg1 = (SplineObject *) 0 ;
  Real arg2 ;
  LONG arg3 ;
  Vector result;
  
  arg1 = (SplineObject *)jarg1; 
  arg2 = (Real)jarg2; 
  arg3 = (LONG)jarg3; 
  result = (arg1)->GetSplineTangent(arg2,arg3);
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_SplineObject_GetSplineTangent__SWIG_2(void * jarg1, double jarg2) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  SplineObject *arg1 = (SplineObject *) 0 ;
  Real arg2 ;
  Vector result;
  
  arg1 = (SplineObject *)jarg1; 
  arg2 = (Real)jarg2; 
  result = (arg1)->GetSplineTangent(arg2);
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SplineObject_SetDefaultCoeff(void * jarg1) {
  unsigned int jresult ;
  SplineObject *arg1 = (SplineObject *) 0 ;
  Bool result;
  
  arg1 = (SplineObject *)jarg1; 
  result = (arg1)->SetDefaultCoeff();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SplineObject_ResizeObject(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  SplineObject *arg1 = (SplineObject *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  Bool result;
  
  arg1 = (SplineObject *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  result = (arg1)->ResizeObject(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SplineObject_GetSegmentR(void * jarg1) {
  void * jresult ;
  SplineObject *arg1 = (SplineObject *) 0 ;
  Segment *result = 0 ;
  
  arg1 = (SplineObject *)jarg1; 
  result = (Segment *)(arg1)->GetSegmentR();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SplineObject_GetSegmentW(void * jarg1) {
  void * jresult ;
  SplineObject *arg1 = (SplineObject *) 0 ;
  Segment *result = 0 ;
  
  arg1 = (SplineObject *)jarg1; 
  result = (Segment *)(arg1)->GetSegmentW();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SplineObject_GetSegmentCount(void * jarg1) {
  int jresult ;
  SplineObject *arg1 = (SplineObject *) 0 ;
  LONG result;
  
  arg1 = (SplineObject *)jarg1; 
  result = (arg1)->GetSegmentCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SplineObject_GetTangentR(void * jarg1) {
  void * jresult ;
  SplineObject *arg1 = (SplineObject *) 0 ;
  Tangent *result = 0 ;
  
  arg1 = (SplineObject *)jarg1; 
  result = (Tangent *)(arg1)->GetTangentR();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SplineObject_GetTangentW(void * jarg1) {
  void * jresult ;
  SplineObject *arg1 = (SplineObject *) 0 ;
  Tangent *result = 0 ;
  
  arg1 = (SplineObject *)jarg1; 
  result = (Tangent *)(arg1)->GetTangentW();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SplineObject_GetTangentCount(void * jarg1) {
  int jresult ;
  SplineObject *arg1 = (SplineObject *) 0 ;
  LONG result;
  
  arg1 = (SplineObject *)jarg1; 
  result = (arg1)->GetTangentCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SplineObject_GetLineObject__SWIG_0(void * jarg1, void * jarg2, double jarg3, void * jarg4) {
  void * jresult ;
  SplineObject *arg1 = (SplineObject *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  Real arg3 ;
  BaseThread *arg4 = (BaseThread *) 0 ;
  LineObject *result = 0 ;
  
  arg1 = (SplineObject *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (Real)jarg3; 
  arg4 = (BaseThread *)jarg4; 
  result = (LineObject *)(arg1)->GetLineObject(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SplineObject_GetLineObject__SWIG_1(void * jarg1, void * jarg2, double jarg3) {
  void * jresult ;
  SplineObject *arg1 = (SplineObject *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  Real arg3 ;
  LineObject *result = 0 ;
  
  arg1 = (SplineObject *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (Real)jarg3; 
  result = (LineObject *)(arg1)->GetLineObject(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SplineObject_Alloc(int jarg1, int jarg2) {
  void * jresult ;
  LONG arg1 ;
  SPLINETYPE arg2 ;
  SplineObject *result = 0 ;
  
  arg1 = (LONG)jarg1; 
  arg2 = (SPLINETYPE)jarg2; 
  result = (SplineObject *)SplineObject::Alloc(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SplineObject_Free(void * jarg1) {
  SplineObject **arg1 = 0 ;
  
  arg1 = (SplineObject **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SplineObject *& type is null", 0);
    return ;
  } 
  SplineObject::Free(*arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SplineObject_GetTangentAt(void * jarg1, int jarg2) {
  void * jresult ;
  SplineObject *arg1 = (SplineObject *) 0 ;
  LONG arg2 ;
  Tangent *result = 0 ;
  
  arg1 = (SplineObject *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (Tangent *)SplineObject_GetTangentAt(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SplineObject_SetTangentAt(void * jarg1, int jarg2, void * jarg3) {
  SplineObject *arg1 = (SplineObject *) 0 ;
  LONG arg2 ;
  Tangent *arg3 = (Tangent *) 0 ;
  
  arg1 = (SplineObject *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (Tangent *)jarg3; 
  SplineObject_SetTangentAt(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SplineObject_GetSegmentAt(void * jarg1, int jarg2) {
  void * jresult ;
  SplineObject *arg1 = (SplineObject *) 0 ;
  LONG arg2 ;
  Segment *result = 0 ;
  
  arg1 = (SplineObject *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (Segment *)SplineObject_GetSegmentAt(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SplineObject_SetSegmentAt(void * jarg1, int jarg2, void * jarg3) {
  SplineObject *arg1 = (SplineObject *) 0 ;
  LONG arg2 ;
  Segment *arg3 = (Segment *) 0 ;
  
  arg1 = (SplineObject *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (Segment *)jarg3; 
  SplineObject_SetSegmentAt(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GeneratePrimitive__SWIG_0(void * jarg1, int jarg2, void * jarg3, double jarg4, unsigned int jarg5, void * jarg6) {
  void * jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  LONG arg2 ;
  BaseContainer *arg3 = 0 ;
  Real arg4 ;
  Bool arg5 ;
  BaseThread *arg6 = (BaseThread *) 0 ;
  BaseObject *result = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer const & type is null", 0);
    return 0;
  } 
  arg4 = (Real)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (BaseThread *)jarg6; 
  result = (BaseObject *)GeneratePrimitive(arg1,arg2,(BaseContainer const &)*arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GeneratePrimitive__SWIG_1(void * jarg1, int jarg2, void * jarg3, double jarg4, unsigned int jarg5) {
  void * jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  LONG arg2 ;
  BaseContainer *arg3 = 0 ;
  Real arg4 ;
  Bool arg5 ;
  BaseObject *result = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer const & type is null", 0);
    return 0;
  } 
  arg4 = (Real)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (BaseObject *)GeneratePrimitive(arg1,arg2,(BaseContainer const &)*arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GenerateSplinePrimitive__SWIG_0(void * jarg1, int jarg2, void * jarg3, double jarg4, void * jarg5) {
  void * jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  LONG arg2 ;
  BaseContainer *arg3 = 0 ;
  Real arg4 ;
  BaseThread *arg5 = (BaseThread *) 0 ;
  BaseObject *result = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer const & type is null", 0);
    return 0;
  } 
  arg4 = (Real)jarg4; 
  arg5 = (BaseThread *)jarg5; 
  result = (BaseObject *)GenerateSplinePrimitive(arg1,arg2,(BaseContainer const &)*arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GenerateSplinePrimitive__SWIG_1(void * jarg1, int jarg2, void * jarg3, double jarg4) {
  void * jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  LONG arg2 ;
  BaseContainer *arg3 = 0 ;
  Real arg4 ;
  BaseObject *result = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer const & type is null", 0);
    return 0;
  } 
  arg4 = (Real)jarg4; 
  result = (BaseObject *)GenerateSplinePrimitive(arg1,arg2,(BaseContainer const &)*arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Safety() {
  void * jresult ;
  Safety *result = 0 ;
  
  result = (Safety *)new Safety();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Safety(void * jarg1) {
  Safety *arg1 = (Safety *) 0 ;
  
  arg1 = (Safety *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Safety_Init(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Safety *arg1 = (Safety *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  Bool result;
  
  arg1 = (Safety *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  result = (arg1)->Init(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Safety_Detach(void * jarg1) {
  Safety *arg1 = (Safety *) 0 ;
  
  arg1 = (Safety *)jarg1; 
  (arg1)->Detach();
}


SWIGEXPORT int SWIGSTDCALL CSharp_CalcLOD(int jarg1, double jarg2, int jarg3, int jarg4) {
  int jresult ;
  LONG arg1 ;
  Real arg2 ;
  LONG arg3 ;
  LONG arg4 ;
  LONG result;
  
  arg1 = (LONG)jarg1; 
  arg2 = (Real)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  result = CalcLOD(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DisjointMesh(void * jarg1) {
  unsigned int jresult ;
  PointObject *arg1 = (PointObject *) 0 ;
  Bool result;
  
  arg1 = (PointObject *)jarg1; 
  result = DisjointMesh(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FitCurve(void * jarg1, int jarg2, double jarg3, void * jarg4) {
  void * jresult ;
  Vector *arg1 = (Vector *) 0 ;
  LONG arg2 ;
  Real arg3 ;
  BaseThread *arg4 = (BaseThread *) 0 ;
  SplineObject *result = 0 ;
  
  arg1 = (Vector *)jarg1; /* Vector*&_in */
  arg2 = (LONG)jarg2; 
  arg3 = (Real)jarg3; 
  arg4 = (BaseThread *)jarg4; 
  result = (SplineObject *)FitCurve(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Triangulate(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  Vector *arg1 = (Vector *) 0 ;
  LONG arg2 ;
  CPolygon **arg3 = (CPolygon **) 0 ;
  LONG *arg4 = (LONG *) 0 ;
  Bool result;
  
  arg1 = (Vector *)jarg1; /* Vector*&_in */
  arg2 = (LONG)jarg2; 
  arg3 = (CPolygon **)jarg3; 
  arg4 = (LONG *)jarg4; 
  result = Triangulate((Vector const *)arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TriangulateStandard(void * jarg1, int jarg2, void * jarg3, int jarg4, void * jarg5, void * jarg6, void * jarg7) {
  unsigned int jresult ;
  Vector *arg1 = (Vector *) 0 ;
  LONG arg2 ;
  LONG *arg3 = (LONG *) 0 ;
  LONG arg4 ;
  CPolygon **arg5 = 0 ;
  LONG *arg6 = 0 ;
  BaseThread *arg7 = (BaseThread *) 0 ;
  Bool result;
  
  arg1 = (Vector *)jarg1; /* Vector*&_in */
  arg2 = (LONG)jarg2; 
  arg3 = (LONG *)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (CPolygon **)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CPolygon *& type is null", 0);
    return 0;
  } 
  arg6 = (LONG *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  arg7 = (BaseThread *)jarg7; 
  result = TriangulateStandard((Vector const *)arg1,arg2,arg3,arg4,*arg5,*arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TriangulateRegular(void * jarg1, int jarg2, void * jarg3, int jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, double jarg9, void * jarg10) {
  unsigned int jresult ;
  Vector *arg1 = (Vector *) 0 ;
  LONG arg2 ;
  LONG *arg3 = (LONG *) 0 ;
  LONG arg4 ;
  Vector **arg5 = 0 ;
  LONG *arg6 = 0 ;
  CPolygon **arg7 = 0 ;
  LONG *arg8 = 0 ;
  Real arg9 ;
  BaseThread *arg10 = (BaseThread *) 0 ;
  Bool result;
  
  arg1 = (Vector *)jarg1; /* Vector*&_in */
  arg2 = (LONG)jarg2; 
  arg3 = (LONG *)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (Vector **)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector *& type is null", 0);
    return 0;
  } 
  arg6 = (LONG *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  arg7 = (CPolygon **)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CPolygon *& type is null", 0);
    return 0;
  } 
  arg8 = (LONG *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  arg9 = (Real)jarg9; 
  arg10 = (BaseThread *)jarg10; 
  result = TriangulateRegular((Vector const *)arg1,arg2,arg3,arg4,*arg5,*arg6,*arg7,*arg8,arg9,arg10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GenerateText(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  BaseThread *arg2 = (BaseThread *) 0 ;
  Bool arg3 ;
  BaseObject *result = 0 ;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (BaseThread *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (BaseObject *)GenerateText(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CheckDisplayFilter(void * jarg1, int jarg2) {
  unsigned int jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  LONG arg2 ;
  Bool result;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = CheckDisplayFilter(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IntersectionTest(void * jarg1, void * jarg2, double jarg3, double jarg4, void * jarg5, void * jarg6, int jarg7, void * jarg8, int jarg9) {
  int jresult ;
  PolygonObject *arg1 = (PolygonObject *) 0 ;
  BaseDraw *arg2 = (BaseDraw *) 0 ;
  Real arg3 ;
  Real arg4 ;
  Matrix *arg5 = 0 ;
  Real *arg6 = (Real *) 0 ;
  MODELINGCOMMANDMODE arg7 ;
  UCHAR *arg8 = (UCHAR *) 0 ;
  LONG arg9 ;
  LONG result;
  
  arg1 = (PolygonObject *)jarg1; 
  arg2 = (BaseDraw *)jarg2; 
  arg3 = (Real)jarg3; 
  arg4 = (Real)jarg4; 
  arg5 = (Matrix *)jarg5; /* constMatrix&_in */
  arg6 = (Real *)jarg6; 
  arg7 = (MODELINGCOMMANDMODE)jarg7; 
  arg8 = (UCHAR *)jarg8; 
  arg9 = (LONG)jarg9; 
  result = IntersectionTest(arg1,arg2,arg3,arg4,(Matrix const &)*arg5,arg6,arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolyInfo_face_set(void * jarg1, void * jarg2) {
  PolyInfo *arg1 = (PolyInfo *) 0 ;
  LONG *arg2 ;
  
  arg1 = (PolyInfo *)jarg1; 
  arg2 = (LONG *)jarg2; 
  {
    size_t ii;
    LONG *b = (LONG *) arg1->face;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((LONG *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolyInfo_face_get(void * jarg1) {
  void * jresult ;
  PolyInfo *arg1 = (PolyInfo *) 0 ;
  LONG *result = 0 ;
  
  arg1 = (PolyInfo *)jarg1; 
  result = (LONG *)(LONG *) ((arg1)->face);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolyInfo_edge_set(void * jarg1, void * jarg2) {
  PolyInfo *arg1 = (PolyInfo *) 0 ;
  LONG *arg2 ;
  
  arg1 = (PolyInfo *)jarg1; 
  arg2 = (LONG *)jarg2; 
  {
    size_t ii;
    LONG *b = (LONG *) arg1->edge;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((LONG *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolyInfo_edge_get(void * jarg1) {
  void * jresult ;
  PolyInfo *arg1 = (PolyInfo *) 0 ;
  LONG *result = 0 ;
  
  arg1 = (PolyInfo *)jarg1; 
  result = (LONG *)(LONG *) ((arg1)->edge);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolyInfo_mark_set(void * jarg1, void * jarg2) {
  PolyInfo *arg1 = (PolyInfo *) 0 ;
  CHAR *arg2 ;
  
  arg1 = (PolyInfo *)jarg1; 
  arg2 = (CHAR *)jarg2; 
  {
    size_t ii;
    CHAR *b = (CHAR *) arg1->mark;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((CHAR *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolyInfo_mark_get(void * jarg1) {
  void * jresult ;
  PolyInfo *arg1 = (PolyInfo *) 0 ;
  CHAR *result = 0 ;
  
  arg1 = (PolyInfo *)jarg1; 
  result = (CHAR *)(CHAR *) ((arg1)->mark);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PolyInfo() {
  void * jresult ;
  PolyInfo *result = 0 ;
  
  result = (PolyInfo *)new PolyInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PolyInfo(void * jarg1) {
  PolyInfo *arg1 = (PolyInfo *) 0 ;
  
  arg1 = (PolyInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NgonNeighbor_segcnt_set(void * jarg1, int jarg2) {
  NgonNeighbor *arg1 = (NgonNeighbor *) 0 ;
  LONG arg2 ;
  
  arg1 = (NgonNeighbor *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->segcnt = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NgonNeighbor_segcnt_get(void * jarg1) {
  int jresult ;
  NgonNeighbor *arg1 = (NgonNeighbor *) 0 ;
  LONG result;
  
  arg1 = (NgonNeighbor *)jarg1; 
  result =  ((arg1)->segcnt);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NgonNeighbor_segments_set(void * jarg1, void * jarg2) {
  NgonNeighbor *arg1 = (NgonNeighbor *) 0 ;
  NgonNeighbor::NgonNeighborSegment *arg2 = (NgonNeighbor::NgonNeighborSegment *) 0 ;
  
  arg1 = (NgonNeighbor *)jarg1; 
  arg2 = (NgonNeighbor::NgonNeighborSegment *)jarg2; 
  if (arg1) (arg1)->segments = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NgonNeighbor_segments_get(void * jarg1) {
  void * jresult ;
  NgonNeighbor *arg1 = (NgonNeighbor *) 0 ;
  NgonNeighbor::NgonNeighborSegment *result = 0 ;
  
  arg1 = (NgonNeighbor *)jarg1; 
  result = (NgonNeighbor::NgonNeighborSegment *) ((arg1)->segments);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NgonNeighbor() {
  void * jresult ;
  NgonNeighbor *result = 0 ;
  
  result = (NgonNeighbor *)new NgonNeighbor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NgonNeighbor(void * jarg1) {
  NgonNeighbor *arg1 = (NgonNeighbor *) 0 ;
  
  arg1 = (NgonNeighbor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Neighbor() {
  void * jresult ;
  Neighbor *result = 0 ;
  
  result = (Neighbor *)new Neighbor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Neighbor(void * jarg1) {
  Neighbor *arg1 = (Neighbor *) 0 ;
  
  arg1 = (Neighbor *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Neighbor_Init(void * jarg1, int jarg2, void * jarg3, int jarg4, void * jarg5) {
  unsigned int jresult ;
  Neighbor *arg1 = (Neighbor *) 0 ;
  LONG arg2 ;
  CPolygon *arg3 = (CPolygon *) 0 ;
  LONG arg4 ;
  BaseSelect *arg5 = (BaseSelect *) 0 ;
  Bool result;
  
  arg1 = (Neighbor *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (CPolygon *)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (BaseSelect *)jarg5; 
  result = (arg1)->Init(arg2,(CPolygon const *)arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Neighbor_GetEdgePolys(void * jarg1, int jarg2, int jarg3, void * jarg4, void * jarg5) {
  Neighbor *arg1 = (Neighbor *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  LONG *arg4 = (LONG *) 0 ;
  LONG *arg5 = (LONG *) 0 ;
  
  arg1 = (Neighbor *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG *)jarg4; 
  arg5 = (LONG *)jarg5; 
  (arg1)->GetEdgePolys(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Neighbor_GetPointPolys(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  Neighbor *arg1 = (Neighbor *) 0 ;
  LONG arg2 ;
  LONG **arg3 = (LONG **) 0 ;
  LONG *arg4 = (LONG *) 0 ;
  
  arg1 = (Neighbor *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG **)jarg3; 
  arg4 = (LONG *)jarg4; 
  (arg1)->GetPointPolys(arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Neighbor_GetEdgeCount(void * jarg1) {
  int jresult ;
  Neighbor *arg1 = (Neighbor *) 0 ;
  LONG result;
  
  arg1 = (Neighbor *)jarg1; 
  result = (arg1)->GetEdgeCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Neighbor_GetPolyInfo(void * jarg1, int jarg2) {
  void * jresult ;
  Neighbor *arg1 = (Neighbor *) 0 ;
  LONG arg2 ;
  PolyInfo *result = 0 ;
  
  arg1 = (Neighbor *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (PolyInfo *)(arg1)->GetPolyInfo(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Neighbor_GetNeighbor(void * jarg1, int jarg2, int jarg3, int jarg4) {
  int jresult ;
  Neighbor *arg1 = (Neighbor *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  LONG arg4 ;
  LONG result;
  
  arg1 = (Neighbor *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  result = (arg1)->GetNeighbor(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Neighbor_GetNGons(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  Neighbor *arg1 = (Neighbor *) 0 ;
  PolygonObject *arg2 = (PolygonObject *) 0 ;
  LONG *arg3 = 0 ;
  NgonNeighbor **arg4 = 0 ;
  Bool result;
  
  arg1 = (Neighbor *)jarg1; 
  arg2 = (PolygonObject *)jarg2; 
  arg3 = (LONG *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  arg4 = (NgonNeighbor **)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NgonNeighbor *& type is null", 0);
    return 0;
  } 
  result = (arg1)->GetNGons(arg2,*arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Neighbor_Flush(void * jarg1) {
  Neighbor *arg1 = (Neighbor *) 0 ;
  
  arg1 = (Neighbor *)jarg1; 
  (arg1)->Flush();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Neighbor_ResetAddress(void * jarg1, void * jarg2) {
  Neighbor *arg1 = (Neighbor *) 0 ;
  CPolygon *arg2 = (CPolygon *) 0 ;
  
  arg1 = (Neighbor *)jarg1; 
  arg2 = (CPolygon *)jarg2; 
  (arg1)->ResetAddress((CPolygon const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetVirtualLineObject(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, unsigned int jarg5, void * jarg6, void * jarg7) {
  void * jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  HierarchyHelp *arg2 = (HierarchyHelp *) 0 ;
  Matrix *arg3 = 0 ;
  Bool arg4 ;
  Bool arg5 ;
  Matrix *arg6 = (Matrix *) 0 ;
  Bool *arg7 = (Bool *) 0 ;
  BaseObject *result = 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = (HierarchyHelp *)jarg2; 
  arg3 = (Matrix *)jarg3; /* constMatrix&_in */
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = (Matrix *)jarg6; /* Matrix*&_in */
  arg7 = (Bool *)jarg7; 
  result = (BaseObject *)GetVirtualLineObject(arg1,arg2,(Matrix const &)*arg3,arg4,arg5,arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GenerateUVW(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  Matrix *arg2 = 0 ;
  TextureTag *arg3 = (TextureTag *) 0 ;
  Matrix *arg4 = 0 ;
  BaseView *arg5 = (BaseView *) 0 ;
  UVWTag *result = 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  arg2 = (Matrix *)jarg2; /* constMatrix&_in */
  arg3 = (TextureTag *)jarg3; 
  arg4 = (Matrix *)jarg4; /* constMatrix&_in */
  arg5 = (BaseView *)jarg5; 
  result = (UVWTag *)GenerateUVW(arg1,(Matrix const &)*arg2,arg3,(Matrix const &)*arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CutReal(void * jarg1, int jarg2, double jarg3, double jarg4) {
  BaseContainer *arg1 = 0 ;
  LONG arg2 ;
  Real arg3 ;
  Real arg4 ;
  
  arg1 = (BaseContainer *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return ;
  } 
  arg2 = (LONG)jarg2; 
  arg3 = (Real)jarg3; 
  arg4 = (Real)jarg4; 
  CutReal(*arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CutVector(void * jarg1, int jarg2, double jarg3, double jarg4) {
  BaseContainer *arg1 = 0 ;
  LONG arg2 ;
  Real arg3 ;
  Real arg4 ;
  
  arg1 = (BaseContainer *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return ;
  } 
  arg2 = (LONG)jarg2; 
  arg3 = (Real)jarg3; 
  arg4 = (Real)jarg4; 
  CutVector(*arg1,arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CalculateVisiblePoints(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  PolygonObject *arg2 = (PolygonObject *) 0 ;
  Vector *arg3 = (Vector *) 0 ;
  UCHAR *arg4 = (UCHAR *) 0 ;
  Bool arg5 ;
  Bool result;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (PolygonObject *)jarg2; 
  arg3 = (Vector *)jarg3; /* Vector*&_in */
  arg4 = (UCHAR *)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = CalculateVisiblePoints(arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_POLY_TRIANG_CONSTRAINED_OUTLINE_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_POLY_TRIANG_QUADS_get() {
  int jresult ;
  int result;
  
  result = (int)(8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_POLY_TRIANG_NGON_get() {
  int jresult ;
  int result;
  
  result = (int)(32);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_POLY_TRIANG_FORCE_VORONOI_get() {
  int jresult ;
  int result;
  
  result = (int)(64);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_POLY_TRIANG_FORCE_NGON_get() {
  int jresult ;
  int result;
  
  result = (int)((128|32));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_POLY_TRIANG_FILL_HOLES_get() {
  int jresult ;
  int result;
  
  result = (int)(256);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TRIANGSTATE_SKIP_EDGE_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TRIANGSTATE_MISSING_CONSTRAINT_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolyTriangulate_Alloc() {
  void * jresult ;
  PolyTriangulate *result = 0 ;
  
  result = (PolyTriangulate *)PolyTriangulate::Alloc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolyTriangulate_Free(void * jarg1) {
  PolyTriangulate **arg1 = 0 ;
  
  arg1 = (PolyTriangulate **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PolyTriangulate *& type is null", 0);
    return ;
  } 
  PolyTriangulate::Free(*arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PolyTriangulate_Triangulate__SWIG_0(void * jarg1, void * jarg2, int jarg3, void * jarg4, int jarg5, void * jarg6, void * jarg7, int jarg8, void * jarg9, void * jarg10, int jarg11, void * jarg12) {
  unsigned int jresult ;
  PolyTriangulate *arg1 = (PolyTriangulate *) 0 ;
  Vector *arg2 = (Vector *) 0 ;
  LONG arg3 ;
  LONG *arg4 = (LONG *) 0 ;
  LONG arg5 ;
  CPolygon **arg6 = 0 ;
  LONG *arg7 = 0 ;
  LONG arg8 ;
  LONG *arg9 = (LONG *) 0 ;
  BaseThread *arg10 = (BaseThread *) 0 ;
  LONG arg11 ;
  LONG *arg12 = (LONG *) 0 ;
  Bool result;
  
  arg1 = (PolyTriangulate *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  arg3 = (LONG)jarg3; 
  arg4 = (LONG *)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (CPolygon **)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CPolygon *& type is null", 0);
    return 0;
  } 
  arg7 = (LONG *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  arg8 = (LONG)jarg8; 
  arg9 = (LONG *)jarg9; 
  arg10 = (BaseThread *)jarg10; 
  arg11 = (LONG)jarg11; 
  arg12 = (LONG *)jarg12; 
  result = (arg1)->Triangulate((Vector const *)arg2,arg3,(LONG const *)arg4,arg5,*arg6,*arg7,arg8,(LONG const *)arg9,arg10,arg11,(LONG const *)arg12);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PolyTriangulate_Triangulate__SWIG_1(void * jarg1, void * jarg2, int jarg3, void * jarg4, int jarg5, void * jarg6, void * jarg7, int jarg8, void * jarg9, void * jarg10, int jarg11) {
  unsigned int jresult ;
  PolyTriangulate *arg1 = (PolyTriangulate *) 0 ;
  Vector *arg2 = (Vector *) 0 ;
  LONG arg3 ;
  LONG *arg4 = (LONG *) 0 ;
  LONG arg5 ;
  CPolygon **arg6 = 0 ;
  LONG *arg7 = 0 ;
  LONG arg8 ;
  LONG *arg9 = (LONG *) 0 ;
  BaseThread *arg10 = (BaseThread *) 0 ;
  LONG arg11 ;
  Bool result;
  
  arg1 = (PolyTriangulate *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  arg3 = (LONG)jarg3; 
  arg4 = (LONG *)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (CPolygon **)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CPolygon *& type is null", 0);
    return 0;
  } 
  arg7 = (LONG *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  arg8 = (LONG)jarg8; 
  arg9 = (LONG *)jarg9; 
  arg10 = (BaseThread *)jarg10; 
  arg11 = (LONG)jarg11; 
  result = (arg1)->Triangulate((Vector const *)arg2,arg3,(LONG const *)arg4,arg5,*arg6,*arg7,arg8,(LONG const *)arg9,arg10,arg11);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PolyTriangulate_Triangulate__SWIG_2(void * jarg1, void * jarg2, int jarg3, void * jarg4, int jarg5, void * jarg6, void * jarg7, int jarg8, void * jarg9, void * jarg10) {
  unsigned int jresult ;
  PolyTriangulate *arg1 = (PolyTriangulate *) 0 ;
  Vector *arg2 = (Vector *) 0 ;
  LONG arg3 ;
  LONG *arg4 = (LONG *) 0 ;
  LONG arg5 ;
  CPolygon **arg6 = 0 ;
  LONG *arg7 = 0 ;
  LONG arg8 ;
  LONG *arg9 = (LONG *) 0 ;
  BaseThread *arg10 = (BaseThread *) 0 ;
  Bool result;
  
  arg1 = (PolyTriangulate *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  arg3 = (LONG)jarg3; 
  arg4 = (LONG *)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (CPolygon **)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CPolygon *& type is null", 0);
    return 0;
  } 
  arg7 = (LONG *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  arg8 = (LONG)jarg8; 
  arg9 = (LONG *)jarg9; 
  arg10 = (BaseThread *)jarg10; 
  result = (arg1)->Triangulate((Vector const *)arg2,arg3,(LONG const *)arg4,arg5,*arg6,*arg7,arg8,(LONG const *)arg9,arg10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PolyTriangulate_Triangulate__SWIG_3(void * jarg1, void * jarg2, int jarg3, void * jarg4, int jarg5, void * jarg6, void * jarg7, int jarg8, void * jarg9) {
  unsigned int jresult ;
  PolyTriangulate *arg1 = (PolyTriangulate *) 0 ;
  Vector *arg2 = (Vector *) 0 ;
  LONG arg3 ;
  LONG *arg4 = (LONG *) 0 ;
  LONG arg5 ;
  CPolygon **arg6 = 0 ;
  LONG *arg7 = 0 ;
  LONG arg8 ;
  LONG *arg9 = (LONG *) 0 ;
  Bool result;
  
  arg1 = (PolyTriangulate *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  arg3 = (LONG)jarg3; 
  arg4 = (LONG *)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (CPolygon **)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CPolygon *& type is null", 0);
    return 0;
  } 
  arg7 = (LONG *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  arg8 = (LONG)jarg8; 
  arg9 = (LONG *)jarg9; 
  result = (arg1)->Triangulate((Vector const *)arg2,arg3,(LONG const *)arg4,arg5,*arg6,*arg7,arg8,(LONG const *)arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PolyTriangulate_Triangulate__SWIG_4(void * jarg1, void * jarg2, int jarg3, void * jarg4, int jarg5, void * jarg6, void * jarg7, int jarg8) {
  unsigned int jresult ;
  PolyTriangulate *arg1 = (PolyTriangulate *) 0 ;
  Vector *arg2 = (Vector *) 0 ;
  LONG arg3 ;
  LONG *arg4 = (LONG *) 0 ;
  LONG arg5 ;
  CPolygon **arg6 = 0 ;
  LONG *arg7 = 0 ;
  LONG arg8 ;
  Bool result;
  
  arg1 = (PolyTriangulate *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  arg3 = (LONG)jarg3; 
  arg4 = (LONG *)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (CPolygon **)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CPolygon *& type is null", 0);
    return 0;
  } 
  arg7 = (LONG *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  arg8 = (LONG)jarg8; 
  result = (arg1)->Triangulate((Vector const *)arg2,arg3,(LONG const *)arg4,arg5,*arg6,*arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PolyTriangulate_Triangulate__SWIG_5(void * jarg1, void * jarg2, int jarg3, void * jarg4, int jarg5, void * jarg6, void * jarg7) {
  unsigned int jresult ;
  PolyTriangulate *arg1 = (PolyTriangulate *) 0 ;
  Vector *arg2 = (Vector *) 0 ;
  LONG arg3 ;
  LONG *arg4 = (LONG *) 0 ;
  LONG arg5 ;
  CPolygon **arg6 = 0 ;
  LONG *arg7 = 0 ;
  Bool result;
  
  arg1 = (PolyTriangulate *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  arg3 = (LONG)jarg3; 
  arg4 = (LONG *)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (CPolygon **)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CPolygon *& type is null", 0);
    return 0;
  } 
  arg7 = (LONG *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  result = (arg1)->Triangulate((Vector const *)arg2,arg3,(LONG const *)arg4,arg5,*arg6,*arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PolyTriangulate_TriangulateRelease__SWIG_0(void * jarg1, void * jarg2, int jarg3, void * jarg4, int jarg5, void * jarg6, void * jarg7, int jarg8, void * jarg9, void * jarg10, int jarg11, void * jarg12) {
  unsigned int jresult ;
  PolyTriangulate *arg1 = (PolyTriangulate *) 0 ;
  Vector *arg2 = (Vector *) 0 ;
  LONG arg3 ;
  LONG *arg4 = (LONG *) 0 ;
  LONG arg5 ;
  CPolygon **arg6 = 0 ;
  LONG *arg7 = 0 ;
  LONG arg8 ;
  LONG *arg9 = (LONG *) 0 ;
  BaseThread *arg10 = (BaseThread *) 0 ;
  LONG arg11 ;
  LONG *arg12 = (LONG *) 0 ;
  Bool result;
  
  arg1 = (PolyTriangulate *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  arg3 = (LONG)jarg3; 
  arg4 = (LONG *)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (CPolygon **)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CPolygon *& type is null", 0);
    return 0;
  } 
  arg7 = (LONG *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  arg8 = (LONG)jarg8; 
  arg9 = (LONG *)jarg9; 
  arg10 = (BaseThread *)jarg10; 
  arg11 = (LONG)jarg11; 
  arg12 = (LONG *)jarg12; 
  result = (arg1)->TriangulateRelease((Vector const *)arg2,arg3,(LONG const *)arg4,arg5,*arg6,*arg7,arg8,(LONG const *)arg9,arg10,arg11,(LONG const *)arg12);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PolyTriangulate_TriangulateRelease__SWIG_1(void * jarg1, void * jarg2, int jarg3, void * jarg4, int jarg5, void * jarg6, void * jarg7, int jarg8, void * jarg9, void * jarg10, int jarg11) {
  unsigned int jresult ;
  PolyTriangulate *arg1 = (PolyTriangulate *) 0 ;
  Vector *arg2 = (Vector *) 0 ;
  LONG arg3 ;
  LONG *arg4 = (LONG *) 0 ;
  LONG arg5 ;
  CPolygon **arg6 = 0 ;
  LONG *arg7 = 0 ;
  LONG arg8 ;
  LONG *arg9 = (LONG *) 0 ;
  BaseThread *arg10 = (BaseThread *) 0 ;
  LONG arg11 ;
  Bool result;
  
  arg1 = (PolyTriangulate *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  arg3 = (LONG)jarg3; 
  arg4 = (LONG *)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (CPolygon **)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CPolygon *& type is null", 0);
    return 0;
  } 
  arg7 = (LONG *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  arg8 = (LONG)jarg8; 
  arg9 = (LONG *)jarg9; 
  arg10 = (BaseThread *)jarg10; 
  arg11 = (LONG)jarg11; 
  result = (arg1)->TriangulateRelease((Vector const *)arg2,arg3,(LONG const *)arg4,arg5,*arg6,*arg7,arg8,(LONG const *)arg9,arg10,arg11);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PolyTriangulate_TriangulateRelease__SWIG_2(void * jarg1, void * jarg2, int jarg3, void * jarg4, int jarg5, void * jarg6, void * jarg7, int jarg8, void * jarg9, void * jarg10) {
  unsigned int jresult ;
  PolyTriangulate *arg1 = (PolyTriangulate *) 0 ;
  Vector *arg2 = (Vector *) 0 ;
  LONG arg3 ;
  LONG *arg4 = (LONG *) 0 ;
  LONG arg5 ;
  CPolygon **arg6 = 0 ;
  LONG *arg7 = 0 ;
  LONG arg8 ;
  LONG *arg9 = (LONG *) 0 ;
  BaseThread *arg10 = (BaseThread *) 0 ;
  Bool result;
  
  arg1 = (PolyTriangulate *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  arg3 = (LONG)jarg3; 
  arg4 = (LONG *)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (CPolygon **)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CPolygon *& type is null", 0);
    return 0;
  } 
  arg7 = (LONG *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  arg8 = (LONG)jarg8; 
  arg9 = (LONG *)jarg9; 
  arg10 = (BaseThread *)jarg10; 
  result = (arg1)->TriangulateRelease((Vector const *)arg2,arg3,(LONG const *)arg4,arg5,*arg6,*arg7,arg8,(LONG const *)arg9,arg10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PolyTriangulate_TriangulateRelease__SWIG_3(void * jarg1, void * jarg2, int jarg3, void * jarg4, int jarg5, void * jarg6, void * jarg7, int jarg8, void * jarg9) {
  unsigned int jresult ;
  PolyTriangulate *arg1 = (PolyTriangulate *) 0 ;
  Vector *arg2 = (Vector *) 0 ;
  LONG arg3 ;
  LONG *arg4 = (LONG *) 0 ;
  LONG arg5 ;
  CPolygon **arg6 = 0 ;
  LONG *arg7 = 0 ;
  LONG arg8 ;
  LONG *arg9 = (LONG *) 0 ;
  Bool result;
  
  arg1 = (PolyTriangulate *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  arg3 = (LONG)jarg3; 
  arg4 = (LONG *)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (CPolygon **)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CPolygon *& type is null", 0);
    return 0;
  } 
  arg7 = (LONG *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  arg8 = (LONG)jarg8; 
  arg9 = (LONG *)jarg9; 
  result = (arg1)->TriangulateRelease((Vector const *)arg2,arg3,(LONG const *)arg4,arg5,*arg6,*arg7,arg8,(LONG const *)arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PolyTriangulate_TriangulateRelease__SWIG_4(void * jarg1, void * jarg2, int jarg3, void * jarg4, int jarg5, void * jarg6, void * jarg7, int jarg8) {
  unsigned int jresult ;
  PolyTriangulate *arg1 = (PolyTriangulate *) 0 ;
  Vector *arg2 = (Vector *) 0 ;
  LONG arg3 ;
  LONG *arg4 = (LONG *) 0 ;
  LONG arg5 ;
  CPolygon **arg6 = 0 ;
  LONG *arg7 = 0 ;
  LONG arg8 ;
  Bool result;
  
  arg1 = (PolyTriangulate *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  arg3 = (LONG)jarg3; 
  arg4 = (LONG *)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (CPolygon **)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CPolygon *& type is null", 0);
    return 0;
  } 
  arg7 = (LONG *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  arg8 = (LONG)jarg8; 
  result = (arg1)->TriangulateRelease((Vector const *)arg2,arg3,(LONG const *)arg4,arg5,*arg6,*arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PolyTriangulate_TriangulateRelease__SWIG_5(void * jarg1, void * jarg2, int jarg3, void * jarg4, int jarg5, void * jarg6, void * jarg7) {
  unsigned int jresult ;
  PolyTriangulate *arg1 = (PolyTriangulate *) 0 ;
  Vector *arg2 = (Vector *) 0 ;
  LONG arg3 ;
  LONG *arg4 = (LONG *) 0 ;
  LONG arg5 ;
  CPolygon **arg6 = 0 ;
  LONG *arg7 = 0 ;
  Bool result;
  
  arg1 = (PolyTriangulate *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  arg3 = (LONG)jarg3; 
  arg4 = (LONG *)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (CPolygon **)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CPolygon *& type is null", 0);
    return 0;
  } 
  arg7 = (LONG *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  result = (arg1)->TriangulateRelease((Vector const *)arg2,arg3,(LONG const *)arg4,arg5,*arg6,*arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PolyTriangulate_HasIdentical(void * jarg1) {
  unsigned int jresult ;
  PolyTriangulate *arg1 = (PolyTriangulate *) 0 ;
  Bool result;
  
  arg1 = (PolyTriangulate *)jarg1; 
  result = (arg1)->HasIdentical();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolyTriangulate_SetPolygonMatrix(void * jarg1, void * jarg2) {
  PolyTriangulate *arg1 = (PolyTriangulate *) 0 ;
  LMatrix *arg2 = (LMatrix *) 0 ;
  
  arg1 = (PolyTriangulate *)jarg1; 
  arg2 = (LMatrix *)jarg2; 
  (arg1)->SetPolygonMatrix(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolyTriangulate_GetState(void * jarg1) {
  void * jresult ;
  PolyTriangulate *arg1 = (PolyTriangulate *) 0 ;
  ULONG result;
  
  arg1 = (PolyTriangulate *)jarg1; 
  result = (arg1)->GetState();
  jresult = new ULONG((const ULONG &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BaseContainer__SWIG_0() {
  void * jresult ;
  BaseContainer *result = 0 ;
  
  result = (BaseContainer *)new BaseContainer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BaseContainer__SWIG_1(int jarg1) {
  void * jresult ;
  LONG arg1 ;
  BaseContainer *result = 0 ;
  
  arg1 = (LONG)jarg1; 
  result = (BaseContainer *)new BaseContainer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BaseContainer__SWIG_2(void * jarg1) {
  void * jresult ;
  BaseContainer *arg1 = 0 ;
  BaseContainer *result = 0 ;
  
  arg1 = (BaseContainer *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer const & type is null", 0);
    return 0;
  } 
  result = (BaseContainer *)new BaseContainer((BaseContainer const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BaseContainer(void * jarg1) {
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  
  arg1 = (BaseContainer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseContainer_GetClone(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  COPYFLAGS arg2 ;
  AliasTrans *arg3 = (AliasTrans *) 0 ;
  BaseContainer *result = 0 ;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (COPYFLAGS)jarg2; 
  arg3 = (AliasTrans *)jarg3; 
  result = (BaseContainer *)((BaseContainer const *)arg1)->GetClone(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseContainer_CopyTo(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  BaseContainer *arg2 = (BaseContainer *) 0 ;
  COPYFLAGS arg3 ;
  AliasTrans *arg4 = (AliasTrans *) 0 ;
  Bool result;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (BaseContainer *)jarg2; 
  arg3 = (COPYFLAGS)jarg3; 
  arg4 = (AliasTrans *)jarg4; 
  result = ((BaseContainer const *)arg1)->CopyTo(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseContainer_FlushAll(void * jarg1) {
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  
  arg1 = (BaseContainer *)jarg1; 
  (arg1)->FlushAll();
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseContainer_GetId(void * jarg1) {
  int jresult ;
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG result;
  
  arg1 = (BaseContainer *)jarg1; 
  result = ((BaseContainer const *)arg1)->GetId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseContainer_SetId(void * jarg1, int jarg2) {
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  (arg1)->SetId(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseContainer_GetDirty(void * jarg1) {
  void * jresult ;
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  ULONG result;
  
  arg1 = (BaseContainer *)jarg1; 
  result = ((BaseContainer const *)arg1)->GetDirty();
  jresult = new ULONG((const ULONG &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseContainer_RemoveData(void * jarg1, int jarg2) {
  unsigned int jresult ;
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  Bool result;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (arg1)->RemoveData(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseContainer_RemoveIndex(void * jarg1, int jarg2) {
  unsigned int jresult ;
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  Bool result;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (arg1)->RemoveIndex(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseContainer_FindIndex__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  int jresult ;
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  GeData **arg3 = (GeData **) 0 ;
  LONG result;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (GeData **)jarg3; 
  result = ((BaseContainer const *)arg1)->FindIndex(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseContainer_FindIndex__SWIG_1(void * jarg1, int jarg2) {
  int jresult ;
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  LONG result;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = ((BaseContainer const *)arg1)->FindIndex(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseContainer_GetIndexId(void * jarg1, int jarg2) {
  int jresult ;
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  LONG result;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = ((BaseContainer const *)arg1)->GetIndexId(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseContainer_GetDataPointer(void * jarg1, int jarg2) {
  void * jresult ;
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  GeData *result = 0 ;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (GeData *)((BaseContainer const *)arg1)->GetDataPointer(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseContainer_GetDataPointers(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG *arg2 = (LONG *) 0 ;
  LONG arg3 ;
  GeData **arg4 = (GeData **) 0 ;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG *)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (GeData **)jarg4; 
  ((BaseContainer const *)arg1)->GetDataPointers((LONG const *)arg2,arg3,(GeData const **)arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseContainer_GetIndexData(void * jarg1, int jarg2) {
  void * jresult ;
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  GeData *result = 0 ;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (GeData *)((BaseContainer const *)arg1)->GetIndexData(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseContainer_InsData(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  GeData *arg3 = 0 ;
  GeData *result = 0 ;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (GeData *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeData const & type is null", 0);
    return 0;
  } 
  result = (GeData *)(arg1)->InsData(arg2,(GeData const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseContainer_InsDataAfter(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  GeData *arg3 = 0 ;
  GeData *arg4 = (GeData *) 0 ;
  GeData *result = 0 ;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (GeData *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeData const & type is null", 0);
    return 0;
  } 
  arg4 = (GeData *)jarg4; 
  result = (GeData *)(arg1)->InsDataAfter(arg2,(GeData const &)*arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseContainer_SetData(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  GeData *arg3 = 0 ;
  GeData *result = 0 ;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (GeData *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeData const & type is null", 0);
    return 0;
  } 
  result = (GeData *)(arg1)->SetData(arg2,(GeData const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseContainer_GetData(void * jarg1, int jarg2) {
  void * jresult ;
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  GeData *result = 0 ;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (GeData *) &((BaseContainer const *)arg1)->GetData(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseContainer_GetBool__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  Bool arg3 ;
  Bool result;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = ((BaseContainer const *)arg1)->GetBool(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseContainer_GetBool__SWIG_1(void * jarg1, int jarg2) {
  unsigned int jresult ;
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  Bool result;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = ((BaseContainer const *)arg1)->GetBool(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseContainer_GetLong__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  LONG result;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  result = ((BaseContainer const *)arg1)->GetLong(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseContainer_GetLong__SWIG_1(void * jarg1, int jarg2) {
  int jresult ;
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  LONG result;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = ((BaseContainer const *)arg1)->GetLong(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseContainer_GetULong__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  ULONG arg3 ;
  ULONG *argp3 ;
  ULONG result;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  argp3 = (ULONG *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ULONG", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = ((BaseContainer const *)arg1)->GetULong(arg2,arg3);
  jresult = new ULONG((const ULONG &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseContainer_GetULong__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  ULONG result;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = ((BaseContainer const *)arg1)->GetULong(arg2);
  jresult = new ULONG((const ULONG &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseContainer_GetLLong__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  LLONG arg3 ;
  LLONG *argp3 ;
  LLONG result;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  argp3 = (LLONG *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null LLONG", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = ((BaseContainer const *)arg1)->GetLLong(arg2,arg3);
  jresult = new LLONG((const LLONG &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseContainer_GetLLong__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  LLONG result;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = ((BaseContainer const *)arg1)->GetLLong(arg2);
  jresult = new LLONG((const LLONG &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseContainer_GetLULong__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  LULONG arg3 ;
  LULONG *argp3 ;
  LULONG result;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  argp3 = (LULONG *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null LULONG", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = ((BaseContainer const *)arg1)->GetLULong(arg2,arg3);
  jresult = new LULONG((const LULONG &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseContainer_GetLULong__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  LULONG result;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = ((BaseContainer const *)arg1)->GetLULong(arg2);
  jresult = new LULONG((const LULONG &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_BaseContainer_GetReal__SWIG_0(void * jarg1, int jarg2, double jarg3) {
  double jresult ;
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  Real arg3 ;
  Real result;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (Real)jarg3; 
  result = ((BaseContainer const *)arg1)->GetReal(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_BaseContainer_GetReal__SWIG_1(void * jarg1, int jarg2) {
  double jresult ;
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  Real result;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = ((BaseContainer const *)arg1)->GetReal(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseContainer_GetVoid__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (void *)jarg3; 
  result = (void *)((BaseContainer const *)arg1)->GetVoid(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseContainer_GetVoid__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  void *result = 0 ;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (void *)((BaseContainer const *)arg1)->GetVoid(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_BaseContainer_GetVector__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  Vector *arg3 = 0 ;
  Vector result;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (Vector *)jarg3; /* Vector*&_in */
  result = ((BaseContainer const *)arg1)->GetVector(arg2,(Vector const &)*arg3);
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_BaseContainer_GetVector__SWIG_1(void * jarg1, int jarg2) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  Vector result;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = ((BaseContainer const *)arg1)->GetVector(arg2);
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT Matrix_POD /* Matrix_ctype */ SWIGSTDCALL CSharp_BaseContainer_GetMatrix__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  Matrix_POD /* Matrix_ctype */ jresult ;
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  Matrix *arg3 = 0 ;
  Matrix result;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (Matrix *)jarg3; /* constMatrix&_in */
  result = ((BaseContainer const *)arg1)->GetMatrix(arg2,(Matrix const &)*arg3);
  /* <Matrix_out> */ 
  jresult = *((Matrix_POD *)(&result)); 
  /* </Matrix_out> */
  return jresult;
}


SWIGEXPORT Matrix_POD /* Matrix_ctype */ SWIGSTDCALL CSharp_BaseContainer_GetMatrix__SWIG_1(void * jarg1, int jarg2) {
  Matrix_POD /* Matrix_ctype */ jresult ;
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  Matrix result;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = ((BaseContainer const *)arg1)->GetMatrix(arg2);
  /* <Matrix_out> */ 
  jresult = *((Matrix_POD *)(&result)); 
  /* </Matrix_out> */
  return jresult;
}


SWIGEXPORT char * /* String_ctype */ SWIGSTDCALL CSharp_BaseContainer_GetString__SWIG_0(void * jarg1, int jarg2, char * /* constString&_ctype */ jarg3) {
  char * /* String_ctype */ jresult ;
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  String *arg3 = 0 ;
  String result;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = ((BaseContainer const *)arg1)->GetString(arg2,(String const &)*arg3);
  /* <String_out> */ 
  jresult = SWIG_csharp_string_callback((&result)->GetCStringCopy()); 
  /* </String_out> */
  return jresult;
}


SWIGEXPORT char * /* String_ctype */ SWIGSTDCALL CSharp_BaseContainer_GetString__SWIG_1(void * jarg1, int jarg2) {
  char * /* String_ctype */ jresult ;
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  String result;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = ((BaseContainer const *)arg1)->GetString(arg2);
  /* <String_out> */ 
  jresult = SWIG_csharp_string_callback((&result)->GetCStringCopy()); 
  /* </String_out> */
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseContainer_GetFilename__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  Filename *arg3 = 0 ;
  Filename result;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (Filename *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Filename const & type is null", 0);
    return 0;
  } 
  result = ((BaseContainer const *)arg1)->GetFilename(arg2,(Filename const &)*arg3);
  jresult = new Filename((const Filename &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseContainer_GetFilename__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  Filename result;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = ((BaseContainer const *)arg1)->GetFilename(arg2);
  jresult = new Filename((const Filename &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseContainer_GetTime__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  BaseTime *arg3 = 0 ;
  BaseTime result;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (BaseTime *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseTime const & type is null", 0);
    return 0;
  } 
  result = ((BaseContainer const *)arg1)->GetTime(arg2,(BaseTime const &)*arg3);
  jresult = new BaseTime((const BaseTime &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseContainer_GetTime__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  BaseTime result;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = ((BaseContainer const *)arg1)->GetTime(arg2);
  jresult = new BaseTime((const BaseTime &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseContainer_GetContainer(void * jarg1, int jarg2) {
  void * jresult ;
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  BaseContainer result;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = ((BaseContainer const *)arg1)->GetContainer(arg2);
  jresult = new BaseContainer((const BaseContainer &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseContainer_GetContainerInstance(void * jarg1, int jarg2) {
  void * jresult ;
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  BaseContainer *result = 0 ;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (BaseContainer *)((BaseContainer const *)arg1)->GetContainerInstance(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseContainer_GetLink__SWIG_0(void * jarg1, int jarg2, void * jarg3, int jarg4) {
  void * jresult ;
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  BaseDocument *arg3 = (BaseDocument *) 0 ;
  LONG arg4 ;
  BaseList2D *result = 0 ;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (BaseDocument *)jarg3; 
  arg4 = (LONG)jarg4; 
  result = (BaseList2D *)((BaseContainer const *)arg1)->GetLink(arg2,(BaseDocument const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseContainer_GetLink__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  BaseDocument *arg3 = (BaseDocument *) 0 ;
  BaseList2D *result = 0 ;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (BaseDocument *)jarg3; 
  result = (BaseList2D *)((BaseContainer const *)arg1)->GetLink(arg2,(BaseDocument const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseContainer_GetObjectLink(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  BaseDocument *arg3 = (BaseDocument *) 0 ;
  BaseObject *result = 0 ;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (BaseDocument *)jarg3; 
  result = (BaseObject *)((BaseContainer const *)arg1)->GetObjectLink(arg2,(BaseDocument const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseContainer_GetMaterialLink(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  BaseDocument *arg3 = (BaseDocument *) 0 ;
  BaseMaterial *result = 0 ;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (BaseDocument *)jarg3; 
  result = (BaseMaterial *)((BaseContainer const *)arg1)->GetMaterialLink(arg2,(BaseDocument const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseContainer_GetBaseLink(void * jarg1, int jarg2) {
  void * jresult ;
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  BaseLink *result = 0 ;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (BaseLink *)((BaseContainer const *)arg1)->GetBaseLink(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseContainer_GetCustomDataType(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  CustomDataType *result = 0 ;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  result = (CustomDataType *)((BaseContainer const *)arg1)->GetCustomDataType(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseContainer_GetType(void * jarg1, int jarg2) {
  int jresult ;
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  LONG result;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = ((BaseContainer const *)arg1)->GetType(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseContainer_SetBool(void * jarg1, int jarg2, unsigned int jarg3) {
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  Bool arg3 ;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetBool(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseContainer_SetLong(void * jarg1, int jarg2, int jarg3) {
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  (arg1)->SetLong(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseContainer_SetULong(void * jarg1, int jarg2, void * jarg3) {
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  ULONG arg3 ;
  ULONG *argp3 ;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  argp3 = (ULONG *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ULONG", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->SetULong(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseContainer_SetLLong(void * jarg1, int jarg2, void * jarg3) {
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  LLONG arg3 ;
  LLONG *argp3 ;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  argp3 = (LLONG *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null LLONG", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->SetLLong(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseContainer_SetLULong(void * jarg1, int jarg2, void * jarg3) {
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  LULONG arg3 ;
  LULONG *argp3 ;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  argp3 = (LULONG *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null LULONG", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->SetLULong(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseContainer_SetReal(void * jarg1, int jarg2, double jarg3) {
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  Real arg3 ;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (Real)jarg3; 
  (arg1)->SetReal(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseContainer_SetVoid(void * jarg1, int jarg2, void * jarg3) {
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  void *arg3 = (void *) 0 ;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (void *)jarg3; 
  (arg1)->SetVoid(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseContainer_SetVector(void * jarg1, int jarg2, void * jarg3) {
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  Vector *arg3 = 0 ;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (Vector *)jarg3; /* Vector*&_in */
  (arg1)->SetVector(arg2,(Vector const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseContainer_SetMatrix(void * jarg1, int jarg2, void * jarg3) {
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  Matrix *arg3 = 0 ;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (Matrix *)jarg3; /* constMatrix&_in */
  (arg1)->SetMatrix(arg2,(Matrix const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseContainer_SetString(void * jarg1, int jarg2, char * /* constString&_ctype */ jarg3) {
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  String *arg3 = 0 ;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  String arg3_str(jarg3);
  arg3 = &arg3_str; 
  (arg1)->SetString(arg2,(String const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseContainer_SetFilename(void * jarg1, int jarg2, void * jarg3) {
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  Filename *arg3 = 0 ;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (Filename *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Filename const & type is null", 0);
    return ;
  } 
  (arg1)->SetFilename(arg2,(Filename const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseContainer_SetTime(void * jarg1, int jarg2, void * jarg3) {
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  BaseTime *arg3 = 0 ;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (BaseTime *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseTime const & type is null", 0);
    return ;
  } 
  (arg1)->SetTime(arg2,(BaseTime const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseContainer_SetContainer(void * jarg1, int jarg2, void * jarg3) {
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  BaseContainer *arg3 = 0 ;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer const & type is null", 0);
    return ;
  } 
  (arg1)->SetContainer(arg2,(BaseContainer const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseContainer_SetLink(void * jarg1, int jarg2, void * jarg3) {
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  LONG arg2 ;
  C4DAtomGoal *arg3 = (C4DAtomGoal *) 0 ;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (C4DAtomGoal *)jarg3; 
  (arg1)->SetLink(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseContainer_MergeContainer(void * jarg1, void * jarg2) {
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  BaseContainer *arg2 = 0 ;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (BaseContainer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer const & type is null", 0);
    return ;
  } 
  (arg1)->MergeContainer((BaseContainer const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseContainer_GetParameter(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  DescID *arg2 = 0 ;
  GeData *arg3 = 0 ;
  Bool result;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (DescID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescID const & type is null", 0);
    return 0;
  } 
  arg3 = (GeData *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeData & type is null", 0);
    return 0;
  } 
  result = ((BaseContainer const *)arg1)->GetParameter((DescID const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseContainer_SetParameter(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  DescID *arg2 = 0 ;
  GeData *arg3 = 0 ;
  Bool result;
  
  arg1 = (BaseContainer *)jarg1; 
  arg2 = (DescID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescID const & type is null", 0);
    return 0;
  } 
  arg3 = (GeData *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeData const & type is null", 0);
    return 0;
  } 
  result = (arg1)->SetParameter((DescID const &)*arg2,(GeData const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseContainer_Sort(void * jarg1) {
  BaseContainer *arg1 = (BaseContainer *) 0 ;
  
  arg1 = (BaseContainer *)jarg1; 
  (arg1)->Sort();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDrawHelp_GetDocument(void * jarg1) {
  void * jresult ;
  BaseDrawHelp *arg1 = (BaseDrawHelp *) 0 ;
  BaseDocument *result = 0 ;
  
  arg1 = (BaseDrawHelp *)jarg1; 
  result = (BaseDocument *)(arg1)->GetDocument();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDrawHelp_GetActiveTag(void * jarg1) {
  void * jresult ;
  BaseDrawHelp *arg1 = (BaseDrawHelp *) 0 ;
  BaseTag *result = 0 ;
  
  arg1 = (BaseDrawHelp *)jarg1; 
  result = (BaseTag *)(arg1)->GetActiveTag();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDrawHelp_GetMg(void * jarg1) {
  void * jresult ;
  BaseDrawHelp *arg1 = (BaseDrawHelp *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (BaseDrawHelp *)jarg1; 
  result = (Matrix *) &(arg1)->GetMg();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDrawHelp_GetDisplay(void * jarg1) {
  void * jresult ;
  BaseDrawHelp *arg1 = (BaseDrawHelp *) 0 ;
  BaseContainer result;
  
  arg1 = (BaseDrawHelp *)jarg1; 
  result = (arg1)->GetDisplay();
  jresult = new BaseContainer((const BaseContainer &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDrawHelp_SetDisplay(void * jarg1, void * jarg2) {
  BaseDrawHelp *arg1 = (BaseDrawHelp *) 0 ;
  BaseContainer *arg2 = (BaseContainer *) 0 ;
  
  arg1 = (BaseDrawHelp *)jarg1; 
  arg2 = (BaseContainer *)jarg2; 
  (arg1)->SetDisplay(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDrawHelp_SetMg(void * jarg1, void * jarg2) {
  BaseDrawHelp *arg1 = (BaseDrawHelp *) 0 ;
  Matrix *arg2 = 0 ;
  
  arg1 = (BaseDrawHelp *)jarg1; 
  arg2 = (Matrix *)jarg2; /* constMatrix&_in */
  (arg1)->SetMg((Matrix const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseDrawHelp_GetViewSchedulerFlags(void * jarg1) {
  int jresult ;
  BaseDrawHelp *arg1 = (BaseDrawHelp *) 0 ;
  DRAWFLAGS result;
  
  arg1 = (BaseDrawHelp *)jarg1; 
  result = (DRAWFLAGS)((BaseDrawHelp const *)arg1)->GetViewSchedulerFlags();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDrawHelp_Alloc(void * jarg1, void * jarg2) {
  void * jresult ;
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  BaseDrawHelp *result = 0 ;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  result = (BaseDrawHelp *)BaseDrawHelp::Alloc(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDrawHelp_Free(void * jarg1) {
  BaseDrawHelp **arg1 = 0 ;
  
  arg1 = (BaseDrawHelp **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseDrawHelp *& type is null", 0);
    return ;
  } 
  BaseDrawHelp::Free(*arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SET_PEN_USE_PROFILE_COLOR_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_Z_get() {
  int jresult ;
  int result;
  
  result = (int)(1000000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_VIEW_NEARCLIPPING_get() {
  double jresult ;
  double result;
  
  result = (double)(0.01);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OITInfo_mode_set(void * jarg1, int jarg2) {
  OITInfo *arg1 = (OITInfo *) 0 ;
  OITMODE arg2 ;
  
  arg1 = (OITInfo *)jarg1; 
  arg2 = (OITMODE)jarg2; 
  if (arg1) (arg1)->mode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OITInfo_mode_get(void * jarg1) {
  int jresult ;
  OITInfo *arg1 = (OITInfo *) 0 ;
  OITMODE result;
  
  arg1 = (OITInfo *)jarg1; 
  result = (OITMODE) ((arg1)->mode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OITInfo_lPass_set(void * jarg1, int jarg2) {
  OITInfo *arg1 = (OITInfo *) 0 ;
  LONG arg2 ;
  
  arg1 = (OITInfo *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->lPass = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OITInfo_lPass_get(void * jarg1) {
  int jresult ;
  OITInfo *arg1 = (OITInfo *) 0 ;
  LONG result;
  
  arg1 = (OITInfo *)jarg1; 
  result =  ((arg1)->lPass);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OITInfo_nDepthTexture_set(void * jarg1, void * jarg2) {
  OITInfo *arg1 = (OITInfo *) 0 ;
  C4DGLuint arg2 ;
  C4DGLuint *argp2 ;
  
  arg1 = (OITInfo *)jarg1; 
  argp2 = (C4DGLuint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null C4DGLuint", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->nDepthTexture = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OITInfo_nDepthTexture_get(void * jarg1) {
  void * jresult ;
  OITInfo *arg1 = (OITInfo *) 0 ;
  C4DGLuint result;
  
  arg1 = (OITInfo *)jarg1; 
  result =  ((arg1)->nDepthTexture);
  jresult = new C4DGLuint((const C4DGLuint &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OITInfo_pData_set(void * jarg1, void * jarg2) {
  OITInfo *arg1 = (OITInfo *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (OITInfo *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->pData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OITInfo_pData_get(void * jarg1) {
  void * jresult ;
  OITInfo *arg1 = (OITInfo *) 0 ;
  void *result = 0 ;
  
  arg1 = (OITInfo *)jarg1; 
  result = (void *) ((arg1)->pData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OITInfo_vScaleOff_set(void * jarg1, void * jarg2) {
  OITInfo *arg1 = (OITInfo *) 0 ;
  SVector4 arg2 ;
  SVector4 *argp2 ;
  
  arg1 = (OITInfo *)jarg1; 
  argp2 = (SVector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null SVector4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->vScaleOff = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OITInfo_vScaleOff_get(void * jarg1) {
  void * jresult ;
  OITInfo *arg1 = (OITInfo *) 0 ;
  SVector4 result;
  
  arg1 = (OITInfo *)jarg1; 
  result =  ((arg1)->vScaleOff);
  jresult = new SVector4((const SVector4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OITInfo() {
  void * jresult ;
  OITInfo *result = 0 ;
  
  result = (OITInfo *)new OITInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OITInfo(void * jarg1) {
  OITInfo *arg1 = (OITInfo *) 0 ;
  
  arg1 = (OITInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DRAW_STATISTIC_TRIANGLES_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DRAW_STATISTIC_QUADS_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DRAW_STATISTIC_LINES_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DRAW_STATISTIC_POINTS_get() {
  int jresult ;
  int result;
  
  result = (int)(3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DRAW_STATISTIC_TRIANGLE_STRIPS_get() {
  int jresult ;
  int result;
  
  result = (int)(4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DRAW_STATISTIC_LINE_STRIPS_get() {
  int jresult ;
  int result;
  
  result = (int)(5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseView_GetFrame(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  BaseView *arg1 = (BaseView *) 0 ;
  LONG *arg2 = (LONG *) 0 ;
  LONG *arg3 = (LONG *) 0 ;
  LONG *arg4 = (LONG *) 0 ;
  LONG *arg5 = (LONG *) 0 ;
  
  arg1 = (BaseView *)jarg1; 
  arg2 = (LONG *)jarg2; 
  arg3 = (LONG *)jarg3; 
  arg4 = (LONG *)jarg4; 
  arg5 = (LONG *)jarg5; 
  (arg1)->GetFrame(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseView_GetSafeFrame(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  BaseView *arg1 = (BaseView *) 0 ;
  LONG *arg2 = (LONG *) 0 ;
  LONG *arg3 = (LONG *) 0 ;
  LONG *arg4 = (LONG *) 0 ;
  LONG *arg5 = (LONG *) 0 ;
  
  arg1 = (BaseView *)jarg1; 
  arg2 = (LONG *)jarg2; 
  arg3 = (LONG *)jarg3; 
  arg4 = (LONG *)jarg4; 
  arg5 = (LONG *)jarg5; 
  (arg1)->GetSafeFrame(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseView_GetViewParameter(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  BaseView *arg1 = (BaseView *) 0 ;
  Vector *arg2 = (Vector *) 0 ;
  Vector *arg3 = (Vector *) 0 ;
  Vector *arg4 = (Vector *) 0 ;
  
  arg1 = (BaseView *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  arg3 = (Vector *)jarg3; /* Vector*&_in */
  arg4 = (Vector *)jarg4; /* Vector*&_in */
  ((BaseView const *)arg1)->GetViewParameter(arg2,arg3,arg4);
}


SWIGEXPORT Matrix_POD /* Matrix_ctype */ SWIGSTDCALL CSharp_BaseView_GetMg(void * jarg1) {
  Matrix_POD /* Matrix_ctype */ jresult ;
  BaseView *arg1 = (BaseView *) 0 ;
  Matrix result;
  
  arg1 = (BaseView *)jarg1; 
  result = (arg1)->GetMg();
  /* <Matrix_out> */ 
  jresult = *((Matrix_POD *)(&result)); 
  /* </Matrix_out> */
  return jresult;
}


SWIGEXPORT Matrix_POD /* Matrix_ctype */ SWIGSTDCALL CSharp_BaseView_GetMi(void * jarg1) {
  Matrix_POD /* Matrix_ctype */ jresult ;
  BaseView *arg1 = (BaseView *) 0 ;
  Matrix result;
  
  arg1 = (BaseView *)jarg1; 
  result = (arg1)->GetMi();
  /* <Matrix_out> */ 
  jresult = *((Matrix_POD *)(&result)); 
  /* </Matrix_out> */
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseView_GetProjection(void * jarg1) {
  int jresult ;
  BaseView *arg1 = (BaseView *) 0 ;
  LONG result;
  
  arg1 = (BaseView *)jarg1; 
  result = (arg1)->GetProjection();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseView_TestPoint(void * jarg1, double jarg2, double jarg3) {
  unsigned int jresult ;
  BaseView *arg1 = (BaseView *) 0 ;
  Real arg2 ;
  Real arg3 ;
  Bool result;
  
  arg1 = (BaseView *)jarg1; 
  arg2 = (Real)jarg2; 
  arg3 = (Real)jarg3; 
  result = (arg1)->TestPoint(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseView_TestPointZ(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BaseView *arg1 = (BaseView *) 0 ;
  Vector *arg2 = 0 ;
  Bool result;
  
  arg1 = (BaseView *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  result = (arg1)->TestPointZ((Vector const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseView_TestClipping3D(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  BaseView *arg1 = (BaseView *) 0 ;
  Vector *arg2 = 0 ;
  Vector *arg3 = 0 ;
  Matrix *arg4 = 0 ;
  Bool *arg5 = (Bool *) 0 ;
  Bool *arg6 = (Bool *) 0 ;
  Bool result;
  
  arg1 = (BaseView *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  arg3 = (Vector *)jarg3; /* Vector*&_in */
  arg4 = (Matrix *)jarg4; /* constMatrix&_in */
  arg5 = (Bool *)jarg5; 
  arg6 = (Bool *)jarg6; 
  result = (arg1)->TestClipping3D((Vector const &)*arg2,(Vector const &)*arg3,(Matrix const &)*arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseView_ClipLine2D(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  BaseView *arg1 = (BaseView *) 0 ;
  Vector *arg2 = (Vector *) 0 ;
  Vector *arg3 = (Vector *) 0 ;
  Bool result;
  
  arg1 = (BaseView *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  arg3 = (Vector *)jarg3; /* Vector*&_in */
  result = (arg1)->ClipLine2D(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseView_ClipLineZ(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  BaseView *arg1 = (BaseView *) 0 ;
  Vector *arg2 = (Vector *) 0 ;
  Vector *arg3 = (Vector *) 0 ;
  Bool result;
  
  arg1 = (BaseView *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  arg3 = (Vector *)jarg3; /* Vector*&_in */
  result = (arg1)->ClipLineZ(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_BaseView_WS(void * jarg1, void * jarg2) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  BaseView *arg1 = (BaseView *) 0 ;
  Vector *arg2 = 0 ;
  Vector result;
  
  arg1 = (BaseView *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  result = (arg1)->WS((Vector const &)*arg2);
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_BaseView_SW(void * jarg1, void * jarg2) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  BaseView *arg1 = (BaseView *) 0 ;
  Vector *arg2 = 0 ;
  Vector result;
  
  arg1 = (BaseView *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  result = (arg1)->SW((Vector const &)*arg2);
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_BaseView_SW_Reference(void * jarg1, double jarg2, double jarg3, void * jarg4) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  BaseView *arg1 = (BaseView *) 0 ;
  Real arg2 ;
  Real arg3 ;
  Vector *arg4 = 0 ;
  Vector result;
  
  arg1 = (BaseView *)jarg1; 
  arg2 = (Real)jarg2; 
  arg3 = (Real)jarg3; 
  arg4 = (Vector *)jarg4; /* Vector*&_in */
  result = (arg1)->SW_Reference(arg2,arg3,(Vector const &)*arg4);
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_BaseView_WC(void * jarg1, void * jarg2) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  BaseView *arg1 = (BaseView *) 0 ;
  Vector *arg2 = 0 ;
  Vector result;
  
  arg1 = (BaseView *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  result = (arg1)->WC((Vector const &)*arg2);
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_BaseView_CW(void * jarg1, void * jarg2) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  BaseView *arg1 = (BaseView *) 0 ;
  Vector *arg2 = 0 ;
  Vector result;
  
  arg1 = (BaseView *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  result = (arg1)->CW((Vector const &)*arg2);
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_BaseView_SC(void * jarg1, void * jarg2) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  BaseView *arg1 = (BaseView *) 0 ;
  Vector *arg2 = 0 ;
  Vector result;
  
  arg1 = (BaseView *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  result = (arg1)->SC((Vector const &)*arg2);
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_BaseView_CS(void * jarg1, void * jarg2, unsigned int jarg3) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  BaseView *arg1 = (BaseView *) 0 ;
  Vector *arg2 = 0 ;
  Bool arg3 ;
  Vector result;
  
  arg1 = (BaseView *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  arg3 = jarg3 ? true : false; 
  result = (arg1)->CS((Vector const &)*arg2,arg3);
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_BaseView_WC_V(void * jarg1, void * jarg2) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  BaseView *arg1 = (BaseView *) 0 ;
  Vector *arg2 = 0 ;
  Vector result;
  
  arg1 = (BaseView *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  result = (arg1)->WC_V((Vector const &)*arg2);
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_BaseView_CW_V(void * jarg1, void * jarg2) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  BaseView *arg1 = (BaseView *) 0 ;
  Vector *arg2 = 0 ;
  Vector result;
  
  arg1 = (BaseView *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  result = (arg1)->CW_V((Vector const &)*arg2);
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseView_BackfaceCulling(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  BaseView *arg1 = (BaseView *) 0 ;
  Vector *arg2 = 0 ;
  Vector *arg3 = 0 ;
  Bool result;
  
  arg1 = (BaseView *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  arg3 = (Vector *)jarg3; /* Vector*&_in */
  result = (arg1)->BackfaceCulling((Vector const &)*arg2,(Vector const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseView_ZSensitiveNear(void * jarg1) {
  unsigned int jresult ;
  BaseView *arg1 = (BaseView *) 0 ;
  Bool result;
  
  arg1 = (BaseView *)jarg1; 
  result = (arg1)->ZSensitiveNear();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_BaseView_ZSensitiveNearClipping(void * jarg1) {
  double jresult ;
  BaseView *arg1 = (BaseView *) 0 ;
  Real result;
  
  arg1 = (BaseView *)jarg1; 
  result = (arg1)->ZSensitiveNearClipping();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseView_GetStereoInfo(void * jarg1) {
  void * jresult ;
  BaseView *arg1 = (BaseView *) 0 ;
  StereoCameraInfo *result = 0 ;
  
  arg1 = (BaseView *)jarg1; 
  result = (StereoCameraInfo *)((BaseView const *)arg1)->GetStereoInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseView_ZSensitiveFar(void * jarg1) {
  unsigned int jresult ;
  BaseView *arg1 = (BaseView *) 0 ;
  Bool result;
  
  arg1 = (BaseView *)jarg1; 
  result = (arg1)->ZSensitiveFar();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_BaseView_ZSensitiveFarClipping(void * jarg1) {
  double jresult ;
  BaseView *arg1 = (BaseView *) 0 ;
  Real result;
  
  arg1 = (BaseView *)jarg1; 
  result = (arg1)->ZSensitiveFarClipping();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_BaseView_PW_S(void * jarg1, double jarg2, unsigned int jarg3) {
  double jresult ;
  BaseView *arg1 = (BaseView *) 0 ;
  Real arg2 ;
  Bool arg3 ;
  Real result;
  
  arg1 = (BaseView *)jarg1; 
  arg2 = (Real)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->PW_S(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_BaseView_WP_S(void * jarg1, double jarg2, unsigned int jarg3) {
  double jresult ;
  BaseView *arg1 = (BaseView *) 0 ;
  Real arg2 ;
  Bool arg3 ;
  Real result;
  
  arg1 = (BaseView *)jarg1; 
  arg2 = (Real)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->WP_S(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_BaseView_PW_W(void * jarg1, void * jarg2, unsigned int jarg3) {
  double jresult ;
  BaseView *arg1 = (BaseView *) 0 ;
  Vector *arg2 = 0 ;
  Bool arg3 ;
  Real result;
  
  arg1 = (BaseView *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  arg3 = jarg3 ? true : false; 
  result = (arg1)->PW_W((Vector const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_BaseView_WP_W(void * jarg1, void * jarg2, unsigned int jarg3) {
  double jresult ;
  BaseView *arg1 = (BaseView *) 0 ;
  Vector *arg2 = 0 ;
  Bool arg3 ;
  Real result;
  
  arg1 = (BaseView *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  arg3 = jarg3 ? true : false; 
  result = (arg1)->WP_W((Vector const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_BaseView_ProjectPointOnLine__SWIG_0(void * jarg1, void * jarg2, void * jarg3, double jarg4, double jarg5, void * jarg6, void * jarg7) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  BaseView *arg1 = (BaseView *) 0 ;
  Vector *arg2 = 0 ;
  Vector *arg3 = 0 ;
  Real arg4 ;
  Real arg5 ;
  Real *arg6 = (Real *) 0 ;
  LONG *arg7 = (LONG *) 0 ;
  Vector result;
  
  arg1 = (BaseView *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  arg3 = (Vector *)jarg3; /* Vector*&_in */
  arg4 = (Real)jarg4; 
  arg5 = (Real)jarg5; 
  arg6 = (Real *)jarg6; 
  arg7 = (LONG *)jarg7; 
  result = (arg1)->ProjectPointOnLine((Vector const &)*arg2,(Vector const &)*arg3,arg4,arg5,arg6,arg7);
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_BaseView_ProjectPointOnLine__SWIG_1(void * jarg1, void * jarg2, void * jarg3, double jarg4, double jarg5, void * jarg6) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  BaseView *arg1 = (BaseView *) 0 ;
  Vector *arg2 = 0 ;
  Vector *arg3 = 0 ;
  Real arg4 ;
  Real arg5 ;
  Real *arg6 = (Real *) 0 ;
  Vector result;
  
  arg1 = (BaseView *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  arg3 = (Vector *)jarg3; /* Vector*&_in */
  arg4 = (Real)jarg4; 
  arg5 = (Real)jarg5; 
  arg6 = (Real *)jarg6; 
  result = (arg1)->ProjectPointOnLine((Vector const &)*arg2,(Vector const &)*arg3,arg4,arg5,arg6);
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_BaseView_ProjectPointOnLine__SWIG_2(void * jarg1, void * jarg2, void * jarg3, double jarg4, double jarg5) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  BaseView *arg1 = (BaseView *) 0 ;
  Vector *arg2 = 0 ;
  Vector *arg3 = 0 ;
  Real arg4 ;
  Real arg5 ;
  Vector result;
  
  arg1 = (BaseView *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  arg3 = (Vector *)jarg3; /* Vector*&_in */
  arg4 = (Real)jarg4; 
  arg5 = (Real)jarg5; 
  result = (arg1)->ProjectPointOnLine((Vector const &)*arg2,(Vector const &)*arg3,arg4,arg5);
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_BaseView_ProjectPointOnPlane__SWIG_0(void * jarg1, void * jarg2, void * jarg3, double jarg4, double jarg5, void * jarg6) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  BaseView *arg1 = (BaseView *) 0 ;
  Vector *arg2 = 0 ;
  Vector *arg3 = 0 ;
  Real arg4 ;
  Real arg5 ;
  LONG *arg6 = (LONG *) 0 ;
  Vector result;
  
  arg1 = (BaseView *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  arg3 = (Vector *)jarg3; /* Vector*&_in */
  arg4 = (Real)jarg4; 
  arg5 = (Real)jarg5; 
  arg6 = (LONG *)jarg6; 
  result = (arg1)->ProjectPointOnPlane((Vector const &)*arg2,(Vector const &)*arg3,arg4,arg5,arg6);
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_BaseView_ProjectPointOnPlane__SWIG_1(void * jarg1, void * jarg2, void * jarg3, double jarg4, double jarg5) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  BaseView *arg1 = (BaseView *) 0 ;
  Vector *arg2 = 0 ;
  Vector *arg3 = 0 ;
  Real arg4 ;
  Real arg5 ;
  Vector result;
  
  arg1 = (BaseView *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  arg3 = (Vector *)jarg3; /* Vector*&_in */
  arg4 = (Real)jarg4; 
  arg5 = (Real)jarg5; 
  result = (arg1)->ProjectPointOnPlane((Vector const &)*arg2,(Vector const &)*arg3,arg4,arg5);
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DRAW_GET_VIEWMATRIX_PROJECTION_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DRAW_GET_VIEWMATRIX_PROJECTION_LARGE_Z_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DRAW_GET_VIEWMATRIX_INV_CAMERA_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DRAW_GET_VIEWMATRIX_MODELVIEW_PROJECTION_get() {
  int jresult ;
  int result;
  
  result = (int)(3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDraw_GetParameterData(void * jarg1, int jarg2) {
  void * jresult ;
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  LONG arg2 ;
  GeData result;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (arg1)->GetParameterData(arg2);
  jresult = new GeData((const GeData &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDraw_Alloc() {
  void * jresult ;
  BaseDraw *result = 0 ;
  
  result = (BaseDraw *)BaseDraw::Alloc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDraw_Free(void * jarg1) {
  BaseDraw **arg1 = 0 ;
  
  arg1 = (BaseDraw **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseDraw *& type is null", 0);
    return ;
  } 
  BaseDraw::Free(*arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseDraw_GetFrameScreen(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  int jresult ;
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  LONG *arg2 = (LONG *) 0 ;
  LONG *arg3 = (LONG *) 0 ;
  LONG *arg4 = (LONG *) 0 ;
  LONG *arg5 = (LONG *) 0 ;
  LONG result;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (LONG *)jarg2; 
  arg3 = (LONG *)jarg3; 
  arg4 = (LONG *)jarg4; 
  arg5 = (LONG *)jarg5; 
  result = (arg1)->GetFrameScreen(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseDraw_HasCameraLink(void * jarg1) {
  unsigned int jresult ;
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  Bool result;
  
  arg1 = (BaseDraw *)jarg1; 
  result = (arg1)->HasCameraLink();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDraw_SetSceneCamera__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  Bool arg3 ;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetSceneCamera(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDraw_SetSceneCamera__SWIG_1(void * jarg1, void * jarg2) {
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  (arg1)->SetSceneCamera(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDraw_GetSceneCamera(void * jarg1, void * jarg2) {
  void * jresult ;
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  BaseObject *result = 0 ;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  result = (BaseObject *)(arg1)->GetSceneCamera((BaseDocument const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDraw_GetEditorCamera(void * jarg1) {
  void * jresult ;
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  BaseObject *result = 0 ;
  
  arg1 = (BaseDraw *)jarg1; 
  result = (BaseObject *)(arg1)->GetEditorCamera();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseDraw_GetDisplayFilter(void * jarg1) {
  int jresult ;
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  DISPLAYFILTER result;
  
  arg1 = (BaseDraw *)jarg1; 
  result = (DISPLAYFILTER)(arg1)->GetDisplayFilter();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseDraw_GetEditState(void * jarg1) {
  int jresult ;
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  DISPLAYEDITSTATE result;
  
  arg1 = (BaseDraw *)jarg1; 
  result = (DISPLAYEDITSTATE)(arg1)->GetEditState();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseDraw_IsViewOpen(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  Bool result;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  result = (arg1)->IsViewOpen(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_INIT_CLIPBOX_ADJUSTGLSIZE_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDraw_InitClipbox(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6) {
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  LONG arg4 ;
  LONG arg5 ;
  LONG arg6 ;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (LONG)jarg6; 
  (arg1)->InitClipbox(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDraw_InitView(void * jarg1, void * jarg2, void * jarg3, double jarg4, double jarg5, double jarg6, unsigned int jarg7) {
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  BaseContainer *arg2 = (BaseContainer *) 0 ;
  Matrix *arg3 = 0 ;
  Real arg4 ;
  Real arg5 ;
  Real arg6 ;
  Bool arg7 ;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (BaseContainer *)jarg2; 
  arg3 = (Matrix *)jarg3; /* constMatrix&_in */
  arg4 = (Real)jarg4; 
  arg5 = (Real)jarg5; 
  arg6 = (Real)jarg6; 
  arg7 = jarg7 ? true : false; 
  (arg1)->InitView(arg2,(Matrix const &)*arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDraw_InitializeView(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  BaseObject *arg3 = (BaseObject *) 0 ;
  Bool arg4 ;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (BaseObject *)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->InitializeView(arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseDraw_AddToPostPass(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  BaseDrawHelp *arg3 = (BaseDrawHelp *) 0 ;
  Bool result;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  arg3 = (BaseDrawHelp *)jarg3; 
  result = (arg1)->AddToPostPass(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_BaseDraw_GetObjectColor__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  BaseDrawHelp *arg2 = (BaseDrawHelp *) 0 ;
  BaseObject *arg3 = (BaseObject *) 0 ;
  Bool arg4 ;
  Vector result;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (BaseDrawHelp *)jarg2; 
  arg3 = (BaseObject *)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (arg1)->GetObjectColor(arg2,arg3,arg4);
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_BaseDraw_GetObjectColor__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  BaseDrawHelp *arg2 = (BaseDrawHelp *) 0 ;
  BaseObject *arg3 = (BaseObject *) 0 ;
  Vector result;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (BaseDrawHelp *)jarg2; 
  arg3 = (BaseObject *)jarg3; 
  result = (arg1)->GetObjectColor(arg2,arg3);
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_BaseDraw_CheckColor(void * jarg1, void * jarg2) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  Vector *arg2 = 0 ;
  Vector result;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  result = (arg1)->CheckColor((Vector const &)*arg2);
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDraw_SetTransparency(void * jarg1, int jarg2) {
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  LONG arg2 ;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (LONG)jarg2; 
  (arg1)->SetTransparency(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseDraw_GetTransparency(void * jarg1) {
  int jresult ;
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  LONG result;
  
  arg1 = (BaseDraw *)jarg1; 
  result = (arg1)->GetTransparency();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseDraw_PointInRange(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  unsigned int jresult ;
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  Vector *arg2 = 0 ;
  LONG arg3 ;
  LONG arg4 ;
  Bool result;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  result = (arg1)->PointInRange((Vector const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDraw_SetPen__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  Vector *arg2 = 0 ;
  LONG arg3 ;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  arg3 = (LONG)jarg3; 
  (arg1)->SetPen((Vector const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDraw_SetPen__SWIG_1(void * jarg1, void * jarg2) {
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  Vector *arg2 = 0 ;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  (arg1)->SetPen((Vector const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDraw_SetPointSize(void * jarg1, double jarg2) {
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  Real arg2 ;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (Real)jarg2; 
  (arg1)->SetPointSize(arg2);
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_BaseDraw_ConvertColor(void * jarg1, void * jarg2) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  Vector *arg2 = 0 ;
  Vector result;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  result = (arg1)->ConvertColor((Vector const &)*arg2);
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_BaseDraw_ConvertColorReverse(void * jarg1, void * jarg2) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  Vector *arg2 = 0 ;
  Vector result;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  result = (arg1)->ConvertColorReverse((Vector const &)*arg2);
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_BaseDraw_SimpleShade(void * jarg1, void * jarg2, void * jarg3) {
  double jresult ;
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  Vector *arg2 = 0 ;
  Vector *arg3 = 0 ;
  Real result;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  arg3 = (Vector *)jarg3; /* Vector*&_in */
  result = (arg1)->SimpleShade((Vector const &)*arg2,(Vector const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDraw_LineZOffset(void * jarg1, int jarg2) {
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  LONG arg2 ;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (LONG)jarg2; 
  (arg1)->LineZOffset(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDraw_SetDepth(void * jarg1, unsigned int jarg2) {
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  Bool arg2 ;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetDepth(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDraw_SetMatrix_Projection(void * jarg1) {
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  
  arg1 = (BaseDraw *)jarg1; 
  (arg1)->SetMatrix_Projection();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDraw_SetMatrix_Screen__SWIG_0(void * jarg1) {
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  
  arg1 = (BaseDraw *)jarg1; 
  (arg1)->SetMatrix_Screen();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDraw_SetMatrix_Screen__SWIG_1(void * jarg1, int jarg2) {
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  LONG arg2 ;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (LONG)jarg2; 
  (arg1)->SetMatrix_Screen(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDraw_SetMatrix_Screen__SWIG_2(void * jarg1, int jarg2, void * jarg3) {
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  LONG arg2 ;
  Matrix4 *arg3 = (Matrix4 *) 0 ;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (Matrix4 *)jarg3; 
  (arg1)->SetMatrix_Screen(arg2,(Matrix4 const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDraw_SetMatrix_Camera(void * jarg1) {
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  
  arg1 = (BaseDraw *)jarg1; 
  (arg1)->SetMatrix_Camera();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDraw_SetMatrix_Matrix__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  Matrix *arg3 = 0 ;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  arg3 = (Matrix *)jarg3; /* constMatrix&_in */
  (arg1)->SetMatrix_Matrix(arg2,(Matrix const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDraw_SetMatrix_Matrix__SWIG_1(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  Matrix *arg3 = 0 ;
  LONG arg4 ;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  arg3 = (Matrix *)jarg3; /* constMatrix&_in */
  arg4 = (LONG)jarg4; 
  (arg1)->SetMatrix_Matrix(arg2,(Matrix const &)*arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_NOCLIP_D_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NOCLIP_Z_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDraw_LineStripBegin(void * jarg1) {
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  
  arg1 = (BaseDraw *)jarg1; 
  (arg1)->LineStripBegin();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDraw_LineStrip(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  Vector *arg2 = 0 ;
  Vector *arg3 = 0 ;
  LONG arg4 ;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  arg3 = (Vector *)jarg3; /* Vector*&_in */
  arg4 = (LONG)jarg4; 
  (arg1)->LineStrip((Vector const &)*arg2,(Vector const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDraw_LineStripEnd(void * jarg1) {
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  
  arg1 = (BaseDraw *)jarg1; 
  (arg1)->LineStripEnd();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDraw_DrawPoint2D(void * jarg1, void * jarg2) {
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  Vector *arg2 = 0 ;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  (arg1)->DrawPoint2D((Vector const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDraw_DrawLine2D(void * jarg1, void * jarg2, void * jarg3) {
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  Vector *arg2 = 0 ;
  Vector *arg3 = 0 ;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  arg3 = (Vector *)jarg3; /* Vector*&_in */
  (arg1)->DrawLine2D((Vector const &)*arg2,(Vector const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDraw_DrawHandle2D__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  Vector *arg2 = 0 ;
  DRAWHANDLE arg3 ;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  arg3 = (DRAWHANDLE)jarg3; 
  (arg1)->DrawHandle2D((Vector const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDraw_DrawHandle2D__SWIG_1(void * jarg1, void * jarg2) {
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  Vector *arg2 = 0 ;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  (arg1)->DrawHandle2D((Vector const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDraw_DrawCircle2D(void * jarg1, int jarg2, int jarg3, double jarg4) {
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  Real arg4 ;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (Real)jarg4; 
  (arg1)->DrawCircle2D(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDraw_DrawHandle(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  Vector *arg2 = 0 ;
  DRAWHANDLE arg3 ;
  LONG arg4 ;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  arg3 = (DRAWHANDLE)jarg3; 
  arg4 = (LONG)jarg4; 
  (arg1)->DrawHandle((Vector const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDraw_DrawPointArray__SWIG_0(void * jarg1, int jarg2, void * jarg3, void * jarg4, int jarg5, void * jarg6) {
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  LONG arg2 ;
  SVector *arg3 = (SVector *) 0 ;
  SReal *arg4 = (SReal *) 0 ;
  LONG arg5 ;
  SVector *arg6 = (SVector *) 0 ;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (SVector *)jarg3; 
  arg4 = (SReal *)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (SVector *)jarg6; 
  (arg1)->DrawPointArray(arg2,(SVector const *)arg3,(SReal const *)arg4,arg5,(SVector const *)arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDraw_DrawPointArray__SWIG_1(void * jarg1, int jarg2, void * jarg3, void * jarg4, int jarg5) {
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  LONG arg2 ;
  SVector *arg3 = (SVector *) 0 ;
  SReal *arg4 = (SReal *) 0 ;
  LONG arg5 ;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (SVector *)jarg3; 
  arg4 = (SReal *)jarg4; 
  arg5 = (LONG)jarg5; 
  (arg1)->DrawPointArray(arg2,(SVector const *)arg3,(SReal const *)arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDraw_DrawPointArray__SWIG_2(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  LONG arg2 ;
  SVector *arg3 = (SVector *) 0 ;
  SReal *arg4 = (SReal *) 0 ;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (SVector *)jarg3; 
  arg4 = (SReal *)jarg4; 
  (arg1)->DrawPointArray(arg2,(SVector const *)arg3,(SReal const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDraw_DrawPointArray__SWIG_3(void * jarg1, int jarg2, void * jarg3) {
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  LONG arg2 ;
  SVector *arg3 = (SVector *) 0 ;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (SVector *)jarg3; 
  (arg1)->DrawPointArray(arg2,(SVector const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDraw_DrawLine(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  Vector *arg2 = 0 ;
  Vector *arg3 = 0 ;
  LONG arg4 ;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  arg3 = (Vector *)jarg3; /* Vector*&_in */
  arg4 = (LONG)jarg4; 
  (arg1)->DrawLine((Vector const &)*arg2,(Vector const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDraw_DrawPoly(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, int jarg6) {
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  Vector *arg2 = (Vector *) 0 ;
  Vector *arg3 = (Vector *) 0 ;
  Vector *arg4 = (Vector *) 0 ;
  LONG arg5 ;
  LONG arg6 ;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  arg3 = (Vector *)jarg3; /* Vector*&_in */
  arg4 = (Vector *)jarg4; /* Vector*&_in */
  arg5 = (LONG)jarg5; 
  arg6 = (LONG)jarg6; 
  (arg1)->DrawPoly(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDraw_DrawTexture__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, int jarg7, int jarg8, int jarg9) {
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  BaseBitmap *arg2 = (BaseBitmap *) 0 ;
  Vector *arg3 = (Vector *) 0 ;
  Vector *arg4 = (Vector *) 0 ;
  Vector *arg5 = (Vector *) 0 ;
  Vector *arg6 = (Vector *) 0 ;
  LONG arg7 ;
  DRAW_ALPHA arg8 ;
  DRAW_TEXTUREFLAGS arg9 ;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (BaseBitmap *)jarg2; 
  arg3 = (Vector *)jarg3; /* Vector*&_in */
  arg4 = (Vector *)jarg4; /* Vector*&_in */
  arg5 = (Vector *)jarg5; /* Vector*&_in */
  arg6 = (Vector *)jarg6; /* Vector*&_in */
  arg7 = (LONG)jarg7; 
  arg8 = (DRAW_ALPHA)jarg8; 
  arg9 = (DRAW_TEXTUREFLAGS)jarg9; 
  (arg1)->DrawTexture((BaseBitmap const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDraw_DrawTexture__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, int jarg7, int jarg8) {
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  C4DGLuint arg2 ;
  Vector *arg3 = (Vector *) 0 ;
  Vector *arg4 = (Vector *) 0 ;
  Vector *arg5 = (Vector *) 0 ;
  Vector *arg6 = (Vector *) 0 ;
  LONG arg7 ;
  DRAW_ALPHA arg8 ;
  C4DGLuint *argp2 ;
  
  arg1 = (BaseDraw *)jarg1; 
  argp2 = (C4DGLuint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null C4DGLuint", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (Vector *)jarg3; /* Vector*&_in */
  arg4 = (Vector *)jarg4; /* Vector*&_in */
  arg5 = (Vector *)jarg5; /* Vector*&_in */
  arg6 = (Vector *)jarg6; /* Vector*&_in */
  arg7 = (LONG)jarg7; 
  arg8 = (DRAW_ALPHA)jarg8; 
  (arg1)->DrawTexture(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDraw_DrawCircle(void * jarg1, void * jarg2) {
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  Matrix *arg2 = 0 ;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (Matrix *)jarg2; /* constMatrix&_in */
  (arg1)->DrawCircle((Matrix const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDraw_DrawBox(void * jarg1, void * jarg2, double jarg3, void * jarg4, unsigned int jarg5) {
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  Matrix *arg2 = 0 ;
  Real arg3 ;
  Vector *arg4 = 0 ;
  Bool arg5 ;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (Matrix *)jarg2; /* constMatrix&_in */
  arg3 = (Real)jarg3; 
  arg4 = (Vector *)jarg4; /* Vector*&_in */
  arg5 = jarg5 ? true : false; 
  (arg1)->DrawBox((Matrix const &)*arg2,arg3,(Vector const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDraw_DrawPolygon(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  Vector *arg2 = (Vector *) 0 ;
  Vector *arg3 = (Vector *) 0 ;
  Bool arg4 ;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  arg3 = (Vector *)jarg3; /* Vector*&_in */
  arg4 = jarg4 ? true : false; 
  (arg1)->DrawPolygon(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDraw_DrawSphere(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  Vector *arg2 = 0 ;
  Vector *arg3 = 0 ;
  Vector *arg4 = 0 ;
  LONG arg5 ;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  arg3 = (Vector *)jarg3; /* Vector*&_in */
  arg4 = (Vector *)jarg4; /* Vector*&_in */
  arg5 = (LONG)jarg5; 
  (arg1)->DrawSphere((Vector const &)*arg2,(Vector const &)*arg3,(Vector const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDraw_DrawArrayEnd(void * jarg1) {
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  
  arg1 = (BaseDraw *)jarg1; 
  (arg1)->DrawArrayEnd();
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseDraw_DrawPolygonObject__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4, void * jarg5, void * jarg6) {
  int jresult ;
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  BaseDrawHelp *arg2 = (BaseDrawHelp *) 0 ;
  BaseObject *arg3 = (BaseObject *) 0 ;
  DRAWOBJECT arg4 ;
  BaseObject *arg5 = (BaseObject *) 0 ;
  Vector *arg6 = 0 ;
  DRAWRESULT result;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (BaseDrawHelp *)jarg2; 
  arg3 = (BaseObject *)jarg3; 
  arg4 = (DRAWOBJECT)jarg4; 
  arg5 = (BaseObject *)jarg5; 
  arg6 = (Vector *)jarg6; /* Vector*&_in */
  result = (DRAWRESULT)(arg1)->DrawPolygonObject(arg2,arg3,arg4,arg5,(Vector const &)*arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseDraw_DrawPolygonObject__SWIG_1(void * jarg1, void * jarg2, void * jarg3, int jarg4, void * jarg5) {
  int jresult ;
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  BaseDrawHelp *arg2 = (BaseDrawHelp *) 0 ;
  BaseObject *arg3 = (BaseObject *) 0 ;
  DRAWOBJECT arg4 ;
  BaseObject *arg5 = (BaseObject *) 0 ;
  DRAWRESULT result;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (BaseDrawHelp *)jarg2; 
  arg3 = (BaseObject *)jarg3; 
  arg4 = (DRAWOBJECT)jarg4; 
  arg5 = (BaseObject *)jarg5; 
  result = (DRAWRESULT)(arg1)->DrawPolygonObject(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseDraw_DrawPolygonObject__SWIG_2(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  int jresult ;
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  BaseDrawHelp *arg2 = (BaseDrawHelp *) 0 ;
  BaseObject *arg3 = (BaseObject *) 0 ;
  DRAWOBJECT arg4 ;
  DRAWRESULT result;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (BaseDrawHelp *)jarg2; 
  arg3 = (BaseObject *)jarg3; 
  arg4 = (DRAWOBJECT)jarg4; 
  result = (DRAWRESULT)(arg1)->DrawPolygonObject(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseDraw_DrawObject__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5, void * jarg6, void * jarg7) {
  int jresult ;
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  BaseDrawHelp *arg2 = (BaseDrawHelp *) 0 ;
  BaseObject *arg3 = (BaseObject *) 0 ;
  DRAWOBJECT arg4 ;
  DRAWPASS arg5 ;
  BaseObject *arg6 = (BaseObject *) 0 ;
  Vector *arg7 = 0 ;
  DRAWRESULT result;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (BaseDrawHelp *)jarg2; 
  arg3 = (BaseObject *)jarg3; 
  arg4 = (DRAWOBJECT)jarg4; 
  arg5 = (DRAWPASS)jarg5; 
  arg6 = (BaseObject *)jarg6; 
  arg7 = (Vector *)jarg7; /* Vector*&_in */
  result = (DRAWRESULT)(arg1)->DrawObject(arg2,arg3,arg4,arg5,arg6,(Vector const &)*arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseDraw_DrawObject__SWIG_1(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5, void * jarg6) {
  int jresult ;
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  BaseDrawHelp *arg2 = (BaseDrawHelp *) 0 ;
  BaseObject *arg3 = (BaseObject *) 0 ;
  DRAWOBJECT arg4 ;
  DRAWPASS arg5 ;
  BaseObject *arg6 = (BaseObject *) 0 ;
  DRAWRESULT result;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (BaseDrawHelp *)jarg2; 
  arg3 = (BaseObject *)jarg3; 
  arg4 = (DRAWOBJECT)jarg4; 
  arg5 = (DRAWPASS)jarg5; 
  arg6 = (BaseObject *)jarg6; 
  result = (DRAWRESULT)(arg1)->DrawObject(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseDraw_DrawObject__SWIG_2(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5) {
  int jresult ;
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  BaseDrawHelp *arg2 = (BaseDrawHelp *) 0 ;
  BaseObject *arg3 = (BaseObject *) 0 ;
  DRAWOBJECT arg4 ;
  DRAWPASS arg5 ;
  DRAWRESULT result;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (BaseDrawHelp *)jarg2; 
  arg3 = (BaseObject *)jarg3; 
  arg4 = (DRAWOBJECT)jarg4; 
  arg5 = (DRAWPASS)jarg5; 
  result = (DRAWRESULT)(arg1)->DrawObject(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseDraw_DrawScene(void * jarg1, int jarg2) {
  unsigned int jresult ;
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  LONG arg2 ;
  Bool result;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (arg1)->DrawScene(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseDraw_GetReductionMode(void * jarg1) {
  int jresult ;
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  DISPLAYMODE result;
  
  arg1 = (BaseDraw *)jarg1; 
  result = (DISPLAYMODE)((BaseDraw const *)arg1)->GetReductionMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseDraw_InitDrawXORPolyLine(void * jarg1) {
  unsigned int jresult ;
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  Bool result;
  
  arg1 = (BaseDraw *)jarg1; 
  result = (arg1)->InitDrawXORPolyLine();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDraw_FreeDrawXORPolyLine(void * jarg1) {
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  
  arg1 = (BaseDraw *)jarg1; 
  (arg1)->FreeDrawXORPolyLine();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDraw_DrawXORPolyLine(void * jarg1, void * jarg2, int jarg3) {
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  SReal *arg2 = (SReal *) 0 ;
  LONG arg3 ;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (SReal *)jarg2; 
  arg3 = (LONG)jarg3; 
  (arg1)->DrawXORPolyLine((SReal const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDraw_BeginDrawXORPolyLine(void * jarg1) {
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  
  arg1 = (BaseDraw *)jarg1; 
  (arg1)->BeginDrawXORPolyLine();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDraw_EndDrawXORPolyLine(void * jarg1, unsigned int jarg2) {
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  Bool arg2 ;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->EndDrawXORPolyLine(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDraw_SetLightList(void * jarg1, int jarg2) {
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  LONG arg2 ;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (LONG)jarg2; 
  (arg1)->SetLightList(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BDRAW_SETLIGHTLIST_NOLIGHTS_get() {
  int jresult ;
  int result;
  
  result = (int)(-1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BDRAW_SETLIGHTLIST_SCENELIGHTS_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BDRAW_SETLIGHTLIST_QUICKSHADING_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDraw_InitUndo(void * jarg1, void * jarg2) {
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  (arg1)->InitUndo(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDraw_DoUndo(void * jarg1, void * jarg2) {
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  (arg1)->DoUndo(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDraw_SetDrawParam(void * jarg1, int jarg2, void * jarg3) {
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  LONG arg2 ;
  GeData *arg3 = 0 ;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (GeData *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeData const & type is null", 0);
    return ;
  } 
  (arg1)->SetDrawParam(arg2,(GeData const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDraw_GetDrawParam(void * jarg1, int jarg2) {
  void * jresult ;
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  LONG arg2 ;
  GeData result;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (arg1)->GetDrawParam(arg2);
  jresult = new GeData((const GeData &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DRAW_PARAMETER_LINEWIDTH_get() {
  int jresult ;
  int result;
  
  result = (int)(1000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DRAW_PARAMETER_ALPHA_THRESHOLD_get() {
  int jresult ;
  int result;
  
  result = (int)(1002);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DRAW_PARAMETER_SETZ_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DRAW_Z_LOWEREQUAL_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DRAW_Z_GREATER_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DRAW_Z_ALWAYS_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DRAW_Z_EQUAL_get() {
  int jresult ;
  int result;
  
  result = (int)(3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DRAW_Z_LOWER_get() {
  int jresult ;
  int result;
  
  result = (int)(4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DRAW_PARAMETER_OGL_CULLING_get() {
  int jresult ;
  int result;
  
  result = (int)(10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DRAW_PARAMETER_OGL_CULLING_OFF_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DRAW_PARAMETER_OGL_CULLING_FRONT_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DRAW_PARAMETER_OGL_CULLING_BACK_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DRAW_PARAMETER_OGL_CULLING_FRONT_AND_BACK_get() {
  int jresult ;
  int result;
  
  result = (int)(3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DRAW_PARAMETER_USE_Z_get() {
  int jresult ;
  int result;
  
  result = (int)(11);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DRAWPORT_TYPE_SOFTWARE_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DRAWPORT_TYPE_OGL_HQ_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseDraw_TestBreak(void * jarg1) {
  unsigned int jresult ;
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  Bool result;
  
  arg1 = (BaseDraw *)jarg1; 
  result = (arg1)->TestBreak();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDraw_GetOITInfo(void * jarg1) {
  void * jresult ;
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  OITInfo *result = 0 ;
  
  arg1 = (BaseDraw *)jarg1; 
  result = (OITInfo *) &(arg1)->GetOITInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseDraw_GetFullscreenPolygonVectors(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  LONG *arg2 = 0 ;
  GlVertexBufferAttributeInfo ***arg3 = 0 ;
  LONG *arg4 = 0 ;
  GlVertexBufferVectorInfo ***arg5 = 0 ;
  Bool result;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (LONG *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  arg3 = (GlVertexBufferAttributeInfo ***)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GlVertexBufferAttributeInfo const *const *& type is null", 0);
    return 0;
  } 
  arg4 = (LONG *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  arg5 = (GlVertexBufferVectorInfo ***)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GlVertexBufferVectorInfo const *const *& type is null", 0);
    return 0;
  } 
  result = (arg1)->GetFullscreenPolygonVectors(*arg2,(GlVertexBufferAttributeInfo const *const *&)*arg3,*arg4,(GlVertexBufferVectorInfo const *const *&)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseDraw_DrawFullscreenPolygon(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  LONG arg2 ;
  GlVertexBufferVectorInfo **arg3 = (GlVertexBufferVectorInfo **) 0 ;
  Bool result;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (GlVertexBufferVectorInfo **)jarg3; 
  result = (arg1)->DrawFullscreenPolygon(arg2,(GlVertexBufferVectorInfo const *const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseDraw_GetGlLightCount(void * jarg1) {
  int jresult ;
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  LONG result;
  
  arg1 = (BaseDraw *)jarg1; 
  result = ((BaseDraw const *)arg1)->GetGlLightCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDraw_GetGlLight(void * jarg1, int jarg2) {
  void * jresult ;
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  LONG arg2 ;
  GlLight *result = 0 ;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (GlLight *)((BaseDraw const *)arg1)->GetGlLight(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseDraw_GetDrawStatistics(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  BaseContainer *arg2 = 0 ;
  Bool result;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (BaseContainer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  result = ((BaseDraw const *)arg1)->GetDrawStatistics(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDraw_GetViewMatrix(void * jarg1, int jarg2) {
  void * jresult ;
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  LONG arg2 ;
  Matrix4 *result = 0 ;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (Matrix4 *) &(arg1)->GetViewMatrix(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDraw_GetEditorWindow(void * jarg1) {
  void * jresult ;
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  EditorWindow *result = 0 ;
  
  arg1 = (BaseDraw *)jarg1; 
  result = (EditorWindow *)(arg1)->GetEditorWindow();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDraw_SetTexture(void * jarg1, void * jarg2, unsigned int jarg3, int jarg4, int jarg5) {
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  BaseBitmap *arg2 = (BaseBitmap *) 0 ;
  Bool arg3 ;
  DRAW_ALPHA arg4 ;
  DRAW_TEXTUREFLAGS arg5 ;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (BaseBitmap *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (DRAW_ALPHA)jarg4; 
  arg5 = (DRAW_TEXTUREFLAGS)jarg5; 
  (arg1)->SetTexture(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDraw_OverrideCamera(void * jarg1, void * jarg2) {
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  StereoCameraInfo *arg2 = (StereoCameraInfo *) 0 ;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (StereoCameraInfo *)jarg2; 
  (arg1)->OverrideCamera(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ViewportPixel_op_set(void * jarg1, void * jarg2) {
  ViewportPixel *arg1 = (ViewportPixel *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  
  arg1 = (ViewportPixel *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  if (arg1) (arg1)->op = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ViewportPixel_op_get(void * jarg1) {
  void * jresult ;
  ViewportPixel *arg1 = (ViewportPixel *) 0 ;
  BaseObject *result = 0 ;
  
  arg1 = (ViewportPixel *)jarg1; 
  result = (BaseObject *) ((arg1)->op);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ViewportPixel_z_set(void * jarg1, double jarg2) {
  ViewportPixel *arg1 = (ViewportPixel *) 0 ;
  Real arg2 ;
  
  arg1 = (ViewportPixel *)jarg1; 
  arg2 = (Real)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ViewportPixel_z_get(void * jarg1) {
  double jresult ;
  ViewportPixel *arg1 = (ViewportPixel *) 0 ;
  Real result;
  
  arg1 = (ViewportPixel *)jarg1; 
  result =  ((arg1)->z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ViewportPixel_i_set(void * jarg1, int jarg2) {
  ViewportPixel *arg1 = (ViewportPixel *) 0 ;
  LONG arg2 ;
  
  arg1 = (ViewportPixel *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->i = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ViewportPixel_i_get(void * jarg1) {
  int jresult ;
  ViewportPixel *arg1 = (ViewportPixel *) 0 ;
  LONG result;
  
  arg1 = (ViewportPixel *)jarg1; 
  result =  ((arg1)->i);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ViewportPixel_next_set(void * jarg1, void * jarg2) {
  ViewportPixel *arg1 = (ViewportPixel *) 0 ;
  ViewportPixel *arg2 = (ViewportPixel *) 0 ;
  
  arg1 = (ViewportPixel *)jarg1; 
  arg2 = (ViewportPixel *)jarg2; 
  if (arg1) (arg1)->next = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ViewportPixel_next_get(void * jarg1) {
  void * jresult ;
  ViewportPixel *arg1 = (ViewportPixel *) 0 ;
  ViewportPixel *result = 0 ;
  
  arg1 = (ViewportPixel *)jarg1; 
  result = (ViewportPixel *) ((arg1)->next);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ViewportPixel() {
  void * jresult ;
  ViewportPixel *result = 0 ;
  
  result = (ViewportPixel *)new ViewportPixel();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ViewportPixel(void * jarg1) {
  ViewportPixel *arg1 = (ViewportPixel *) 0 ;
  
  arg1 = (ViewportPixel *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWPORT_CLEAR_POINT_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWPORT_CLEAR_POLYGON_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VIEWPORT_CLEAR_EDGE_get() {
  int jresult ;
  int result;
  
  result = (int)(4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ViewportSelect_Alloc() {
  void * jresult ;
  ViewportSelect *result = 0 ;
  
  result = (ViewportSelect *)ViewportSelect::Alloc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ViewportSelect_Free(void * jarg1) {
  ViewportSelect **arg1 = 0 ;
  
  arg1 = (ViewportSelect **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ViewportSelect *& type is null", 0);
    return ;
  } 
  ViewportSelect::Free(*arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ViewportSelect_PickObject__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9) {
  unsigned int jresult ;
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  LONG arg3 ;
  LONG arg4 ;
  LONG arg5 ;
  VIEWPORT_PICK_FLAGS arg6 ;
  LassoSelection *arg7 = (LassoSelection *) 0 ;
  C4DObjectList *arg8 = (C4DObjectList *) 0 ;
  Matrix4 *arg9 = (Matrix4 *) 0 ;
  VIEWPORT_PICK_FLAGS *argp6 ;
  Bool result;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (LONG)jarg5; 
  argp6 = (VIEWPORT_PICK_FLAGS *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null VIEWPORT_PICK_FLAGS", 0);
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (LassoSelection *)jarg7; 
  arg8 = (C4DObjectList *)jarg8; 
  arg9 = (Matrix4 *)jarg9; 
  result = ViewportSelect::PickObject(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ViewportSelect_PickObject__SWIG_1(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, void * jarg6, void * jarg7, void * jarg8) {
  unsigned int jresult ;
  BaseDraw *arg1 = (BaseDraw *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  LONG arg3 ;
  LONG arg4 ;
  LONG arg5 ;
  VIEWPORT_PICK_FLAGS arg6 ;
  LassoSelection *arg7 = (LassoSelection *) 0 ;
  C4DObjectList *arg8 = (C4DObjectList *) 0 ;
  VIEWPORT_PICK_FLAGS *argp6 ;
  Bool result;
  
  arg1 = (BaseDraw *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (LONG)jarg5; 
  argp6 = (VIEWPORT_PICK_FLAGS *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null VIEWPORT_PICK_FLAGS", 0);
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (LassoSelection *)jarg7; 
  arg8 = (C4DObjectList *)jarg8; 
  result = ViewportSelect::PickObject(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ViewportSelect_Init__SWIG_0(void * jarg1, int jarg2, int jarg3, void * jarg4, void * jarg5, int jarg6, unsigned int jarg7, void * jarg8) {
  unsigned int jresult ;
  ViewportSelect *arg1 = (ViewportSelect *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  BaseDraw *arg4 = (BaseDraw *) 0 ;
  BaseObject *arg5 = (BaseObject *) 0 ;
  LONG arg6 ;
  Bool arg7 ;
  VIEWPORTSELECTFLAGS arg8 ;
  VIEWPORTSELECTFLAGS *argp8 ;
  Bool result;
  
  arg1 = (ViewportSelect *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (BaseDraw *)jarg4; 
  arg5 = (BaseObject *)jarg5; 
  arg6 = (LONG)jarg6; 
  arg7 = jarg7 ? true : false; 
  argp8 = (VIEWPORTSELECTFLAGS *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null VIEWPORTSELECTFLAGS", 0);
    return 0;
  }
  arg8 = *argp8; 
  result = (arg1)->Init(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ViewportSelect_Init__SWIG_1(void * jarg1, int jarg2, int jarg3, void * jarg4, void * jarg5, int jarg6, unsigned int jarg7) {
  unsigned int jresult ;
  ViewportSelect *arg1 = (ViewportSelect *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  BaseDraw *arg4 = (BaseDraw *) 0 ;
  BaseObject *arg5 = (BaseObject *) 0 ;
  LONG arg6 ;
  Bool arg7 ;
  Bool result;
  
  arg1 = (ViewportSelect *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (BaseDraw *)jarg4; 
  arg5 = (BaseObject *)jarg5; 
  arg6 = (LONG)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = (arg1)->Init(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ViewportSelect_Init__SWIG_2(void * jarg1, int jarg2, int jarg3, void * jarg4, void * jarg5, int jarg6, unsigned int jarg7, void * jarg8) {
  unsigned int jresult ;
  ViewportSelect *arg1 = (ViewportSelect *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  BaseDraw *arg4 = (BaseDraw *) 0 ;
  AtomArray *arg5 = (AtomArray *) 0 ;
  LONG arg6 ;
  Bool arg7 ;
  VIEWPORTSELECTFLAGS arg8 ;
  VIEWPORTSELECTFLAGS *argp8 ;
  Bool result;
  
  arg1 = (ViewportSelect *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (BaseDraw *)jarg4; 
  arg5 = (AtomArray *)jarg5; 
  arg6 = (LONG)jarg6; 
  arg7 = jarg7 ? true : false; 
  argp8 = (VIEWPORTSELECTFLAGS *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null VIEWPORTSELECTFLAGS", 0);
    return 0;
  }
  arg8 = *argp8; 
  result = (arg1)->Init(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ViewportSelect_Init__SWIG_3(void * jarg1, int jarg2, int jarg3, void * jarg4, void * jarg5, int jarg6, unsigned int jarg7) {
  unsigned int jresult ;
  ViewportSelect *arg1 = (ViewportSelect *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  BaseDraw *arg4 = (BaseDraw *) 0 ;
  AtomArray *arg5 = (AtomArray *) 0 ;
  LONG arg6 ;
  Bool arg7 ;
  Bool result;
  
  arg1 = (ViewportSelect *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (BaseDraw *)jarg4; 
  arg5 = (AtomArray *)jarg5; 
  arg6 = (LONG)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = (arg1)->Init(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ViewportSelect_GetPixelInfoPoint(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  ViewportSelect *arg1 = (ViewportSelect *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  ViewportPixel *result = 0 ;
  
  arg1 = (ViewportSelect *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  result = (ViewportPixel *)(arg1)->GetPixelInfoPoint(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ViewportSelect_GetPixelInfoPolygon(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  ViewportSelect *arg1 = (ViewportSelect *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  ViewportPixel *result = 0 ;
  
  arg1 = (ViewportSelect *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  result = (ViewportPixel *)(arg1)->GetPixelInfoPolygon(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ViewportSelect_GetPixelInfoEdge(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  ViewportSelect *arg1 = (ViewportSelect *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  ViewportPixel *result = 0 ;
  
  arg1 = (ViewportSelect *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  result = (ViewportPixel *)(arg1)->GetPixelInfoEdge(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ViewportSelect_GetNearestPoint__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, unsigned int jarg6, void * jarg7, int jarg8) {
  void * jresult ;
  ViewportSelect *arg1 = (ViewportSelect *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  LONG *arg3 = 0 ;
  LONG *arg4 = 0 ;
  LONG arg5 ;
  Bool arg6 ;
  LONG *arg7 = (LONG *) 0 ;
  LONG arg8 ;
  ViewportPixel *result = 0 ;
  
  arg1 = (ViewportSelect *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  arg3 = (LONG *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  arg4 = (LONG *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  arg5 = (LONG)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = (LONG *)jarg7; 
  arg8 = (LONG)jarg8; 
  result = (ViewportPixel *)(arg1)->GetNearestPoint(arg2,*arg3,*arg4,arg5,arg6,arg7,arg8);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ViewportSelect_GetNearestPoint__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, unsigned int jarg6, void * jarg7) {
  void * jresult ;
  ViewportSelect *arg1 = (ViewportSelect *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  LONG *arg3 = 0 ;
  LONG *arg4 = 0 ;
  LONG arg5 ;
  Bool arg6 ;
  LONG *arg7 = (LONG *) 0 ;
  ViewportPixel *result = 0 ;
  
  arg1 = (ViewportSelect *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  arg3 = (LONG *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  arg4 = (LONG *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  arg5 = (LONG)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = (LONG *)jarg7; 
  result = (ViewportPixel *)(arg1)->GetNearestPoint(arg2,*arg3,*arg4,arg5,arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ViewportSelect_GetNearestPoint__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, unsigned int jarg6) {
  void * jresult ;
  ViewportSelect *arg1 = (ViewportSelect *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  LONG *arg3 = 0 ;
  LONG *arg4 = 0 ;
  LONG arg5 ;
  Bool arg6 ;
  ViewportPixel *result = 0 ;
  
  arg1 = (ViewportSelect *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  arg3 = (LONG *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  arg4 = (LONG *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  arg5 = (LONG)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (ViewportPixel *)(arg1)->GetNearestPoint(arg2,*arg3,*arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ViewportSelect_GetNearestPoint__SWIG_3(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  void * jresult ;
  ViewportSelect *arg1 = (ViewportSelect *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  LONG *arg3 = 0 ;
  LONG *arg4 = 0 ;
  LONG arg5 ;
  ViewportPixel *result = 0 ;
  
  arg1 = (ViewportSelect *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  arg3 = (LONG *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  arg4 = (LONG *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  arg5 = (LONG)jarg5; 
  result = (ViewportPixel *)(arg1)->GetNearestPoint(arg2,*arg3,*arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ViewportSelect_GetNearestPoint__SWIG_4(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  ViewportSelect *arg1 = (ViewportSelect *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  LONG *arg3 = 0 ;
  LONG *arg4 = 0 ;
  ViewportPixel *result = 0 ;
  
  arg1 = (ViewportSelect *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  arg3 = (LONG *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  arg4 = (LONG *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  result = (ViewportPixel *)(arg1)->GetNearestPoint(arg2,*arg3,*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ViewportSelect_GetNearestPolygon__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, unsigned int jarg6, void * jarg7, int jarg8) {
  void * jresult ;
  ViewportSelect *arg1 = (ViewportSelect *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  LONG *arg3 = 0 ;
  LONG *arg4 = 0 ;
  LONG arg5 ;
  Bool arg6 ;
  LONG *arg7 = (LONG *) 0 ;
  LONG arg8 ;
  ViewportPixel *result = 0 ;
  
  arg1 = (ViewportSelect *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  arg3 = (LONG *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  arg4 = (LONG *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  arg5 = (LONG)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = (LONG *)jarg7; 
  arg8 = (LONG)jarg8; 
  result = (ViewportPixel *)(arg1)->GetNearestPolygon(arg2,*arg3,*arg4,arg5,arg6,arg7,arg8);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ViewportSelect_GetNearestPolygon__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, unsigned int jarg6, void * jarg7) {
  void * jresult ;
  ViewportSelect *arg1 = (ViewportSelect *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  LONG *arg3 = 0 ;
  LONG *arg4 = 0 ;
  LONG arg5 ;
  Bool arg6 ;
  LONG *arg7 = (LONG *) 0 ;
  ViewportPixel *result = 0 ;
  
  arg1 = (ViewportSelect *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  arg3 = (LONG *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  arg4 = (LONG *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  arg5 = (LONG)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = (LONG *)jarg7; 
  result = (ViewportPixel *)(arg1)->GetNearestPolygon(arg2,*arg3,*arg4,arg5,arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ViewportSelect_GetNearestPolygon__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, unsigned int jarg6) {
  void * jresult ;
  ViewportSelect *arg1 = (ViewportSelect *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  LONG *arg3 = 0 ;
  LONG *arg4 = 0 ;
  LONG arg5 ;
  Bool arg6 ;
  ViewportPixel *result = 0 ;
  
  arg1 = (ViewportSelect *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  arg3 = (LONG *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  arg4 = (LONG *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  arg5 = (LONG)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (ViewportPixel *)(arg1)->GetNearestPolygon(arg2,*arg3,*arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ViewportSelect_GetNearestPolygon__SWIG_3(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  void * jresult ;
  ViewportSelect *arg1 = (ViewportSelect *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  LONG *arg3 = 0 ;
  LONG *arg4 = 0 ;
  LONG arg5 ;
  ViewportPixel *result = 0 ;
  
  arg1 = (ViewportSelect *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  arg3 = (LONG *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  arg4 = (LONG *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  arg5 = (LONG)jarg5; 
  result = (ViewportPixel *)(arg1)->GetNearestPolygon(arg2,*arg3,*arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ViewportSelect_GetNearestPolygon__SWIG_4(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  ViewportSelect *arg1 = (ViewportSelect *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  LONG *arg3 = 0 ;
  LONG *arg4 = 0 ;
  ViewportPixel *result = 0 ;
  
  arg1 = (ViewportSelect *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  arg3 = (LONG *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  arg4 = (LONG *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  result = (ViewportPixel *)(arg1)->GetNearestPolygon(arg2,*arg3,*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ViewportSelect_GetNearestEdge__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, unsigned int jarg6, void * jarg7, int jarg8) {
  void * jresult ;
  ViewportSelect *arg1 = (ViewportSelect *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  LONG *arg3 = 0 ;
  LONG *arg4 = 0 ;
  LONG arg5 ;
  Bool arg6 ;
  LONG *arg7 = (LONG *) 0 ;
  LONG arg8 ;
  ViewportPixel *result = 0 ;
  
  arg1 = (ViewportSelect *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  arg3 = (LONG *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  arg4 = (LONG *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  arg5 = (LONG)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = (LONG *)jarg7; 
  arg8 = (LONG)jarg8; 
  result = (ViewportPixel *)(arg1)->GetNearestEdge(arg2,*arg3,*arg4,arg5,arg6,arg7,arg8);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ViewportSelect_GetNearestEdge__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, unsigned int jarg6, void * jarg7) {
  void * jresult ;
  ViewportSelect *arg1 = (ViewportSelect *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  LONG *arg3 = 0 ;
  LONG *arg4 = 0 ;
  LONG arg5 ;
  Bool arg6 ;
  LONG *arg7 = (LONG *) 0 ;
  ViewportPixel *result = 0 ;
  
  arg1 = (ViewportSelect *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  arg3 = (LONG *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  arg4 = (LONG *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  arg5 = (LONG)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = (LONG *)jarg7; 
  result = (ViewportPixel *)(arg1)->GetNearestEdge(arg2,*arg3,*arg4,arg5,arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ViewportSelect_GetNearestEdge__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, unsigned int jarg6) {
  void * jresult ;
  ViewportSelect *arg1 = (ViewportSelect *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  LONG *arg3 = 0 ;
  LONG *arg4 = 0 ;
  LONG arg5 ;
  Bool arg6 ;
  ViewportPixel *result = 0 ;
  
  arg1 = (ViewportSelect *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  arg3 = (LONG *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  arg4 = (LONG *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  arg5 = (LONG)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (ViewportPixel *)(arg1)->GetNearestEdge(arg2,*arg3,*arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ViewportSelect_GetNearestEdge__SWIG_3(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  void * jresult ;
  ViewportSelect *arg1 = (ViewportSelect *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  LONG *arg3 = 0 ;
  LONG *arg4 = 0 ;
  LONG arg5 ;
  ViewportPixel *result = 0 ;
  
  arg1 = (ViewportSelect *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  arg3 = (LONG *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  arg4 = (LONG *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  arg5 = (LONG)jarg5; 
  result = (ViewportPixel *)(arg1)->GetNearestEdge(arg2,*arg3,*arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ViewportSelect_GetNearestEdge__SWIG_4(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  ViewportSelect *arg1 = (ViewportSelect *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  LONG *arg3 = 0 ;
  LONG *arg4 = 0 ;
  ViewportPixel *result = 0 ;
  
  arg1 = (ViewportSelect *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  arg3 = (LONG *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  arg4 = (LONG *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  result = (ViewportPixel *)(arg1)->GetNearestEdge(arg2,*arg3,*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ViewportSelect_DrawPolygon__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4, void * jarg5, unsigned int jarg6) {
  unsigned int jresult ;
  ViewportSelect *arg1 = (ViewportSelect *) 0 ;
  Vector *arg2 = (Vector *) 0 ;
  LONG arg3 ;
  LONG arg4 ;
  BaseObject *arg5 = (BaseObject *) 0 ;
  Bool arg6 ;
  Bool result;
  
  arg1 = (ViewportSelect *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (BaseObject *)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (arg1)->DrawPolygon((Vector const *)arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ViewportSelect_DrawPolygon__SWIG_1(void * jarg1, void * jarg2, int jarg3, int jarg4, void * jarg5) {
  unsigned int jresult ;
  ViewportSelect *arg1 = (ViewportSelect *) 0 ;
  Vector *arg2 = (Vector *) 0 ;
  LONG arg3 ;
  LONG arg4 ;
  BaseObject *arg5 = (BaseObject *) 0 ;
  Bool result;
  
  arg1 = (ViewportSelect *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (BaseObject *)jarg5; 
  result = (arg1)->DrawPolygon((Vector const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ViewportSelect_DrawHandle__SWIG_0(void * jarg1, void * jarg2, int jarg3, void * jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  ViewportSelect *arg1 = (ViewportSelect *) 0 ;
  Vector *arg2 = 0 ;
  LONG arg3 ;
  BaseObject *arg4 = (BaseObject *) 0 ;
  Bool arg5 ;
  Bool result;
  
  arg1 = (ViewportSelect *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  arg3 = (LONG)jarg3; 
  arg4 = (BaseObject *)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (arg1)->DrawHandle((Vector const &)*arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ViewportSelect_DrawHandle__SWIG_1(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  ViewportSelect *arg1 = (ViewportSelect *) 0 ;
  Vector *arg2 = 0 ;
  LONG arg3 ;
  BaseObject *arg4 = (BaseObject *) 0 ;
  Bool result;
  
  arg1 = (ViewportSelect *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  arg3 = (LONG)jarg3; 
  arg4 = (BaseObject *)jarg4; 
  result = (arg1)->DrawHandle((Vector const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ViewportSelect_ShowHotspot__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  ViewportSelect *arg1 = (ViewportSelect *) 0 ;
  EditorWindow *arg2 = (EditorWindow *) 0 ;
  LONG arg3 ;
  LONG arg4 ;
  
  arg1 = (ViewportSelect *)jarg1; 
  arg2 = (EditorWindow *)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  (arg1)->ShowHotspot(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ViewportSelect_SetBrushRadius(void * jarg1, int jarg2) {
  ViewportSelect *arg1 = (ViewportSelect *) 0 ;
  LONG arg2 ;
  
  arg1 = (ViewportSelect *)jarg1; 
  arg2 = (LONG)jarg2; 
  (arg1)->SetBrushRadius(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ViewportSelect_ShowHotspot__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, unsigned int jarg5) {
  EditorWindow *arg1 = (EditorWindow *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  LONG arg4 ;
  Bool arg5 ;
  
  arg1 = (EditorWindow *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = jarg5 ? true : false; 
  ViewportSelect::ShowHotspot(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ViewportSelect_ClearPixelInfo(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  ViewportSelect *arg1 = (ViewportSelect *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  UCHAR arg4 ;
  UCHAR *argp4 ;
  
  arg1 = (ViewportSelect *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  argp4 = (UCHAR *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UCHAR", 0);
    return ;
  }
  arg4 = *argp4; 
  (arg1)->ClearPixelInfo(arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ViewportSelect_GetCameraCoordinates(void * jarg1, double jarg2, double jarg3, double jarg4, void * jarg5) {
  unsigned int jresult ;
  ViewportSelect *arg1 = (ViewportSelect *) 0 ;
  Real arg2 ;
  Real arg3 ;
  Real arg4 ;
  Vector *arg5 = 0 ;
  Bool result;
  
  arg1 = (ViewportSelect *)jarg1; 
  arg2 = (Real)jarg2; 
  arg3 = (Real)jarg3; 
  arg4 = (Real)jarg4; 
  arg5 = (Vector *)jarg5; /* Vector*&_in */
  result = (arg1)->GetCameraCoordinates(arg2,arg3,arg4,*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MultipassObject_GetNext(void * jarg1) {
  void * jresult ;
  MultipassObject *arg1 = (MultipassObject *) 0 ;
  MultipassObject *result = 0 ;
  
  arg1 = (MultipassObject *)jarg1; 
  result = (MultipassObject *)(arg1)->GetNext();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MultipassObject_GetPred(void * jarg1) {
  void * jresult ;
  MultipassObject *arg1 = (MultipassObject *) 0 ;
  MultipassObject *result = 0 ;
  
  arg1 = (MultipassObject *)jarg1; 
  result = (MultipassObject *)(arg1)->GetPred();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RenderData_GetNext(void * jarg1) {
  void * jresult ;
  RenderData *arg1 = (RenderData *) 0 ;
  RenderData *result = 0 ;
  
  arg1 = (RenderData *)jarg1; 
  result = (RenderData *)(arg1)->GetNext();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RenderData_GetPred(void * jarg1) {
  void * jresult ;
  RenderData *arg1 = (RenderData *) 0 ;
  RenderData *result = 0 ;
  
  arg1 = (RenderData *)jarg1; 
  result = (RenderData *)(arg1)->GetPred();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RenderData_GetDown(void * jarg1) {
  void * jresult ;
  RenderData *arg1 = (RenderData *) 0 ;
  RenderData *result = 0 ;
  
  arg1 = (RenderData *)jarg1; 
  result = (RenderData *)(arg1)->GetDown();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RenderData_GetUp(void * jarg1) {
  void * jresult ;
  RenderData *arg1 = (RenderData *) 0 ;
  RenderData *result = 0 ;
  
  arg1 = (RenderData *)jarg1; 
  result = (RenderData *)(arg1)->GetUp();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RenderData_GetDownLast(void * jarg1) {
  void * jresult ;
  RenderData *arg1 = (RenderData *) 0 ;
  RenderData *result = 0 ;
  
  arg1 = (RenderData *)jarg1; 
  result = (RenderData *)(arg1)->GetDownLast();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RenderData_GetFirstVideoPost(void * jarg1) {
  void * jresult ;
  RenderData *arg1 = (RenderData *) 0 ;
  BaseVideoPost *result = 0 ;
  
  arg1 = (RenderData *)jarg1; 
  result = (BaseVideoPost *)(arg1)->GetFirstVideoPost();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderData_InsertVideoPost__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  RenderData *arg1 = (RenderData *) 0 ;
  BaseVideoPost *arg2 = (BaseVideoPost *) 0 ;
  BaseVideoPost *arg3 = (BaseVideoPost *) 0 ;
  
  arg1 = (RenderData *)jarg1; 
  arg2 = (BaseVideoPost *)jarg2; 
  arg3 = (BaseVideoPost *)jarg3; 
  (arg1)->InsertVideoPost(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderData_InsertVideoPost__SWIG_1(void * jarg1, void * jarg2) {
  RenderData *arg1 = (RenderData *) 0 ;
  BaseVideoPost *arg2 = (BaseVideoPost *) 0 ;
  
  arg1 = (RenderData *)jarg1; 
  arg2 = (BaseVideoPost *)jarg2; 
  (arg1)->InsertVideoPost(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderData_InsertVideoPostLast(void * jarg1, void * jarg2) {
  RenderData *arg1 = (RenderData *) 0 ;
  BaseVideoPost *arg2 = (BaseVideoPost *) 0 ;
  
  arg1 = (RenderData *)jarg1; 
  arg2 = (BaseVideoPost *)jarg2; 
  (arg1)->InsertVideoPostLast(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RenderData_GetFirstMultipass(void * jarg1) {
  void * jresult ;
  RenderData *arg1 = (RenderData *) 0 ;
  MultipassObject *result = 0 ;
  
  arg1 = (RenderData *)jarg1; 
  result = (MultipassObject *)(arg1)->GetFirstMultipass();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderData_InsertMultipass__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  RenderData *arg1 = (RenderData *) 0 ;
  MultipassObject *arg2 = (MultipassObject *) 0 ;
  MultipassObject *arg3 = (MultipassObject *) 0 ;
  
  arg1 = (RenderData *)jarg1; 
  arg2 = (MultipassObject *)jarg2; 
  arg3 = (MultipassObject *)jarg3; 
  (arg1)->InsertMultipass(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderData_InsertMultipass__SWIG_1(void * jarg1, void * jarg2) {
  RenderData *arg1 = (RenderData *) 0 ;
  MultipassObject *arg2 = (MultipassObject *) 0 ;
  
  arg1 = (RenderData *)jarg1; 
  arg2 = (MultipassObject *)jarg2; 
  (arg1)->InsertMultipass(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RenderData_Alloc() {
  void * jresult ;
  RenderData *result = 0 ;
  
  result = (RenderData *)RenderData::Alloc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderData_Free(void * jarg1) {
  RenderData **arg1 = 0 ;
  
  arg1 = (RenderData **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RenderData *& type is null", 0);
    return ;
  } 
  RenderData::Free(*arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LayerObject_GetNext(void * jarg1) {
  void * jresult ;
  LayerObject *arg1 = (LayerObject *) 0 ;
  LayerObject *result = 0 ;
  
  arg1 = (LayerObject *)jarg1; 
  result = (LayerObject *)(arg1)->GetNext();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LayerObject_GetPred(void * jarg1) {
  void * jresult ;
  LayerObject *arg1 = (LayerObject *) 0 ;
  LayerObject *result = 0 ;
  
  arg1 = (LayerObject *)jarg1; 
  result = (LayerObject *)(arg1)->GetPred();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LayerObject_GetDown(void * jarg1) {
  void * jresult ;
  LayerObject *arg1 = (LayerObject *) 0 ;
  LayerObject *result = 0 ;
  
  arg1 = (LayerObject *)jarg1; 
  result = (LayerObject *)(arg1)->GetDown();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LayerObject_GetUp(void * jarg1) {
  void * jresult ;
  LayerObject *arg1 = (LayerObject *) 0 ;
  LayerObject *result = 0 ;
  
  arg1 = (LayerObject *)jarg1; 
  result = (LayerObject *)(arg1)->GetUp();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LayerObject_GetDownLast(void * jarg1) {
  void * jresult ;
  LayerObject *arg1 = (LayerObject *) 0 ;
  LayerObject *result = 0 ;
  
  arg1 = (LayerObject *)jarg1; 
  result = (LayerObject *)(arg1)->GetDownLast();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LayerObject_Alloc() {
  void * jresult ;
  LayerObject *result = 0 ;
  
  result = (LayerObject *)LayerObject::Alloc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LayerObject_Free(void * jarg1) {
  LayerObject **arg1 = 0 ;
  
  arg1 = (LayerObject **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LayerObject *& type is null", 0);
    return ;
  } 
  LayerObject::Free(*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LayerData_solo_set(void * jarg1, unsigned int jarg2) {
  LayerData *arg1 = (LayerData *) 0 ;
  Bool arg2 ;
  
  arg1 = (LayerData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->solo = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LayerData_solo_get(void * jarg1) {
  unsigned int jresult ;
  LayerData *arg1 = (LayerData *) 0 ;
  Bool result;
  
  arg1 = (LayerData *)jarg1; 
  result =  ((arg1)->solo);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LayerData_view_set(void * jarg1, unsigned int jarg2) {
  LayerData *arg1 = (LayerData *) 0 ;
  Bool arg2 ;
  
  arg1 = (LayerData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->view = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LayerData_view_get(void * jarg1) {
  unsigned int jresult ;
  LayerData *arg1 = (LayerData *) 0 ;
  Bool result;
  
  arg1 = (LayerData *)jarg1; 
  result =  ((arg1)->view);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LayerData_render_set(void * jarg1, unsigned int jarg2) {
  LayerData *arg1 = (LayerData *) 0 ;
  Bool arg2 ;
  
  arg1 = (LayerData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->render = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LayerData_render_get(void * jarg1) {
  unsigned int jresult ;
  LayerData *arg1 = (LayerData *) 0 ;
  Bool result;
  
  arg1 = (LayerData *)jarg1; 
  result =  ((arg1)->render);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LayerData_manager_set(void * jarg1, unsigned int jarg2) {
  LayerData *arg1 = (LayerData *) 0 ;
  Bool arg2 ;
  
  arg1 = (LayerData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->manager = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LayerData_manager_get(void * jarg1) {
  unsigned int jresult ;
  LayerData *arg1 = (LayerData *) 0 ;
  Bool result;
  
  arg1 = (LayerData *)jarg1; 
  result =  ((arg1)->manager);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LayerData_locked_set(void * jarg1, unsigned int jarg2) {
  LayerData *arg1 = (LayerData *) 0 ;
  Bool arg2 ;
  
  arg1 = (LayerData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->locked = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LayerData_locked_get(void * jarg1) {
  unsigned int jresult ;
  LayerData *arg1 = (LayerData *) 0 ;
  Bool result;
  
  arg1 = (LayerData *)jarg1; 
  result =  ((arg1)->locked);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LayerData_generators_set(void * jarg1, unsigned int jarg2) {
  LayerData *arg1 = (LayerData *) 0 ;
  Bool arg2 ;
  
  arg1 = (LayerData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->generators = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LayerData_generators_get(void * jarg1) {
  unsigned int jresult ;
  LayerData *arg1 = (LayerData *) 0 ;
  Bool result;
  
  arg1 = (LayerData *)jarg1; 
  result =  ((arg1)->generators);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LayerData_deformers_set(void * jarg1, unsigned int jarg2) {
  LayerData *arg1 = (LayerData *) 0 ;
  Bool arg2 ;
  
  arg1 = (LayerData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->deformers = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LayerData_deformers_get(void * jarg1) {
  unsigned int jresult ;
  LayerData *arg1 = (LayerData *) 0 ;
  Bool result;
  
  arg1 = (LayerData *)jarg1; 
  result =  ((arg1)->deformers);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LayerData_expressions_set(void * jarg1, unsigned int jarg2) {
  LayerData *arg1 = (LayerData *) 0 ;
  Bool arg2 ;
  
  arg1 = (LayerData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->expressions = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LayerData_expressions_get(void * jarg1) {
  unsigned int jresult ;
  LayerData *arg1 = (LayerData *) 0 ;
  Bool result;
  
  arg1 = (LayerData *)jarg1; 
  result =  ((arg1)->expressions);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LayerData_animation_set(void * jarg1, unsigned int jarg2) {
  LayerData *arg1 = (LayerData *) 0 ;
  Bool arg2 ;
  
  arg1 = (LayerData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->animation = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LayerData_animation_get(void * jarg1) {
  unsigned int jresult ;
  LayerData *arg1 = (LayerData *) 0 ;
  Bool result;
  
  arg1 = (LayerData *)jarg1; 
  result =  ((arg1)->animation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LayerData_color_set(void * jarg1, Vector /* Vector_ctype */ jarg2) {
  LayerData *arg1 = (LayerData *) 0 ;
  Vector arg2 ;
  
  arg1 = (LayerData *)jarg1; 
  
  /* <Vector_in> */
  arg2 = *((Vector *)&(jarg2));
  /* </Vector_in> */
  
  if (arg1) (arg1)->color = arg2;
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_LayerData_color_get(void * jarg1) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  LayerData *arg1 = (LayerData *) 0 ;
  Vector result;
  
  arg1 = (LayerData *)jarg1; 
  result =  ((arg1)->color);
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LayerData() {
  void * jresult ;
  LayerData *result = 0 ;
  
  result = (LayerData *)new LayerData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LayerData(void * jarg1) {
  LayerData *arg1 = (LayerData *) 0 ;
  
  arg1 = (LayerData *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SELECTION_NEW_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SELECTION_ADD_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SELECTION_SUB_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PICKSESSION_FLAG_CANCELED_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PickSessionDataStruct_active_set(void * jarg1, void * jarg2) {
  PickSessionDataStruct *arg1 = (PickSessionDataStruct *) 0 ;
  AtomArray *arg2 = (AtomArray *) 0 ;
  
  arg1 = (PickSessionDataStruct *)jarg1; 
  arg2 = (AtomArray *)jarg2; 
  if (arg1) (arg1)->active = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PickSessionDataStruct_active_get(void * jarg1) {
  void * jresult ;
  PickSessionDataStruct *arg1 = (PickSessionDataStruct *) 0 ;
  AtomArray *result = 0 ;
  
  arg1 = (PickSessionDataStruct *)jarg1; 
  result = (AtomArray *) ((arg1)->active);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PickSessionDataStruct_callback_set(void * jarg1, void * jarg2) {
  PickSessionDataStruct *arg1 = (PickSessionDataStruct *) 0 ;
  PickSessionCallBack arg2 = (PickSessionCallBack) 0 ;
  
  arg1 = (PickSessionDataStruct *)jarg1; 
  arg2 = (PickSessionCallBack)jarg2; 
  if (arg1) (arg1)->callback = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PickSessionDataStruct_callback_get(void * jarg1) {
  void * jresult ;
  PickSessionDataStruct *arg1 = (PickSessionDataStruct *) 0 ;
  PickSessionCallBack result;
  
  arg1 = (PickSessionDataStruct *)jarg1; 
  result = (PickSessionCallBack) ((arg1)->callback);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PickSessionDataStruct_userdata_set(void * jarg1, void * jarg2) {
  PickSessionDataStruct *arg1 = (PickSessionDataStruct *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (PickSessionDataStruct *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->userdata = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PickSessionDataStruct_userdata_get(void * jarg1) {
  void * jresult ;
  PickSessionDataStruct *arg1 = (PickSessionDataStruct *) 0 ;
  void *result = 0 ;
  
  arg1 = (PickSessionDataStruct *)jarg1; 
  result = (void *) ((arg1)->userdata);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PickSessionDataStruct_multi_set(void * jarg1, unsigned int jarg2) {
  PickSessionDataStruct *arg1 = (PickSessionDataStruct *) 0 ;
  Bool arg2 ;
  
  arg1 = (PickSessionDataStruct *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->multi = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PickSessionDataStruct_multi_get(void * jarg1) {
  unsigned int jresult ;
  PickSessionDataStruct *arg1 = (PickSessionDataStruct *) 0 ;
  Bool result;
  
  arg1 = (PickSessionDataStruct *)jarg1; 
  result =  ((arg1)->multi);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PickSessionDataStruct() {
  void * jresult ;
  PickSessionDataStruct *result = 0 ;
  
  result = (PickSessionDataStruct *)new PickSessionDataStruct();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PickSessionDataStruct(void * jarg1) {
  PickSessionDataStruct *arg1 = (PickSessionDataStruct *) 0 ;
  
  arg1 = (PickSessionDataStruct *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDocument_GetNext(void * jarg1) {
  void * jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseDocument *result = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  result = (BaseDocument *)(arg1)->GetNext();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDocument_GetPred(void * jarg1) {
  void * jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseDocument *result = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  result = (BaseDocument *)(arg1)->GetPred();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDocument_GetData(void * jarg1, int jarg2) {
  void * jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  DOCUMENTSETTINGS arg2 ;
  BaseContainer result;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (DOCUMENTSETTINGS)jarg2; 
  result = (arg1)->GetData(arg2);
  jresult = new BaseContainer((const BaseContainer &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_SetData(void * jarg1, int jarg2, void * jarg3) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  DOCUMENTSETTINGS arg2 ;
  BaseContainer *arg3 = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (DOCUMENTSETTINGS)jarg2; 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer const & type is null", 0);
    return ;
  } 
  (arg1)->SetData(arg2,(BaseContainer const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDocument_GetSettingsInstance(void * jarg1, int jarg2) {
  void * jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  LONG arg2 ;
  BaseContainer *result = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (BaseContainer *)(arg1)->GetSettingsInstance(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDocument_GetFirstObject(void * jarg1) {
  void * jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseObject *result = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  result = (BaseObject *)(arg1)->GetFirstObject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDocument_GetFirstMaterial(void * jarg1) {
  void * jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseMaterial *result = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  result = (BaseMaterial *)(arg1)->GetFirstMaterial();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDocument_GetFirstRenderData(void * jarg1) {
  void * jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  RenderData *result = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  result = (RenderData *)(arg1)->GetFirstRenderData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_InsertRenderData(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  RenderData *arg2 = (RenderData *) 0 ;
  RenderData *arg3 = (RenderData *) 0 ;
  RenderData *arg4 = (RenderData *) 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (RenderData *)jarg2; 
  arg3 = (RenderData *)jarg3; 
  arg4 = (RenderData *)jarg4; 
  (arg1)->InsertRenderData(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_InsertRenderDataLast(void * jarg1, void * jarg2) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  RenderData *arg2 = (RenderData *) 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (RenderData *)jarg2; 
  (arg1)->InsertRenderDataLast(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_InsertMaterial__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseMaterial *arg2 = (BaseMaterial *) 0 ;
  BaseMaterial *arg3 = (BaseMaterial *) 0 ;
  Bool arg4 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (BaseMaterial *)jarg2; 
  arg3 = (BaseMaterial *)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->InsertMaterial(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_InsertMaterial__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseMaterial *arg2 = (BaseMaterial *) 0 ;
  BaseMaterial *arg3 = (BaseMaterial *) 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (BaseMaterial *)jarg2; 
  arg3 = (BaseMaterial *)jarg3; 
  (arg1)->InsertMaterial(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_InsertMaterial__SWIG_2(void * jarg1, void * jarg2) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseMaterial *arg2 = (BaseMaterial *) 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (BaseMaterial *)jarg2; 
  (arg1)->InsertMaterial(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_InsertObject__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  BaseObject *arg3 = (BaseObject *) 0 ;
  BaseObject *arg4 = (BaseObject *) 0 ;
  Bool arg5 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  arg3 = (BaseObject *)jarg3; 
  arg4 = (BaseObject *)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->InsertObject(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_InsertObject__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  BaseObject *arg3 = (BaseObject *) 0 ;
  BaseObject *arg4 = (BaseObject *) 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  arg3 = (BaseObject *)jarg3; 
  arg4 = (BaseObject *)jarg4; 
  (arg1)->InsertObject(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDocument_GetActiveRenderData(void * jarg1) {
  void * jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  RenderData *result = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  result = (RenderData *)(arg1)->GetActiveRenderData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDocument_GetActiveObject(void * jarg1) {
  void * jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseObject *result = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  result = (BaseObject *)(arg1)->GetActiveObject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDocument_GetActiveMaterial(void * jarg1) {
  void * jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseMaterial *result = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  result = (BaseMaterial *)(arg1)->GetActiveMaterial();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDocument_GetActiveTag(void * jarg1) {
  void * jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseTag *result = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  result = (BaseTag *)(arg1)->GetActiveTag();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDocument_GetRealActiveObject(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  AtomArray *arg2 = (AtomArray *) 0 ;
  Bool *arg3 = (Bool *) 0 ;
  BaseObject *result = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (AtomArray *)jarg2; 
  arg3 = (Bool *)jarg3; 
  result = (BaseObject *)(arg1)->GetRealActiveObject(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_GetActiveObjects(void * jarg1, void * jarg2, void * jarg3) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  AtomArray *arg2 = 0 ;
  GETACTIVEOBJECTFLAGS arg3 ;
  GETACTIVEOBJECTFLAGS *argp3 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (AtomArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AtomArray & type is null", 0);
    return ;
  } 
  argp3 = (GETACTIVEOBJECTFLAGS *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null GETACTIVEOBJECTFLAGS", 0);
    return ;
  }
  arg3 = *argp3; 
  ((BaseDocument const *)arg1)->GetActiveObjects(*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_GetActivePolygonObjects(void * jarg1, void * jarg2, unsigned int jarg3) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  AtomArray *arg2 = 0 ;
  Bool arg3 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (AtomArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AtomArray & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  ((BaseDocument const *)arg1)->GetActivePolygonObjects(*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_GetActiveObjectsFilter(void * jarg1, void * jarg2, unsigned int jarg3, int jarg4, int jarg5) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  AtomArray *arg2 = 0 ;
  Bool arg3 ;
  LONG arg4 ;
  LONG arg5 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (AtomArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AtomArray & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (LONG)jarg4; 
  arg5 = (LONG)jarg5; 
  ((BaseDocument const *)arg1)->GetActiveObjectsFilter(*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_GetActiveTags(void * jarg1, void * jarg2) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  AtomArray *arg2 = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (AtomArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AtomArray & type is null", 0);
    return ;
  } 
  ((BaseDocument const *)arg1)->GetActiveTags(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_GetActiveMaterials(void * jarg1, void * jarg2) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  AtomArray *arg2 = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (AtomArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AtomArray & type is null", 0);
    return ;
  } 
  ((BaseDocument const *)arg1)->GetActiveMaterials(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_GetSelection(void * jarg1, void * jarg2) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  AtomArray *arg2 = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (AtomArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AtomArray & type is null", 0);
    return ;
  } 
  ((BaseDocument const *)arg1)->GetSelection(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_SetActiveObject__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  LONG arg3 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  arg3 = (LONG)jarg3; 
  (arg1)->SetActiveObject(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_SetActiveObject__SWIG_1(void * jarg1, void * jarg2) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  (arg1)->SetActiveObject(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_SetActiveTag__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseTag *arg2 = (BaseTag *) 0 ;
  LONG arg3 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (BaseTag *)jarg2; 
  arg3 = (LONG)jarg3; 
  (arg1)->SetActiveTag(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_SetActiveTag__SWIG_1(void * jarg1, void * jarg2) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseTag *arg2 = (BaseTag *) 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (BaseTag *)jarg2; 
  (arg1)->SetActiveTag(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_SetActiveMaterial__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseMaterial *arg2 = (BaseMaterial *) 0 ;
  LONG arg3 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (BaseMaterial *)jarg2; 
  arg3 = (LONG)jarg3; 
  (arg1)->SetActiveMaterial(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_SetActiveMaterial__SWIG_1(void * jarg1, void * jarg2) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseMaterial *arg2 = (BaseMaterial *) 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (BaseMaterial *)jarg2; 
  (arg1)->SetActiveMaterial(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_SetActiveRenderData(void * jarg1, void * jarg2) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  RenderData *arg2 = (RenderData *) 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (RenderData *)jarg2; 
  (arg1)->SetActiveRenderData(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_SetSelection__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseList2D *arg2 = (BaseList2D *) 0 ;
  LONG arg3 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (BaseList2D *)jarg2; 
  arg3 = (LONG)jarg3; 
  (arg1)->SetSelection(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_SetSelection__SWIG_1(void * jarg1, void * jarg2) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseList2D *arg2 = (BaseList2D *) 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (BaseList2D *)jarg2; 
  (arg1)->SetSelection(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_Flush(void * jarg1) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  (arg1)->Flush();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDocument_GetHighest(void * jarg1, int jarg2, unsigned int jarg3) {
  void * jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  LONG arg2 ;
  Bool arg3 ;
  BaseObject *result = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (BaseObject *)(arg1)->GetHighest(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDocument_SearchMaterial(void * jarg1, char * /* constString&_ctype */ jarg2) {
  void * jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  String *arg2 = 0 ;
  BaseMaterial *result = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (BaseMaterial *)(arg1)->SearchMaterial((String const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDocument_SearchMaterialInc(void * jarg1, char * /* constString&_ctype */ jarg2) {
  void * jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  String *arg2 = 0 ;
  BaseMaterial *result = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (BaseMaterial *)(arg1)->SearchMaterialInc((String const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDocument_SearchObject(void * jarg1, char * /* constString&_ctype */ jarg2) {
  void * jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  String *arg2 = 0 ;
  BaseObject *result = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (BaseObject *)(arg1)->SearchObject((String const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDocument_SearchObjectInc(void * jarg1, char * /* constString&_ctype */ jarg2) {
  void * jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  String *arg2 = 0 ;
  BaseObject *result = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (BaseObject *)(arg1)->SearchObjectInc((String const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDocument_GetHelperAxis(void * jarg1) {
  void * jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseObject *result = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  result = (BaseObject *)(arg1)->GetHelperAxis();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDocument_GetAllTextures(void * jarg1, void * jarg2) {
  void * jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  AtomArray *arg2 = (AtomArray *) 0 ;
  BaseContainer result;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (AtomArray *)jarg2; 
  result = (arg1)->GetAllTextures((AtomArray const *)arg2);
  jresult = new BaseContainer((const BaseContainer &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseDocument_GetChanged(void * jarg1) {
  unsigned int jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  Bool result;
  
  arg1 = (BaseDocument *)jarg1; 
  result = (arg1)->GetChanged();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_SetChanged(void * jarg1) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  (arg1)->SetChanged();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDocument_GetDocumentName(void * jarg1) {
  void * jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  Filename result;
  
  arg1 = (BaseDocument *)jarg1; 
  result = (arg1)->GetDocumentName();
  jresult = new Filename((const Filename &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDocument_GetDocumentPath(void * jarg1) {
  void * jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  Filename result;
  
  arg1 = (BaseDocument *)jarg1; 
  result = (arg1)->GetDocumentPath();
  jresult = new Filename((const Filename &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_SetDocumentName(void * jarg1, void * jarg2) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  Filename *arg2 = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (Filename *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Filename const & type is null", 0);
    return ;
  } 
  (arg1)->SetDocumentName((Filename const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_SetDocumentPath(void * jarg1, void * jarg2) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  Filename *arg2 = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (Filename *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Filename const & type is null", 0);
    return ;
  } 
  (arg1)->SetDocumentPath((Filename const &)*arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_BaseDocument_GetLOD(void * jarg1) {
  double jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  Real result;
  
  arg1 = (BaseDocument *)jarg1; 
  result = (arg1)->GetLOD();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_SetLOD(void * jarg1, double jarg2) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  Real arg2 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (Real)jarg2; 
  (arg1)->SetLOD(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseDocument_GetFps(void * jarg1) {
  int jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  LONG result;
  
  arg1 = (BaseDocument *)jarg1; 
  result = ((BaseDocument const *)arg1)->GetFps();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_SetFps(void * jarg1, int jarg2) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  LONG arg2 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (LONG)jarg2; 
  (arg1)->SetFps(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDocument_GetMinTime(void * jarg1) {
  void * jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseTime result;
  
  arg1 = (BaseDocument *)jarg1; 
  result = (arg1)->GetMinTime();
  jresult = new BaseTime((const BaseTime &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_SetMinTime(void * jarg1, void * jarg2) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseTime *arg2 = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (BaseTime *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseTime const & type is null", 0);
    return ;
  } 
  (arg1)->SetMinTime((BaseTime const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDocument_GetMaxTime(void * jarg1) {
  void * jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseTime result;
  
  arg1 = (BaseDocument *)jarg1; 
  result = (arg1)->GetMaxTime();
  jresult = new BaseTime((const BaseTime &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_SetMaxTime(void * jarg1, void * jarg2) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseTime *arg2 = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (BaseTime *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseTime const & type is null", 0);
    return ;
  } 
  (arg1)->SetMaxTime((BaseTime const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDocument_GetUsedMinTime(void * jarg1, void * jarg2) {
  void * jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseList2D *arg2 = (BaseList2D *) 0 ;
  BaseTime result;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (BaseList2D *)jarg2; 
  result = (arg1)->GetUsedMinTime(arg2);
  jresult = new BaseTime((const BaseTime &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDocument_GetUsedMaxTime(void * jarg1, void * jarg2) {
  void * jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseList2D *arg2 = (BaseList2D *) 0 ;
  BaseTime result;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (BaseList2D *)jarg2; 
  result = (arg1)->GetUsedMaxTime(arg2);
  jresult = new BaseTime((const BaseTime &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDocument_GetLoopMinTime(void * jarg1) {
  void * jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseTime result;
  
  arg1 = (BaseDocument *)jarg1; 
  result = (arg1)->GetLoopMinTime();
  jresult = new BaseTime((const BaseTime &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_SetLoopMinTime(void * jarg1, void * jarg2) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseTime *arg2 = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (BaseTime *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseTime const & type is null", 0);
    return ;
  } 
  (arg1)->SetLoopMinTime((BaseTime const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDocument_GetLoopMaxTime(void * jarg1) {
  void * jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseTime result;
  
  arg1 = (BaseDocument *)jarg1; 
  result = (arg1)->GetLoopMaxTime();
  jresult = new BaseTime((const BaseTime &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_SetLoopMaxTime(void * jarg1, void * jarg2) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseTime *arg2 = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (BaseTime *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseTime const & type is null", 0);
    return ;
  } 
  (arg1)->SetLoopMaxTime((BaseTime const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseDocument_GetRenderLod(void * jarg1) {
  unsigned int jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  Bool result;
  
  arg1 = (BaseDocument *)jarg1; 
  result = (arg1)->GetRenderLod();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_SetRenderLod(void * jarg1, unsigned int jarg2) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  Bool arg2 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetRenderLod(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDocument_GetTime(void * jarg1) {
  void * jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseTime result;
  
  arg1 = (BaseDocument *)jarg1; 
  result = (arg1)->GetTime();
  jresult = new BaseTime((const BaseTime &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_SetTime(void * jarg1, void * jarg2) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseTime *arg2 = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (BaseTime *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseTime const & type is null", 0);
    return ;
  } 
  (arg1)->SetTime((BaseTime const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseDocument_GetMode(void * jarg1) {
  int jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  LONG result;
  
  arg1 = (BaseDocument *)jarg1; 
  result = (arg1)->GetMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_SetMode(void * jarg1, int jarg2) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  LONG arg2 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (LONG)jarg2; 
  (arg1)->SetMode(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseDocument_GetAction(void * jarg1) {
  int jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  LONG result;
  
  arg1 = (BaseDocument *)jarg1; 
  result = (arg1)->GetAction();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_SetAction(void * jarg1, int jarg2) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  LONG arg2 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (LONG)jarg2; 
  (arg1)->SetAction(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseDocument_IsEditMode(void * jarg1) {
  unsigned int jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  Bool result;
  
  arg1 = (BaseDocument *)jarg1; 
  result = (arg1)->IsEditMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseDocument_StartUndo(void * jarg1) {
  unsigned int jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  Bool result;
  
  arg1 = (BaseDocument *)jarg1; 
  result = (arg1)->StartUndo();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseDocument_EndUndo(void * jarg1) {
  unsigned int jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  Bool result;
  
  arg1 = (BaseDocument *)jarg1; 
  result = (arg1)->EndUndo();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseDocument_AddUndo__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  UNDOTYPE arg2 ;
  void *arg3 = (void *) 0 ;
  Bool result;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (UNDOTYPE)jarg2; 
  arg3 = (void *)jarg3; 
  result = (arg1)->AddUndo(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseDocument_AddUndo__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseDraw *arg2 = (BaseDraw *) 0 ;
  Bool result;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (BaseDraw *)jarg2; 
  result = (arg1)->AddUndo(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseDocument_DoUndo__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  Bool arg2 ;
  Bool result;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (arg1)->DoUndo(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseDocument_DoUndo__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  Bool result;
  
  arg1 = (BaseDocument *)jarg1; 
  result = (arg1)->DoUndo();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseDocument_DoRedo(void * jarg1) {
  unsigned int jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  Bool result;
  
  arg1 = (BaseDocument *)jarg1; 
  result = (arg1)->DoRedo();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDocument_GetUndoPtr(void * jarg1) {
  void * jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseList2D *result = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  result = (BaseList2D *)(arg1)->GetUndoPtr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDocument_FindUndoPtr(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseList2D *arg2 = (BaseList2D *) 0 ;
  UNDOTYPE arg3 ;
  BaseList2D *result = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (BaseList2D *)jarg2; 
  arg3 = (UNDOTYPE)jarg3; 
  result = (BaseList2D *)(arg1)->FindUndoPtr(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_AutoKey(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseList2D *arg2 = (BaseList2D *) 0 ;
  BaseList2D *arg3 = (BaseList2D *) 0 ;
  Bool arg4 ;
  Bool arg5 ;
  Bool arg6 ;
  Bool arg7 ;
  Bool arg8 ;
  Bool arg9 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (BaseList2D *)jarg2; 
  arg3 = (BaseList2D *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  arg8 = jarg8 ? true : false; 
  arg9 = jarg9 ? true : false; 
  (arg1)->AutoKey(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseDocument_RecordKey(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8) {
  unsigned int jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseList2D *arg2 = (BaseList2D *) 0 ;
  BaseTime *arg3 = 0 ;
  DescID *arg4 = 0 ;
  BaseList2D *arg5 = (BaseList2D *) 0 ;
  Bool arg6 ;
  Bool arg7 ;
  Bool arg8 ;
  Bool result;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (BaseList2D *)jarg2; 
  arg3 = (BaseTime *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseTime const & type is null", 0);
    return 0;
  } 
  arg4 = (DescID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescID const & type is null", 0);
    return 0;
  } 
  arg5 = (BaseList2D *)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  arg8 = jarg8 ? true : false; 
  result = (arg1)->RecordKey(arg2,(BaseTime const &)*arg3,(DescID const &)*arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_Record(void * jarg1) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  (arg1)->Record();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_AnimateObject(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseList2D *arg2 = (BaseList2D *) 0 ;
  BaseTime *arg3 = 0 ;
  ANIMATEFLAGS arg4 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (BaseList2D *)jarg2; 
  arg3 = (BaseTime *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseTime const & type is null", 0);
    return ;
  } 
  arg4 = (ANIMATEFLAGS)jarg4; 
  (arg1)->AnimateObject(arg2,(BaseTime const &)*arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDocument_Polygonize__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  Bool arg2 ;
  BaseDocument *result = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (BaseDocument *)(arg1)->Polygonize(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDocument_Polygonize__SWIG_1(void * jarg1) {
  void * jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseDocument *result = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  result = (BaseDocument *)(arg1)->Polygonize();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDocument_GetActiveBaseDraw(void * jarg1) {
  void * jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseDraw *result = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  result = (BaseDraw *)(arg1)->GetActiveBaseDraw();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDocument_GetRenderBaseDraw(void * jarg1) {
  void * jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseDraw *result = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  result = (BaseDraw *)(arg1)->GetRenderBaseDraw();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDocument_GetBaseDraw(void * jarg1, int jarg2) {
  void * jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  LONG arg2 ;
  BaseDraw *result = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (BaseDraw *)(arg1)->GetBaseDraw(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseDocument_GetBaseDrawCount(void * jarg1) {
  int jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  LONG result;
  
  arg1 = (BaseDocument *)jarg1; 
  result = (arg1)->GetBaseDrawCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseDocument_GetSplinePlane(void * jarg1) {
  int jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  LONG result;
  
  arg1 = (BaseDocument *)jarg1; 
  result = (arg1)->GetSplinePlane();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_SetRewind__SWIG_0(void * jarg1, int jarg2) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  LONG arg2 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (LONG)jarg2; 
  (arg1)->SetRewind(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_SetRewind__SWIG_1(void * jarg1) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  (arg1)->SetRewind();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDocument_FindSceneHook(void * jarg1, int jarg2) {
  void * jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  LONG arg2 ;
  BaseSceneHook *result = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (BaseSceneHook *)((BaseDocument const *)arg1)->FindSceneHook(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDocument_Alloc() {
  void * jresult ;
  BaseDocument *result = 0 ;
  
  result = (BaseDocument *)BaseDocument::Alloc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_Free(void * jarg1) {
  BaseDocument **arg1 = 0 ;
  
  arg1 = (BaseDocument **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseDocument *& type is null", 0);
    return ;
  } 
  BaseDocument::Free(*arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseDocument_IsCacheBuilt__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  Bool arg2 ;
  Bool result;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (arg1)->IsCacheBuilt(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseDocument_IsCacheBuilt__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  Bool result;
  
  arg1 = (BaseDocument *)jarg1; 
  result = (arg1)->IsCacheBuilt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_ForceCreateBaseDraw(void * jarg1) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  (arg1)->ForceCreateBaseDraw();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDocument_GetLayerObjectRoot(void * jarg1) {
  void * jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  GeListHead *result = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  result = (GeListHead *)(arg1)->GetLayerObjectRoot();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseDocument_HandleSelectedTextureFilename(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5, void * jarg6) {
  unsigned int jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseChannel *arg2 = (BaseChannel *) 0 ;
  Filename *arg3 = 0 ;
  Filename *arg4 = (Filename *) 0 ;
  Bool arg5 ;
  GEMB_R *arg6 = (GEMB_R *) 0 ;
  Bool result;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (BaseChannel *)jarg2; 
  arg3 = (Filename *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Filename const & type is null", 0);
    return 0;
  } 
  arg4 = (Filename *)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (GEMB_R *)jarg6; 
  result = (arg1)->HandleSelectedTextureFilename(arg2,(Filename const &)*arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseDocument_ReceiveMaterials(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  AtomArray *arg3 = (AtomArray *) 0 ;
  Bool arg4 ;
  Bool result;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  arg3 = (AtomArray *)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (arg1)->ReceiveMaterials(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseDocument_ReceiveNewTexture(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, void * jarg5) {
  unsigned int jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  Filename *arg3 = 0 ;
  Bool arg4 ;
  GEMB_R *arg5 = (GEMB_R *) 0 ;
  Bool result;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  arg3 = (Filename *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Filename const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  arg5 = (GEMB_R *)jarg5; 
  result = (arg1)->ReceiveNewTexture(arg2,(Filename const &)*arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseDocument_CollectSounds(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseSound *arg2 = (BaseSound *) 0 ;
  BaseTime *arg3 = 0 ;
  BaseTime *arg4 = 0 ;
  Bool result;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (BaseSound *)jarg2; 
  arg3 = (BaseTime *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseTime const & type is null", 0);
    return 0;
  } 
  arg4 = (BaseTime *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseTime const & type is null", 0);
    return 0;
  } 
  result = (arg1)->CollectSounds(arg2,(BaseTime const &)*arg3,(BaseTime const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_RecordZero(void * jarg1) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  (arg1)->RecordZero();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_RecordNoEvent(void * jarg1) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  (arg1)->RecordNoEvent();
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseDocument_GetDrawTime(void * jarg1) {
  int jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  LONG result;
  
  arg1 = (BaseDocument *)jarg1; 
  result = (arg1)->GetDrawTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseDocument_ExecutePasses(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, int jarg6) {
  unsigned int jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseThread *arg2 = (BaseThread *) 0 ;
  Bool arg3 ;
  Bool arg4 ;
  Bool arg5 ;
  BUILDFLAGS arg6 ;
  Bool result;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (BaseThread *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = (BUILDFLAGS)jarg6; 
  result = (arg1)->ExecutePasses(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseDocument_GetPickSession(void * jarg1) {
  void * jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  PickSessionDataStruct *result = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  result = (PickSessionDataStruct *)((BaseDocument const *)arg1)->GetPickSession();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_StartPickSession(void * jarg1, void * jarg2) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  PickSessionDataStruct *arg2 = (PickSessionDataStruct *) 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (PickSessionDataStruct *)jarg2; 
  (arg1)->StartPickSession(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_StopPickSession(void * jarg1, unsigned int jarg2) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  Bool arg2 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->StopPickSession(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseDocument_GetDefaultKey(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  CKey *arg2 = (CKey *) 0 ;
  Bool *arg3 = 0 ;
  Bool result;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (CKey *)jarg2; 
  arg3 = (Bool *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Bool & type is null", 0);
    return 0;
  } 
  result = ((BaseDocument const *)arg1)->GetDefaultKey(arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_SetDefaultKey(void * jarg1, void * jarg2, unsigned int jarg3) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  CKey *arg2 = (CKey *) 0 ;
  Bool arg3 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (CKey *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetDefaultKey(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_SendInfo(void * jarg1, int jarg2, int jarg3, void * jarg4, void * jarg5, unsigned int jarg6) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  Filename *arg4 = 0 ;
  BaseList2D *arg5 = (BaseList2D *) 0 ;
  Bool arg6 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (Filename *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Filename const & type is null", 0);
    return ;
  } 
  arg5 = (BaseList2D *)jarg5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->SendInfo(arg2,arg3,(Filename const &)*arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_SetHighlightedObject__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  LONG arg3 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  arg3 = (LONG)jarg3; 
  (arg1)->SetHighlightedObject(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_SetHighlightedObject__SWIG_1(void * jarg1, void * jarg2) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  (arg1)->SetHighlightedObject(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_SetHighlightedObjects__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  AtomArray *arg2 = 0 ;
  LONG arg3 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (AtomArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AtomArray & type is null", 0);
    return ;
  } 
  arg3 = (LONG)jarg3; 
  (arg1)->SetHighlightedObjects(*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_SetHighlightedObjects__SWIG_1(void * jarg1, void * jarg2) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  AtomArray *arg2 = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (AtomArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AtomArray & type is null", 0);
    return ;
  } 
  (arg1)->SetHighlightedObjects(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseDocument_GetHighlightedObjects(void * jarg1, void * jarg2) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  AtomArray *arg2 = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (AtomArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AtomArray & type is null", 0);
    return ;
  } 
  ((BaseDocument const *)arg1)->GetHighlightedObjects(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseDocument_IsAxisEnabled(void * jarg1) {
  unsigned int jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  Bool result;
  
  arg1 = (BaseDocument *)jarg1; 
  result = (arg1)->IsAxisEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Hierarchy_Alloc(void * jarg1) {
  void * jresult ;
  Hierarchy *arg1 = (Hierarchy *) 0 ;
  void *result = 0 ;
  
  arg1 = (Hierarchy *)jarg1; 
  result = (void *)(arg1)->Alloc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Hierarchy_Free(void * jarg1, void * jarg2) {
  Hierarchy *arg1 = (Hierarchy *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (Hierarchy *)jarg1; 
  arg2 = (void *)jarg2; 
  (arg1)->Free(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Hierarchy_CopyTo(void * jarg1, void * jarg2, void * jarg3) {
  Hierarchy *arg1 = (Hierarchy *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  arg1 = (Hierarchy *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (void *)jarg3; 
  (arg1)->CopyTo(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Hierarchy_Do(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  Hierarchy *arg1 = (Hierarchy *) 0 ;
  void *arg2 = (void *) 0 ;
  BaseObject *arg3 = (BaseObject *) 0 ;
  Matrix *arg4 = 0 ;
  Bool arg5 ;
  Bool result;
  
  arg1 = (Hierarchy *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (BaseObject *)jarg3; 
  arg4 = (Matrix *)jarg4; /* constMatrix&_in */
  arg5 = jarg5 ? true : false; 
  result = (arg1)->Do(arg2,arg3,(Matrix const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Hierarchy_Run(void * jarg1, void * jarg2, unsigned int jarg3, double jarg4, unsigned int jarg5, int jarg6, void * jarg7, void * jarg8) {
  unsigned int jresult ;
  Hierarchy *arg1 = (Hierarchy *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  Bool arg3 ;
  Real arg4 ;
  Bool arg5 ;
  BUILDFLAGS arg6 ;
  void *arg7 = (void *) 0 ;
  BaseThread *arg8 = (BaseThread *) 0 ;
  Bool result;
  
  arg1 = (Hierarchy *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (Real)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (BUILDFLAGS)jarg6; 
  arg7 = (void *)jarg7; 
  arg8 = (BaseThread *)jarg8; 
  result = (arg1)->Run(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Hierarchy(void * jarg1) {
  Hierarchy *arg1 = (Hierarchy *) 0 ;
  
  arg1 = (Hierarchy *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PriorityList_Add(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  PriorityList *arg1 = (PriorityList *) 0 ;
  GeListNode *arg2 = (GeListNode *) 0 ;
  LONG arg3 ;
  EXECUTIONFLAGS arg4 ;
  
  arg1 = (PriorityList *)jarg1; 
  arg2 = (GeListNode *)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (EXECUTIONFLAGS)jarg4; 
  (arg1)->Add(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetActiveDocument() {
  void * jresult ;
  BaseDocument *result = 0 ;
  
  result = (BaseDocument *)GetActiveDocument();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetFirstDocument() {
  void * jresult ;
  BaseDocument *result = 0 ;
  
  result = (BaseDocument *)GetFirstDocument();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LoadFile(void * jarg1) {
  unsigned int jresult ;
  Filename *arg1 = 0 ;
  Bool result;
  
  arg1 = (Filename *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Filename const & type is null", 0);
    return 0;
  } 
  result = LoadFile((Filename const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_InsertBaseDocument(void * jarg1) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  InsertBaseDocument(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetActiveDocument(void * jarg1) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  SetActiveDocument(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_KillDocument(void * jarg1) {
  BaseDocument **arg1 = 0 ;
  
  arg1 = (BaseDocument **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseDocument *& type is null", 0);
    return ;
  } 
  KillDocument(*arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LoadDocument(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  Filename *arg1 = 0 ;
  SCENEFILTER arg2 ;
  BaseThread *arg3 = (BaseThread *) 0 ;
  BaseDocument *result = 0 ;
  
  arg1 = (Filename *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Filename const & type is null", 0);
    return 0;
  } 
  arg2 = (SCENEFILTER)jarg2; 
  arg3 = (BaseThread *)jarg3; 
  result = (BaseDocument *)LoadDocument((Filename const &)*arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MergeDocument(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  Filename *arg2 = 0 ;
  SCENEFILTER arg3 ;
  BaseThread *arg4 = (BaseThread *) 0 ;
  Bool result;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (Filename *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Filename const & type is null", 0);
    return 0;
  } 
  arg3 = (SCENEFILTER)jarg3; 
  arg4 = (BaseThread *)jarg4; 
  result = MergeDocument(arg1,(Filename const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SaveDocument(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  unsigned int jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  Filename *arg2 = 0 ;
  SAVEDOCUMENTFLAGS arg3 ;
  LONG arg4 ;
  Bool result;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (Filename *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Filename const & type is null", 0);
    return 0;
  } 
  arg3 = (SAVEDOCUMENTFLAGS)jarg3; 
  arg4 = (LONG)jarg4; 
  result = SaveDocument(arg1,(Filename const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IsolateObjects(void * jarg1, void * jarg2) {
  void * jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  AtomArray *arg2 = 0 ;
  BaseDocument *result = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (AtomArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AtomArray const & type is null", 0);
    return 0;
  } 
  result = (BaseDocument *)IsolateObjects(arg1,(AtomArray const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RenderDocument(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, int jarg6, void * jarg7) {
  int jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseContainer *arg2 = 0 ;
  ProgressHook *arg3 = (ProgressHook *) 0 ;
  void *arg4 = (void *) 0 ;
  BaseBitmap *arg5 = (BaseBitmap *) 0 ;
  RENDERFLAGS arg6 ;
  BaseThread *arg7 = (BaseThread *) 0 ;
  RENDERRESULT result;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (BaseContainer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer const & type is null", 0);
    return 0;
  } 
  arg3 = (ProgressHook *)jarg3; 
  arg4 = (void *)jarg4; 
  arg5 = (BaseBitmap *)jarg5; 
  arg6 = (RENDERFLAGS)jarg6; 
  arg7 = (BaseThread *)jarg7; 
  result = (RENDERRESULT)RenderDocument(arg1,(BaseContainer const &)*arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mcamera_get() {
  int jresult ;
  int result;
  
  result = (int)Mcamera;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mobject_get() {
  int jresult ;
  int result;
  
  result = (int)Mobject;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mtexture_get() {
  int jresult ;
  int result;
  
  result = (int)Mtexture;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mtextureaxis_get() {
  int jresult ;
  int result;
  
  result = (int)Mtextureaxis;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mpoints_get() {
  int jresult ;
  int result;
  
  result = (int)Mpoints;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Medges_get() {
  int jresult ;
  int result;
  
  result = (int)Medges;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mpolygons_get() {
  int jresult ;
  int result;
  
  result = (int)Mpolygons;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Manimation_get() {
  int jresult ;
  int result;
  
  result = (int)Manimation;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mkinematic_get() {
  int jresult ;
  int result;
  
  result = (int)Mkinematic;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mmodel_get() {
  int jresult ;
  int result;
  
  result = (int)Mmodel;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mpaint_get() {
  int jresult ;
  int result;
  
  result = (int)Mpaint;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Muvpoints_get() {
  int jresult ;
  int result;
  
  result = (int)Muvpoints;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Muvpolygons_get() {
  int jresult ;
  int result;
  
  result = (int)Muvpolygons;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mpolyedgepoint_get() {
  int jresult ;
  int result;
  
  result = (int)Mpolyedgepoint;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Medgepoint_get() {
  int jresult ;
  int result;
  
  result = (int)Medgepoint;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mdrag_get() {
  int jresult ;
  int result;
  
  result = (int)Mdrag;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InteractiveModeling_Rewind(void * jarg1) {
  unsigned int jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  Bool result;
  
  arg1 = (BaseDocument *)jarg1; 
  result = InteractiveModeling_Rewind(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InteractiveModeling_Restart(void * jarg1) {
  unsigned int jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  Bool result;
  
  arg1 = (BaseDocument *)jarg1; 
  result = InteractiveModeling_Restart(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RunAnimation(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  Bool arg2 ;
  Bool arg3 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  RunAnimation(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetDocumentTime(void * jarg1, void * jarg2) {
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseTime *arg2 = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (BaseTime *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseTime const & type is null", 0);
    return ;
  } 
  SetDocumentTime(arg1,(BaseTime const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CloseAllDocuments() {
  unsigned int jresult ;
  Bool result;
  
  result = CloseAllDocuments();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StopExternalRenderer() {
  unsigned int jresult ;
  Bool result;
  
  result = StopExternalRenderer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TAG_VISIBLE_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 0));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TAG_MULTIPLE_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 1));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TAG_HIERARCHICAL_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 2));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TAG_EXPRESSION_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 3));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TAG_TEMPORARY_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 4));
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseTag_GetObject(void * jarg1) {
  void * jresult ;
  BaseTag *arg1 = (BaseTag *) 0 ;
  BaseObject *result = 0 ;
  
  arg1 = (BaseTag *)jarg1; 
  result = (BaseObject *)(arg1)->GetObject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseTag_GetNext(void * jarg1) {
  void * jresult ;
  BaseTag *arg1 = (BaseTag *) 0 ;
  BaseTag *result = 0 ;
  
  arg1 = (BaseTag *)jarg1; 
  result = (BaseTag *)(arg1)->GetNext();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseTag_GetPred(void * jarg1) {
  void * jresult ;
  BaseTag *arg1 = (BaseTag *) 0 ;
  BaseTag *result = 0 ;
  
  arg1 = (BaseTag *)jarg1; 
  result = (BaseTag *)(arg1)->GetPred();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseTag_GetOrigin(void * jarg1) {
  void * jresult ;
  BaseTag *arg1 = (BaseTag *) 0 ;
  BaseTag *result = 0 ;
  
  arg1 = (BaseTag *)jarg1; 
  result = (BaseTag *)(arg1)->GetOrigin();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseTag_Alloc(int jarg1) {
  void * jresult ;
  LONG arg1 ;
  BaseTag *result = 0 ;
  
  arg1 = (LONG)jarg1; 
  result = (BaseTag *)BaseTag::Alloc(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseTag_Free(void * jarg1) {
  BaseTag **arg1 = 0 ;
  
  arg1 = (BaseTag **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseTag *& type is null", 0);
    return ;
  } 
  BaseTag::Free(*arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_VariableTag_GetDataCount(void * jarg1) {
  int jresult ;
  VariableTag *arg1 = (VariableTag *) 0 ;
  LONG result;
  
  arg1 = (VariableTag *)jarg1; 
  result = (arg1)->GetDataCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VariableTag_GetDataSize(void * jarg1) {
  int jresult ;
  VariableTag *arg1 = (VariableTag *) 0 ;
  LONG result;
  
  arg1 = (VariableTag *)jarg1; 
  result = (arg1)->GetDataSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VariableTag_GetLowlevelDataAddressR(void * jarg1) {
  void * jresult ;
  VariableTag *arg1 = (VariableTag *) 0 ;
  void *result = 0 ;
  
  arg1 = (VariableTag *)jarg1; 
  result = (void *)(arg1)->GetLowlevelDataAddressR();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VariableTag_GetLowlevelDataAddressW(void * jarg1) {
  void * jresult ;
  VariableTag *arg1 = (VariableTag *) 0 ;
  void *result = 0 ;
  
  arg1 = (VariableTag *)jarg1; 
  result = (void *)(arg1)->GetLowlevelDataAddressW();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VariableTag_Alloc(int jarg1, int jarg2) {
  void * jresult ;
  LONG arg1 ;
  LONG arg2 ;
  VariableTag *result = 0 ;
  
  arg1 = (LONG)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (VariableTag *)VariableTag::Alloc(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VariableTag_Free(void * jarg1) {
  VariableTag **arg1 = 0 ;
  
  arg1 = (VariableTag **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VariableTag *& type is null", 0);
    return ;
  } 
  VariableTag::Free(*arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PointTag_GetDataAddressR(void * jarg1) {
  void * jresult ;
  PointTag *arg1 = (PointTag *) 0 ;
  Vector *result = 0 ;
  
  arg1 = (PointTag *)jarg1; 
  result = (Vector *)(arg1)->GetDataAddressR();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PointTag_GetDataAddressW(void * jarg1) {
  void * jresult ;
  PointTag *arg1 = (PointTag *) 0 ;
  Vector *result = 0 ;
  
  arg1 = (PointTag *)jarg1; 
  result = (Vector *)(arg1)->GetDataAddressW();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VertexMapTag_GetDataAddressR(void * jarg1) {
  void * jresult ;
  VertexMapTag *arg1 = (VertexMapTag *) 0 ;
  SReal *result = 0 ;
  
  arg1 = (VertexMapTag *)jarg1; 
  result = (SReal *)(arg1)->GetDataAddressR();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VertexMapTag_GetDataAddressW(void * jarg1) {
  void * jresult ;
  VertexMapTag *arg1 = (VertexMapTag *) 0 ;
  SReal *result = 0 ;
  
  arg1 = (VertexMapTag *)jarg1; 
  result = (SReal *)(arg1)->GetDataAddressW();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VertexMapTag_Alloc(int jarg1) {
  void * jresult ;
  LONG arg1 ;
  VertexMapTag *result = 0 ;
  
  arg1 = (LONG)jarg1; 
  result = (VertexMapTag *)VertexMapTag::Alloc(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VertexMapTag_Free(void * jarg1) {
  VertexMapTag **arg1 = 0 ;
  
  arg1 = (VertexMapTag **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VertexMapTag *& type is null", 0);
    return ;
  } 
  VertexMapTag::Free(*arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SegmentTag_GetDataAddressR(void * jarg1) {
  void * jresult ;
  SegmentTag *arg1 = (SegmentTag *) 0 ;
  Segment *result = 0 ;
  
  arg1 = (SegmentTag *)jarg1; 
  result = (Segment *)(arg1)->GetDataAddressR();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SegmentTag_GetDataAddressW(void * jarg1) {
  void * jresult ;
  SegmentTag *arg1 = (SegmentTag *) 0 ;
  Segment *result = 0 ;
  
  arg1 = (SegmentTag *)jarg1; 
  result = (Segment *)(arg1)->GetDataAddressW();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TangentTag_GetDataAddressR(void * jarg1) {
  void * jresult ;
  TangentTag *arg1 = (TangentTag *) 0 ;
  Tangent *result = 0 ;
  
  arg1 = (TangentTag *)jarg1; 
  result = (Tangent *)(arg1)->GetDataAddressR();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TangentTag_GetDataAddressW(void * jarg1) {
  void * jresult ;
  TangentTag *arg1 = (TangentTag *) 0 ;
  Tangent *result = 0 ;
  
  arg1 = (TangentTag *)jarg1; 
  result = (Tangent *)(arg1)->GetDataAddressW();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolygonTag_GetDataAddressR(void * jarg1) {
  void * jresult ;
  PolygonTag *arg1 = (PolygonTag *) 0 ;
  CPolygon *result = 0 ;
  
  arg1 = (PolygonTag *)jarg1; 
  result = (CPolygon *)(arg1)->GetDataAddressR();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolygonTag_GetDataAddressW(void * jarg1) {
  void * jresult ;
  PolygonTag *arg1 = (PolygonTag *) 0 ;
  CPolygon *result = 0 ;
  
  arg1 = (PolygonTag *)jarg1; 
  result = (CPolygon *)(arg1)->GetDataAddressW();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SelectionTag_GetBaseSelect(void * jarg1) {
  void * jresult ;
  SelectionTag *arg1 = (SelectionTag *) 0 ;
  BaseSelect *result = 0 ;
  
  arg1 = (SelectionTag *)jarg1; 
  result = (BaseSelect *)(arg1)->GetBaseSelect();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SelectionTag_Alloc(int jarg1) {
  void * jresult ;
  LONG arg1 ;
  SelectionTag *result = 0 ;
  
  arg1 = (LONG)jarg1; 
  result = (SelectionTag *)SelectionTag::Alloc(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SelectionTag_Free(void * jarg1) {
  SelectionTag **arg1 = 0 ;
  
  arg1 = (SelectionTag **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SelectionTag *& type is null", 0);
    return ;
  } 
  SelectionTag::Free(*arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UVWTag_GetSlow(void * jarg1, int jarg2) {
  void * jresult ;
  UVWTag *arg1 = (UVWTag *) 0 ;
  LONG arg2 ;
  UVWStruct result;
  
  arg1 = (UVWTag *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (arg1)->GetSlow(arg2);
  jresult = new UVWStruct((const UVWStruct &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UVWTag_SetSlow(void * jarg1, int jarg2, void * jarg3) {
  UVWTag *arg1 = (UVWTag *) 0 ;
  LONG arg2 ;
  UVWStruct *arg3 = 0 ;
  
  arg1 = (UVWTag *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (UVWStruct *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UVWStruct const & type is null", 0);
    return ;
  } 
  (arg1)->SetSlow(arg2,(UVWStruct const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_UVWTag_CpySlow(void * jarg1, int jarg2, void * jarg3, int jarg4) {
  UVWTag *arg1 = (UVWTag *) 0 ;
  LONG arg2 ;
  UVWTag *arg3 = (UVWTag *) 0 ;
  LONG arg4 ;
  
  arg1 = (UVWTag *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (UVWTag *)jarg3; 
  arg4 = (LONG)jarg4; 
  (arg1)->CpySlow(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UVWTag_GetDataAddressR(void * jarg1) {
  void * jresult ;
  UVWTag *arg1 = (UVWTag *) 0 ;
  UVWHandle result;
  
  arg1 = (UVWTag *)jarg1; 
  result = (arg1)->GetDataAddressR();
  jresult = new UVWHandle((const UVWHandle &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UVWTag_GetDataAddressW(void * jarg1) {
  void * jresult ;
  UVWTag *arg1 = (UVWTag *) 0 ;
  UVWHandle result;
  
  arg1 = (UVWTag *)jarg1; 
  result = (arg1)->GetDataAddressW();
  jresult = new UVWHandle((const UVWHandle &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UVWTag_Get(void * jarg1, int jarg2, void * jarg3) {
  UVWHandle arg1 ;
  LONG arg2 ;
  UVWStruct *arg3 = 0 ;
  UVWHandle const *argp1 ;
  
  argp1 = (UVWHandle *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UVWHandle const", 0);
    return ;
  }
  arg1 = *argp1; 
  arg2 = (LONG)jarg2; 
  arg3 = (UVWStruct *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UVWStruct & type is null", 0);
    return ;
  } 
  UVWTag::Get(arg1,arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_UVWTag_Set(void * jarg1, int jarg2, void * jarg3) {
  UVWHandle arg1 ;
  LONG arg2 ;
  UVWStruct *arg3 = 0 ;
  UVWHandle *argp1 ;
  
  argp1 = (UVWHandle *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UVWHandle", 0);
    return ;
  }
  arg1 = *argp1; 
  arg2 = (LONG)jarg2; 
  arg3 = (UVWStruct *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UVWStruct const & type is null", 0);
    return ;
  } 
  UVWTag::Set(arg1,arg2,(UVWStruct const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_UVWTag_Copy(void * jarg1, int jarg2, void * jarg3, int jarg4) {
  UVWHandle arg1 ;
  LONG arg2 ;
  UVWHandle arg3 ;
  LONG arg4 ;
  UVWHandle *argp1 ;
  UVWHandle const *argp3 ;
  
  argp1 = (UVWHandle *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UVWHandle", 0);
    return ;
  }
  arg1 = *argp1; 
  arg2 = (LONG)jarg2; 
  argp3 = (UVWHandle *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UVWHandle const", 0);
    return ;
  }
  arg3 = *argp3; 
  arg4 = (LONG)jarg4; 
  UVWTag::Copy(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UVWTag_Alloc(int jarg1) {
  void * jresult ;
  LONG arg1 ;
  UVWTag *result = 0 ;
  
  arg1 = (LONG)jarg1; 
  result = (UVWTag *)UVWTag::Alloc(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UVWTag_Free(void * jarg1) {
  UVWTag **arg1 = 0 ;
  
  arg1 = (UVWTag **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UVWTag *& type is null", 0);
    return ;
  } 
  UVWTag::Free(*arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NormalTag_GetDataAddressR(void * jarg1) {
  void * jresult ;
  NormalTag *arg1 = (NormalTag *) 0 ;
  NormalHandle result;
  
  arg1 = (NormalTag *)jarg1; 
  result = (arg1)->GetDataAddressR();
  jresult = new NormalHandle((const NormalHandle &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NormalTag_GetDataAddressW(void * jarg1) {
  void * jresult ;
  NormalTag *arg1 = (NormalTag *) 0 ;
  NormalHandle result;
  
  arg1 = (NormalTag *)jarg1; 
  result = (arg1)->GetDataAddressW();
  jresult = new NormalHandle((const NormalHandle &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NormalTag_Get(void * jarg1, int jarg2, void * jarg3) {
  NormalHandle arg1 ;
  LONG arg2 ;
  NormalStruct *arg3 = 0 ;
  NormalHandle const *argp1 ;
  
  argp1 = (NormalHandle *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null NormalHandle const", 0);
    return ;
  }
  arg1 = *argp1; 
  arg2 = (LONG)jarg2; 
  arg3 = (NormalStruct *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NormalStruct & type is null", 0);
    return ;
  } 
  NormalTag::Get(arg1,arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NormalTag_Set(void * jarg1, int jarg2, void * jarg3) {
  NormalHandle arg1 ;
  LONG arg2 ;
  NormalStruct *arg3 = 0 ;
  NormalHandle *argp1 ;
  
  argp1 = (NormalHandle *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null NormalHandle", 0);
    return ;
  }
  arg1 = *argp1; 
  arg2 = (LONG)jarg2; 
  arg3 = (NormalStruct *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NormalStruct const & type is null", 0);
    return ;
  } 
  NormalTag::Set(arg1,arg2,(NormalStruct const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NormalTag_Copy(void * jarg1, int jarg2, void * jarg3, int jarg4) {
  NormalHandle arg1 ;
  LONG arg2 ;
  NormalHandle arg3 ;
  LONG arg4 ;
  NormalHandle *argp1 ;
  NormalHandle const *argp3 ;
  
  argp1 = (NormalHandle *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null NormalHandle", 0);
    return ;
  }
  arg1 = *argp1; 
  arg2 = (LONG)jarg2; 
  argp3 = (NormalHandle *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null NormalHandle const", 0);
    return ;
  }
  arg3 = *argp3; 
  arg4 = (LONG)jarg4; 
  NormalTag::Copy(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NormalTag_Alloc(int jarg1) {
  void * jresult ;
  LONG arg1 ;
  NormalTag *result = 0 ;
  
  arg1 = (LONG)jarg1; 
  result = (NormalTag *)NormalTag::Alloc(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NormalTag_Free(void * jarg1) {
  NormalTag **arg1 = 0 ;
  
  arg1 = (NormalTag **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NormalTag *& type is null", 0);
    return ;
  } 
  NormalTag::Free(*arg1);
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_TextureTag_GetPos(void * jarg1) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  TextureTag *arg1 = (TextureTag *) 0 ;
  Vector result;
  
  arg1 = (TextureTag *)jarg1; 
  result = (arg1)->GetPos();
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_TextureTag_GetScale(void * jarg1) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  TextureTag *arg1 = (TextureTag *) 0 ;
  Vector result;
  
  arg1 = (TextureTag *)jarg1; 
  result = (arg1)->GetScale();
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_TextureTag_GetRot(void * jarg1) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  TextureTag *arg1 = (TextureTag *) 0 ;
  Vector result;
  
  arg1 = (TextureTag *)jarg1; 
  result = (arg1)->GetRot();
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT Matrix_POD /* Matrix_ctype */ SWIGSTDCALL CSharp_TextureTag_GetMl(void * jarg1) {
  Matrix_POD /* Matrix_ctype */ jresult ;
  TextureTag *arg1 = (TextureTag *) 0 ;
  Matrix result;
  
  arg1 = (TextureTag *)jarg1; 
  result = (arg1)->GetMl();
  /* <Matrix_out> */ 
  jresult = *((Matrix_POD *)(&result)); 
  /* </Matrix_out> */
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextureTag_SetPos(void * jarg1, void * jarg2) {
  TextureTag *arg1 = (TextureTag *) 0 ;
  Vector *arg2 = 0 ;
  
  arg1 = (TextureTag *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  (arg1)->SetPos((Vector const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextureTag_SetScale(void * jarg1, void * jarg2) {
  TextureTag *arg1 = (TextureTag *) 0 ;
  Vector *arg2 = 0 ;
  
  arg1 = (TextureTag *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  (arg1)->SetScale((Vector const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextureTag_SetRot(void * jarg1, void * jarg2) {
  TextureTag *arg1 = (TextureTag *) 0 ;
  Vector *arg2 = 0 ;
  
  arg1 = (TextureTag *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  (arg1)->SetRot((Vector const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextureTag_SetMl(void * jarg1, void * jarg2) {
  TextureTag *arg1 = (TextureTag *) 0 ;
  Matrix *arg2 = 0 ;
  
  arg1 = (TextureTag *)jarg1; 
  arg2 = (Matrix *)jarg2; /* constMatrix&_in */
  (arg1)->SetMl((Matrix const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TextureTag_GetMaterial__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  TextureTag *arg1 = (TextureTag *) 0 ;
  Bool arg2 ;
  BaseMaterial *result = 0 ;
  
  arg1 = (TextureTag *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (BaseMaterial *)(arg1)->GetMaterial(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TextureTag_GetMaterial__SWIG_1(void * jarg1) {
  void * jresult ;
  TextureTag *arg1 = (TextureTag *) 0 ;
  BaseMaterial *result = 0 ;
  
  arg1 = (TextureTag *)jarg1; 
  result = (BaseMaterial *)(arg1)->GetMaterial();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextureTag_SetMaterial(void * jarg1, void * jarg2) {
  TextureTag *arg1 = (TextureTag *) 0 ;
  BaseMaterial *arg2 = (BaseMaterial *) 0 ;
  
  arg1 = (TextureTag *)jarg1; 
  arg2 = (BaseMaterial *)jarg2; 
  (arg1)->SetMaterial(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TextureTag_Alloc() {
  void * jresult ;
  TextureTag *result = 0 ;
  
  result = (TextureTag *)TextureTag::Alloc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextureTag_Free(void * jarg1) {
  TextureTag **arg1 = 0 ;
  
  arg1 = (TextureTag **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TextureTag *& type is null", 0);
    return ;
  } 
  TextureTag::Free(*arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StickTextureTag_GetDataAddressR(void * jarg1) {
  void * jresult ;
  StickTextureTag *arg1 = (StickTextureTag *) 0 ;
  Vector *result = 0 ;
  
  arg1 = (StickTextureTag *)jarg1; 
  result = (Vector *)(arg1)->GetDataAddressR();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StickTextureTag_GetDataAddressW(void * jarg1) {
  void * jresult ;
  StickTextureTag *arg1 = (StickTextureTag *) 0 ;
  Vector *result = 0 ;
  
  arg1 = (StickTextureTag *)jarg1; 
  result = (Vector *)(arg1)->GetDataAddressW();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StickTextureTag_Record(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  StickTextureTag *arg1 = (StickTextureTag *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  Bool arg3 ;
  Bool result;
  
  arg1 = (StickTextureTag *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->Record(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StickTextureTag_Alloc(int jarg1) {
  void * jresult ;
  LONG arg1 ;
  StickTextureTag *result = 0 ;
  
  arg1 = (LONG)jarg1; 
  result = (StickTextureTag *)StickTextureTag::Alloc(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StickTextureTag_Free(void * jarg1) {
  StickTextureTag **arg1 = 0 ;
  
  arg1 = (StickTextureTag **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StickTextureTag *& type is null", 0);
    return ;
  } 
  StickTextureTag::Free(*arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XPressoTag_GetNodeMaster(void * jarg1) {
  void * jresult ;
  XPressoTag *arg1 = (XPressoTag *) 0 ;
  GvNodeMaster *result = 0 ;
  
  arg1 = (XPressoTag *)jarg1; 
  result = (GvNodeMaster *)(arg1)->GetNodeMaster();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XPressoTag_Alloc() {
  void * jresult ;
  XPressoTag *result = 0 ;
  
  result = (XPressoTag *)XPressoTag::Alloc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XPressoTag_Free(void * jarg1) {
  XPressoTag **arg1 = 0 ;
  
  arg1 = (XPressoTag **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XPressoTag *& type is null", 0);
    return ;
  } 
  XPressoTag::Free(*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolyWeight_a_set(void * jarg1, float jarg2) {
  PolyWeight *arg1 = (PolyWeight *) 0 ;
  SReal arg2 ;
  
  arg1 = (PolyWeight *)jarg1; 
  arg2 = (SReal)jarg2; 
  if (arg1) (arg1)->a = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PolyWeight_a_get(void * jarg1) {
  float jresult ;
  PolyWeight *arg1 = (PolyWeight *) 0 ;
  SReal result;
  
  arg1 = (PolyWeight *)jarg1; 
  result =  ((arg1)->a);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolyWeight_b_set(void * jarg1, float jarg2) {
  PolyWeight *arg1 = (PolyWeight *) 0 ;
  SReal arg2 ;
  
  arg1 = (PolyWeight *)jarg1; 
  arg2 = (SReal)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PolyWeight_b_get(void * jarg1) {
  float jresult ;
  PolyWeight *arg1 = (PolyWeight *) 0 ;
  SReal result;
  
  arg1 = (PolyWeight *)jarg1; 
  result =  ((arg1)->b);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolyWeight_c_set(void * jarg1, float jarg2) {
  PolyWeight *arg1 = (PolyWeight *) 0 ;
  SReal arg2 ;
  
  arg1 = (PolyWeight *)jarg1; 
  arg2 = (SReal)jarg2; 
  if (arg1) (arg1)->c = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PolyWeight_c_get(void * jarg1) {
  float jresult ;
  PolyWeight *arg1 = (PolyWeight *) 0 ;
  SReal result;
  
  arg1 = (PolyWeight *)jarg1; 
  result =  ((arg1)->c);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolyWeight_d_set(void * jarg1, float jarg2) {
  PolyWeight *arg1 = (PolyWeight *) 0 ;
  SReal arg2 ;
  
  arg1 = (PolyWeight *)jarg1; 
  arg2 = (SReal)jarg2; 
  if (arg1) (arg1)->d = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PolyWeight_d_get(void * jarg1) {
  float jresult ;
  PolyWeight *arg1 = (PolyWeight *) 0 ;
  SReal result;
  
  arg1 = (PolyWeight *)jarg1; 
  result =  ((arg1)->d);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PolyWeight() {
  void * jresult ;
  PolyWeight *result = 0 ;
  
  result = (PolyWeight *)new PolyWeight();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PolyWeight(void * jarg1) {
  PolyWeight *arg1 = (PolyWeight *) 0 ;
  
  arg1 = (PolyWeight *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HNData() {
  void * jresult ;
  HNData *result = 0 ;
  
  result = (HNData *)new HNData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HNData_points_set(void * jarg1, void * jarg2) {
  HNData *arg1 = (HNData *) 0 ;
  LONG *arg2 = (LONG *) 0 ;
  
  arg1 = (HNData *)jarg1; 
  arg2 = (LONG *)jarg2; 
  if (arg1) (arg1)->points = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HNData_points_get(void * jarg1) {
  void * jresult ;
  HNData *arg1 = (HNData *) 0 ;
  LONG *result = 0 ;
  
  arg1 = (HNData *)jarg1; 
  result = (LONG *) ((arg1)->points);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HNData_polys_set(void * jarg1, void * jarg2) {
  HNData *arg1 = (HNData *) 0 ;
  LONG *arg2 = (LONG *) 0 ;
  
  arg1 = (HNData *)jarg1; 
  arg2 = (LONG *)jarg2; 
  if (arg1) (arg1)->polys = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HNData_polys_get(void * jarg1) {
  void * jresult ;
  HNData *arg1 = (HNData *) 0 ;
  LONG *result = 0 ;
  
  arg1 = (HNData *)jarg1; 
  result = (LONG *) ((arg1)->polys);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HNData_pointweight_set(void * jarg1, void * jarg2) {
  HNData *arg1 = (HNData *) 0 ;
  SReal **arg2 = (SReal **) 0 ;
  
  arg1 = (HNData *)jarg1; 
  arg2 = (SReal **)jarg2; 
  if (arg1) (arg1)->pointweight = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HNData_pointweight_get(void * jarg1) {
  void * jresult ;
  HNData *arg1 = (HNData *) 0 ;
  SReal **result = 0 ;
  
  arg1 = (HNData *)jarg1; 
  result = (SReal **) ((arg1)->pointweight);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HNData_polyweight_set(void * jarg1, void * jarg2) {
  HNData *arg1 = (HNData *) 0 ;
  PolyWeight **arg2 = (PolyWeight **) 0 ;
  
  arg1 = (HNData *)jarg1; 
  arg2 = (PolyWeight **)jarg2; 
  if (arg1) (arg1)->polyweight = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HNData_polyweight_get(void * jarg1) {
  void * jresult ;
  HNData *arg1 = (HNData *) 0 ;
  PolyWeight **result = 0 ;
  
  arg1 = (HNData *)jarg1; 
  result = (PolyWeight **) ((arg1)->polyweight);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HNData_changed_set(void * jarg1, void * jarg2) {
  HNData *arg1 = (HNData *) 0 ;
  Bool *arg2 = (Bool *) 0 ;
  
  arg1 = (HNData *)jarg1; 
  arg2 = (Bool *)jarg2; 
  if (arg1) (arg1)->changed = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HNData_changed_get(void * jarg1) {
  void * jresult ;
  HNData *arg1 = (HNData *) 0 ;
  Bool *result = 0 ;
  
  arg1 = (HNData *)jarg1; 
  result = (Bool *) ((arg1)->changed);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HNData(void * jarg1) {
  HNData *arg1 = (HNData *) 0 ;
  
  arg1 = (HNData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HNSubdiv_op_set(void * jarg1, void * jarg2) {
  HNSubdiv *arg1 = (HNSubdiv *) 0 ;
  PolygonObject *arg2 = (PolygonObject *) 0 ;
  
  arg1 = (HNSubdiv *)jarg1; 
  arg2 = (PolygonObject *)jarg2; 
  if (arg1) (arg1)->op = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HNSubdiv_op_get(void * jarg1) {
  void * jresult ;
  HNSubdiv *arg1 = (HNSubdiv *) 0 ;
  PolygonObject *result = 0 ;
  
  arg1 = (HNSubdiv *)jarg1; 
  result = (PolygonObject *) ((arg1)->op);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HNSubdiv_lod_set(void * jarg1, double jarg2) {
  HNSubdiv *arg1 = (HNSubdiv *) 0 ;
  Real arg2 ;
  
  arg1 = (HNSubdiv *)jarg1; 
  arg2 = (Real)jarg2; 
  if (arg1) (arg1)->lod = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HNSubdiv_lod_get(void * jarg1) {
  double jresult ;
  HNSubdiv *arg1 = (HNSubdiv *) 0 ;
  Real result;
  
  arg1 = (HNSubdiv *)jarg1; 
  result =  ((arg1)->lod);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HNSubdiv_subdiv_set(void * jarg1, int jarg2) {
  HNSubdiv *arg1 = (HNSubdiv *) 0 ;
  LONG arg2 ;
  
  arg1 = (HNSubdiv *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->subdiv = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HNSubdiv_subdiv_get(void * jarg1) {
  int jresult ;
  HNSubdiv *arg1 = (HNSubdiv *) 0 ;
  LONG result;
  
  arg1 = (HNSubdiv *)jarg1; 
  result =  ((arg1)->subdiv);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HNSubdiv() {
  void * jresult ;
  HNSubdiv *result = 0 ;
  
  result = (HNSubdiv *)new HNSubdiv();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HNSubdiv(void * jarg1) {
  HNSubdiv *arg1 = (HNSubdiv *) 0 ;
  
  arg1 = (HNSubdiv *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HNWeightTag_GetTagData(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  HNWeightTag *arg1 = (HNWeightTag *) 0 ;
  HNData *arg2 = (HNData *) 0 ;
  Bool result;
  
  arg1 = (HNWeightTag *)jarg1; 
  arg2 = (HNData *)jarg2; 
  result = (arg1)->GetTagData(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HNWeightTag_Alloc() {
  void * jresult ;
  HNWeightTag *result = 0 ;
  
  result = (HNWeightTag *)HNWeightTag::Alloc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HNWeightTag_Free(void * jarg1) {
  HNWeightTag **arg1 = 0 ;
  
  arg1 = (HNWeightTag **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HNWeightTag *& type is null", 0);
    return ;
  } 
  HNWeightTag::Free(*arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BAKEPARTICLETAG_FROM_get() {
  int jresult ;
  int result;
  
  result = (int)(1001);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BAKEPARTICLETAG_TO_get() {
  int jresult ;
  int result;
  
  result = (int)(1002);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BAKEPARTICLETAG_STEP_get() {
  int jresult ;
  int result;
  
  result = (int)(1003);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BAKEPARTICLETAG_IGNORE_get() {
  int jresult ;
  int result;
  
  result = (int)(1004);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseSelectData_a_set(void * jarg1, int jarg2) {
  BaseSelectData *arg1 = (BaseSelectData *) 0 ;
  LONG arg2 ;
  
  arg1 = (BaseSelectData *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->a = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseSelectData_a_get(void * jarg1) {
  int jresult ;
  BaseSelectData *arg1 = (BaseSelectData *) 0 ;
  LONG result;
  
  arg1 = (BaseSelectData *)jarg1; 
  result =  ((arg1)->a);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseSelectData_b_set(void * jarg1, int jarg2) {
  BaseSelectData *arg1 = (BaseSelectData *) 0 ;
  LONG arg2 ;
  
  arg1 = (BaseSelectData *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseSelectData_b_get(void * jarg1) {
  int jresult ;
  BaseSelectData *arg1 = (BaseSelectData *) 0 ;
  LONG result;
  
  arg1 = (BaseSelectData *)jarg1; 
  result =  ((arg1)->b);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BaseSelectData() {
  void * jresult ;
  BaseSelectData *result = 0 ;
  
  result = (BaseSelectData *)new BaseSelectData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BaseSelectData(void * jarg1) {
  BaseSelectData *arg1 = (BaseSelectData *) 0 ;
  
  arg1 = (BaseSelectData *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseSelect_GetCount(void * jarg1) {
  int jresult ;
  BaseSelect *arg1 = (BaseSelect *) 0 ;
  LONG result;
  
  arg1 = (BaseSelect *)jarg1; 
  result = ((BaseSelect const *)arg1)->GetCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseSelect_GetSegments(void * jarg1) {
  int jresult ;
  BaseSelect *arg1 = (BaseSelect *) 0 ;
  LONG result;
  
  arg1 = (BaseSelect *)jarg1; 
  result = ((BaseSelect const *)arg1)->GetSegments();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseSelect_Select(void * jarg1, int jarg2) {
  unsigned int jresult ;
  BaseSelect *arg1 = (BaseSelect *) 0 ;
  LONG arg2 ;
  Bool result;
  
  arg1 = (BaseSelect *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (arg1)->Select(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseSelect_SelectAll(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  BaseSelect *arg1 = (BaseSelect *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  Bool result;
  
  arg1 = (BaseSelect *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  result = (arg1)->SelectAll(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseSelect_Deselect__SWIG_0(void * jarg1, int jarg2) {
  unsigned int jresult ;
  BaseSelect *arg1 = (BaseSelect *) 0 ;
  LONG arg2 ;
  Bool result;
  
  arg1 = (BaseSelect *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (arg1)->Deselect(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseSelect_DeselectAll(void * jarg1) {
  unsigned int jresult ;
  BaseSelect *arg1 = (BaseSelect *) 0 ;
  Bool result;
  
  arg1 = (BaseSelect *)jarg1; 
  result = (arg1)->DeselectAll();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseSelect_Toggle(void * jarg1, int jarg2) {
  unsigned int jresult ;
  BaseSelect *arg1 = (BaseSelect *) 0 ;
  LONG arg2 ;
  Bool result;
  
  arg1 = (BaseSelect *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (arg1)->Toggle(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseSelect_ToggleAll(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  BaseSelect *arg1 = (BaseSelect *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  Bool result;
  
  arg1 = (BaseSelect *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  result = (arg1)->ToggleAll(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseSelect_GetRange(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  BaseSelect *arg1 = (BaseSelect *) 0 ;
  LONG arg2 ;
  LONG *arg3 = (LONG *) 0 ;
  LONG *arg4 = (LONG *) 0 ;
  Bool result;
  
  arg1 = (BaseSelect *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG *)jarg3; 
  arg4 = (LONG *)jarg4; 
  result = ((BaseSelect const *)arg1)->GetRange(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseSelect_IsSelected(void * jarg1, int jarg2) {
  unsigned int jresult ;
  BaseSelect *arg1 = (BaseSelect *) 0 ;
  LONG arg2 ;
  Bool result;
  
  arg1 = (BaseSelect *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = ((BaseSelect const *)arg1)->IsSelected(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseSelect_CopyTo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BaseSelect *arg1 = (BaseSelect *) 0 ;
  BaseSelect *arg2 = (BaseSelect *) 0 ;
  Bool result;
  
  arg1 = (BaseSelect *)jarg1; 
  arg2 = (BaseSelect *)jarg2; 
  result = ((BaseSelect const *)arg1)->CopyTo(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseSelect_Merge(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BaseSelect *arg1 = (BaseSelect *) 0 ;
  BaseSelect *arg2 = (BaseSelect *) 0 ;
  Bool result;
  
  arg1 = (BaseSelect *)jarg1; 
  arg2 = (BaseSelect *)jarg2; 
  result = (arg1)->Merge((BaseSelect const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseSelect_Deselect__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BaseSelect *arg1 = (BaseSelect *) 0 ;
  BaseSelect *arg2 = (BaseSelect *) 0 ;
  Bool result;
  
  arg1 = (BaseSelect *)jarg1; 
  arg2 = (BaseSelect *)jarg2; 
  result = (arg1)->Deselect((BaseSelect const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseSelect_Cross(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BaseSelect *arg1 = (BaseSelect *) 0 ;
  BaseSelect *arg2 = (BaseSelect *) 0 ;
  Bool result;
  
  arg1 = (BaseSelect *)jarg1; 
  arg2 = (BaseSelect *)jarg2; 
  result = (arg1)->Cross((BaseSelect const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseSelect_GetClone(void * jarg1) {
  void * jresult ;
  BaseSelect *arg1 = (BaseSelect *) 0 ;
  BaseSelect *result = 0 ;
  
  arg1 = (BaseSelect *)jarg1; 
  result = (BaseSelect *)((BaseSelect const *)arg1)->GetClone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseSelect_FromArray(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  BaseSelect *arg1 = (BaseSelect *) 0 ;
  UCHAR *arg2 = (UCHAR *) 0 ;
  LONG arg3 ;
  Bool result;
  
  arg1 = (BaseSelect *)jarg1; 
  arg2 = (UCHAR *)jarg2; 
  arg3 = (LONG)jarg3; 
  result = (arg1)->FromArray(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseSelect_ToArray(void * jarg1, int jarg2) {
  void * jresult ;
  BaseSelect *arg1 = (BaseSelect *) 0 ;
  LONG arg2 ;
  UCHAR *result = 0 ;
  
  arg1 = (BaseSelect *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (UCHAR *)((BaseSelect const *)arg1)->ToArray(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseSelect_Write(void * jarg1, void * jarg2) {
  BaseSelect *arg1 = (BaseSelect *) 0 ;
  HyperFile *arg2 = (HyperFile *) 0 ;
  
  arg1 = (BaseSelect *)jarg1; 
  arg2 = (HyperFile *)jarg2; 
  (arg1)->Write(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseSelect_Read(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BaseSelect *arg1 = (BaseSelect *) 0 ;
  HyperFile *arg2 = (HyperFile *) 0 ;
  Bool result;
  
  arg1 = (BaseSelect *)jarg1; 
  arg2 = (HyperFile *)jarg2; 
  result = (arg1)->Read(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseSelect_Alloc() {
  void * jresult ;
  BaseSelect *result = 0 ;
  
  result = (BaseSelect *)BaseSelect::Alloc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseSelect_Free(void * jarg1) {
  BaseSelect **arg1 = 0 ;
  
  arg1 = (BaseSelect **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseSelect *& type is null", 0);
    return ;
  } 
  BaseSelect::Free(*arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseSelect_FindSegment(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  BaseSelect *arg1 = (BaseSelect *) 0 ;
  LONG arg2 ;
  LONG *arg3 = (LONG *) 0 ;
  Bool result;
  
  arg1 = (BaseSelect *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG *)jarg3; 
  result = ((BaseSelect const *)arg1)->FindSegment(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseSelect_GetData(void * jarg1) {
  void * jresult ;
  BaseSelect *arg1 = (BaseSelect *) 0 ;
  BaseSelectData *result = 0 ;
  
  arg1 = (BaseSelect *)jarg1; 
  result = (BaseSelectData *)(arg1)->GetData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseSelect_CopyFrom(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  BaseSelect *arg1 = (BaseSelect *) 0 ;
  BaseSelectData *arg2 = (BaseSelectData *) 0 ;
  LONG arg3 ;
  Bool result;
  
  arg1 = (BaseSelect *)jarg1; 
  arg2 = (BaseSelectData *)jarg2; 
  arg3 = (LONG)jarg3; 
  result = (arg1)->CopyFrom(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseSelect_GetDirty(void * jarg1) {
  int jresult ;
  BaseSelect *arg1 = (BaseSelect *) 0 ;
  LONG result;
  
  arg1 = (BaseSelect *)jarg1; 
  result = ((BaseSelect const *)arg1)->GetDirty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseSelect_GetLastElement(void * jarg1) {
  int jresult ;
  BaseSelect *arg1 = (BaseSelect *) 0 ;
  LONG result;
  
  arg1 = (BaseSelect *)jarg1; 
  result = ((BaseSelect const *)arg1)->GetLastElement();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RestoreLayoutSecret_subid_set(void * jarg1, int jarg2) {
  RestoreLayoutSecret *arg1 = (RestoreLayoutSecret *) 0 ;
  LONG arg2 ;
  
  arg1 = (RestoreLayoutSecret *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->subid = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RestoreLayoutSecret_subid_get(void * jarg1) {
  int jresult ;
  RestoreLayoutSecret *arg1 = (RestoreLayoutSecret *) 0 ;
  LONG result;
  
  arg1 = (RestoreLayoutSecret *)jarg1; 
  result =  ((arg1)->subid);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RestoreLayoutSecret() {
  void * jresult ;
  RestoreLayoutSecret *result = 0 ;
  
  result = (RestoreLayoutSecret *)new RestoreLayoutSecret();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RestoreLayoutSecret(void * jarg1) {
  RestoreLayoutSecret *arg1 = (RestoreLayoutSecret *) 0 ;
  
  arg1 = (RestoreLayoutSecret *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PLUGINFLAG_COMMAND_HOTKEY_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 27));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PLUGINFLAG_COMMAND_OPTION_DIALOG_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 26));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PLUGINFLAG_COMMAND_STICKY_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 25));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_COMMANDINFORMATION_get() {
  int jresult ;
  int result;
  
  result = (int)(300001001);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_BODYPAINTEXCHANGE_get() {
  int jresult ;
  int result;
  
  result = (int)(300001002);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommandInformationData_command_id_set(void * jarg1, int jarg2) {
  CommandInformationData *arg1 = (CommandInformationData *) 0 ;
  LONG arg2 ;
  
  arg1 = (CommandInformationData *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->command_id = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CommandInformationData_command_id_get(void * jarg1) {
  int jresult ;
  CommandInformationData *arg1 = (CommandInformationData *) 0 ;
  LONG result;
  
  arg1 = (CommandInformationData *)jarg1; 
  result =  ((arg1)->command_id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommandInformationData_managergroup_set(void * jarg1, int jarg2) {
  CommandInformationData *arg1 = (CommandInformationData *) 0 ;
  LONG arg2 ;
  
  arg1 = (CommandInformationData *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->managergroup = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CommandInformationData_managergroup_get(void * jarg1) {
  int jresult ;
  CommandInformationData *arg1 = (CommandInformationData *) 0 ;
  LONG result;
  
  arg1 = (CommandInformationData *)jarg1; 
  result =  ((arg1)->managergroup);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommandInformationData_parentid_set(void * jarg1, int jarg2) {
  CommandInformationData *arg1 = (CommandInformationData *) 0 ;
  LONG arg2 ;
  
  arg1 = (CommandInformationData *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->parentid = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CommandInformationData_parentid_get(void * jarg1) {
  int jresult ;
  CommandInformationData *arg1 = (CommandInformationData *) 0 ;
  LONG result;
  
  arg1 = (CommandInformationData *)jarg1; 
  result =  ((arg1)->parentid);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CommandInformationData() {
  void * jresult ;
  CommandInformationData *result = 0 ;
  
  result = (CommandInformationData *)new CommandInformationData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CommandInformationData(void * jarg1) {
  CommandInformationData *arg1 = (CommandInformationData *) 0 ;
  
  arg1 = (CommandInformationData *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CommandData_Execute(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  CommandData *arg1 = (CommandData *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  Bool result;
  
  arg1 = (CommandData *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  result = (arg1)->Execute(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CommandData_ExecuteSwigExplicitCommandData(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  CommandData *arg1 = (CommandData *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  Bool result;
  
  arg1 = (CommandData *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  result = (arg1)->CommandData::Execute(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CommandData_ExecuteSubID(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  CommandData *arg1 = (CommandData *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  LONG arg3 ;
  Bool result;
  
  arg1 = (CommandData *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (LONG)jarg3; 
  result = (arg1)->ExecuteSubID(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CommandData_ExecuteSubIDSwigExplicitCommandData(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  CommandData *arg1 = (CommandData *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  LONG arg3 ;
  Bool result;
  
  arg1 = (CommandData *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (LONG)jarg3; 
  result = (arg1)->CommandData::ExecuteSubID(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CommandData_ExecuteOptionID(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  unsigned int jresult ;
  CommandData *arg1 = (CommandData *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  LONG arg3 ;
  LONG arg4 ;
  Bool result;
  
  arg1 = (CommandData *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  result = (arg1)->ExecuteOptionID(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CommandData_ExecuteOptionIDSwigExplicitCommandData(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  unsigned int jresult ;
  CommandData *arg1 = (CommandData *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  LONG arg3 ;
  LONG arg4 ;
  Bool result;
  
  arg1 = (CommandData *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  result = (arg1)->CommandData::ExecuteOptionID(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CommandData_GetState(void * jarg1, void * jarg2) {
  int jresult ;
  CommandData *arg1 = (CommandData *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  LONG result;
  
  arg1 = (CommandData *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  result = (arg1)->GetState(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CommandData_GetStateSwigExplicitCommandData(void * jarg1, void * jarg2) {
  int jresult ;
  CommandData *arg1 = (CommandData *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  LONG result;
  
  arg1 = (CommandData *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  result = (arg1)->CommandData::GetState(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CommandData_GetSubContainer(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  CommandData *arg1 = (CommandData *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  BaseContainer *arg3 = 0 ;
  Bool result;
  
  arg1 = (CommandData *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  result = (arg1)->GetSubContainer(arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CommandData_GetSubContainerSwigExplicitCommandData(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  CommandData *arg1 = (CommandData *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  BaseContainer *arg3 = 0 ;
  Bool result;
  
  arg1 = (CommandData *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  result = (arg1)->CommandData::GetSubContainer(arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CommandData_RestoreLayout(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  CommandData *arg1 = (CommandData *) 0 ;
  void *arg2 = (void *) 0 ;
  Bool result;
  
  arg1 = (CommandData *)jarg1; 
  arg2 = (void *)jarg2; 
  result = (arg1)->RestoreLayout(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CommandData_RestoreLayoutSwigExplicitCommandData(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  CommandData *arg1 = (CommandData *) 0 ;
  void *arg2 = (void *) 0 ;
  Bool result;
  
  arg1 = (CommandData *)jarg1; 
  arg2 = (void *)jarg2; 
  result = (arg1)->CommandData::RestoreLayout(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * /* String_ctype */ SWIGSTDCALL CSharp_CommandData_GetScriptName(void * jarg1) {
  char * /* String_ctype */ jresult ;
  CommandData *arg1 = (CommandData *) 0 ;
  String result;
  
  arg1 = (CommandData *)jarg1; 
  result = (arg1)->GetScriptName();
  /* <String_out> */ 
  jresult = SWIG_csharp_string_callback((&result)->GetCStringCopy()); 
  /* </String_out> */
  return jresult;
}


SWIGEXPORT char * /* String_ctype */ SWIGSTDCALL CSharp_CommandData_GetScriptNameSwigExplicitCommandData(void * jarg1) {
  char * /* String_ctype */ jresult ;
  CommandData *arg1 = (CommandData *) 0 ;
  String result;
  
  arg1 = (CommandData *)jarg1; 
  result = (arg1)->CommandData::GetScriptName();
  /* <String_out> */ 
  jresult = SWIG_csharp_string_callback((&result)->GetCStringCopy()); 
  /* </String_out> */
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CommandData_Message(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  CommandData *arg1 = (CommandData *) 0 ;
  LONG arg2 ;
  void *arg3 = (void *) 0 ;
  Bool result;
  
  arg1 = (CommandData *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (void *)jarg3; 
  result = (arg1)->Message(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CommandData_MessageSwigExplicitCommandData(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  CommandData *arg1 = (CommandData *) 0 ;
  LONG arg2 ;
  void *arg3 = (void *) 0 ;
  Bool result;
  
  arg1 = (CommandData *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (void *)jarg3; 
  result = (arg1)->CommandData::Message(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CommandData() {
  void * jresult ;
  CommandData *result = 0 ;
  
  result = (CommandData *)new SwigDirector_CommandData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CommandData(void * jarg1) {
  CommandData *arg1 = (CommandData *) 0 ;
  
  arg1 = (CommandData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CommandData_director_connect(void *objarg, SwigDirector_CommandData::SWIG_Callback0_t callback0, SwigDirector_CommandData::SWIG_Callback1_t callback1, SwigDirector_CommandData::SWIG_Callback2_t callback2, SwigDirector_CommandData::SWIG_Callback3_t callback3, SwigDirector_CommandData::SWIG_Callback4_t callback4, SwigDirector_CommandData::SWIG_Callback5_t callback5, SwigDirector_CommandData::SWIG_Callback6_t callback6, SwigDirector_CommandData::SWIG_Callback7_t callback7) {
  CommandData *obj = (CommandData *)objarg;
  SwigDirector_CommandData *director = dynamic_cast<SwigDirector_CommandData *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7);
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RegisterCommandPlugin(int jarg1, char * /* constString&_ctype */ jarg2, int jarg3, void * jarg4, char * /* constString&_ctype */ jarg5, void * jarg6) {
  unsigned int jresult ;
  LONG arg1 ;
  String *arg2 = 0 ;
  LONG arg3 ;
  BaseBitmap *arg4 = (BaseBitmap *) 0 ;
  String *arg5 = 0 ;
  CommandData *arg6 = (CommandData *) 0 ;
  Bool result;
  
  arg1 = (LONG)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (LONG)jarg3; 
  arg4 = (BaseBitmap *)jarg4; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg5_str(jarg5);
  arg5 = &arg5_str; 
  arg6 = (CommandData *)jarg6; 
  result = RegisterCommandPlugin(arg1,(String const &)*arg2,arg3,arg4,(String const &)*arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RegisterManagerInformation(int jarg1, char * /* constString&_ctype */ jarg2, int jarg3) {
  unsigned int jresult ;
  LONG arg1 ;
  String *arg2 = 0 ;
  LONG arg3 ;
  Bool result;
  
  arg1 = (LONG)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (LONG)jarg3; 
  result = RegisterManagerInformation(arg1,(String const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MirrorTransformData_m_Mp_set(void * jarg1, Vector /* Vector_ctype */ jarg2) {
  MirrorTransformData *arg1 = (MirrorTransformData *) 0 ;
  Vector arg2 ;
  
  arg1 = (MirrorTransformData *)jarg1; 
  
  /* <Vector_in> */
  arg2 = *((Vector *)&(jarg2));
  /* </Vector_in> */
  
  if (arg1) (arg1)->m_Mp = arg2;
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_MirrorTransformData_m_Mp_get(void * jarg1) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  MirrorTransformData *arg1 = (MirrorTransformData *) 0 ;
  Vector result;
  
  arg1 = (MirrorTransformData *)jarg1; 
  result =  ((arg1)->m_Mp);
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MirrorTransformData_m_Mn_set(void * jarg1, Vector /* Vector_ctype */ jarg2) {
  MirrorTransformData *arg1 = (MirrorTransformData *) 0 ;
  Vector arg2 ;
  
  arg1 = (MirrorTransformData *)jarg1; 
  
  /* <Vector_in> */
  arg2 = *((Vector *)&(jarg2));
  /* </Vector_in> */
  
  if (arg1) (arg1)->m_Mn = arg2;
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_MirrorTransformData_m_Mn_get(void * jarg1) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  MirrorTransformData *arg1 = (MirrorTransformData *) 0 ;
  Vector result;
  
  arg1 = (MirrorTransformData *)jarg1; 
  result =  ((arg1)->m_Mn);
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MirrorTransformData_m_Mg_set(void * jarg1, Matrix_POD /* Matrix_ctype */ jarg2) {
  MirrorTransformData *arg1 = (MirrorTransformData *) 0 ;
  Matrix arg2 ;
  
  arg1 = (MirrorTransformData *)jarg1; 
  /* <Matrix_in> */ 
  arg2 = *((Matrix *)(&jarg2)); 
  /* </Matrix_in> */
  if (arg1) (arg1)->m_Mg = arg2;
}


SWIGEXPORT Matrix_POD /* Matrix_ctype */ SWIGSTDCALL CSharp_MirrorTransformData_m_Mg_get(void * jarg1) {
  Matrix_POD /* Matrix_ctype */ jresult ;
  MirrorTransformData *arg1 = (MirrorTransformData *) 0 ;
  Matrix result;
  
  arg1 = (MirrorTransformData *)jarg1; 
  result =  ((arg1)->m_Mg);
  /* <Matrix_out> */ 
  jresult = *((Matrix_POD *)(&result)); 
  /* </Matrix_out> */
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MirrorTransformData_m_Mi_set(void * jarg1, Matrix_POD /* Matrix_ctype */ jarg2) {
  MirrorTransformData *arg1 = (MirrorTransformData *) 0 ;
  Matrix arg2 ;
  
  arg1 = (MirrorTransformData *)jarg1; 
  /* <Matrix_in> */ 
  arg2 = *((Matrix *)(&jarg2)); 
  /* </Matrix_in> */
  if (arg1) (arg1)->m_Mi = arg2;
}


SWIGEXPORT Matrix_POD /* Matrix_ctype */ SWIGSTDCALL CSharp_MirrorTransformData_m_Mi_get(void * jarg1) {
  Matrix_POD /* Matrix_ctype */ jresult ;
  MirrorTransformData *arg1 = (MirrorTransformData *) 0 ;
  Matrix result;
  
  arg1 = (MirrorTransformData *)jarg1; 
  result =  ((arg1)->m_Mi);
  /* <Matrix_out> */ 
  jresult = *((Matrix_POD *)(&result)); 
  /* </Matrix_out> */
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MirrorTransformData_m_pData_set(void * jarg1, void * jarg2) {
  MirrorTransformData *arg1 = (MirrorTransformData *) 0 ;
  BaseContainer *arg2 = (BaseContainer *) 0 ;
  
  arg1 = (MirrorTransformData *)jarg1; 
  arg2 = (BaseContainer *)jarg2; 
  if (arg1) (arg1)->m_pData = (BaseContainer const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MirrorTransformData_m_pData_get(void * jarg1) {
  void * jresult ;
  MirrorTransformData *arg1 = (MirrorTransformData *) 0 ;
  BaseContainer *result = 0 ;
  
  arg1 = (MirrorTransformData *)jarg1; 
  result = (BaseContainer *) ((arg1)->m_pData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MirrorTransformData() {
  void * jresult ;
  MirrorTransformData *result = 0 ;
  
  result = (MirrorTransformData *)new MirrorTransformData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MirrorTransformData(void * jarg1) {
  MirrorTransformData *arg1 = (MirrorTransformData *) 0 ;
  
  arg1 = (MirrorTransformData *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSG_MIRROR_TRANSFORM_get() {
  int jresult ;
  int result;
  
  result = (int)(1025416);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MIRROR_TRANSFORM_CONTAINER_get() {
  int jresult ;
  int result;
  
  result = (int)(1025418);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MIRROR_TRANSFORM_CONTAINER_MATRIX_get() {
  int jresult ;
  int result;
  
  result = (int)(1000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MIRROR_TRANSFORM_CONTAINER_SOURCE_get() {
  int jresult ;
  int result;
  
  result = (int)(1001);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MIRROR_TRANSFORM_CONTAINER_LMATRIXN_get() {
  int jresult ;
  int result;
  
  result = (int)(1002);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MIRROR_TRANSFORM_CONTAINER_LMATRIX_get() {
  int jresult ;
  int result;
  
  result = (int)(1003);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MIRROR_TRANSFORM_CONTAINER_FMATRIX_get() {
  int jresult ;
  int result;
  
  result = (int)(1004);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MIRROR_TRANSFORM_CONTAINER_POS_get() {
  int jresult ;
  int result;
  
  result = (int)(1005);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MIRROR_TRANSFORM_CONTAINER_ROT_get() {
  int jresult ;
  int result;
  
  result = (int)(1006);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MIRROR_TRANSFORM_CONTAINER_SCL_get() {
  int jresult ;
  int result;
  
  result = (int)(1007);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MIRROR_TRANSFORM_CONTAINER_FPOS_get() {
  int jresult ;
  int result;
  
  result = (int)(1008);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MIRROR_TRANSFORM_CONTAINER_FROT_get() {
  int jresult ;
  int result;
  
  result = (int)(1009);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MIRROR_TRANSFORM_CONTAINER_FSCL_get() {
  int jresult ;
  int result;
  
  result = (int)(1010);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_JointRestState() {
  void * jresult ;
  JointRestState *result = 0 ;
  
  result = (JointRestState *)new JointRestState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_JointRestState_m_bMg_set(void * jarg1, Matrix_POD /* Matrix_ctype */ jarg2) {
  JointRestState *arg1 = (JointRestState *) 0 ;
  Matrix arg2 ;
  
  arg1 = (JointRestState *)jarg1; 
  /* <Matrix_in> */ 
  arg2 = *((Matrix *)(&jarg2)); 
  /* </Matrix_in> */
  if (arg1) (arg1)->m_bMg = arg2;
}


SWIGEXPORT Matrix_POD /* Matrix_ctype */ SWIGSTDCALL CSharp_JointRestState_m_bMg_get(void * jarg1) {
  Matrix_POD /* Matrix_ctype */ jresult ;
  JointRestState *arg1 = (JointRestState *) 0 ;
  Matrix result;
  
  arg1 = (JointRestState *)jarg1; 
  result =  ((arg1)->m_bMg);
  /* <Matrix_out> */ 
  jresult = *((Matrix_POD *)(&result)); 
  /* </Matrix_out> */
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_JointRestState_m_bMi_set(void * jarg1, Matrix_POD /* Matrix_ctype */ jarg2) {
  JointRestState *arg1 = (JointRestState *) 0 ;
  Matrix arg2 ;
  
  arg1 = (JointRestState *)jarg1; 
  /* <Matrix_in> */ 
  arg2 = *((Matrix *)(&jarg2)); 
  /* </Matrix_in> */
  if (arg1) (arg1)->m_bMi = arg2;
}


SWIGEXPORT Matrix_POD /* Matrix_ctype */ SWIGSTDCALL CSharp_JointRestState_m_bMi_get(void * jarg1) {
  Matrix_POD /* Matrix_ctype */ jresult ;
  JointRestState *arg1 = (JointRestState *) 0 ;
  Matrix result;
  
  arg1 = (JointRestState *)jarg1; 
  result =  ((arg1)->m_bMi);
  /* <Matrix_out> */ 
  jresult = *((Matrix_POD *)(&result)); 
  /* </Matrix_out> */
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_JointRestState_m_oMg_set(void * jarg1, Matrix_POD /* Matrix_ctype */ jarg2) {
  JointRestState *arg1 = (JointRestState *) 0 ;
  Matrix arg2 ;
  
  arg1 = (JointRestState *)jarg1; 
  /* <Matrix_in> */ 
  arg2 = *((Matrix *)(&jarg2)); 
  /* </Matrix_in> */
  if (arg1) (arg1)->m_oMg = arg2;
}


SWIGEXPORT Matrix_POD /* Matrix_ctype */ SWIGSTDCALL CSharp_JointRestState_m_oMg_get(void * jarg1) {
  Matrix_POD /* Matrix_ctype */ jresult ;
  JointRestState *arg1 = (JointRestState *) 0 ;
  Matrix result;
  
  arg1 = (JointRestState *)jarg1; 
  result =  ((arg1)->m_oMg);
  /* <Matrix_out> */ 
  jresult = *((Matrix_POD *)(&result)); 
  /* </Matrix_out> */
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_JointRestState_m_oMi_set(void * jarg1, Matrix_POD /* Matrix_ctype */ jarg2) {
  JointRestState *arg1 = (JointRestState *) 0 ;
  Matrix arg2 ;
  
  arg1 = (JointRestState *)jarg1; 
  /* <Matrix_in> */ 
  arg2 = *((Matrix *)(&jarg2)); 
  /* </Matrix_in> */
  if (arg1) (arg1)->m_oMi = arg2;
}


SWIGEXPORT Matrix_POD /* Matrix_ctype */ SWIGSTDCALL CSharp_JointRestState_m_oMi_get(void * jarg1) {
  Matrix_POD /* Matrix_ctype */ jresult ;
  JointRestState *arg1 = (JointRestState *) 0 ;
  Matrix result;
  
  arg1 = (JointRestState *)jarg1; 
  result =  ((arg1)->m_oMi);
  /* <Matrix_out> */ 
  jresult = *((Matrix_POD *)(&result)); 
  /* </Matrix_out> */
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_JointRestState_m_Len_set(void * jarg1, double jarg2) {
  JointRestState *arg1 = (JointRestState *) 0 ;
  Real arg2 ;
  
  arg1 = (JointRestState *)jarg1; 
  arg2 = (Real)jarg2; 
  if (arg1) (arg1)->m_Len = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_JointRestState_m_Len_get(void * jarg1) {
  double jresult ;
  JointRestState *arg1 = (JointRestState *) 0 ;
  Real result;
  
  arg1 = (JointRestState *)jarg1; 
  result =  ((arg1)->m_Len);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_JointRestState(void * jarg1) {
  JointRestState *arg1 = (JointRestState *) 0 ;
  
  arg1 = (JointRestState *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAJointObject_Alloc() {
  void * jresult ;
  CAJointObject *result = 0 ;
  
  result = (CAJointObject *)CAJointObject::Alloc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAJointObject_Free(void * jarg1) {
  CAJointObject **arg1 = 0 ;
  
  arg1 = (CAJointObject **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CAJointObject *& type is null", 0);
    return ;
  } 
  CAJointObject::Free(*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAJointObject_GetBone(void * jarg1, void * jarg2, void * jarg3) {
  CAJointObject *arg1 = (CAJointObject *) 0 ;
  Matrix *arg2 = 0 ;
  Real *arg3 = 0 ;
  
  arg1 = (CAJointObject *)jarg1; 
  arg2 = (Matrix *)jarg2; /* Matrix*&_in */
  arg3 = (Real *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Real & type is null", 0);
    return ;
  } 
  (arg1)->GetBone(*arg2,*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAJointObject_GetWeightTag(void * jarg1, void * jarg2) {
  void * jresult ;
  CAJointObject *arg1 = (CAJointObject *) 0 ;
  LONG *arg2 = 0 ;
  CAWeightTag *result = 0 ;
  
  arg1 = (CAJointObject *)jarg1; 
  arg2 = (LONG *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  result = (CAWeightTag *)(arg1)->GetWeightTag(*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAWeightTag_Alloc() {
  void * jresult ;
  CAWeightTag *result = 0 ;
  
  result = (CAWeightTag *)CAWeightTag::Alloc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAWeightTag_Free(void * jarg1) {
  CAWeightTag **arg1 = 0 ;
  
  arg1 = (CAWeightTag **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CAWeightTag *& type is null", 0);
    return ;
  } 
  CAWeightTag::Free(*arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAWeightTag_GetJoint(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  CAWeightTag *arg1 = (CAWeightTag *) 0 ;
  LONG arg2 ;
  BaseDocument *arg3 = (BaseDocument *) 0 ;
  BaseObject *result = 0 ;
  
  arg1 = (CAWeightTag *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (BaseDocument *)jarg3; 
  result = (BaseObject *)(arg1)->GetJoint(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CAWeightTag_GetJointCount(void * jarg1) {
  int jresult ;
  CAWeightTag *arg1 = (CAWeightTag *) 0 ;
  LONG result;
  
  arg1 = (CAWeightTag *)jarg1; 
  result = (arg1)->GetJointCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CAWeightTag_FindJoint(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  CAWeightTag *arg1 = (CAWeightTag *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  BaseDocument *arg3 = (BaseDocument *) 0 ;
  LONG result;
  
  arg1 = (CAWeightTag *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  arg3 = (BaseDocument *)jarg3; 
  result = (arg1)->FindJoint(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAWeightTag_GetJointRestState(void * jarg1, int jarg2) {
  void * jresult ;
  CAWeightTag *arg1 = (CAWeightTag *) 0 ;
  LONG arg2 ;
  JointRestState result;
  
  arg1 = (CAWeightTag *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (arg1)->GetJointRestState(arg2);
  jresult = new JointRestState((const JointRestState &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAWeightTag_SetJointRestState(void * jarg1, int jarg2, void * jarg3) {
  CAWeightTag *arg1 = (CAWeightTag *) 0 ;
  LONG arg2 ;
  JointRestState *arg3 = 0 ;
  
  arg1 = (CAWeightTag *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (JointRestState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "JointRestState const & type is null", 0);
    return ;
  } 
  (arg1)->SetJointRestState(arg2,(JointRestState const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAWeightTag_GetWeightMap(void * jarg1, int jarg2, void * jarg3, int jarg4) {
  CAWeightTag *arg1 = (CAWeightTag *) 0 ;
  LONG arg2 ;
  SReal *arg3 = (SReal *) 0 ;
  LONG arg4 ;
  
  arg1 = (CAWeightTag *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (SReal *)jarg3; 
  arg4 = (LONG)jarg4; 
  (arg1)->GetWeightMap(arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CAWeightTag_SetWeightMap(void * jarg1, int jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  CAWeightTag *arg1 = (CAWeightTag *) 0 ;
  LONG arg2 ;
  SReal *arg3 = (SReal *) 0 ;
  LONG arg4 ;
  Bool result;
  
  arg1 = (CAWeightTag *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (SReal *)jarg3; 
  arg4 = (LONG)jarg4; 
  result = (arg1)->SetWeightMap(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CAWeightTag_GetWeightCount(void * jarg1, int jarg2) {
  int jresult ;
  CAWeightTag *arg1 = (CAWeightTag *) 0 ;
  LONG arg2 ;
  LONG result;
  
  arg1 = (CAWeightTag *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (arg1)->GetWeightCount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAWeightTag_GetIndexWeight(void * jarg1, int jarg2, int jarg3, void * jarg4, void * jarg5) {
  CAWeightTag *arg1 = (CAWeightTag *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  LONG *arg4 = 0 ;
  Real *arg5 = 0 ;
  
  arg1 = (CAWeightTag *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return ;
  } 
  arg5 = (Real *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Real & type is null", 0);
    return ;
  } 
  (arg1)->GetIndexWeight(arg2,arg3,*arg4,*arg5);
}


SWIGEXPORT double SWIGSTDCALL CSharp_CAWeightTag_GetWeight(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  CAWeightTag *arg1 = (CAWeightTag *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  Real result;
  
  arg1 = (CAWeightTag *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  result = (arg1)->GetWeight(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CAWeightTag_SetWeight(void * jarg1, int jarg2, int jarg3, double jarg4) {
  unsigned int jresult ;
  CAWeightTag *arg1 = (CAWeightTag *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  Real arg4 ;
  Bool result;
  
  arg1 = (CAWeightTag *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (Real)jarg4; 
  result = (arg1)->SetWeight(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAWeightTag_GetWeightDirty(void * jarg1) {
  void * jresult ;
  CAWeightTag *arg1 = (CAWeightTag *) 0 ;
  ULONG result;
  
  arg1 = (CAWeightTag *)jarg1; 
  result = (arg1)->GetWeightDirty();
  jresult = new ULONG((const ULONG &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAWeightTag_WeightDirty(void * jarg1) {
  CAWeightTag *arg1 = (CAWeightTag *) 0 ;
  
  arg1 = (CAWeightTag *)jarg1; 
  (arg1)->WeightDirty();
}


SWIGEXPORT Matrix_POD /* Matrix_ctype */ SWIGSTDCALL CSharp_CAWeightTag_GetGeomMg(void * jarg1) {
  Matrix_POD /* Matrix_ctype */ jresult ;
  CAWeightTag *arg1 = (CAWeightTag *) 0 ;
  Matrix result;
  
  arg1 = (CAWeightTag *)jarg1; 
  result = (arg1)->GetGeomMg();
  /* <Matrix_out> */ 
  jresult = *((Matrix_POD *)(&result)); 
  /* </Matrix_out> */
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAWeightTag_SetGeomMg(void * jarg1, void * jarg2) {
  CAWeightTag *arg1 = (CAWeightTag *) 0 ;
  Matrix *arg2 = 0 ;
  
  arg1 = (CAWeightTag *)jarg1; 
  arg2 = (Matrix *)jarg2; /* constMatrix&_in */
  (arg1)->SetGeomMg((Matrix const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CAWeightTag_AddJoint(void * jarg1, void * jarg2) {
  int jresult ;
  CAWeightTag *arg1 = (CAWeightTag *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  LONG result;
  
  arg1 = (CAWeightTag *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  result = (arg1)->AddJoint(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAWeightTag_RemoveJoint(void * jarg1, void * jarg2) {
  CAWeightTag *arg1 = (CAWeightTag *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  
  arg1 = (CAWeightTag *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  (arg1)->RemoveJoint(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAWeightTag_CalculateBoneStates(void * jarg1, int jarg2) {
  CAWeightTag *arg1 = (CAWeightTag *) 0 ;
  LONG arg2 ;
  
  arg1 = (CAWeightTag *)jarg1; 
  arg2 = (LONG)jarg2; 
  (arg1)->CalculateBoneStates(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CAWeightTag_TransferWeightMap(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5, int jarg6, int jarg7, void * jarg8) {
  unsigned int jresult ;
  CAWeightTag *arg1 = (CAWeightTag *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  CAWeightTag *arg3 = (CAWeightTag *) 0 ;
  LONG arg4 ;
  LONG arg5 ;
  LONG arg6 ;
  LONG arg7 ;
  AliasTrans *arg8 = (AliasTrans *) 0 ;
  Bool result;
  
  arg1 = (CAWeightTag *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (CAWeightTag *)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (LONG)jarg6; 
  arg7 = (LONG)jarg7; 
  arg8 = (AliasTrans *)jarg8; 
  result = (arg1)->TransferWeightMap(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAMorphNode_GetNext(void * jarg1) {
  void * jresult ;
  CAMorphNode *arg1 = (CAMorphNode *) 0 ;
  CAMorphNode *result = 0 ;
  
  arg1 = (CAMorphNode *)jarg1; 
  result = (CAMorphNode *)(arg1)->GetNext();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAMorphNode_GetPrev(void * jarg1) {
  void * jresult ;
  CAMorphNode *arg1 = (CAMorphNode *) 0 ;
  CAMorphNode *result = 0 ;
  
  arg1 = (CAMorphNode *)jarg1; 
  result = (CAMorphNode *)(arg1)->GetPrev();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAMorphNode_GetUp(void * jarg1) {
  void * jresult ;
  CAMorphNode *arg1 = (CAMorphNode *) 0 ;
  CAMorphNode *result = 0 ;
  
  arg1 = (CAMorphNode *)jarg1; 
  result = (CAMorphNode *)(arg1)->GetUp();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAMorphNode_GetDown(void * jarg1) {
  void * jresult ;
  CAMorphNode *arg1 = (CAMorphNode *) 0 ;
  CAMorphNode *result = 0 ;
  
  arg1 = (CAMorphNode *)jarg1; 
  result = (CAMorphNode *)(arg1)->GetDown();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAMorphNode_GetLink(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  CAMorphNode *arg1 = (CAMorphNode *) 0 ;
  CAPoseMorphTag *arg2 = (CAPoseMorphTag *) 0 ;
  CAMorph *arg3 = (CAMorph *) 0 ;
  BaseDocument *arg4 = (BaseDocument *) 0 ;
  BaseList2D *result = 0 ;
  
  arg1 = (CAMorphNode *)jarg1; 
  arg2 = (CAPoseMorphTag *)jarg2; 
  arg3 = (CAMorph *)jarg3; 
  arg4 = (BaseDocument *)jarg4; 
  result = (BaseList2D *)(arg1)->GetLink(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CAMorphNode_GetInfo(void * jarg1) {
  int jresult ;
  CAMorphNode *arg1 = (CAMorphNode *) 0 ;
  CAMORPH_DATA_FLAGS result;
  
  arg1 = (CAMorphNode *)jarg1; 
  result = (CAMORPH_DATA_FLAGS)(arg1)->GetInfo();
  jresult = result; 
  return jresult;
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_CAMorphNode_GetP(void * jarg1) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  CAMorphNode *arg1 = (CAMorphNode *) 0 ;
  Vector result;
  
  arg1 = (CAMorphNode *)jarg1; 
  result = (arg1)->GetP();
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_CAMorphNode_GetS(void * jarg1) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  CAMorphNode *arg1 = (CAMorphNode *) 0 ;
  Vector result;
  
  arg1 = (CAMorphNode *)jarg1; 
  result = (arg1)->GetS();
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_CAMorphNode_GetR(void * jarg1) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  CAMorphNode *arg1 = (CAMorphNode *) 0 ;
  Vector result;
  
  arg1 = (CAMorphNode *)jarg1; 
  result = (arg1)->GetR();
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAMorphNode_SetP(void * jarg1, void * jarg2) {
  CAMorphNode *arg1 = (CAMorphNode *) 0 ;
  Vector *arg2 = 0 ;
  
  arg1 = (CAMorphNode *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  (arg1)->SetP((Vector const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAMorphNode_SetS(void * jarg1, void * jarg2) {
  CAMorphNode *arg1 = (CAMorphNode *) 0 ;
  Vector *arg2 = 0 ;
  
  arg1 = (CAMorphNode *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  (arg1)->SetS((Vector const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAMorphNode_SetR(void * jarg1, void * jarg2) {
  CAMorphNode *arg1 = (CAMorphNode *) 0 ;
  Vector *arg2 = 0 ;
  
  arg1 = (CAMorphNode *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  (arg1)->SetR((Vector const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CAMorphNode_GetPointCount(void * jarg1) {
  int jresult ;
  CAMorphNode *arg1 = (CAMorphNode *) 0 ;
  LONG result;
  
  arg1 = (CAMorphNode *)jarg1; 
  result = (arg1)->GetPointCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CAMorphNode_SetPointCount(void * jarg1, int jarg2) {
  unsigned int jresult ;
  CAMorphNode *arg1 = (CAMorphNode *) 0 ;
  LONG arg2 ;
  Bool result;
  
  arg1 = (CAMorphNode *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (arg1)->SetPointCount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_CAMorphNode_GetPoint(void * jarg1, int jarg2) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  CAMorphNode *arg1 = (CAMorphNode *) 0 ;
  LONG arg2 ;
  Vector result;
  
  arg1 = (CAMorphNode *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (arg1)->GetPoint(arg2);
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAMorphNode_SetPoint(void * jarg1, int jarg2, void * jarg3) {
  CAMorphNode *arg1 = (CAMorphNode *) 0 ;
  LONG arg2 ;
  Vector *arg3 = 0 ;
  
  arg1 = (CAMorphNode *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (Vector *)jarg3; /* Vector*&_in */
  (arg1)->SetPoint(arg2,(Vector const &)*arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CAMorphNode_GetTangentCount(void * jarg1) {
  int jresult ;
  CAMorphNode *arg1 = (CAMorphNode *) 0 ;
  LONG result;
  
  arg1 = (CAMorphNode *)jarg1; 
  result = (arg1)->GetTangentCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CAMorphNode_SetTangentCount(void * jarg1, int jarg2) {
  unsigned int jresult ;
  CAMorphNode *arg1 = (CAMorphNode *) 0 ;
  LONG arg2 ;
  Bool result;
  
  arg1 = (CAMorphNode *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (arg1)->SetTangentCount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_CAMorphNode_GetTangent(void * jarg1, int jarg2) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  CAMorphNode *arg1 = (CAMorphNode *) 0 ;
  LONG arg2 ;
  Vector result;
  
  arg1 = (CAMorphNode *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (arg1)->GetTangent(arg2);
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAMorphNode_SetTangent(void * jarg1, int jarg2, void * jarg3) {
  CAMorphNode *arg1 = (CAMorphNode *) 0 ;
  LONG arg2 ;
  Vector *arg3 = 0 ;
  
  arg1 = (CAMorphNode *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (Vector *)jarg3; /* Vector*&_in */
  (arg1)->SetTangent(arg2,(Vector const &)*arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CAMorphNode_GetVertexMapTagCount(void * jarg1) {
  int jresult ;
  CAMorphNode *arg1 = (CAMorphNode *) 0 ;
  LONG result;
  
  arg1 = (CAMorphNode *)jarg1; 
  result = (arg1)->GetVertexMapTagCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CAMorphNode_GetVertexMapCount(void * jarg1, int jarg2) {
  int jresult ;
  CAMorphNode *arg1 = (CAMorphNode *) 0 ;
  LONG arg2 ;
  LONG result;
  
  arg1 = (CAMorphNode *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (arg1)->GetVertexMapCount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CAMorphNode_SetVertexMapCount(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  CAMorphNode *arg1 = (CAMorphNode *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  Bool result;
  
  arg1 = (CAMorphNode *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  result = (arg1)->SetVertexMapCount(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CAMorphNode_GetVertexMap(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  CAMorphNode *arg1 = (CAMorphNode *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  Real result;
  
  arg1 = (CAMorphNode *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  result = (arg1)->GetVertexMap(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAMorphNode_SetVertexMap(void * jarg1, int jarg2, int jarg3, double jarg4) {
  CAMorphNode *arg1 = (CAMorphNode *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  Real arg4 ;
  
  arg1 = (CAMorphNode *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (Real)jarg4; 
  (arg1)->SetVertexMap(arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CAMorphNode_GetParamCount(void * jarg1) {
  int jresult ;
  CAMorphNode *arg1 = (CAMorphNode *) 0 ;
  LONG result;
  
  arg1 = (CAMorphNode *)jarg1; 
  result = (arg1)->GetParamCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CAMorphNode_SetParamCount(void * jarg1, int jarg2) {
  unsigned int jresult ;
  CAMorphNode *arg1 = (CAMorphNode *) 0 ;
  LONG arg2 ;
  Bool result;
  
  arg1 = (CAMorphNode *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (arg1)->SetParamCount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CAMorphNode_GetParam(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  CAMorphNode *arg1 = (CAMorphNode *) 0 ;
  LONG arg2 ;
  GeData *arg3 = 0 ;
  DescID *arg4 = 0 ;
  Bool result;
  
  arg1 = (CAMorphNode *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (GeData *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeData & type is null", 0);
    return 0;
  } 
  arg4 = (DescID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescID & type is null", 0);
    return 0;
  } 
  result = (arg1)->GetParam(arg2,*arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAMorphNode_SetParam(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  CAMorphNode *arg1 = (CAMorphNode *) 0 ;
  LONG arg2 ;
  GeData *arg3 = 0 ;
  DescID *arg4 = 0 ;
  
  arg1 = (CAMorphNode *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (GeData *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeData const & type is null", 0);
    return ;
  } 
  arg4 = (DescID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescID const & type is null", 0);
    return ;
  } 
  (arg1)->SetParam(arg2,(GeData const &)*arg3,(DescID const &)*arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CAMorphNode_GetUVTagCount(void * jarg1) {
  int jresult ;
  CAMorphNode *arg1 = (CAMorphNode *) 0 ;
  LONG result;
  
  arg1 = (CAMorphNode *)jarg1; 
  result = (arg1)->GetUVTagCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CAMorphNode_GetUVCount(void * jarg1, int jarg2) {
  int jresult ;
  CAMorphNode *arg1 = (CAMorphNode *) 0 ;
  LONG arg2 ;
  LONG result;
  
  arg1 = (CAMorphNode *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (arg1)->GetUVCount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CAMorphNode_SetUVCount(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  CAMorphNode *arg1 = (CAMorphNode *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  Bool result;
  
  arg1 = (CAMorphNode *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  result = (arg1)->SetUVCount(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAMorphNode_GetUV(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  CAMorphNode *arg1 = (CAMorphNode *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  UVWStruct *arg4 = 0 ;
  
  arg1 = (CAMorphNode *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (UVWStruct *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UVWStruct & type is null", 0);
    return ;
  } 
  (arg1)->GetUV(arg2,arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAMorphNode_SetUV(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  CAMorphNode *arg1 = (CAMorphNode *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  UVWStruct *arg4 = 0 ;
  
  arg1 = (CAMorphNode *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (UVWStruct *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UVWStruct const & type is null", 0);
    return ;
  } 
  (arg1)->SetUV(arg2,arg3,(UVWStruct const &)*arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CAMorphNode_GetWeightMapTagCount(void * jarg1) {
  int jresult ;
  CAMorphNode *arg1 = (CAMorphNode *) 0 ;
  LONG result;
  
  arg1 = (CAMorphNode *)jarg1; 
  result = (arg1)->GetWeightMapTagCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CAMorphNode_GetWeightMapJointCount(void * jarg1, int jarg2) {
  int jresult ;
  CAMorphNode *arg1 = (CAMorphNode *) 0 ;
  LONG arg2 ;
  LONG result;
  
  arg1 = (CAMorphNode *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (arg1)->GetWeightMapJointCount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CAMorphNode_GetWeightMapCount(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  CAMorphNode *arg1 = (CAMorphNode *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  LONG result;
  
  arg1 = (CAMorphNode *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  result = (arg1)->GetWeightMapCount(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CAMorphNode_SetWeightMapCount(void * jarg1, int jarg2, int jarg3, int jarg4) {
  unsigned int jresult ;
  CAMorphNode *arg1 = (CAMorphNode *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  LONG arg4 ;
  Bool result;
  
  arg1 = (CAMorphNode *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  result = (arg1)->SetWeightMapCount(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CAMorphNode_GetWeightMap(void * jarg1, int jarg2, int jarg3, int jarg4) {
  double jresult ;
  CAMorphNode *arg1 = (CAMorphNode *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  LONG arg4 ;
  Real result;
  
  arg1 = (CAMorphNode *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  result = (arg1)->GetWeightMap(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAMorphNode_SetWeightMap(void * jarg1, int jarg2, int jarg3, int jarg4, double jarg5) {
  CAMorphNode *arg1 = (CAMorphNode *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  LONG arg4 ;
  Real arg5 ;
  
  arg1 = (CAMorphNode *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (Real)jarg5; 
  (arg1)->SetWeightMap(arg2,arg3,arg4,arg5);
}


SWIGEXPORT char * /* String_ctype */ SWIGSTDCALL CSharp_CAMorph_GetName(void * jarg1) {
  char * /* String_ctype */ jresult ;
  CAMorph *arg1 = (CAMorph *) 0 ;
  String result;
  
  arg1 = (CAMorph *)jarg1; 
  result = (arg1)->GetName();
  /* <String_out> */ 
  jresult = SWIG_csharp_string_callback((&result)->GetCStringCopy()); 
  /* </String_out> */
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAMorph_SetName(void * jarg1, char * /* constString&_ctype */ jarg2) {
  CAMorph *arg1 = (CAMorph *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (CAMorph *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  String arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->SetName((String const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CAMorph_GetID(void * jarg1) {
  int jresult ;
  CAMorph *arg1 = (CAMorph *) 0 ;
  LONG result;
  
  arg1 = (CAMorph *)jarg1; 
  result = (arg1)->GetID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CAMorph_CopyFrom(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  CAMorph *arg1 = (CAMorph *) 0 ;
  CAMorph *arg2 = (CAMorph *) 0 ;
  AliasTrans *arg3 = (AliasTrans *) 0 ;
  CAMORPH_COPY_FLAGS arg4 ;
  Bool result;
  
  arg1 = (CAMorph *)jarg1; 
  arg2 = (CAMorph *)jarg2; 
  arg3 = (AliasTrans *)jarg3; 
  arg4 = (CAMORPH_COPY_FLAGS)jarg4; 
  result = (arg1)->CopyFrom(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAMorph_Find(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  CAMorph *arg1 = (CAMorph *) 0 ;
  CAPoseMorphTag *arg2 = (CAPoseMorphTag *) 0 ;
  BaseList2D *arg3 = (BaseList2D *) 0 ;
  CAMorphNode *result = 0 ;
  
  arg1 = (CAMorph *)jarg1; 
  arg2 = (CAPoseMorphTag *)jarg2; 
  arg3 = (BaseList2D *)jarg3; 
  result = (CAMorphNode *)(arg1)->Find(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CAMorph_GetNodeIndex(void * jarg1, void * jarg2) {
  int jresult ;
  CAMorph *arg1 = (CAMorph *) 0 ;
  CAMorphNode *arg2 = (CAMorphNode *) 0 ;
  LONG result;
  
  arg1 = (CAMorph *)jarg1; 
  arg2 = (CAMorphNode *)jarg2; 
  result = (arg1)->GetNodeIndex(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CAMorph_FindIndex(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  CAMorph *arg1 = (CAMorph *) 0 ;
  CAPoseMorphTag *arg2 = (CAPoseMorphTag *) 0 ;
  BaseList2D *arg3 = (BaseList2D *) 0 ;
  LONG result;
  
  arg1 = (CAMorph *)jarg1; 
  arg2 = (CAPoseMorphTag *)jarg2; 
  arg3 = (BaseList2D *)jarg3; 
  result = (arg1)->FindIndex(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAMorph_FindFromIndex(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  CAMorph *arg1 = (CAMorph *) 0 ;
  CAPoseMorphTag *arg2 = (CAPoseMorphTag *) 0 ;
  LONG arg3 ;
  CAMorphNode *result = 0 ;
  
  arg1 = (CAMorph *)jarg1; 
  arg2 = (CAPoseMorphTag *)jarg2; 
  arg3 = (LONG)jarg3; 
  result = (CAMorphNode *)(arg1)->FindFromIndex(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAMorph_GetFirst(void * jarg1) {
  void * jresult ;
  CAMorph *arg1 = (CAMorph *) 0 ;
  CAMorphNode *result = 0 ;
  
  arg1 = (CAMorph *)jarg1; 
  result = (CAMorphNode *)(arg1)->GetFirst();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CAMorph_SetMode(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5) {
  unsigned int jresult ;
  CAMorph *arg1 = (CAMorph *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  CAPoseMorphTag *arg3 = (CAPoseMorphTag *) 0 ;
  CAMORPH_MODE_FLAGS arg4 ;
  CAMORPH_MODE arg5 ;
  Bool result;
  
  arg1 = (CAMorph *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (CAPoseMorphTag *)jarg3; 
  arg4 = (CAMORPH_MODE_FLAGS)jarg4; 
  arg5 = (CAMORPH_MODE)jarg5; 
  result = (arg1)->SetMode(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CAMorph_Store(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  CAMorph *arg1 = (CAMorph *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  CAPoseMorphTag *arg3 = (CAPoseMorphTag *) 0 ;
  CAMORPH_DATA_FLAGS arg4 ;
  Bool result;
  
  arg1 = (CAMorph *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (CAPoseMorphTag *)jarg3; 
  arg4 = (CAMORPH_DATA_FLAGS)jarg4; 
  result = (arg1)->Store(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CAMorph_Apply(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  CAMorph *arg1 = (CAMorph *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  CAPoseMorphTag *arg3 = (CAPoseMorphTag *) 0 ;
  CAMORPH_DATA_FLAGS arg4 ;
  Bool result;
  
  arg1 = (CAMorph *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (CAPoseMorphTag *)jarg3; 
  arg4 = (CAMORPH_DATA_FLAGS)jarg4; 
  result = (arg1)->Apply(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAPoseMorphTag_Alloc() {
  void * jresult ;
  CAPoseMorphTag *result = 0 ;
  
  result = (CAPoseMorphTag *)CAPoseMorphTag::Alloc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAPoseMorphTag_Free(void * jarg1) {
  CAPoseMorphTag **arg1 = 0 ;
  
  arg1 = (CAPoseMorphTag **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CAPoseMorphTag *& type is null", 0);
    return ;
  } 
  CAPoseMorphTag::Free(*arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CAPoseMorphTag_GetMorphCount(void * jarg1) {
  int jresult ;
  CAPoseMorphTag *arg1 = (CAPoseMorphTag *) 0 ;
  LONG result;
  
  arg1 = (CAPoseMorphTag *)jarg1; 
  result = (arg1)->GetMorphCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAPoseMorphTag_GetMorph(void * jarg1, int jarg2) {
  void * jresult ;
  CAPoseMorphTag *arg1 = (CAPoseMorphTag *) 0 ;
  LONG arg2 ;
  CAMorph *result = 0 ;
  
  arg1 = (CAPoseMorphTag *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (CAMorph *)(arg1)->GetMorph(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAPoseMorphTag_GetMorphID(void * jarg1, int jarg2) {
  void * jresult ;
  CAPoseMorphTag *arg1 = (CAPoseMorphTag *) 0 ;
  LONG arg2 ;
  DescID result;
  
  arg1 = (CAPoseMorphTag *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (arg1)->GetMorphID(arg2);
  jresult = new DescID((const DescID &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CAPoseMorphTag_GetActiveMorphIndex(void * jarg1) {
  int jresult ;
  CAPoseMorphTag *arg1 = (CAPoseMorphTag *) 0 ;
  LONG result;
  
  arg1 = (CAPoseMorphTag *)jarg1; 
  result = (arg1)->GetActiveMorphIndex();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CAPoseMorphTag_GetMode(void * jarg1) {
  int jresult ;
  CAPoseMorphTag *arg1 = (CAPoseMorphTag *) 0 ;
  LONG result;
  
  arg1 = (CAPoseMorphTag *)jarg1; 
  result = (arg1)->GetMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAPoseMorphTag_GetActiveMorph(void * jarg1) {
  void * jresult ;
  CAPoseMorphTag *arg1 = (CAPoseMorphTag *) 0 ;
  CAMorph *result = 0 ;
  
  arg1 = (CAPoseMorphTag *)jarg1; 
  result = (CAMorph *)(arg1)->GetActiveMorph();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAPoseMorphTag_GetMorphBase(void * jarg1) {
  void * jresult ;
  CAPoseMorphTag *arg1 = (CAPoseMorphTag *) 0 ;
  CAMorph *result = 0 ;
  
  arg1 = (CAPoseMorphTag *)jarg1; 
  result = (CAMorph *)(arg1)->GetMorphBase();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CAPoseMorphTag_AddMorph(void * jarg1) {
  void * jresult ;
  CAPoseMorphTag *arg1 = (CAPoseMorphTag *) 0 ;
  CAMorph *result = 0 ;
  
  arg1 = (CAPoseMorphTag *)jarg1; 
  result = (CAMorph *)(arg1)->AddMorph();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAPoseMorphTag_RemoveMorph(void * jarg1, int jarg2) {
  CAPoseMorphTag *arg1 = (CAPoseMorphTag *) 0 ;
  LONG arg2 ;
  
  arg1 = (CAPoseMorphTag *)jarg1; 
  arg2 = (LONG)jarg2; 
  (arg1)->RemoveMorph(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAPoseMorphTag_InitMorphs(void * jarg1) {
  CAPoseMorphTag *arg1 = (CAPoseMorphTag *) 0 ;
  
  arg1 = (CAPoseMorphTag *)jarg1; 
  (arg1)->InitMorphs();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CAPoseMorphTag_UpdateMorphs(void * jarg1) {
  CAPoseMorphTag *arg1 = (CAPoseMorphTag *) 0 ;
  
  arg1 = (CAPoseMorphTag *)jarg1; 
  (arg1)->UpdateMorphs();
}


SWIGEXPORT int SWIGSTDCALL CSharp_CAPoseMorphTag_GetMorphIndex(void * jarg1, void * jarg2) {
  int jresult ;
  CAPoseMorphTag *arg1 = (CAPoseMorphTag *) 0 ;
  CAMorph *arg2 = (CAMorph *) 0 ;
  LONG result;
  
  arg1 = (CAPoseMorphTag *)jarg1; 
  arg2 = (CAMorph *)jarg2; 
  result = (arg1)->GetMorphIndex(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CAPoseMorphTag_ExitEdit(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  CAPoseMorphTag *arg1 = (CAPoseMorphTag *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  Bool arg3 ;
  Bool result;
  
  arg1 = (CAPoseMorphTag *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->ExitEdit(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BRUSHBASE_MOUSE_FLAG_ADDUNDO_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 0));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BRUSHBASE_MOUSE_FLAG_ADDUNDO_FULL_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 1));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BRUSHBASE_MOUSE_FLAG_SORTED_DIST_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 2));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BRUSHBASE_MOUSE_FLAG_SORTED_OBJECT_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 3));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BRUSHBASE_MOUSE_FLAG_SORTED_ORIGINOBJECT_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 4));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BRUSHBASE_FALLOFF_STRENGTH_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 0));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BRUSHBASE_FALLOFF_ABSSTRENGTH_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 1));
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BrushObjectInfo() {
  void * jresult ;
  BrushObjectInfo *result = 0 ;
  
  result = (BrushObjectInfo *)new BrushObjectInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BrushObjectInfo_m_pObject_set(void * jarg1, void * jarg2) {
  BrushObjectInfo *arg1 = (BrushObjectInfo *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  
  arg1 = (BrushObjectInfo *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  if (arg1) (arg1)->m_pObject = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BrushObjectInfo_m_pObject_get(void * jarg1) {
  void * jresult ;
  BrushObjectInfo *arg1 = (BrushObjectInfo *) 0 ;
  BaseObject *result = 0 ;
  
  arg1 = (BrushObjectInfo *)jarg1; 
  result = (BaseObject *) ((arg1)->m_pObject);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BrushObjectInfo_m_pOriginObject_set(void * jarg1, void * jarg2) {
  BrushObjectInfo *arg1 = (BrushObjectInfo *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  
  arg1 = (BrushObjectInfo *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  if (arg1) (arg1)->m_pOriginObject = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BrushObjectInfo_m_pOriginObject_get(void * jarg1) {
  void * jresult ;
  BrushObjectInfo *arg1 = (BrushObjectInfo *) 0 ;
  BaseObject *result = 0 ;
  
  arg1 = (BrushObjectInfo *)jarg1; 
  result = (BaseObject *) ((arg1)->m_pOriginObject);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BrushObjectInfo_m_pDeformObject_set(void * jarg1, void * jarg2) {
  BrushObjectInfo *arg1 = (BrushObjectInfo *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  
  arg1 = (BrushObjectInfo *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  if (arg1) (arg1)->m_pDeformObject = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BrushObjectInfo_m_pDeformObject_get(void * jarg1) {
  void * jresult ;
  BrushObjectInfo *arg1 = (BrushObjectInfo *) 0 ;
  BaseObject *result = 0 ;
  
  arg1 = (BrushObjectInfo *)jarg1; 
  result = (BaseObject *) ((arg1)->m_pDeformObject);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BrushObjectInfo_m_pNeighbor_set(void * jarg1, void * jarg2) {
  BrushObjectInfo *arg1 = (BrushObjectInfo *) 0 ;
  Neighbor *arg2 = (Neighbor *) 0 ;
  
  arg1 = (BrushObjectInfo *)jarg1; 
  arg2 = (Neighbor *)jarg2; 
  if (arg1) (arg1)->m_pNeighbor = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BrushObjectInfo_m_pNeighbor_get(void * jarg1) {
  void * jresult ;
  BrushObjectInfo *arg1 = (BrushObjectInfo *) 0 ;
  Neighbor *result = 0 ;
  
  arg1 = (BrushObjectInfo *)jarg1; 
  result = (Neighbor *) ((arg1)->m_pNeighbor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BrushObjectInfo_m_PointCount_set(void * jarg1, int jarg2) {
  BrushObjectInfo *arg1 = (BrushObjectInfo *) 0 ;
  LONG arg2 ;
  
  arg1 = (BrushObjectInfo *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->m_PointCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BrushObjectInfo_m_PointCount_get(void * jarg1) {
  int jresult ;
  BrushObjectInfo *arg1 = (BrushObjectInfo *) 0 ;
  LONG result;
  
  arg1 = (BrushObjectInfo *)jarg1; 
  result =  ((arg1)->m_PointCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BrushObjectInfo_m_PolyCount_set(void * jarg1, int jarg2) {
  BrushObjectInfo *arg1 = (BrushObjectInfo *) 0 ;
  LONG arg2 ;
  
  arg1 = (BrushObjectInfo *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->m_PolyCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BrushObjectInfo_m_PolyCount_get(void * jarg1) {
  int jresult ;
  BrushObjectInfo *arg1 = (BrushObjectInfo *) 0 ;
  LONG result;
  
  arg1 = (BrushObjectInfo *)jarg1; 
  result =  ((arg1)->m_PolyCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_BrushObjectInfo_GetPointAt(void * jarg1, int jarg2) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  BrushObjectInfo *arg1 = (BrushObjectInfo *) 0 ;
  LONG arg2 ;
  Vector result;
  
  arg1 = (BrushObjectInfo *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = BrushObjectInfo_GetPointAt(arg1,arg2);
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_BrushObjectInfo_GetGlobalPointAt(void * jarg1, int jarg2) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  BrushObjectInfo *arg1 = (BrushObjectInfo *) 0 ;
  LONG arg2 ;
  Vector result;
  
  arg1 = (BrushObjectInfo *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = BrushObjectInfo_GetGlobalPointAt(arg1,arg2);
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BrushObjectInfo_SetGlobalPointAt(void * jarg1, int jarg2, Vector /* Vector_ctype */ jarg3) {
  BrushObjectInfo *arg1 = (BrushObjectInfo *) 0 ;
  LONG arg2 ;
  Vector arg3 ;
  
  arg1 = (BrushObjectInfo *)jarg1; 
  arg2 = (LONG)jarg2; 
  
  /* <Vector_in> */
  arg3 = *((Vector *)&(jarg3));
  /* </Vector_in> */
  
  BrushObjectInfo_SetGlobalPointAt(arg1,arg2,arg3);
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_BrushObjectInfo_GetNormalAt(void * jarg1, int jarg2) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  BrushObjectInfo *arg1 = (BrushObjectInfo *) 0 ;
  LONG arg2 ;
  Vector result;
  
  arg1 = (BrushObjectInfo *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = BrushObjectInfo_GetNormalAt(arg1,arg2);
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BrushObjectInfo_SetNormalAt(void * jarg1, int jarg2, Vector /* Vector_ctype */ jarg3) {
  BrushObjectInfo *arg1 = (BrushObjectInfo *) 0 ;
  LONG arg2 ;
  Vector arg3 ;
  
  arg1 = (BrushObjectInfo *)jarg1; 
  arg2 = (LONG)jarg2; 
  
  /* <Vector_in> */
  arg3 = *((Vector *)&(jarg3));
  /* </Vector_in> */
  
  BrushObjectInfo_SetNormalAt(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BrushObjectInfo_GetPolyAt(void * jarg1, int jarg2) {
  void * jresult ;
  BrushObjectInfo *arg1 = (BrushObjectInfo *) 0 ;
  LONG arg2 ;
  CPolygon result;
  
  arg1 = (BrushObjectInfo *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = BrushObjectInfo_GetPolyAt(arg1,arg2);
  jresult = new CPolygon((const CPolygon &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BrushObjectInfo(void * jarg1) {
  BrushObjectInfo *arg1 = (BrushObjectInfo *) 0 ;
  
  arg1 = (BrushObjectInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BrushVertexData_m_Dist_set(void * jarg1, double jarg2) {
  BrushVertexData *arg1 = (BrushVertexData *) 0 ;
  Real arg2 ;
  
  arg1 = (BrushVertexData *)jarg1; 
  arg2 = (Real)jarg2; 
  if (arg1) (arg1)->m_Dist = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_BrushVertexData_m_Dist_get(void * jarg1) {
  double jresult ;
  BrushVertexData *arg1 = (BrushVertexData *) 0 ;
  Real result;
  
  arg1 = (BrushVertexData *)jarg1; 
  result =  ((arg1)->m_Dist);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BrushVertexData_m_Index_set(void * jarg1, int jarg2) {
  BrushVertexData *arg1 = (BrushVertexData *) 0 ;
  LONG arg2 ;
  
  arg1 = (BrushVertexData *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->m_Index = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BrushVertexData_m_Index_get(void * jarg1) {
  int jresult ;
  BrushVertexData *arg1 = (BrushVertexData *) 0 ;
  LONG result;
  
  arg1 = (BrushVertexData *)jarg1; 
  result =  ((arg1)->m_Index);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BrushVertexData_m_pObject_set(void * jarg1, void * jarg2) {
  BrushVertexData *arg1 = (BrushVertexData *) 0 ;
  BrushObjectData *arg2 = (BrushObjectData *) 0 ;
  
  arg1 = (BrushVertexData *)jarg1; 
  arg2 = (BrushObjectData *)jarg2; 
  if (arg1) (arg1)->m_pObject = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BrushVertexData_m_pObject_get(void * jarg1) {
  void * jresult ;
  BrushVertexData *arg1 = (BrushVertexData *) 0 ;
  BrushObjectData *result = 0 ;
  
  arg1 = (BrushVertexData *)jarg1; 
  result = (BrushObjectData *) ((arg1)->m_pObject);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BrushVertexData() {
  void * jresult ;
  BrushVertexData *result = 0 ;
  
  result = (BrushVertexData *)new BrushVertexData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BrushVertexData(void * jarg1) {
  BrushVertexData *arg1 = (BrushVertexData *) 0 ;
  
  arg1 = (BrushVertexData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BrushPixelData_m_pObject_set(void * jarg1, void * jarg2) {
  BrushPixelData *arg1 = (BrushPixelData *) 0 ;
  BrushObjectData *arg2 = (BrushObjectData *) 0 ;
  
  arg1 = (BrushPixelData *)jarg1; 
  arg2 = (BrushObjectData *)jarg2; 
  if (arg1) (arg1)->m_pObject = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BrushPixelData_m_pObject_get(void * jarg1) {
  void * jresult ;
  BrushPixelData *arg1 = (BrushPixelData *) 0 ;
  BrushObjectData *result = 0 ;
  
  arg1 = (BrushPixelData *)jarg1; 
  result = (BrushObjectData *) ((arg1)->m_pObject);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BrushPixelData_m_Index_set(void * jarg1, int jarg2) {
  BrushPixelData *arg1 = (BrushPixelData *) 0 ;
  LONG arg2 ;
  
  arg1 = (BrushPixelData *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->m_Index = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BrushPixelData_m_Index_get(void * jarg1) {
  int jresult ;
  BrushPixelData *arg1 = (BrushPixelData *) 0 ;
  LONG result;
  
  arg1 = (BrushPixelData *)jarg1; 
  result =  ((arg1)->m_Index);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BrushPixelData_m_Z_set(void * jarg1, double jarg2) {
  BrushPixelData *arg1 = (BrushPixelData *) 0 ;
  Real arg2 ;
  
  arg1 = (BrushPixelData *)jarg1; 
  arg2 = (Real)jarg2; 
  if (arg1) (arg1)->m_Z = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_BrushPixelData_m_Z_get(void * jarg1) {
  double jresult ;
  BrushPixelData *arg1 = (BrushPixelData *) 0 ;
  Real result;
  
  arg1 = (BrushPixelData *)jarg1; 
  result =  ((arg1)->m_Z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BrushPixelData_m_pNext_set(void * jarg1, void * jarg2) {
  BrushPixelData *arg1 = (BrushPixelData *) 0 ;
  BrushPixelData *arg2 = (BrushPixelData *) 0 ;
  
  arg1 = (BrushPixelData *)jarg1; 
  arg2 = (BrushPixelData *)jarg2; 
  if (arg1) (arg1)->m_pNext = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BrushPixelData_m_pNext_get(void * jarg1) {
  void * jresult ;
  BrushPixelData *arg1 = (BrushPixelData *) 0 ;
  BrushPixelData *result = 0 ;
  
  arg1 = (BrushPixelData *)jarg1; 
  result = (BrushPixelData *) ((arg1)->m_pNext);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BrushPixelData() {
  void * jresult ;
  BrushPixelData *result = 0 ;
  
  result = (BrushPixelData *)new BrushPixelData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BrushPixelData(void * jarg1) {
  BrushPixelData *arg1 = (BrushPixelData *) 0 ;
  
  arg1 = (BrushPixelData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BrushBase_Alloc() {
  void * jresult ;
  BrushBase *result = 0 ;
  
  result = (BrushBase *)BrushBase::Alloc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BrushBase_Free(void * jarg1) {
  BrushBase **arg1 = 0 ;
  
  arg1 = (BrushBase **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BrushBase *& type is null", 0);
    return ;
  } 
  BrushBase::Free(*arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BrushBase_InitTool(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  BrushBase *arg1 = (BrushBase *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  BaseContainer *arg3 = 0 ;
  BaseThread *arg4 = (BaseThread *) 0 ;
  BrushToolData *arg5 = (BrushToolData *) 0 ;
  Bool result;
  
  arg1 = (BrushBase *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  arg4 = (BaseThread *)jarg4; 
  arg5 = (BrushToolData *)jarg5; 
  result = (arg1)->InitTool(arg2,*arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BrushBase_FreeTool(void * jarg1, void * jarg2, void * jarg3) {
  BrushBase *arg1 = (BrushBase *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  BaseContainer *arg3 = 0 ;
  
  arg1 = (BrushBase *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return ;
  } 
  (arg1)->FreeTool(arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BrushBase_InitDefaultSettings(void * jarg1, void * jarg2, void * jarg3) {
  BrushBase *arg1 = (BrushBase *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  BaseContainer *arg3 = 0 ;
  
  arg1 = (BrushBase *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return ;
  } 
  (arg1)->InitDefaultSettings(arg2,*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BrushBase_GetDEnabling(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, int jarg6, void * jarg7) {
  unsigned int jresult ;
  BrushBase *arg1 = (BrushBase *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  BaseContainer *arg3 = 0 ;
  DescID *arg4 = 0 ;
  GeData *arg5 = 0 ;
  DESCFLAGS_ENABLE arg6 ;
  BaseContainer *arg7 = (BaseContainer *) 0 ;
  Bool result;
  
  arg1 = (BrushBase *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  arg4 = (DescID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescID const & type is null", 0);
    return 0;
  } 
  arg5 = (GeData *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeData const & type is null", 0);
    return 0;
  } 
  arg6 = (DESCFLAGS_ENABLE)jarg6; 
  arg7 = (BaseContainer *)jarg7; 
  result = (arg1)->GetDEnabling(arg2,*arg3,(DescID const &)*arg4,(GeData const &)*arg5,arg6,(BaseContainer const *)arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BrushBase_SetDParameter(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  BrushBase *arg1 = (BrushBase *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  BaseContainer *arg3 = 0 ;
  DescID *arg4 = 0 ;
  GeData *arg5 = 0 ;
  DESCFLAGS_SET *arg6 = 0 ;
  Bool result;
  
  arg1 = (BrushBase *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  arg4 = (DescID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescID const & type is null", 0);
    return 0;
  } 
  arg5 = (GeData *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeData const & type is null", 0);
    return 0;
  } 
  arg6 = (DESCFLAGS_SET *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DESCFLAGS_SET & type is null", 0);
    return 0;
  } 
  result = (arg1)->SetDParameter(arg2,*arg3,(DescID const &)*arg4,(GeData const &)*arg5,*arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BrushBase_GetDDescription(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  BrushBase *arg1 = (BrushBase *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  BaseContainer *arg3 = 0 ;
  Description *arg4 = (Description *) 0 ;
  DESCFLAGS_DESC *arg5 = 0 ;
  Bool result;
  
  arg1 = (BrushBase *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  arg4 = (Description *)jarg4; 
  arg5 = (DESCFLAGS_DESC *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DESCFLAGS_DESC & type is null", 0);
    return 0;
  } 
  result = (arg1)->GetDDescription(arg2,*arg3,arg4,*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BrushBase_Message(void * jarg1, void * jarg2, void * jarg3, int jarg4, void * jarg5) {
  unsigned int jresult ;
  BrushBase *arg1 = (BrushBase *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  BaseContainer *arg3 = 0 ;
  LONG arg4 ;
  void *arg5 = (void *) 0 ;
  Bool result;
  
  arg1 = (BrushBase *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  arg4 = (LONG)jarg4; 
  arg5 = (void *)jarg5; 
  result = (arg1)->Message(arg2,*arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BrushBase_GetCursorInfo(void * jarg1, void * jarg2, void * jarg3, void * jarg4, double jarg5, double jarg6, void * jarg7) {
  unsigned int jresult ;
  BrushBase *arg1 = (BrushBase *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  BaseContainer *arg3 = 0 ;
  BaseDraw *arg4 = (BaseDraw *) 0 ;
  Real arg5 ;
  Real arg6 ;
  BaseContainer *arg7 = 0 ;
  Bool result;
  
  arg1 = (BrushBase *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  arg4 = (BaseDraw *)jarg4; 
  arg5 = (Real)jarg5; 
  arg6 = (Real)jarg6; 
  arg7 = (BaseContainer *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  result = (arg1)->GetCursorInfo(arg2,*arg3,arg4,arg5,arg6,*arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BrushBase_MouseInput(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  BrushBase *arg1 = (BrushBase *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  BaseContainer *arg3 = 0 ;
  BaseDraw *arg4 = (BaseDraw *) 0 ;
  EditorWindow *arg5 = (EditorWindow *) 0 ;
  BaseContainer *arg6 = 0 ;
  Bool result;
  
  arg1 = (BrushBase *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  arg4 = (BaseDraw *)jarg4; 
  arg5 = (EditorWindow *)jarg5; 
  arg6 = (BaseContainer *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer const & type is null", 0);
    return 0;
  } 
  result = (arg1)->MouseInput(arg2,*arg3,arg4,arg5,(BaseContainer const &)*arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BrushBase_GetSelected(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, int jarg6, int jarg7, double jarg8, void * jarg9) {
  void * jresult ;
  BrushBase *arg1 = (BrushBase *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  BaseContainer *arg3 = 0 ;
  BaseDraw *arg4 = (BaseDraw *) 0 ;
  LONG *arg5 = 0 ;
  LONG arg6 ;
  LONG arg7 ;
  Real arg8 ;
  BaseObject *arg9 = (BaseObject *) 0 ;
  BrushVertexData *result = 0 ;
  
  arg1 = (BrushBase *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  arg4 = (BaseDraw *)jarg4; 
  arg5 = (LONG *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  arg6 = (LONG)jarg6; 
  arg7 = (LONG)jarg7; 
  arg8 = (Real)jarg8; 
  arg9 = (BaseObject *)jarg9; 
  result = (BrushVertexData *)(arg1)->GetSelected(arg2,*arg3,arg4,*arg5,arg6,arg7,arg8,arg9);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_BrushBase_GetCursor(void * jarg1, void * jarg2, void * jarg3) {
  double jresult ;
  BrushBase *arg1 = (BrushBase *) 0 ;
  LONG *arg2 = 0 ;
  LONG *arg3 = 0 ;
  Real result;
  
  arg1 = (BrushBase *)jarg1; 
  arg2 = (LONG *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  arg3 = (LONG *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  result = (arg1)->GetCursor(*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BrushBase_GetObjectInfo__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  BrushBase *arg1 = (BrushBase *) 0 ;
  BrushObjectData *arg2 = (BrushObjectData *) 0 ;
  BrushObjectInfo *arg3 = 0 ;
  
  arg1 = (BrushBase *)jarg1; 
  arg2 = (BrushObjectData *)jarg2; 
  arg3 = (BrushObjectInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BrushObjectInfo & type is null", 0);
    return ;
  } 
  (arg1)->GetObjectInfo(arg2,*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BrushBase_GetObjectInfo__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  BrushBase *arg1 = (BrushBase *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  BrushObjectInfo *arg3 = 0 ;
  Bool result;
  
  arg1 = (BrushBase *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  arg3 = (BrushObjectInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BrushObjectInfo & type is null", 0);
    return 0;
  } 
  result = (arg1)->GetObjectInfo(arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BrushBase_ValidateObjects(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  BrushBase *arg1 = (BrushBase *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  BaseContainer *arg3 = 0 ;
  Bool result;
  
  arg1 = (BrushBase *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  result = (arg1)->ValidateObjects(arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BrushBase_GetObjectAt(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  BrushBase *arg1 = (BrushBase *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  BrushPixelData *result = 0 ;
  
  arg1 = (BrushBase *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  result = (BrushPixelData *)(arg1)->GetObjectAt(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_BrushBase_GetFalloff(void * jarg1, double jarg2, int jarg3) {
  double jresult ;
  BrushBase *arg1 = (BrushBase *) 0 ;
  Real arg2 ;
  LONG arg3 ;
  Real result;
  
  arg1 = (BrushBase *)jarg1; 
  arg2 = (Real)jarg2; 
  arg3 = (LONG)jarg3; 
  result = (arg1)->GetFalloff(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BrushBase_GetObjects(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  BrushBase *arg1 = (BrushBase *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  AtomArray *arg3 = (AtomArray *) 0 ;
  Bool result;
  
  arg1 = (BrushBase *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (AtomArray *)jarg3; 
  result = (arg1)->GetObjects(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BrushBase_UpdateCache(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  BrushBase *arg1 = (BrushBase *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  BaseContainer *arg3 = 0 ;
  BaseDraw *arg4 = (BaseDraw *) 0 ;
  Bool arg5 ;
  Bool result;
  
  arg1 = (BrushBase *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  arg4 = (BaseDraw *)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (arg1)->UpdateCache(arg2,*arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BrushBase_CalcSurfaceDistances__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7) {
  void * jresult ;
  BrushBase *arg1 = (BrushBase *) 0 ;
  PolygonObject *arg2 = (PolygonObject *) 0 ;
  BaseSelect *arg3 = (BaseSelect *) 0 ;
  Neighbor *arg4 = (Neighbor *) 0 ;
  Vector *arg5 = (Vector *) 0 ;
  Vector *arg6 = (Vector *) 0 ;
  Real *arg7 = (Real *) 0 ;
  Real *result = 0 ;
  
  arg1 = (BrushBase *)jarg1; 
  arg2 = (PolygonObject *)jarg2; 
  arg3 = (BaseSelect *)jarg3; 
  arg4 = (Neighbor *)jarg4; 
  arg5 = (Vector *)jarg5; /* Vector*&_in */
  arg6 = (Vector *)jarg6; /* Vector*&_in */
  arg7 = (Real *)jarg7; 
  result = (Real *)(arg1)->CalcSurfaceDistances(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BrushBase_CalcSurfaceDistances__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  void * jresult ;
  BrushBase *arg1 = (BrushBase *) 0 ;
  PolygonObject *arg2 = (PolygonObject *) 0 ;
  BaseSelect *arg3 = (BaseSelect *) 0 ;
  Neighbor *arg4 = (Neighbor *) 0 ;
  Vector *arg5 = (Vector *) 0 ;
  Vector *arg6 = (Vector *) 0 ;
  Real *result = 0 ;
  
  arg1 = (BrushBase *)jarg1; 
  arg2 = (PolygonObject *)jarg2; 
  arg3 = (BaseSelect *)jarg3; 
  arg4 = (Neighbor *)jarg4; 
  arg5 = (Vector *)jarg5; /* Vector*&_in */
  arg6 = (Vector *)jarg6; /* Vector*&_in */
  result = (Real *)(arg1)->CalcSurfaceDistances(arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BrushBase_CalcSurfaceDistances__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  BrushBase *arg1 = (BrushBase *) 0 ;
  PolygonObject *arg2 = (PolygonObject *) 0 ;
  BaseSelect *arg3 = (BaseSelect *) 0 ;
  Neighbor *arg4 = (Neighbor *) 0 ;
  Vector *arg5 = (Vector *) 0 ;
  Real *result = 0 ;
  
  arg1 = (BrushBase *)jarg1; 
  arg2 = (PolygonObject *)jarg2; 
  arg3 = (BaseSelect *)jarg3; 
  arg4 = (Neighbor *)jarg4; 
  arg5 = (Vector *)jarg5; /* Vector*&_in */
  result = (Real *)(arg1)->CalcSurfaceDistances(arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BrushBase_CalcSurfaceDistances__SWIG_3(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  BrushBase *arg1 = (BrushBase *) 0 ;
  PolygonObject *arg2 = (PolygonObject *) 0 ;
  BaseSelect *arg3 = (BaseSelect *) 0 ;
  Neighbor *arg4 = (Neighbor *) 0 ;
  Real *result = 0 ;
  
  arg1 = (BrushBase *)jarg1; 
  arg2 = (PolygonObject *)jarg2; 
  arg3 = (BaseSelect *)jarg3; 
  arg4 = (Neighbor *)jarg4; 
  result = (Real *)(arg1)->CalcSurfaceDistances(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BrushBase_CalcSurfaceDistances__SWIG_4(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  BrushBase *arg1 = (BrushBase *) 0 ;
  PolygonObject *arg2 = (PolygonObject *) 0 ;
  BaseSelect *arg3 = (BaseSelect *) 0 ;
  Real *result = 0 ;
  
  arg1 = (BrushBase *)jarg1; 
  arg2 = (PolygonObject *)jarg2; 
  arg3 = (BaseSelect *)jarg3; 
  result = (Real *)(arg1)->CalcSurfaceDistances(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BrushBase_CalcSurfaceDistancesFromPoint__SWIG_0(void * jarg1, void * jarg2, int jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7) {
  void * jresult ;
  BrushBase *arg1 = (BrushBase *) 0 ;
  PolygonObject *arg2 = (PolygonObject *) 0 ;
  LONG arg3 ;
  Neighbor *arg4 = (Neighbor *) 0 ;
  Vector *arg5 = (Vector *) 0 ;
  Vector *arg6 = (Vector *) 0 ;
  Real *arg7 = (Real *) 0 ;
  Real *result = 0 ;
  
  arg1 = (BrushBase *)jarg1; 
  arg2 = (PolygonObject *)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (Neighbor *)jarg4; 
  arg5 = (Vector *)jarg5; /* Vector*&_in */
  arg6 = (Vector *)jarg6; /* Vector*&_in */
  arg7 = (Real *)jarg7; 
  result = (Real *)(arg1)->CalcSurfaceDistancesFromPoint(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BrushBase_CalcSurfaceDistancesFromPoint__SWIG_1(void * jarg1, void * jarg2, int jarg3, void * jarg4, void * jarg5, void * jarg6) {
  void * jresult ;
  BrushBase *arg1 = (BrushBase *) 0 ;
  PolygonObject *arg2 = (PolygonObject *) 0 ;
  LONG arg3 ;
  Neighbor *arg4 = (Neighbor *) 0 ;
  Vector *arg5 = (Vector *) 0 ;
  Vector *arg6 = (Vector *) 0 ;
  Real *result = 0 ;
  
  arg1 = (BrushBase *)jarg1; 
  arg2 = (PolygonObject *)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (Neighbor *)jarg4; 
  arg5 = (Vector *)jarg5; /* Vector*&_in */
  arg6 = (Vector *)jarg6; /* Vector*&_in */
  result = (Real *)(arg1)->CalcSurfaceDistancesFromPoint(arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BrushBase_CalcSurfaceDistancesFromPoint__SWIG_2(void * jarg1, void * jarg2, int jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  BrushBase *arg1 = (BrushBase *) 0 ;
  PolygonObject *arg2 = (PolygonObject *) 0 ;
  LONG arg3 ;
  Neighbor *arg4 = (Neighbor *) 0 ;
  Vector *arg5 = (Vector *) 0 ;
  Real *result = 0 ;
  
  arg1 = (BrushBase *)jarg1; 
  arg2 = (PolygonObject *)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (Neighbor *)jarg4; 
  arg5 = (Vector *)jarg5; /* Vector*&_in */
  result = (Real *)(arg1)->CalcSurfaceDistancesFromPoint(arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BrushBase_CalcSurfaceDistancesFromPoint__SWIG_3(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  void * jresult ;
  BrushBase *arg1 = (BrushBase *) 0 ;
  PolygonObject *arg2 = (PolygonObject *) 0 ;
  LONG arg3 ;
  Neighbor *arg4 = (Neighbor *) 0 ;
  Real *result = 0 ;
  
  arg1 = (BrushBase *)jarg1; 
  arg2 = (PolygonObject *)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (Neighbor *)jarg4; 
  result = (Real *)(arg1)->CalcSurfaceDistancesFromPoint(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BrushBase_CalcSurfaceDistancesFromPoint__SWIG_4(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  BrushBase *arg1 = (BrushBase *) 0 ;
  PolygonObject *arg2 = (PolygonObject *) 0 ;
  LONG arg3 ;
  Real *result = 0 ;
  
  arg1 = (BrushBase *)jarg1; 
  arg2 = (PolygonObject *)jarg2; 
  arg3 = (LONG)jarg3; 
  result = (Real *)(arg1)->CalcSurfaceDistancesFromPoint(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BrushToolData_m_pBrushBase_set(void * jarg1, void * jarg2) {
  BrushToolData *arg1 = (BrushToolData *) 0 ;
  BrushBase *arg2 = (BrushBase *) 0 ;
  
  arg1 = (BrushToolData *)jarg1; 
  arg2 = (BrushBase *)jarg2; 
  if (arg1) (arg1)->m_pBrushBase = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BrushToolData_m_pBrushBase_get(void * jarg1) {
  void * jresult ;
  BrushToolData *arg1 = (BrushToolData *) 0 ;
  BrushBase *result = 0 ;
  
  arg1 = (BrushToolData *)jarg1; 
  result = (BrushBase *) ((arg1)->m_pBrushBase);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BrushToolData_InitTool(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  BrushToolData *arg1 = (BrushToolData *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  BaseContainer *arg3 = 0 ;
  BaseThread *arg4 = (BaseThread *) 0 ;
  Bool result;
  
  arg1 = (BrushToolData *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  arg4 = (BaseThread *)jarg4; 
  result = (arg1)->InitTool(arg2,*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BrushToolData_InitToolSwigExplicitBrushToolData(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  BrushToolData *arg1 = (BrushToolData *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  BaseContainer *arg3 = 0 ;
  BaseThread *arg4 = (BaseThread *) 0 ;
  Bool result;
  
  arg1 = (BrushToolData *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  arg4 = (BaseThread *)jarg4; 
  result = (arg1)->BrushToolData::InitTool(arg2,*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BrushToolData_FreeTool(void * jarg1, void * jarg2, void * jarg3) {
  BrushToolData *arg1 = (BrushToolData *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  BaseContainer *arg3 = 0 ;
  
  arg1 = (BrushToolData *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return ;
  } 
  (arg1)->FreeTool(arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BrushToolData_FreeToolSwigExplicitBrushToolData(void * jarg1, void * jarg2, void * jarg3) {
  BrushToolData *arg1 = (BrushToolData *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  BaseContainer *arg3 = 0 ;
  
  arg1 = (BrushToolData *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return ;
  } 
  (arg1)->BrushToolData::FreeTool(arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BrushToolData_InitDefaultSettings(void * jarg1, void * jarg2, void * jarg3) {
  BrushToolData *arg1 = (BrushToolData *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  BaseContainer *arg3 = 0 ;
  
  arg1 = (BrushToolData *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return ;
  } 
  (arg1)->InitDefaultSettings(arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BrushToolData_InitDefaultSettingsSwigExplicitBrushToolData(void * jarg1, void * jarg2, void * jarg3) {
  BrushToolData *arg1 = (BrushToolData *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  BaseContainer *arg3 = 0 ;
  
  arg1 = (BrushToolData *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return ;
  } 
  (arg1)->BrushToolData::InitDefaultSettings(arg2,*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BrushToolData_GetDEnabling(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, int jarg6, void * jarg7) {
  unsigned int jresult ;
  BrushToolData *arg1 = (BrushToolData *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  BaseContainer *arg3 = 0 ;
  DescID *arg4 = 0 ;
  GeData *arg5 = 0 ;
  DESCFLAGS_ENABLE arg6 ;
  BaseContainer *arg7 = (BaseContainer *) 0 ;
  Bool result;
  
  arg1 = (BrushToolData *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  arg4 = (DescID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescID const & type is null", 0);
    return 0;
  } 
  arg5 = (GeData *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeData const & type is null", 0);
    return 0;
  } 
  arg6 = (DESCFLAGS_ENABLE)jarg6; 
  arg7 = (BaseContainer *)jarg7; 
  result = (arg1)->GetDEnabling(arg2,*arg3,(DescID const &)*arg4,(GeData const &)*arg5,arg6,(BaseContainer const *)arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BrushToolData_GetDEnablingSwigExplicitBrushToolData(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, int jarg6, void * jarg7) {
  unsigned int jresult ;
  BrushToolData *arg1 = (BrushToolData *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  BaseContainer *arg3 = 0 ;
  DescID *arg4 = 0 ;
  GeData *arg5 = 0 ;
  DESCFLAGS_ENABLE arg6 ;
  BaseContainer *arg7 = (BaseContainer *) 0 ;
  Bool result;
  
  arg1 = (BrushToolData *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  arg4 = (DescID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescID const & type is null", 0);
    return 0;
  } 
  arg5 = (GeData *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeData const & type is null", 0);
    return 0;
  } 
  arg6 = (DESCFLAGS_ENABLE)jarg6; 
  arg7 = (BaseContainer *)jarg7; 
  result = (arg1)->BrushToolData::GetDEnabling(arg2,*arg3,(DescID const &)*arg4,(GeData const &)*arg5,arg6,(BaseContainer const *)arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BrushToolData_SetDParameter(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  BrushToolData *arg1 = (BrushToolData *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  BaseContainer *arg3 = 0 ;
  DescID *arg4 = 0 ;
  GeData *arg5 = 0 ;
  DESCFLAGS_SET *arg6 = 0 ;
  Bool result;
  
  arg1 = (BrushToolData *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  arg4 = (DescID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescID const & type is null", 0);
    return 0;
  } 
  arg5 = (GeData *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeData const & type is null", 0);
    return 0;
  } 
  arg6 = (DESCFLAGS_SET *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DESCFLAGS_SET & type is null", 0);
    return 0;
  } 
  result = (arg1)->SetDParameter(arg2,*arg3,(DescID const &)*arg4,(GeData const &)*arg5,*arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BrushToolData_SetDParameterSwigExplicitBrushToolData(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  BrushToolData *arg1 = (BrushToolData *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  BaseContainer *arg3 = 0 ;
  DescID *arg4 = 0 ;
  GeData *arg5 = 0 ;
  DESCFLAGS_SET *arg6 = 0 ;
  Bool result;
  
  arg1 = (BrushToolData *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  arg4 = (DescID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescID const & type is null", 0);
    return 0;
  } 
  arg5 = (GeData *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeData const & type is null", 0);
    return 0;
  } 
  arg6 = (DESCFLAGS_SET *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DESCFLAGS_SET & type is null", 0);
    return 0;
  } 
  result = (arg1)->BrushToolData::SetDParameter(arg2,*arg3,(DescID const &)*arg4,(GeData const &)*arg5,*arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BrushToolData_GetDDescription(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  BrushToolData *arg1 = (BrushToolData *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  BaseContainer *arg3 = 0 ;
  Description *arg4 = (Description *) 0 ;
  DESCFLAGS_DESC *arg5 = 0 ;
  Bool result;
  
  arg1 = (BrushToolData *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  arg4 = (Description *)jarg4; 
  arg5 = (DESCFLAGS_DESC *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DESCFLAGS_DESC & type is null", 0);
    return 0;
  } 
  result = (arg1)->GetDDescription(arg2,*arg3,arg4,*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BrushToolData_GetDDescriptionSwigExplicitBrushToolData(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  BrushToolData *arg1 = (BrushToolData *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  BaseContainer *arg3 = 0 ;
  Description *arg4 = (Description *) 0 ;
  DESCFLAGS_DESC *arg5 = 0 ;
  Bool result;
  
  arg1 = (BrushToolData *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  arg4 = (Description *)jarg4; 
  arg5 = (DESCFLAGS_DESC *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DESCFLAGS_DESC & type is null", 0);
    return 0;
  } 
  result = (arg1)->BrushToolData::GetDDescription(arg2,*arg3,arg4,*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BrushToolData_Message(void * jarg1, void * jarg2, void * jarg3, int jarg4, void * jarg5) {
  unsigned int jresult ;
  BrushToolData *arg1 = (BrushToolData *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  BaseContainer *arg3 = 0 ;
  LONG arg4 ;
  void *arg5 = (void *) 0 ;
  Bool result;
  
  arg1 = (BrushToolData *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  arg4 = (LONG)jarg4; 
  arg5 = (void *)jarg5; 
  result = (arg1)->Message(arg2,*arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BrushToolData_MessageSwigExplicitBrushToolData(void * jarg1, void * jarg2, void * jarg3, int jarg4, void * jarg5) {
  unsigned int jresult ;
  BrushToolData *arg1 = (BrushToolData *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  BaseContainer *arg3 = 0 ;
  LONG arg4 ;
  void *arg5 = (void *) 0 ;
  Bool result;
  
  arg1 = (BrushToolData *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  arg4 = (LONG)jarg4; 
  arg5 = (void *)jarg5; 
  result = (arg1)->BrushToolData::Message(arg2,*arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BrushToolData_GetCursorInfo(void * jarg1, void * jarg2, void * jarg3, void * jarg4, double jarg5, double jarg6, void * jarg7) {
  unsigned int jresult ;
  BrushToolData *arg1 = (BrushToolData *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  BaseContainer *arg3 = 0 ;
  BaseDraw *arg4 = (BaseDraw *) 0 ;
  Real arg5 ;
  Real arg6 ;
  BaseContainer *arg7 = 0 ;
  Bool result;
  
  arg1 = (BrushToolData *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  arg4 = (BaseDraw *)jarg4; 
  arg5 = (Real)jarg5; 
  arg6 = (Real)jarg6; 
  arg7 = (BaseContainer *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  result = (arg1)->GetCursorInfo(arg2,*arg3,arg4,arg5,arg6,*arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BrushToolData_GetCursorInfoSwigExplicitBrushToolData(void * jarg1, void * jarg2, void * jarg3, void * jarg4, double jarg5, double jarg6, void * jarg7) {
  unsigned int jresult ;
  BrushToolData *arg1 = (BrushToolData *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  BaseContainer *arg3 = 0 ;
  BaseDraw *arg4 = (BaseDraw *) 0 ;
  Real arg5 ;
  Real arg6 ;
  BaseContainer *arg7 = 0 ;
  Bool result;
  
  arg1 = (BrushToolData *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  arg4 = (BaseDraw *)jarg4; 
  arg5 = (Real)jarg5; 
  arg6 = (Real)jarg6; 
  arg7 = (BaseContainer *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  result = (arg1)->BrushToolData::GetCursorInfo(arg2,*arg3,arg4,arg5,arg6,*arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BrushToolData_MouseInput(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  BrushToolData *arg1 = (BrushToolData *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  BaseContainer *arg3 = 0 ;
  BaseDraw *arg4 = (BaseDraw *) 0 ;
  EditorWindow *arg5 = (EditorWindow *) 0 ;
  BaseContainer *arg6 = 0 ;
  Bool result;
  
  arg1 = (BrushToolData *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  arg4 = (BaseDraw *)jarg4; 
  arg5 = (EditorWindow *)jarg5; 
  arg6 = (BaseContainer *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer const & type is null", 0);
    return 0;
  } 
  result = (arg1)->MouseInput(arg2,*arg3,arg4,arg5,(BaseContainer const &)*arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BrushToolData_MouseInputSwigExplicitBrushToolData(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  BrushToolData *arg1 = (BrushToolData *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  BaseContainer *arg3 = 0 ;
  BaseDraw *arg4 = (BaseDraw *) 0 ;
  EditorWindow *arg5 = (EditorWindow *) 0 ;
  BaseContainer *arg6 = 0 ;
  Bool result;
  
  arg1 = (BrushToolData *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  arg4 = (BaseDraw *)jarg4; 
  arg5 = (EditorWindow *)jarg5; 
  arg6 = (BaseContainer *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer const & type is null", 0);
    return 0;
  } 
  result = (arg1)->BrushToolData::MouseInput(arg2,*arg3,arg4,arg5,(BaseContainer const &)*arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BrushToolData_MouseInputStart(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7) {
  unsigned int jresult ;
  BrushToolData *arg1 = (BrushToolData *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  BaseContainer *arg3 = 0 ;
  BaseDraw *arg4 = (BaseDraw *) 0 ;
  EditorWindow *arg5 = (EditorWindow *) 0 ;
  BaseContainer *arg6 = 0 ;
  LONG *arg7 = 0 ;
  Bool result;
  
  arg1 = (BrushToolData *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  arg4 = (BaseDraw *)jarg4; 
  arg5 = (EditorWindow *)jarg5; 
  arg6 = (BaseContainer *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer const & type is null", 0);
    return 0;
  } 
  arg7 = (LONG *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  result = (arg1)->MouseInputStart(arg2,*arg3,arg4,arg5,(BaseContainer const &)*arg6,*arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BrushToolData_MouseInputStartSwigExplicitBrushToolData(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7) {
  unsigned int jresult ;
  BrushToolData *arg1 = (BrushToolData *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  BaseContainer *arg3 = 0 ;
  BaseDraw *arg4 = (BaseDraw *) 0 ;
  EditorWindow *arg5 = (EditorWindow *) 0 ;
  BaseContainer *arg6 = 0 ;
  LONG *arg7 = 0 ;
  Bool result;
  
  arg1 = (BrushToolData *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  arg4 = (BaseDraw *)jarg4; 
  arg5 = (EditorWindow *)jarg5; 
  arg6 = (BaseContainer *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer const & type is null", 0);
    return 0;
  } 
  arg7 = (LONG *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  result = (arg1)->BrushToolData::MouseInputStart(arg2,*arg3,arg4,arg5,(BaseContainer const &)*arg6,*arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BrushToolData_MouseInputDrag(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, int jarg8, double jarg9, double jarg10, void * jarg11) {
  unsigned int jresult ;
  BrushToolData *arg1 = (BrushToolData *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  BaseContainer *arg3 = 0 ;
  BaseDraw *arg4 = (BaseDraw *) 0 ;
  EditorWindow *arg5 = (EditorWindow *) 0 ;
  BaseContainer *arg6 = 0 ;
  BrushVertexData *arg7 = (BrushVertexData *) 0 ;
  LONG arg8 ;
  Real arg9 ;
  Real arg10 ;
  LONG *arg11 = 0 ;
  Bool result;
  
  arg1 = (BrushToolData *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  arg4 = (BaseDraw *)jarg4; 
  arg5 = (EditorWindow *)jarg5; 
  arg6 = (BaseContainer *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer const & type is null", 0);
    return 0;
  } 
  arg7 = (BrushVertexData *)jarg7; 
  arg8 = (LONG)jarg8; 
  arg9 = (Real)jarg9; 
  arg10 = (Real)jarg10; 
  arg11 = (LONG *)jarg11;
  if (!arg11) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  result = (arg1)->MouseInputDrag(arg2,*arg3,arg4,arg5,(BaseContainer const &)*arg6,arg7,arg8,arg9,arg10,*arg11);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BrushToolData_MouseInputDragSwigExplicitBrushToolData(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, int jarg8, double jarg9, double jarg10, void * jarg11) {
  unsigned int jresult ;
  BrushToolData *arg1 = (BrushToolData *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  BaseContainer *arg3 = 0 ;
  BaseDraw *arg4 = (BaseDraw *) 0 ;
  EditorWindow *arg5 = (EditorWindow *) 0 ;
  BaseContainer *arg6 = 0 ;
  BrushVertexData *arg7 = (BrushVertexData *) 0 ;
  LONG arg8 ;
  Real arg9 ;
  Real arg10 ;
  LONG *arg11 = 0 ;
  Bool result;
  
  arg1 = (BrushToolData *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  arg4 = (BaseDraw *)jarg4; 
  arg5 = (EditorWindow *)jarg5; 
  arg6 = (BaseContainer *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer const & type is null", 0);
    return 0;
  } 
  arg7 = (BrushVertexData *)jarg7; 
  arg8 = (LONG)jarg8; 
  arg9 = (Real)jarg9; 
  arg10 = (Real)jarg10; 
  arg11 = (LONG *)jarg11;
  if (!arg11) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  result = (arg1)->BrushToolData::MouseInputDrag(arg2,*arg3,arg4,arg5,(BaseContainer const &)*arg6,arg7,arg8,arg9,arg10,*arg11);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BrushToolData_MouseInputEnd(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  BrushToolData *arg1 = (BrushToolData *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  BaseContainer *arg3 = 0 ;
  BaseDraw *arg4 = (BaseDraw *) 0 ;
  EditorWindow *arg5 = (EditorWindow *) 0 ;
  BaseContainer *arg6 = 0 ;
  Bool result;
  
  arg1 = (BrushToolData *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  arg4 = (BaseDraw *)jarg4; 
  arg5 = (EditorWindow *)jarg5; 
  arg6 = (BaseContainer *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer const & type is null", 0);
    return 0;
  } 
  result = (arg1)->MouseInputEnd(arg2,*arg3,arg4,arg5,(BaseContainer const &)*arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BrushToolData_MouseInputEndSwigExplicitBrushToolData(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  BrushToolData *arg1 = (BrushToolData *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  BaseContainer *arg3 = 0 ;
  BaseDraw *arg4 = (BaseDraw *) 0 ;
  EditorWindow *arg5 = (EditorWindow *) 0 ;
  BaseContainer *arg6 = 0 ;
  Bool result;
  
  arg1 = (BrushToolData *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  arg4 = (BaseDraw *)jarg4; 
  arg5 = (EditorWindow *)jarg5; 
  arg6 = (BaseContainer *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer const & type is null", 0);
    return 0;
  } 
  result = (arg1)->BrushToolData::MouseInputEnd(arg2,*arg3,arg4,arg5,(BaseContainer const &)*arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BrushToolData(void * jarg1) {
  BrushToolData *arg1 = (BrushToolData *) 0 ;
  
  arg1 = (BrushToolData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BrushToolData_director_connect(void *objarg, SwigDirector_BrushToolData::SWIG_Callback0_t callback0, SwigDirector_BrushToolData::SWIG_Callback1_t callback1, SwigDirector_BrushToolData::SWIG_Callback2_t callback2, SwigDirector_BrushToolData::SWIG_Callback3_t callback3, SwigDirector_BrushToolData::SWIG_Callback4_t callback4, SwigDirector_BrushToolData::SWIG_Callback5_t callback5, SwigDirector_BrushToolData::SWIG_Callback6_t callback6, SwigDirector_BrushToolData::SWIG_Callback7_t callback7, SwigDirector_BrushToolData::SWIG_Callback8_t callback8, SwigDirector_BrushToolData::SWIG_Callback9_t callback9, SwigDirector_BrushToolData::SWIG_Callback10_t callback10, SwigDirector_BrushToolData::SWIG_Callback11_t callback11) {
  BrushToolData *obj = (BrushToolData *)objarg;
  SwigDirector_BrushToolData *director = dynamic_cast<SwigDirector_BrushToolData *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HandleInfo() {
  void * jresult ;
  HandleInfo *result = 0 ;
  
  result = (HandleInfo *)new HandleInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HandleInfo(void * jarg1) {
  HandleInfo *arg1 = (HandleInfo *) 0 ;
  
  arg1 = (HandleInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HandleInfo_position_set(void * jarg1, Vector /* Vector_ctype */ jarg2) {
  HandleInfo *arg1 = (HandleInfo *) 0 ;
  Vector arg2 ;
  
  arg1 = (HandleInfo *)jarg1; 
  
  /* <Vector_in> */
  arg2 = *((Vector *)&(jarg2));
  /* </Vector_in> */
  
  if (arg1) (arg1)->position = arg2;
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_HandleInfo_position_get(void * jarg1) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  HandleInfo *arg1 = (HandleInfo *) 0 ;
  Vector result;
  
  arg1 = (HandleInfo *)jarg1; 
  result =  ((arg1)->position);
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HandleInfo_direction_set(void * jarg1, Vector /* Vector_ctype */ jarg2) {
  HandleInfo *arg1 = (HandleInfo *) 0 ;
  Vector arg2 ;
  
  arg1 = (HandleInfo *)jarg1; 
  
  /* <Vector_in> */
  arg2 = *((Vector *)&(jarg2));
  /* </Vector_in> */
  
  if (arg1) (arg1)->direction = arg2;
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_HandleInfo_direction_get(void * jarg1) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  HandleInfo *arg1 = (HandleInfo *) 0 ;
  Vector result;
  
  arg1 = (HandleInfo *)jarg1; 
  result =  ((arg1)->direction);
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HandleInfo_center_set(void * jarg1, Vector /* Vector_ctype */ jarg2) {
  HandleInfo *arg1 = (HandleInfo *) 0 ;
  Vector arg2 ;
  
  arg1 = (HandleInfo *)jarg1; 
  
  /* <Vector_in> */
  arg2 = *((Vector *)&(jarg2));
  /* </Vector_in> */
  
  if (arg1) (arg1)->center = arg2;
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_HandleInfo_center_get(void * jarg1) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  HandleInfo *arg1 = (HandleInfo *) 0 ;
  Vector result;
  
  arg1 = (HandleInfo *)jarg1; 
  result =  ((arg1)->center);
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HandleInfo_radius_set(void * jarg1, double jarg2) {
  HandleInfo *arg1 = (HandleInfo *) 0 ;
  Real arg2 ;
  
  arg1 = (HandleInfo *)jarg1; 
  arg2 = (Real)jarg2; 
  if (arg1) (arg1)->radius = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HandleInfo_radius_get(void * jarg1) {
  double jresult ;
  HandleInfo *arg1 = (HandleInfo *) 0 ;
  Real result;
  
  arg1 = (HandleInfo *)jarg1; 
  result =  ((arg1)->radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HandleInfo_type_set(void * jarg1, int jarg2) {
  HandleInfo *arg1 = (HandleInfo *) 0 ;
  HANDLECONSTRAINTTYPE arg2 ;
  
  arg1 = (HandleInfo *)jarg1; 
  arg2 = (HANDLECONSTRAINTTYPE)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HandleInfo_type_get(void * jarg1) {
  int jresult ;
  HandleInfo *arg1 = (HandleInfo *) 0 ;
  HANDLECONSTRAINTTYPE result;
  
  arg1 = (HandleInfo *)jarg1; 
  result = (HANDLECONSTRAINTTYPE) ((arg1)->type);
  jresult = result; 
  return jresult;
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_HandleInfo_CalculateNewPosition(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  HandleInfo *arg1 = (HandleInfo *) 0 ;
  BaseDraw *arg2 = (BaseDraw *) 0 ;
  Matrix *arg3 = 0 ;
  Vector *arg4 = 0 ;
  Vector result;
  
  arg1 = (HandleInfo *)jarg1; 
  arg2 = (BaseDraw *)jarg2; 
  arg3 = (Matrix *)jarg3; /* constMatrix&_in */
  arg4 = (Vector *)jarg4; /* Vector*&_in */
  result = ((HandleInfo const *)arg1)->CalculateNewPosition(arg2,(Matrix const &)*arg3,(Vector const &)*arg4);
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectData_GetDimension(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  ObjectData *arg1 = (ObjectData *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  Vector *arg3 = (Vector *) 0 ;
  Vector *arg4 = (Vector *) 0 ;
  
  arg1 = (ObjectData *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  arg3 = (Vector *)jarg3; /* Vector*&_in */
  arg4 = (Vector *)jarg4; /* Vector*&_in */
  (arg1)->GetDimension(arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ObjectData_Draw(void * jarg1, void * jarg2, int jarg3, void * jarg4, void * jarg5) {
  int jresult ;
  ObjectData *arg1 = (ObjectData *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  DRAWPASS arg3 ;
  BaseDraw *arg4 = (BaseDraw *) 0 ;
  BaseDrawHelp *arg5 = (BaseDrawHelp *) 0 ;
  DRAWRESULT result;
  
  arg1 = (ObjectData *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  arg3 = (DRAWPASS)jarg3; 
  arg4 = (BaseDraw *)jarg4; 
  arg5 = (BaseDrawHelp *)jarg5; 
  result = (DRAWRESULT)(arg1)->Draw(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ObjectData_DetectHandle(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5, int jarg6) {
  int jresult ;
  ObjectData *arg1 = (ObjectData *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  BaseDraw *arg3 = (BaseDraw *) 0 ;
  LONG arg4 ;
  LONG arg5 ;
  QUALIFIER arg6 ;
  LONG result;
  
  arg1 = (ObjectData *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  arg3 = (BaseDraw *)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (QUALIFIER)jarg6; 
  result = (arg1)->DetectHandle(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ObjectData_MoveHandle(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, int jarg6, void * jarg7) {
  unsigned int jresult ;
  ObjectData *arg1 = (ObjectData *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  BaseObject *arg3 = (BaseObject *) 0 ;
  Vector *arg4 = 0 ;
  LONG arg5 ;
  QUALIFIER arg6 ;
  BaseDraw *arg7 = (BaseDraw *) 0 ;
  Bool result;
  
  arg1 = (ObjectData *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  arg3 = (BaseObject *)jarg3; 
  arg4 = (Vector *)jarg4; /* Vector*&_in */
  arg5 = (LONG)jarg5; 
  arg6 = (QUALIFIER)jarg6; 
  arg7 = (BaseDraw *)jarg7; 
  result = (arg1)->MoveHandle(arg2,arg3,(Vector const &)*arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ObjectData_AddToExecution(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ObjectData *arg1 = (ObjectData *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  PriorityList *arg3 = (PriorityList *) 0 ;
  Bool result;
  
  arg1 = (ObjectData *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  arg3 = (PriorityList *)jarg3; 
  result = (arg1)->AddToExecution(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ObjectData_Execute(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, int jarg6) {
  int jresult ;
  ObjectData *arg1 = (ObjectData *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  BaseDocument *arg3 = (BaseDocument *) 0 ;
  BaseThread *arg4 = (BaseThread *) 0 ;
  LONG arg5 ;
  EXECUTIONFLAGS arg6 ;
  EXECUTIONRESULT result;
  
  arg1 = (ObjectData *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  arg3 = (BaseDocument *)jarg3; 
  arg4 = (BaseThread *)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (EXECUTIONFLAGS)jarg6; 
  result = (EXECUTIONRESULT)(arg1)->Execute(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectData_GetModelingAxis(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  ObjectData *arg1 = (ObjectData *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  BaseDocument *arg3 = (BaseDocument *) 0 ;
  Matrix *arg4 = 0 ;
  
  arg1 = (ObjectData *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  arg3 = (BaseDocument *)jarg3; 
  arg4 = (Matrix *)jarg4; /* Matrix*&_in */
  (arg1)->GetModelingAxis(arg2,arg3,*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectData_GetVirtualObjects(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ObjectData *arg1 = (ObjectData *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  HierarchyHelp *arg3 = (HierarchyHelp *) 0 ;
  BaseObject *result = 0 ;
  
  arg1 = (ObjectData *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  arg3 = (HierarchyHelp *)jarg3; 
  result = (BaseObject *)(arg1)->GetVirtualObjects(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ObjectData_ModifyObject(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, double jarg7, int jarg8, void * jarg9) {
  unsigned int jresult ;
  ObjectData *arg1 = (ObjectData *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  BaseDocument *arg3 = (BaseDocument *) 0 ;
  BaseObject *arg4 = (BaseObject *) 0 ;
  Matrix *arg5 = 0 ;
  Matrix *arg6 = 0 ;
  Real arg7 ;
  LONG arg8 ;
  BaseThread *arg9 = (BaseThread *) 0 ;
  Bool result;
  
  arg1 = (ObjectData *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  arg3 = (BaseDocument *)jarg3; 
  arg4 = (BaseObject *)jarg4; 
  arg5 = (Matrix *)jarg5; /* constMatrix&_in */
  arg6 = (Matrix *)jarg6; /* constMatrix&_in */
  arg7 = (Real)jarg7; 
  arg8 = (LONG)jarg8; 
  arg9 = (BaseThread *)jarg9; 
  result = (arg1)->ModifyObject(arg2,arg3,arg4,(Matrix const &)*arg5,(Matrix const &)*arg6,arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectData_CheckDirty(void * jarg1, void * jarg2, void * jarg3) {
  ObjectData *arg1 = (ObjectData *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  BaseDocument *arg3 = (BaseDocument *) 0 ;
  
  arg1 = (ObjectData *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  arg3 = (BaseDocument *)jarg3; 
  (arg1)->CheckDirty(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectData_GetContour(void * jarg1, void * jarg2, void * jarg3, double jarg4, void * jarg5) {
  void * jresult ;
  ObjectData *arg1 = (ObjectData *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  BaseDocument *arg3 = (BaseDocument *) 0 ;
  Real arg4 ;
  BaseThread *arg5 = (BaseThread *) 0 ;
  SplineObject *result = 0 ;
  
  arg1 = (ObjectData *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  arg3 = (BaseDocument *)jarg3; 
  arg4 = (Real)jarg4; 
  arg5 = (BaseThread *)jarg5; 
  result = (SplineObject *)(arg1)->GetContour(arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectData_ModifyParticles(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, double jarg6) {
  ObjectData *arg1 = (ObjectData *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  Particle *arg3 = (Particle *) 0 ;
  BaseParticle *arg4 = (BaseParticle *) 0 ;
  LONG arg5 ;
  Real arg6 ;
  
  arg1 = (ObjectData *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  arg3 = (Particle *)jarg3; 
  arg4 = (BaseParticle *)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (Real)jarg6; 
  (arg1)->ModifyParticles(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ObjectData_GetHandleCount(void * jarg1, void * jarg2) {
  int jresult ;
  ObjectData *arg1 = (ObjectData *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  LONG result;
  
  arg1 = (ObjectData *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  result = (arg1)->GetHandleCount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectData_GetHandle(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  ObjectData *arg1 = (ObjectData *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  LONG arg3 ;
  HandleInfo *arg4 = 0 ;
  
  arg1 = (ObjectData *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (HandleInfo *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HandleInfo & type is null", 0);
    return ;
  } 
  (arg1)->GetHandle(arg2,arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectData_SetHandle(void * jarg1, void * jarg2, int jarg3, Vector /* Vector_ctype */ jarg4, void * jarg5) {
  ObjectData *arg1 = (ObjectData *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  LONG arg3 ;
  Vector arg4 ;
  HandleInfo *arg5 = 0 ;
  
  arg1 = (ObjectData *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  arg3 = (LONG)jarg3; 
  
  /* <Vector_in> */
  arg4 = *((Vector *)&(jarg4));
  /* </Vector_in> */
  
  arg5 = (HandleInfo *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HandleInfo const & type is null", 0);
    return ;
  } 
  (arg1)->SetHandle(arg2,arg3,arg4,(HandleInfo const &)*arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ObjectData() {
  void * jresult ;
  ObjectData *result = 0 ;
  
  result = (ObjectData *)new ObjectData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ObjectData(void * jarg1) {
  ObjectData *arg1 = (ObjectData *) 0 ;
  
  arg1 = (ObjectData *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RegisterObjectPlugin(int jarg1, char * /* constString&_ctype */ jarg2, int jarg3, void* /* DataAllocator*_ctype */ jarg4, char * /* constString&_ctype */ jarg5, void * jarg6, int jarg7) {
  unsigned int jresult ;
  LONG arg1 ;
  String *arg2 = 0 ;
  LONG arg3 ;
  DataAllocator *arg4 = (DataAllocator *) 0 ;
  String *arg5 = 0 ;
  BaseBitmap *arg6 = (BaseBitmap *) 0 ;
  LONG arg7 ;
  Bool result;
  
  arg1 = (LONG)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (LONG)jarg3; 
  arg4 = (DataAllocator*)jarg4; /* DataAllocator*_in */
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg5_str(jarg5);
  arg5 = &arg5_str; 
  arg6 = (BaseBitmap *)jarg6; 
  arg7 = (LONG)jarg7; 
  result = RegisterObjectPlugin(arg1,(String const &)*arg2,arg3,arg4,(String const &)*arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DDescriptionParams_Desc_set(void * jarg1, void * jarg2) {
  DDescriptionParams *arg1 = (DDescriptionParams *) 0 ;
  Description *arg2 = (Description *) 0 ;
  
  arg1 = (DDescriptionParams *)jarg1; 
  arg2 = (Description *)jarg2; 
  if (arg1) (arg1)->Desc = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DDescriptionParams_Desc_get(void * jarg1) {
  void * jresult ;
  DDescriptionParams *arg1 = (DDescriptionParams *) 0 ;
  Description *result = 0 ;
  
  arg1 = (DDescriptionParams *)jarg1; 
  result = (Description *) ((arg1)->Desc);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DDescriptionParams_Flags_set(void * jarg1, int jarg2) {
  DDescriptionParams *arg1 = (DDescriptionParams *) 0 ;
  DESCFLAGS_DESC arg2 ;
  
  arg1 = (DDescriptionParams *)jarg1; 
  arg2 = (DESCFLAGS_DESC)jarg2; 
  if (arg1) (arg1)->Flags = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DDescriptionParams_Flags_get(void * jarg1) {
  int jresult ;
  DDescriptionParams *arg1 = (DDescriptionParams *) 0 ;
  DESCFLAGS_DESC result;
  
  arg1 = (DDescriptionParams *)jarg1; 
  result = (DESCFLAGS_DESC) ((arg1)->Flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DDescriptionParams() {
  void * jresult ;
  DDescriptionParams *result = 0 ;
  
  result = (DDescriptionParams *)new DDescriptionParams();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DDescriptionParams(void * jarg1) {
  DDescriptionParams *arg1 = (DDescriptionParams *) 0 ;
  
  arg1 = (DDescriptionParams *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ObjectDataM() {
  void * jresult ;
  ObjectDataM *result = 0 ;
  
  result = (ObjectDataM *)new SwigDirector_ObjectDataM();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ObjectDataM(void * jarg1) {
  ObjectDataM *arg1 = (ObjectDataM *) 0 ;
  
  arg1 = (ObjectDataM *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ObjectDataM_GetDDescription__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  ObjectDataM *arg1 = (ObjectDataM *) 0 ;
  GeListNode *arg2 = (GeListNode *) 0 ;
  Description *arg3 = (Description *) 0 ;
  DESCFLAGS_DESC *arg4 = 0 ;
  Bool result;
  
  arg1 = (ObjectDataM *)jarg1; 
  arg2 = (GeListNode *)jarg2; 
  arg3 = (Description *)jarg3; 
  arg4 = (DESCFLAGS_DESC *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DESCFLAGS_DESC & type is null", 0);
    return 0;
  } 
  result = (arg1)->GetDDescription(arg2,arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ObjectDataM_GetDDescriptionSwigExplicitObjectDataM__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  ObjectDataM *arg1 = (ObjectDataM *) 0 ;
  GeListNode *arg2 = (GeListNode *) 0 ;
  Description *arg3 = (Description *) 0 ;
  DESCFLAGS_DESC *arg4 = 0 ;
  Bool result;
  
  arg1 = (ObjectDataM *)jarg1; 
  arg2 = (GeListNode *)jarg2; 
  arg3 = (Description *)jarg3; 
  arg4 = (DESCFLAGS_DESC *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DESCFLAGS_DESC & type is null", 0);
    return 0;
  } 
  result = (arg1)->ObjectDataM::GetDDescription(arg2,arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ObjectDataM_GetDDescription__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ObjectDataM *arg1 = (ObjectDataM *) 0 ;
  GeListNode *arg2 = (GeListNode *) 0 ;
  DDescriptionParams *arg3 = (DDescriptionParams *) 0 ;
  Bool result;
  
  arg1 = (ObjectDataM *)jarg1; 
  arg2 = (GeListNode *)jarg2; 
  arg3 = (DDescriptionParams *)jarg3; 
  result = (arg1)->GetDDescription(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ObjectDataM_GetDDescriptionSwigExplicitObjectDataM__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ObjectDataM *arg1 = (ObjectDataM *) 0 ;
  GeListNode *arg2 = (GeListNode *) 0 ;
  DDescriptionParams *arg3 = (DDescriptionParams *) 0 ;
  Bool result;
  
  arg1 = (ObjectDataM *)jarg1; 
  arg2 = (GeListNode *)jarg2; 
  arg3 = (DDescriptionParams *)jarg3; 
  result = (arg1)->ObjectDataM::GetDDescription(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectDataM_GetDataInstance__SWIG_0(void * jarg1) {
  void * jresult ;
  BaseObject *arg1 = (BaseObject *) 0 ;
  BaseContainer *result = 0 ;
  
  arg1 = (BaseObject *)jarg1; 
  result = (BaseContainer *)ObjectDataM::GetDataInstance(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectDataM_GetDataInstance__SWIG_1(void * jarg1) {
  void * jresult ;
  GeListNode *arg1 = (GeListNode *) 0 ;
  BaseContainer *result = 0 ;
  
  arg1 = (GeListNode *)jarg1; 
  result = (BaseContainer *)ObjectDataM::GetDataInstance(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectDataM_director_connect(void *objarg, SwigDirector_ObjectDataM::SWIG_Callback0_t callback0, SwigDirector_ObjectDataM::SWIG_Callback1_t callback1, SwigDirector_ObjectDataM::SWIG_Callback2_t callback2, SwigDirector_ObjectDataM::SWIG_Callback3_t callback3, SwigDirector_ObjectDataM::SWIG_Callback4_t callback4, SwigDirector_ObjectDataM::SWIG_Callback5_t callback5, SwigDirector_ObjectDataM::SWIG_Callback6_t callback6, SwigDirector_ObjectDataM::SWIG_Callback7_t callback7, SwigDirector_ObjectDataM::SWIG_Callback8_t callback8, SwigDirector_ObjectDataM::SWIG_Callback9_t callback9, SwigDirector_ObjectDataM::SWIG_Callback10_t callback10, SwigDirector_ObjectDataM::SWIG_Callback11_t callback11, SwigDirector_ObjectDataM::SWIG_Callback12_t callback12, SwigDirector_ObjectDataM::SWIG_Callback13_t callback13, SwigDirector_ObjectDataM::SWIG_Callback14_t callback14, SwigDirector_ObjectDataM::SWIG_Callback15_t callback15, SwigDirector_ObjectDataM::SWIG_Callback16_t callback16, SwigDirector_ObjectDataM::SWIG_Callback17_t callback17, SwigDirector_ObjectDataM::SWIG_Callback18_t callback18, SwigDirector_ObjectDataM::SWIG_Callback19_t callback19, SwigDirector_ObjectDataM::SWIG_Callback20_t callback20, SwigDirector_ObjectDataM::SWIG_Callback21_t callback21, SwigDirector_ObjectDataM::SWIG_Callback22_t callback22, SwigDirector_ObjectDataM::SWIG_Callback23_t callback23, SwigDirector_ObjectDataM::SWIG_Callback24_t callback24, SwigDirector_ObjectDataM::SWIG_Callback25_t callback25, SwigDirector_ObjectDataM::SWIG_Callback26_t callback26, SwigDirector_ObjectDataM::SWIG_Callback27_t callback27, SwigDirector_ObjectDataM::SWIG_Callback28_t callback28, SwigDirector_ObjectDataM::SWIG_Callback29_t callback29, SwigDirector_ObjectDataM::SWIG_Callback30_t callback30, SwigDirector_ObjectDataM::SWIG_Callback31_t callback31) {
  ObjectDataM *obj = (ObjectDataM *)objarg;
  SwigDirector_ObjectDataM *director = dynamic_cast<SwigDirector_ObjectDataM *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25, callback26, callback27, callback28, callback29, callback30, callback31);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_GVdynamic_get() {
  int jresult ;
  int result;
  
  result = (int)GVdynamic;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_DYNAMIC_DATATYPE_get() {
  int jresult ;
  int result;
  
  result = (int)GV_DYNAMIC_DATATYPE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_OBJECT_OBJECT_ID_get() {
  int jresult ;
  int result;
  
  result = (int)GV_OBJECT_OBJECT_ID;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_OBJECT_PATH_TYPE_get() {
  int jresult ;
  int result;
  
  result = (int)GV_OBJECT_PATH_TYPE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_OBJECT_PATH_TYPE_START_get() {
  int jresult ;
  int result;
  
  result = (int)GV_OBJECT_PATH_TYPE_START;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_OBJECT_PATH_TYPE_ABSOLUTE_get() {
  int jresult ;
  int result;
  
  result = (int)GV_OBJECT_PATH_TYPE_ABSOLUTE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_OBJECT_PATH_TYPE_RELATIVE_get() {
  int jresult ;
  int result;
  
  result = (int)GV_OBJECT_PATH_TYPE_RELATIVE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_OBJECT_START_TYPE_ID_get() {
  int jresult ;
  int result;
  
  result = (int)GV_OBJECT_START_TYPE_ID;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_OBJECT_HISTORY_DEPTH_ID_get() {
  int jresult ;
  int result;
  
  result = (int)GV_OBJECT_HISTORY_DEPTH_ID;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_OBJECT_DISTANCE_ID_get() {
  int jresult ;
  int result;
  
  result = (int)GV_OBJECT_DISTANCE_ID;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_OBJECT_PATH_ID_get() {
  int jresult ;
  int result;
  
  result = (int)GV_OBJECT_PATH_ID;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_OBJECT_OPERATOR_LOCAL_IN_get() {
  int jresult ;
  int result;
  
  result = (int)GV_OBJECT_OPERATOR_LOCAL_IN;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_OBJECT_OPERATOR_GLOBAL_IN_get() {
  int jresult ;
  int result;
  
  result = (int)GV_OBJECT_OPERATOR_GLOBAL_IN;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_OBJECT_OPERATOR_HISTORY_IN_get() {
  int jresult ;
  int result;
  
  result = (int)GV_OBJECT_OPERATOR_HISTORY_IN;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_OBJECT_OPERATOR_OBJECT_IN_get() {
  int jresult ;
  int result;
  
  result = (int)GV_OBJECT_OPERATOR_OBJECT_IN;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_OBJECT_OPERATOR_ON_get() {
  int jresult ;
  int result;
  
  result = (int)GV_OBJECT_OPERATOR_ON;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_OBJECT_OPERATOR_LOCAL_OUT_get() {
  int jresult ;
  int result;
  
  result = (int)GV_OBJECT_OPERATOR_LOCAL_OUT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_OBJECT_OPERATOR_GLOBAL_OUT_get() {
  int jresult ;
  int result;
  
  result = (int)GV_OBJECT_OPERATOR_GLOBAL_OUT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_OBJECT_OPERATOR_OBJECT_OUT_get() {
  int jresult ;
  int result;
  
  result = (int)GV_OBJECT_OPERATOR_OBJECT_OUT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_OBJECT_OPERATOR_OLD_POS_OUT_get() {
  int jresult ;
  int result;
  
  result = (int)GV_OBJECT_OPERATOR_OLD_POS_OUT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_OBJECT_OPERATOR_OLD_ROT_OUT_get() {
  int jresult ;
  int result;
  
  result = (int)GV_OBJECT_OPERATOR_OLD_ROT_OUT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_OBJECT_OPERATOR_OLD_SIZE_OUT_get() {
  int jresult ;
  int result;
  
  result = (int)GV_OBJECT_OPERATOR_OLD_SIZE_OUT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_OBJECT_OPERATOR_OLD_GLOBAL_OUT_get() {
  int jresult ;
  int result;
  
  result = (int)GV_OBJECT_OPERATOR_OLD_GLOBAL_OUT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_OBJECT_OPERATOR_OLD_LOCAL_OUT_get() {
  int jresult ;
  int result;
  
  result = (int)GV_OBJECT_OPERATOR_OLD_LOCAL_OUT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_OBJECT_OPERATOR_VELOCITY_POS_OUT_get() {
  int jresult ;
  int result;
  
  result = (int)GV_OBJECT_OPERATOR_VELOCITY_POS_OUT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_OBJECT_OPERATOR_VELOCITY_ROT_OUT_get() {
  int jresult ;
  int result;
  
  result = (int)GV_OBJECT_OPERATOR_VELOCITY_ROT_OUT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_OBJECT_OPERATOR_VELOCITY_SIZE_OUT_get() {
  int jresult ;
  int result;
  
  result = (int)GV_OBJECT_OPERATOR_VELOCITY_SIZE_OUT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_MATH_FUNCTION_ID_get() {
  int jresult ;
  int result;
  
  result = (int)GV_MATH_FUNCTION_ID;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_ADD_NODE_FUNCTION_get() {
  int jresult ;
  int result;
  
  result = (int)GV_ADD_NODE_FUNCTION;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_SUB_NODE_FUNCTION_get() {
  int jresult ;
  int result;
  
  result = (int)GV_SUB_NODE_FUNCTION;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_MUL_NODE_FUNCTION_get() {
  int jresult ;
  int result;
  
  result = (int)GV_MUL_NODE_FUNCTION;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_DIV_NODE_FUNCTION_get() {
  int jresult ;
  int result;
  
  result = (int)GV_DIV_NODE_FUNCTION;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_MOD_NODE_FUNCTION_get() {
  int jresult ;
  int result;
  
  result = (int)GV_MOD_NODE_FUNCTION;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_MATH_INPUT_get() {
  int jresult ;
  int result;
  
  result = (int)GV_MATH_INPUT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_MATH_OUTPUT_get() {
  int jresult ;
  int result;
  
  result = (int)GV_MATH_OUTPUT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_MATH__get() {
  int jresult ;
  int result;
  
  result = (int)GV_MATH_;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_NODEMASTER_VERSION_get() {
  int jresult ;
  int result;
  
  result = (int)(5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_NODE_VERSION_get() {
  int jresult ;
  int result;
  
  result = (int)(5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_GROUPNODE_VERSION_get() {
  int jresult ;
  int result;
  
  result = (int)(5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_GROUP_get() {
  int jresult ;
  int result;
  
  result = (int)(5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_DUMMY_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_OBJECT_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_RANDOM_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_REAL2VECT_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_VECT2REAL_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_ADAPTER_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_CROSS_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_EQU_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_NIL_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_TIME_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_TRIGO_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_MATRIX2VECT_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_VECT2MATRIX_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_NOT_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_POINT_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_CLAMP_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_VECTCALCMATRIX_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_MATRIXCALCHPB_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_DISTANCE_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_CONDITION_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_RESULT_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_SPY_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_CONST_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_MATH_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_BOOL_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_INV_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_NEG_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_CMP_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_ORDER_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_SWITCH_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_MIX_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_COMMENT_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_MEMORY_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_ITERATE_get() {
  int jresult ;
  int result;
  
  result = (int)(4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_FREEZE_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_FORMULA_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_ABS_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_DEGREE_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_RANGEMAPPER_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_FLOATMATH_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_FLOATFUNC_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_POLYGON_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_DOT_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_COLORSPACE_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_SOUND_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_NOISE_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_TRIGGER_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_BOX_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_COLLISION_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_SPLINE_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_MATRIXMULVECTOR_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_SELECTION_get() {
  int jresult ;
  int result;
  
  result = (int)(3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_HIERARCHY_get() {
  int jresult ;
  int result;
  
  result = (int)(3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_DETAILS_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_TAG_get() {
  int jresult ;
  int result;
  
  result = (int)(3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_COFFEE_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_MONOFLOP_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_REFERENCE_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_WEIGHTMAP_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_MATERIAL_get() {
  int jresult ;
  int result;
  
  result = (int)(3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_INCLUDE_get() {
  int jresult ;
  int result;
  
  result = (int)(3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_LINK_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_RAY_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_BITMAP_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VERSION_OPERATOR_COLORTEMP_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_NODEMASTER_RELEASE_get() {
  int jresult ;
  int result;
  
  result = (int)((1102));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GRAPHVIEW_CORE_PRIORITY_get() {
  int jresult ;
  int result;
  
  result = (int)(30000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GRAPHVIEW_EDITOR_PRIORITY_get() {
  int jresult ;
  int result;
  
  result = (int)(2000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GRAPHVIEW_HOOK_PRIORITY_get() {
  int jresult ;
  int result;
  
  result = (int)(1000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_GRAPHVIEW_get() {
  int jresult ;
  int result;
  
  result = (int)(1001100);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_GV_NODEDATA_get() {
  int jresult ;
  int result;
  
  result = (int)(1001101);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_GV_GROUPDATA_get() {
  int jresult ;
  int result;
  
  result = (int)(1001102);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_GV_NODEMASTERDATA_get() {
  int jresult ;
  int result;
  
  result = (int)(1001103);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_GRAPHVIEW_PRIVATE_get() {
  int jresult ;
  int result;
  
  result = (int)(1001104);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_GV_VALGROUP_TYPE_GENERAL_get() {
  int jresult ;
  int result;
  
  result = (int)(1001110);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_GV_OPCLASS_TYPE_GENERAL_get() {
  int jresult ;
  int result;
  
  result = (int)(1001111);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_GV_OPGROUP_TYPE_GENERAL_get() {
  int jresult ;
  int result;
  
  result = (int)(1001112);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_GV_OPGROUP_TYPE_ADAPTER_get() {
  int jresult ;
  int result;
  
  result = (int)(1001113);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_GV_OPGROUP_TYPE_BOOL_get() {
  int jresult ;
  int result;
  
  result = (int)(1001114);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_GV_OPGROUP_TYPE_CALCULATE_get() {
  int jresult ;
  int result;
  
  result = (int)(1001115);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_GV_OPGROUP_TYPE_LOGICAL_get() {
  int jresult ;
  int result;
  
  result = (int)(1001116);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_GV_OPGROUP_TYPE_ITERATOR_get() {
  int jresult ;
  int result;
  
  result = (int)(1001117);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_GV_OPGROUP_TYPE_SCRIPTING_get() {
  int jresult ;
  int result;
  
  result = (int)(1026358);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_GV_VALUE_TYPE_NONE_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_GV_VALUE_TYPE_UNDEFINED_get() {
  int jresult ;
  int result;
  
  result = (int)(400007000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_GV_VALUE_TYPE_BOOL_get() {
  int jresult ;
  int result;
  
  result = (int)(400007001);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_GV_VALUE_TYPE_INTEGER_get() {
  int jresult ;
  int result;
  
  result = (int)(400007002);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_GV_VALUE_TYPE_REAL_get() {
  int jresult ;
  int result;
  
  result = (int)(400007003);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_GV_VALUE_TYPE_VECTOR_get() {
  int jresult ;
  int result;
  
  result = (int)(400007004);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_GV_VALUE_TYPE_NORMAL_get() {
  int jresult ;
  int result;
  
  result = (int)(400007005);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_GV_VALUE_TYPE_MATRIX_get() {
  int jresult ;
  int result;
  
  result = (int)(400007006);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_GV_VALUE_TYPE_TIME_get() {
  int jresult ;
  int result;
  
  result = (int)(400007007);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_GV_VALUE_TYPE_STRING_get() {
  int jresult ;
  int result;
  
  result = (int)(400007008);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_GV_VALUE_TYPE_GENERAL_OBJECT_get() {
  int jresult ;
  int result;
  
  result = (int)(400007009);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_GV_VALUE_TYPE_GENERAL_TAG_get() {
  int jresult ;
  int result;
  
  result = (int)(400007010);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_GV_VALUE_TYPE_GENERAL_MATERIAL_get() {
  int jresult ;
  int result;
  
  result = (int)(400007011);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_GV_VALUE_TYPE_GENERAL_INSTANCE_get() {
  int jresult ;
  int result;
  
  result = (int)(400007012);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_GV_DATA_TYPE_NONE_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_GV_DATA_TYPE_UNDEFINED_get() {
  int jresult ;
  int result;
  
  result = (int)(400006000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_GV_DATA_TYPE_BOOL_get() {
  int jresult ;
  int result;
  
  result = (int)(400006001);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_GV_DATA_TYPE_INTEGER_get() {
  int jresult ;
  int result;
  
  result = (int)(15);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_GV_DATA_TYPE_REAL_get() {
  int jresult ;
  int result;
  
  result = (int)(19);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_GV_DATA_TYPE_VECTOR_get() {
  int jresult ;
  int result;
  
  result = (int)(23);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_GV_DATA_TYPE_NORMAL_get() {
  int jresult ;
  int result;
  
  result = (int)(400006005);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_GV_DATA_TYPE_MATRIX_get() {
  int jresult ;
  int result;
  
  result = (int)(25);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_GV_DATA_TYPE_TIME_get() {
  int jresult ;
  int result;
  
  result = (int)(22);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_GV_DATA_TYPE_STRING_get() {
  int jresult ;
  int result;
  
  result = (int)(130);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_GV_DATA_TYPE_GENERAL_OBJECT_get() {
  int jresult ;
  int result;
  
  result = (int)(400006009);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_GV_DATA_TYPE_GENERAL_TAG_get() {
  int jresult ;
  int result;
  
  result = (int)(400006010);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_GV_DATA_TYPE_GENERAL_MATERIAL_get() {
  int jresult ;
  int result;
  
  result = (int)(400006011);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_GV_DATA_TYPE_GENERAL_INSTANCE_get() {
  int jresult ;
  int result;
  
  result = (int)(400006012);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CUSTOMGUI_NORMAL_get() {
  int jresult ;
  int result;
  
  result = (int)(400006005);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_GV_OPERATOR_DUMMY_get() {
  int jresult ;
  int result;
  
  result = (int)(1001143);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_GV_OPERATOR_GROUP_get() {
  int jresult ;
  int result;
  
  result = (int)(1001144);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_OBJECT_get() {
  int jresult ;
  int result;
  
  result = (int)(400001000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_RANDOM_get() {
  int jresult ;
  int result;
  
  result = (int)(400001100);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_REAL2VECT_get() {
  int jresult ;
  int result;
  
  result = (int)(400001101);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_VECT2REAL_get() {
  int jresult ;
  int result;
  
  result = (int)(400001102);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_ADAPTER_get() {
  int jresult ;
  int result;
  
  result = (int)(400001103);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_CROSS_get() {
  int jresult ;
  int result;
  
  result = (int)(400001104);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_EQU_get() {
  int jresult ;
  int result;
  
  result = (int)(400001105);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_NIL_get() {
  int jresult ;
  int result;
  
  result = (int)(400001106);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_TIME_get() {
  int jresult ;
  int result;
  
  result = (int)(400001107);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_TRIGO_get() {
  int jresult ;
  int result;
  
  result = (int)(400001108);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_MATRIX2VECT_get() {
  int jresult ;
  int result;
  
  result = (int)(400001109);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_VECT2MATRIX_get() {
  int jresult ;
  int result;
  
  result = (int)(400001110);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_NOT_get() {
  int jresult ;
  int result;
  
  result = (int)(400001111);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_POINT_get() {
  int jresult ;
  int result;
  
  result = (int)(400001112);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_CLAMP_get() {
  int jresult ;
  int result;
  
  result = (int)(400001113);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_VECTCALCMATRIX_get() {
  int jresult ;
  int result;
  
  result = (int)(400001114);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_MATRIXCALCHPB_get() {
  int jresult ;
  int result;
  
  result = (int)(400001115);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_DISTANCE_get() {
  int jresult ;
  int result;
  
  result = (int)(400001116);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_CONDITION_get() {
  int jresult ;
  int result;
  
  result = (int)(400001117);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_RESULT_get() {
  int jresult ;
  int result;
  
  result = (int)(400001118);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_SPY_get() {
  int jresult ;
  int result;
  
  result = (int)(400001119);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_CONST_get() {
  int jresult ;
  int result;
  
  result = (int)(400001120);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_MATH_get() {
  int jresult ;
  int result;
  
  result = (int)(400001121);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_BOOL_get() {
  int jresult ;
  int result;
  
  result = (int)(400001122);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_INV_get() {
  int jresult ;
  int result;
  
  result = (int)(400001123);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_NEG_get() {
  int jresult ;
  int result;
  
  result = (int)(400001124);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_CMP_get() {
  int jresult ;
  int result;
  
  result = (int)(400001125);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_ORDER_get() {
  int jresult ;
  int result;
  
  result = (int)(400001126);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_SWITCH_get() {
  int jresult ;
  int result;
  
  result = (int)(400001127);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_MIX_get() {
  int jresult ;
  int result;
  
  result = (int)(400001128);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_COMMENT_get() {
  int jresult ;
  int result;
  
  result = (int)(400001129);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_MEMORY_get() {
  int jresult ;
  int result;
  
  result = (int)(400001130);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_ITERATE_get() {
  int jresult ;
  int result;
  
  result = (int)(400001131);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_FREEZE_get() {
  int jresult ;
  int result;
  
  result = (int)(400001132);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_FORMULA_get() {
  int jresult ;
  int result;
  
  result = (int)(400001133);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_ABS_get() {
  int jresult ;
  int result;
  
  result = (int)(400001134);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_DEGREE_get() {
  int jresult ;
  int result;
  
  result = (int)(400001135);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_RANGEMAPPER_get() {
  int jresult ;
  int result;
  
  result = (int)(400001136);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_FLOATMATH_get() {
  int jresult ;
  int result;
  
  result = (int)(400001138);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_FLOATFUNC_get() {
  int jresult ;
  int result;
  
  result = (int)(400001139);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_POLYGON_get() {
  int jresult ;
  int result;
  
  result = (int)(400001140);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_DOT_get() {
  int jresult ;
  int result;
  
  result = (int)(400001141);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_COLORSPACE_get() {
  int jresult ;
  int result;
  
  result = (int)(400001142);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_SOUND_get() {
  int jresult ;
  int result;
  
  result = (int)(400001143);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_NOISE_get() {
  int jresult ;
  int result;
  
  result = (int)(400001144);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_TRIGGER_get() {
  int jresult ;
  int result;
  
  result = (int)(400001145);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_BOX_get() {
  int jresult ;
  int result;
  
  result = (int)(400001146);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_COLLISION_get() {
  int jresult ;
  int result;
  
  result = (int)(400001147);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_SPLINE_get() {
  int jresult ;
  int result;
  
  result = (int)(400001148);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_MATRIXMULVECTOR_get() {
  int jresult ;
  int result;
  
  result = (int)(400001149);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_SELECTION_get() {
  int jresult ;
  int result;
  
  result = (int)(400001150);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_HIERARCHY_get() {
  int jresult ;
  int result;
  
  result = (int)(400001151);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_DETAILS_get() {
  int jresult ;
  int result;
  
  result = (int)(400001152);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_TAG_get() {
  int jresult ;
  int result;
  
  result = (int)(400001153);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_COFFEE_get() {
  int jresult ;
  int result;
  
  result = (int)(400001154);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_MONOFLOP_get() {
  int jresult ;
  int result;
  
  result = (int)(400001155);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_REFERENCE_get() {
  int jresult ;
  int result;
  
  result = (int)(400001156);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_WEIGHTMAP_get() {
  int jresult ;
  int result;
  
  result = (int)(400001157);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_MATERIAL_get() {
  int jresult ;
  int result;
  
  result = (int)(400001158);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_INCLUDE_get() {
  int jresult ;
  int result;
  
  result = (int)(400001159);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_LINK_get() {
  int jresult ;
  int result;
  
  result = (int)(400001160);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_RAY_get() {
  int jresult ;
  int result;
  
  result = (int)(400001161);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_BITMAP_get() {
  int jresult ;
  int result;
  
  result = (int)(450000037);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATOR_COLORTEMP_get() {
  int jresult ;
  int result;
  
  result = (int)(450000060);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_GV_SYSTEM_OWNER_get() {
  int jresult ;
  int result;
  
  result = (int)(1001140);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_GV_GENERAL_OWNER_get() {
  int jresult ;
  int result;
  
  result = (int)(1001141);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_GV_IGNORE_OWNER_get() {
  int jresult ;
  int result;
  
  result = (int)(1001142);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATORPOOL_PLUGIN_get() {
  int jresult ;
  int result;
  
  result = (int)(1001138);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_TREEVIEW_PLUGIN_get() {
  int jresult ;
  int result;
  
  result = (int)(1001145);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OBJECT_PLUGIN_get() {
  int jresult ;
  int result;
  
  result = (int)(1001146);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_SCENEHOOK_PLUGIN_get() {
  int jresult ;
  int result;
  
  result = (int)(1001147);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_EXPRESSION_PLUGIN_get() {
  int jresult ;
  int result;
  
  result = (int)(1001148);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_EXPRESSION_TAG_get() {
  int jresult ;
  int result;
  
  result = (int)(1001149);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_GRAPHVIEW_PREFS_get() {
  int jresult ;
  int result;
  
  result = (int)(400005000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_GRAPHVIEW_GUI_PREFS_get() {
  int jresult ;
  int result;
  
  result = (int)(400005001);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_GRAPHVIEW_COLORS_PREFS_get() {
  int jresult ;
  int result;
  
  result = (int)(400005002);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_GRAPHVIEW_WORLD_PREFS_get() {
  int jresult ;
  int result;
  
  result = (int)(400005003);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_GRAPHVIEW_MASTER_PREFS_get() {
  int jresult ;
  int result;
  
  result = (int)(400005004);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DRAGTYPE_GVNODE_EDITOR_get() {
  int jresult ;
  int result;
  
  result = (int)(400007000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DRAGTYPE_GVNODE_MANAGER_get() {
  int jresult ;
  int result;
  
  result = (int)(400007001);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DRAGTYPE_GVNODE_STORE_get() {
  int jresult ;
  int result;
  
  result = (int)(400007002);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DRAGTYPE_GVNODE_DUMMY_get() {
  int jresult ;
  int result;
  
  result = (int)(400007003);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_OPERATORCONTAINER_get() {
  int jresult ;
  int result;
  
  result = (int)(1000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ID_SHAPECONTAINER_get() {
  int jresult ;
  int result;
  
  result = (int)(1001);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_GROUP_INPUT_FIRST_PRIVATE_ID_get() {
  int jresult ;
  int result;
  
  result = (int)GV_GROUP_INPUT_FIRST_PRIVATE_ID;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_GROUP_INPUT_LAST_PRIVATE_ID_get() {
  int jresult ;
  int result;
  
  result = (int)GV_GROUP_INPUT_LAST_PRIVATE_ID;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_GROUP_OUTPUT_FIRST_PRIVATE_ID_get() {
  int jresult ;
  int result;
  
  result = (int)GV_GROUP_OUTPUT_FIRST_PRIVATE_ID;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_GROUP_OUTPUT_LAST_PRIVATE_ID_get() {
  int jresult ;
  int result;
  
  result = (int)GV_GROUP_OUTPUT_LAST_PRIVATE_ID;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_GROUP_INPUT_FIRST_ID_get() {
  int jresult ;
  int result;
  
  result = (int)GV_GROUP_INPUT_FIRST_ID;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_GROUP_INPUT_LAST_ID_get() {
  int jresult ;
  int result;
  
  result = (int)GV_GROUP_INPUT_LAST_ID;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_GROUP_OUTPUT_FIRST_ID_get() {
  int jresult ;
  int result;
  
  result = (int)GV_GROUP_OUTPUT_FIRST_ID;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_GROUP_OUTPUT_LAST_ID_get() {
  int jresult ;
  int result;
  
  result = (int)GV_GROUP_OUTPUT_LAST_ID;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_OPERATOR_PORTS_ID_get() {
  int jresult ;
  int result;
  
  result = (int)(101);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_OPERATOR_DATA_ID_get() {
  int jresult ;
  int result;
  
  result = (int)(102);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_MESSAGE_FIRST_DATA_ID_get() {
  int jresult ;
  int result;
  
  result = (int)GV_MESSAGE_FIRST_DATA_ID;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_INITIAL_OPCLASS_SUB_ID_get() {
  int jresult ;
  int result;
  
  result = (int)((-1));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_INITIAL_OPGROUP_SUB_ID_get() {
  int jresult ;
  int result;
  
  result = (int)((-1));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_INITIAL_VALGROUP_SUB_ID_get() {
  int jresult ;
  int result;
  
  result = (int)((-1));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_INITIAL_DATA_SUB_ID_get() {
  int jresult ;
  int result;
  
  result = (int)((-1));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_INITIAL_VALUE_SUB_ID_get() {
  int jresult ;
  int result;
  
  result = (int)((-1));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_COPY_OFFSET_X_get() {
  int jresult ;
  int result;
  
  result = (int)(10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_COPY_OFFSET_Y_get() {
  int jresult ;
  int result;
  
  result = (int)(10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_PACK_NODES_EXTRA_BORDER_get() {
  int jresult ;
  int result;
  
  result = (int)(12);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_OPTIMIZE_NODES_EXTRA_BORDER_get() {
  int jresult ;
  int result;
  
  result = (int)(6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_NODE_INVALID_INDEX_get() {
  int jresult ;
  int result;
  
  result = (int)((-1));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_PORT_INVALID_ID_get() {
  int jresult ;
  int result;
  
  result = (int)((-1));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_PORT_INVALID_INDEX_get() {
  int jresult ;
  int result;
  
  result = (int)((-1));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_PORT_INVALID_SUB_ID_get() {
  int jresult ;
  int result;
  
  result = (int)((-1));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_USERDATA_INVALID_ID_get() {
  int jresult ;
  int result;
  
  result = (int)((-1));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_OPERATOR_INVALID_ID_get() {
  int jresult ;
  int result;
  
  result = (int)((-1));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_INVALID_get() {
  int jresult ;
  int result;
  
  result = (int)GV_INVALID;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_ATOMARRAY_get() {
  int jresult ;
  int result;
  
  result = (int)GV_ATOMARRAY;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_BOOL_get() {
  int jresult ;
  int result;
  
  result = (int)GV_BOOL;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_INT_get() {
  int jresult ;
  int result;
  
  result = (int)GV_INT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_REAL_get() {
  int jresult ;
  int result;
  
  result = (int)GV_REAL;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_VECTOR_get() {
  int jresult ;
  int result;
  
  result = (int)GV_VECTOR;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_NORMAL_get() {
  int jresult ;
  int result;
  
  result = (int)GV_NORMAL;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_MATRIX_get() {
  int jresult ;
  int result;
  
  result = (int)GV_MATRIX;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_TIME_get() {
  int jresult ;
  int result;
  
  result = (int)GV_TIME;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_STRING_get() {
  int jresult ;
  int result;
  
  result = (int)GV_STRING;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_ATOM_get() {
  int jresult ;
  int result;
  
  result = (int)GV_ATOM;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_USERDEF_get() {
  int jresult ;
  int result;
  
  result = (int)GV_USERDEF;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_GUI_PREFERENCES_ID_get() {
  int jresult ;
  int result;
  
  result = (int)(40000000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_WORLD_PREFERENCES_ID_get() {
  int jresult ;
  int result;
  
  result = (int)(40000001);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_MASTER_PREFERENCES_ID_get() {
  int jresult ;
  int result;
  
  result = (int)(40000002);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_RESOURCE_SYMBOL_MAX_LENGTH_get() {
  int jresult ;
  int result;
  
  result = (int)(32);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_DATAHANDLER_FLAGS_DISCLEVEL_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 0));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_CONSTANT_NONE_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_CONSTANT_FIRST_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvDataInfo_data_handler_set(void * jarg1, void * jarg2) {
  GvDataInfo *arg1 = (GvDataInfo *) 0 ;
  GV_DATA_HANDLER *arg2 = (GV_DATA_HANDLER *) 0 ;
  
  arg1 = (GvDataInfo *)jarg1; 
  arg2 = (GV_DATA_HANDLER *)jarg2; 
  if (arg1) (arg1)->data_handler = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvDataInfo_data_handler_get(void * jarg1) {
  void * jresult ;
  GvDataInfo *arg1 = (GvDataInfo *) 0 ;
  GV_DATA_HANDLER *result = 0 ;
  
  arg1 = (GvDataInfo *)jarg1; 
  result = (GV_DATA_HANDLER *) ((arg1)->data_handler);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvDataInfo_value_handler_set(void * jarg1, void * jarg2) {
  GvDataInfo *arg1 = (GvDataInfo *) 0 ;
  GV_VALUE_HANDLER *arg2 = (GV_VALUE_HANDLER *) 0 ;
  
  arg1 = (GvDataInfo *)jarg1; 
  arg2 = (GV_VALUE_HANDLER *)jarg2; 
  if (arg1) (arg1)->value_handler = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvDataInfo_value_handler_get(void * jarg1) {
  void * jresult ;
  GvDataInfo *arg1 = (GvDataInfo *) 0 ;
  GV_VALUE_HANDLER *result = 0 ;
  
  arg1 = (GvDataInfo *)jarg1; 
  result = (GV_VALUE_HANDLER *) ((arg1)->value_handler);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvDataInfo_group_handler_set(void * jarg1, void * jarg2) {
  GvDataInfo *arg1 = (GvDataInfo *) 0 ;
  GV_VALGROUP_HANDLER *arg2 = (GV_VALGROUP_HANDLER *) 0 ;
  
  arg1 = (GvDataInfo *)jarg1; 
  arg2 = (GV_VALGROUP_HANDLER *)jarg2; 
  if (arg1) (arg1)->group_handler = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvDataInfo_group_handler_get(void * jarg1) {
  void * jresult ;
  GvDataInfo *arg1 = (GvDataInfo *) 0 ;
  GV_VALGROUP_HANDLER *result = 0 ;
  
  arg1 = (GvDataInfo *)jarg1; 
  result = (GV_VALGROUP_HANDLER *) ((arg1)->group_handler);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GvDataInfo() {
  void * jresult ;
  GvDataInfo *result = 0 ;
  
  result = (GvDataInfo *)new GvDataInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GvDataInfo(void * jarg1) {
  GvDataInfo *arg1 = (GvDataInfo *) 0 ;
  
  arg1 = (GvDataInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_INDEX_GV_VALUE_TYPE_UNDEFINED_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_INDEX_GV_DATA_TYPE_UNDEFINED_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_INDEX_GV_GROUP_TYPE_UNDEFINED_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_INDEX_GV_CLASS_TYPE_UNDEFINED_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_INDEX_GV_VALUE_TYPE_INVALID_get() {
  int jresult ;
  int result;
  
  result = (int)((-1));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_INDEX_GV_DATA_TYPE_INVALID_get() {
  int jresult ;
  int result;
  
  result = (int)((-1));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_INDEX_GV_GROUP_TYPE_INVALID_get() {
  int jresult ;
  int result;
  
  result = (int)((-1));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_INDEX_GV_CLASS_TYPE_INVALID_get() {
  int jresult ;
  int result;
  
  result = (int)((-1));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_DATA_TYPE_MENU_OFFSET_get() {
  int jresult ;
  int result;
  
  result = (int)(1000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_GV_VALUE_SEPERATOR_CHR_get() {
  char jresult ;
  char result;
  
  result = (char)(';');
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_GV_ELEMENT_SEPERATOR_CHR_get() {
  char jresult ;
  char result;
  
  result = (char)('|');
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GvDestination() {
  void * jresult ;
  GvDestination *result = 0 ;
  
  result = (GvDestination *)new GvDestination();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvDestination_node_set(void * jarg1, void * jarg2) {
  GvDestination *arg1 = (GvDestination *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  
  arg1 = (GvDestination *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  if (arg1) (arg1)->node = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvDestination_node_get(void * jarg1) {
  void * jresult ;
  GvDestination *arg1 = (GvDestination *) 0 ;
  GvNode *result = 0 ;
  
  arg1 = (GvDestination *)jarg1; 
  result = (GvNode *) ((arg1)->node);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvDestination_port_set(void * jarg1, void * jarg2) {
  GvDestination *arg1 = (GvDestination *) 0 ;
  GvPort *arg2 = (GvPort *) 0 ;
  
  arg1 = (GvDestination *)jarg1; 
  arg2 = (GvPort *)jarg2; 
  if (arg1) (arg1)->port = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvDestination_port_get(void * jarg1) {
  void * jresult ;
  GvDestination *arg1 = (GvDestination *) 0 ;
  GvPort *result = 0 ;
  
  arg1 = (GvDestination *)jarg1; 
  result = (GvPort *) ((arg1)->port);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GvDestination(void * jarg1) {
  GvDestination *arg1 = (GvDestination *) 0 ;
  
  arg1 = (GvDestination *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GvPortDescription() {
  void * jresult ;
  GvPortDescription *result = 0 ;
  
  result = (GvPortDescription *)new GvPortDescription();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvPortDescription_name_set(void * jarg1, char * /* constString&_ctype */ jarg2) {
  GvPortDescription *arg1 = (GvPortDescription *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (GvPortDescription *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT char * /* constString&_ctype */ SWIGSTDCALL CSharp_GvPortDescription_name_get(void * jarg1) {
  char * /* constString&_ctype */ jresult ;
  GvPortDescription *arg1 = (GvPortDescription *) 0 ;
  String *result = 0 ;
  
  arg1 = (GvPortDescription *)jarg1; 
  result = (String *) & ((arg1)->name);
  jresult = SWIG_csharp_string_callback(result->GetCStringCopy()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvPortDescription_flags_set(void * jarg1, int jarg2) {
  GvPortDescription *arg1 = (GvPortDescription *) 0 ;
  GvPortDescFlags arg2 ;
  
  arg1 = (GvPortDescription *)jarg1; 
  arg2 = (GvPortDescFlags)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvPortDescription_flags_get(void * jarg1) {
  int jresult ;
  GvPortDescription *arg1 = (GvPortDescription *) 0 ;
  GvPortDescFlags result;
  
  arg1 = (GvPortDescription *)jarg1; 
  result = (GvPortDescFlags) ((arg1)->flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvPortDescription_data_id_set(void * jarg1, int jarg2) {
  GvPortDescription *arg1 = (GvPortDescription *) 0 ;
  GvDataID arg2 ;
  
  arg1 = (GvPortDescription *)jarg1; 
  arg2 = (GvDataID)jarg2; 
  if (arg1) (arg1)->data_id = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvPortDescription_data_id_get(void * jarg1) {
  int jresult ;
  GvPortDescription *arg1 = (GvPortDescription *) 0 ;
  GvDataID result;
  
  arg1 = (GvPortDescription *)jarg1; 
  result =  ((arg1)->data_id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvPortDescription_ports_min_set(void * jarg1, int jarg2) {
  GvPortDescription *arg1 = (GvPortDescription *) 0 ;
  LONG arg2 ;
  
  arg1 = (GvPortDescription *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->ports_min = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvPortDescription_ports_min_get(void * jarg1) {
  int jresult ;
  GvPortDescription *arg1 = (GvPortDescription *) 0 ;
  LONG result;
  
  arg1 = (GvPortDescription *)jarg1; 
  result =  ((arg1)->ports_min);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvPortDescription_ports_max_set(void * jarg1, int jarg2) {
  GvPortDescription *arg1 = (GvPortDescription *) 0 ;
  LONG arg2 ;
  
  arg1 = (GvPortDescription *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->ports_max = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvPortDescription_ports_max_get(void * jarg1) {
  int jresult ;
  GvPortDescription *arg1 = (GvPortDescription *) 0 ;
  LONG result;
  
  arg1 = (GvPortDescription *)jarg1; 
  result =  ((arg1)->ports_max);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvPortDescription_parent_id_set(void * jarg1, int jarg2) {
  GvPortDescription *arg1 = (GvPortDescription *) 0 ;
  LONG arg2 ;
  
  arg1 = (GvPortDescription *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->parent_id = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvPortDescription_parent_id_get(void * jarg1) {
  int jresult ;
  GvPortDescription *arg1 = (GvPortDescription *) 0 ;
  LONG result;
  
  arg1 = (GvPortDescription *)jarg1; 
  result =  ((arg1)->parent_id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GvPortDescription(void * jarg1) {
  GvPortDescription *arg1 = (GvPortDescription *) 0 ;
  
  arg1 = (GvPortDescription *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvPortInfo_io_set(void * jarg1, char * /* constString&_ctype */ jarg2) {
  GvPortInfo *arg1 = (GvPortInfo *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (GvPortInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->io = *arg2;
}


SWIGEXPORT char * /* constString&_ctype */ SWIGSTDCALL CSharp_GvPortInfo_io_get(void * jarg1) {
  char * /* constString&_ctype */ jresult ;
  GvPortInfo *arg1 = (GvPortInfo *) 0 ;
  String *result = 0 ;
  
  arg1 = (GvPortInfo *)jarg1; 
  result = (String *) & ((arg1)->io);
  jresult = SWIG_csharp_string_callback(result->GetCStringCopy()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvPortInfo_name_set(void * jarg1, char * /* constString&_ctype */ jarg2) {
  GvPortInfo *arg1 = (GvPortInfo *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (GvPortInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT char * /* constString&_ctype */ SWIGSTDCALL CSharp_GvPortInfo_name_get(void * jarg1) {
  char * /* constString&_ctype */ jresult ;
  GvPortInfo *arg1 = (GvPortInfo *) 0 ;
  String *result = 0 ;
  
  arg1 = (GvPortInfo *)jarg1; 
  result = (String *) & ((arg1)->name);
  jresult = SWIG_csharp_string_callback(result->GetCStringCopy()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvPortInfo_data_set(void * jarg1, char * /* constString&_ctype */ jarg2) {
  GvPortInfo *arg1 = (GvPortInfo *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (GvPortInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->data = *arg2;
}


SWIGEXPORT char * /* constString&_ctype */ SWIGSTDCALL CSharp_GvPortInfo_data_get(void * jarg1) {
  char * /* constString&_ctype */ jresult ;
  GvPortInfo *arg1 = (GvPortInfo *) 0 ;
  String *result = 0 ;
  
  arg1 = (GvPortInfo *)jarg1; 
  result = (String *) & ((arg1)->data);
  jresult = SWIG_csharp_string_callback(result->GetCStringCopy()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvPortInfo_value_set(void * jarg1, char * /* constString&_ctype */ jarg2) {
  GvPortInfo *arg1 = (GvPortInfo *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (GvPortInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->value = *arg2;
}


SWIGEXPORT char * /* constString&_ctype */ SWIGSTDCALL CSharp_GvPortInfo_value_get(void * jarg1) {
  char * /* constString&_ctype */ jresult ;
  GvPortInfo *arg1 = (GvPortInfo *) 0 ;
  String *result = 0 ;
  
  arg1 = (GvPortInfo *)jarg1; 
  result = (String *) & ((arg1)->value);
  jresult = SWIG_csharp_string_callback(result->GetCStringCopy()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GvPortInfo() {
  void * jresult ;
  GvPortInfo *result = 0 ;
  
  result = (GvPortInfo *)new GvPortInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GvPortInfo(void * jarg1) {
  GvPortInfo *arg1 = (GvPortInfo *) 0 ;
  
  arg1 = (GvPortInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvPortDescInfo_count_set(void * jarg1, int jarg2) {
  GvPortDescInfo *arg1 = (GvPortDescInfo *) 0 ;
  LONG arg2 ;
  
  arg1 = (GvPortDescInfo *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->count = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvPortDescInfo_count_get(void * jarg1) {
  int jresult ;
  GvPortDescInfo *arg1 = (GvPortDescInfo *) 0 ;
  LONG result;
  
  arg1 = (GvPortDescInfo *)jarg1; 
  result =  ((arg1)->count);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvPortDescInfo_types_set(void * jarg1, void * jarg2) {
  GvPortDescInfo *arg1 = (GvPortDescInfo *) 0 ;
  GvDataID *arg2 = (GvDataID *) 0 ;
  
  arg1 = (GvPortDescInfo *)jarg1; 
  arg2 = (GvDataID *)jarg2; 
  if (arg1) (arg1)->types = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvPortDescInfo_types_get(void * jarg1) {
  void * jresult ;
  GvPortDescInfo *arg1 = (GvPortDescInfo *) 0 ;
  GvDataID *result = 0 ;
  
  arg1 = (GvPortDescInfo *)jarg1; 
  result = (GvDataID *) ((arg1)->types);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvPortDescInfo_flags_set(void * jarg1, void * jarg2) {
  GvPortDescInfo *arg1 = (GvPortDescInfo *) 0 ;
  ULONG *arg2 = (ULONG *) 0 ;
  
  arg1 = (GvPortDescInfo *)jarg1; 
  arg2 = (ULONG *)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvPortDescInfo_flags_get(void * jarg1) {
  void * jresult ;
  GvPortDescInfo *arg1 = (GvPortDescInfo *) 0 ;
  ULONG *result = 0 ;
  
  arg1 = (GvPortDescInfo *)jarg1; 
  result = (ULONG *) ((arg1)->flags);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvPortDescInfo_ids_set(void * jarg1, void * jarg2) {
  GvPortDescInfo *arg1 = (GvPortDescInfo *) 0 ;
  LONG *arg2 = (LONG *) 0 ;
  
  arg1 = (GvPortDescInfo *)jarg1; 
  arg2 = (LONG *)jarg2; 
  if (arg1) (arg1)->ids = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvPortDescInfo_ids_get(void * jarg1) {
  void * jresult ;
  GvPortDescInfo *arg1 = (GvPortDescInfo *) 0 ;
  LONG *result = 0 ;
  
  arg1 = (GvPortDescInfo *)jarg1; 
  result = (LONG *) ((arg1)->ids);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvPortDescInfo_name_ids_set(void * jarg1, void * jarg2) {
  GvPortDescInfo *arg1 = (GvPortDescInfo *) 0 ;
  LONG *arg2 = (LONG *) 0 ;
  
  arg1 = (GvPortDescInfo *)jarg1; 
  arg2 = (LONG *)jarg2; 
  if (arg1) (arg1)->name_ids = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvPortDescInfo_name_ids_get(void * jarg1) {
  void * jresult ;
  GvPortDescInfo *arg1 = (GvPortDescInfo *) 0 ;
  LONG *result = 0 ;
  
  arg1 = (GvPortDescInfo *)jarg1; 
  result = (LONG *) ((arg1)->name_ids);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvPortDescInfo_names_set(void * jarg1, void * jarg2) {
  GvPortDescInfo *arg1 = (GvPortDescInfo *) 0 ;
  String **arg2 = (String **) 0 ;
  
  arg1 = (GvPortDescInfo *)jarg1; 
  arg2 = (String **)jarg2; 
  if (arg1) (arg1)->names = (String const **)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvPortDescInfo_names_get(void * jarg1) {
  void * jresult ;
  GvPortDescInfo *arg1 = (GvPortDescInfo *) 0 ;
  String **result = 0 ;
  
  arg1 = (GvPortDescInfo *)jarg1; 
  result = (String **) ((arg1)->names);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GvPortDescInfo() {
  void * jresult ;
  GvPortDescInfo *result = 0 ;
  
  result = (GvPortDescInfo *)new GvPortDescInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GvPortDescInfo(void * jarg1) {
  GvPortDescInfo *arg1 = (GvPortDescInfo *) 0 ;
  
  arg1 = (GvPortDescInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvPortsDescInfo__in_set(void * jarg1, void * jarg2) {
  GvPortsDescInfo *arg1 = (GvPortsDescInfo *) 0 ;
  GvPortDescInfo *arg2 = (GvPortDescInfo *) 0 ;
  
  arg1 = (GvPortsDescInfo *)jarg1; 
  arg2 = (GvPortDescInfo *)jarg2; 
  if (arg1) (arg1)->in = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvPortsDescInfo__in_get(void * jarg1) {
  void * jresult ;
  GvPortsDescInfo *arg1 = (GvPortsDescInfo *) 0 ;
  GvPortDescInfo *result = 0 ;
  
  arg1 = (GvPortsDescInfo *)jarg1; 
  result = (GvPortDescInfo *)& ((arg1)->in);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvPortsDescInfo__out_set(void * jarg1, void * jarg2) {
  GvPortsDescInfo *arg1 = (GvPortsDescInfo *) 0 ;
  GvPortDescInfo *arg2 = (GvPortDescInfo *) 0 ;
  
  arg1 = (GvPortsDescInfo *)jarg1; 
  arg2 = (GvPortDescInfo *)jarg2; 
  if (arg1) (arg1)->out = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvPortsDescInfo__out_get(void * jarg1) {
  void * jresult ;
  GvPortsDescInfo *arg1 = (GvPortsDescInfo *) 0 ;
  GvPortDescInfo *result = 0 ;
  
  arg1 = (GvPortsDescInfo *)jarg1; 
  result = (GvPortDescInfo *)& ((arg1)->out);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GvPortsDescInfo() {
  void * jresult ;
  GvPortsDescInfo *result = 0 ;
  
  result = (GvPortsDescInfo *)new GvPortsDescInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GvPortsDescInfo(void * jarg1) {
  GvPortsDescInfo *arg1 = (GvPortsDescInfo *) 0 ;
  
  arg1 = (GvPortsDescInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GvPortsInfo() {
  void * jresult ;
  GvPortsInfo *result = 0 ;
  
  result = (GvPortsInfo *)new GvPortsInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvPortsInfo_in_ports_set(void * jarg1, void * jarg2) {
  GvPortsInfo *arg1 = (GvPortsInfo *) 0 ;
  GvPort **arg2 = (GvPort **) 0 ;
  
  arg1 = (GvPortsInfo *)jarg1; 
  arg2 = (GvPort **)jarg2; 
  if (arg1) (arg1)->in_ports = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvPortsInfo_in_ports_get(void * jarg1) {
  void * jresult ;
  GvPortsInfo *arg1 = (GvPortsInfo *) 0 ;
  GvPort **result = 0 ;
  
  arg1 = (GvPortsInfo *)jarg1; 
  result = (GvPort **) ((arg1)->in_ports);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvPortsInfo_out_ports_set(void * jarg1, void * jarg2) {
  GvPortsInfo *arg1 = (GvPortsInfo *) 0 ;
  GvPort **arg2 = (GvPort **) 0 ;
  
  arg1 = (GvPortsInfo *)jarg1; 
  arg2 = (GvPort **)jarg2; 
  if (arg1) (arg1)->out_ports = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvPortsInfo_out_ports_get(void * jarg1) {
  void * jresult ;
  GvPortsInfo *arg1 = (GvPortsInfo *) 0 ;
  GvPort **result = 0 ;
  
  arg1 = (GvPortsInfo *)jarg1; 
  result = (GvPort **) ((arg1)->out_ports);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvPortsInfo_nr_of_in_ports_set(void * jarg1, int jarg2) {
  GvPortsInfo *arg1 = (GvPortsInfo *) 0 ;
  LONG arg2 ;
  
  arg1 = (GvPortsInfo *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->nr_of_in_ports = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvPortsInfo_nr_of_in_ports_get(void * jarg1) {
  int jresult ;
  GvPortsInfo *arg1 = (GvPortsInfo *) 0 ;
  LONG result;
  
  arg1 = (GvPortsInfo *)jarg1; 
  result =  ((arg1)->nr_of_in_ports);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvPortsInfo_nr_of_out_ports_set(void * jarg1, int jarg2) {
  GvPortsInfo *arg1 = (GvPortsInfo *) 0 ;
  LONG arg2 ;
  
  arg1 = (GvPortsInfo *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->nr_of_out_ports = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvPortsInfo_nr_of_out_ports_get(void * jarg1) {
  int jresult ;
  GvPortsInfo *arg1 = (GvPortsInfo *) 0 ;
  LONG result;
  
  arg1 = (GvPortsInfo *)jarg1; 
  result =  ((arg1)->nr_of_out_ports);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GvPortsInfo(void * jarg1) {
  GvPortsInfo *arg1 = (GvPortsInfo *) 0 ;
  
  arg1 = (GvPortsInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GvValuesInfo() {
  void * jresult ;
  GvValuesInfo *result = 0 ;
  
  result = (GvValuesInfo *)new GvValuesInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvValuesInfo_in_values_set(void * jarg1, void * jarg2) {
  GvValuesInfo *arg1 = (GvValuesInfo *) 0 ;
  GvValue **arg2 = (GvValue **) 0 ;
  
  arg1 = (GvValuesInfo *)jarg1; 
  arg2 = (GvValue **)jarg2; 
  if (arg1) (arg1)->in_values = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvValuesInfo_in_values_get(void * jarg1) {
  void * jresult ;
  GvValuesInfo *arg1 = (GvValuesInfo *) 0 ;
  GvValue **result = 0 ;
  
  arg1 = (GvValuesInfo *)jarg1; 
  result = (GvValue **) ((arg1)->in_values);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvValuesInfo_out_ports_set(void * jarg1, void * jarg2) {
  GvValuesInfo *arg1 = (GvValuesInfo *) 0 ;
  GvPort **arg2 = (GvPort **) 0 ;
  
  arg1 = (GvValuesInfo *)jarg1; 
  arg2 = (GvPort **)jarg2; 
  if (arg1) (arg1)->out_ports = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvValuesInfo_out_ports_get(void * jarg1) {
  void * jresult ;
  GvValuesInfo *arg1 = (GvValuesInfo *) 0 ;
  GvPort **result = 0 ;
  
  arg1 = (GvValuesInfo *)jarg1; 
  result = (GvPort **) ((arg1)->out_ports);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvValuesInfo_nr_of_in_values_set(void * jarg1, int jarg2) {
  GvValuesInfo *arg1 = (GvValuesInfo *) 0 ;
  LONG arg2 ;
  
  arg1 = (GvValuesInfo *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->nr_of_in_values = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvValuesInfo_nr_of_in_values_get(void * jarg1) {
  int jresult ;
  GvValuesInfo *arg1 = (GvValuesInfo *) 0 ;
  LONG result;
  
  arg1 = (GvValuesInfo *)jarg1; 
  result =  ((arg1)->nr_of_in_values);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvValuesInfo_nr_of_out_ports_set(void * jarg1, int jarg2) {
  GvValuesInfo *arg1 = (GvValuesInfo *) 0 ;
  LONG arg2 ;
  
  arg1 = (GvValuesInfo *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->nr_of_out_ports = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvValuesInfo_nr_of_out_ports_get(void * jarg1) {
  int jresult ;
  GvValuesInfo *arg1 = (GvValuesInfo *) 0 ;
  LONG result;
  
  arg1 = (GvValuesInfo *)jarg1; 
  result =  ((arg1)->nr_of_out_ports);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvValuesInfo_GetInValue(void * jarg1, int jarg2) {
  void * jresult ;
  GvValuesInfo *arg1 = (GvValuesInfo *) 0 ;
  LONG arg2 ;
  GvValue *result = 0 ;
  
  arg1 = (GvValuesInfo *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (GvValue *)(arg1)->GetInValue(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GvValuesInfo(void * jarg1) {
  GvValuesInfo *arg1 = (GvValuesInfo *) 0 ;
  
  arg1 = (GvValuesInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GvDynamicData() {
  void * jresult ;
  GvDynamicData *result = 0 ;
  
  result = (GvDynamicData *)new GvDynamicData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvDynamicData_data_set(void * jarg1, void * jarg2) {
  GvDynamicData *arg1 = (GvDynamicData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (GvDynamicData *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->data = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvDynamicData_data_get(void * jarg1) {
  void * jresult ;
  GvDynamicData *arg1 = (GvDynamicData *) 0 ;
  void *result = 0 ;
  
  arg1 = (GvDynamicData *)jarg1; 
  result = (void *) ((arg1)->data);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvDynamicData_info_set(void * jarg1, void * jarg2) {
  GvDynamicData *arg1 = (GvDynamicData *) 0 ;
  GvDataInfo *arg2 = (GvDataInfo *) 0 ;
  
  arg1 = (GvDynamicData *)jarg1; 
  arg2 = (GvDataInfo *)jarg2; 
  if (arg1) (arg1)->info = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvDynamicData_info_get(void * jarg1) {
  void * jresult ;
  GvDynamicData *arg1 = (GvDynamicData *) 0 ;
  GvDataInfo *result = 0 ;
  
  arg1 = (GvDynamicData *)jarg1; 
  result = (GvDataInfo *) ((arg1)->info);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvDynamicData_cpu_count_set(void * jarg1, int jarg2) {
  GvDynamicData *arg1 = (GvDynamicData *) 0 ;
  LONG arg2 ;
  
  arg1 = (GvDynamicData *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->cpu_count = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvDynamicData_cpu_count_get(void * jarg1) {
  int jresult ;
  GvDynamicData *arg1 = (GvDynamicData *) 0 ;
  LONG result;
  
  arg1 = (GvDynamicData *)jarg1; 
  result =  ((arg1)->cpu_count);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GvDynamicData(void * jarg1) {
  GvDynamicData *arg1 = (GvDynamicData *) 0 ;
  
  arg1 = (GvDynamicData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvOperatorDescription_flags_set(void * jarg1, int jarg2) {
  GvOperatorDescription *arg1 = (GvOperatorDescription *) 0 ;
  GvOperatorDescriptionFlags arg2 ;
  
  arg1 = (GvOperatorDescription *)jarg1; 
  arg2 = (GvOperatorDescriptionFlags)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvOperatorDescription_flags_get(void * jarg1) {
  int jresult ;
  GvOperatorDescription *arg1 = (GvOperatorDescription *) 0 ;
  GvOperatorDescriptionFlags result;
  
  arg1 = (GvOperatorDescription *)jarg1; 
  result = (GvOperatorDescriptionFlags) ((arg1)->flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GvOperatorDescription() {
  void * jresult ;
  GvOperatorDescription *result = 0 ;
  
  result = (GvOperatorDescription *)new GvOperatorDescription();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GvOperatorDescription(void * jarg1) {
  GvOperatorDescription *arg1 = (GvOperatorDescription *) 0 ;
  
  arg1 = (GvOperatorDescription *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GV_OPERATORFLAGS_MASK_get() {
  int jresult ;
  int result;
  
  result = (int)(0x0000ffff);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GvDropHook() {
  void * jresult ;
  GvDropHook *result = 0 ;
  
  result = (GvDropHook *)new GvDropHook();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvDropHook_master_set(void * jarg1, void * jarg2) {
  GvDropHook *arg1 = (GvDropHook *) 0 ;
  GvNodeMaster *arg2 = (GvNodeMaster *) 0 ;
  
  arg1 = (GvDropHook *)jarg1; 
  arg2 = (GvNodeMaster *)jarg2; 
  if (arg1) (arg1)->master = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvDropHook_master_get(void * jarg1) {
  void * jresult ;
  GvDropHook *arg1 = (GvDropHook *) 0 ;
  GvNodeMaster *result = 0 ;
  
  arg1 = (GvDropHook *)jarg1; 
  result = (GvNodeMaster *) ((arg1)->master);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvDropHook_document_set(void * jarg1, void * jarg2) {
  GvDropHook *arg1 = (GvDropHook *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  
  arg1 = (GvDropHook *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  if (arg1) (arg1)->document = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvDropHook_document_get(void * jarg1) {
  void * jresult ;
  GvDropHook *arg1 = (GvDropHook *) 0 ;
  BaseDocument *result = 0 ;
  
  arg1 = (GvDropHook *)jarg1; 
  result = (BaseDocument *) ((arg1)->document);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvDropHook_user_set(void * jarg1, void * jarg2) {
  GvDropHook *arg1 = (GvDropHook *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (GvDropHook *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->user = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvDropHook_user_get(void * jarg1) {
  void * jresult ;
  GvDropHook *arg1 = (GvDropHook *) 0 ;
  void *result = 0 ;
  
  arg1 = (GvDropHook *)jarg1; 
  result = (void *) ((arg1)->user);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvDropHook_parent_set(void * jarg1, void * jarg2) {
  GvDropHook *arg1 = (GvDropHook *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  
  arg1 = (GvDropHook *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  if (arg1) (arg1)->parent = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvDropHook_parent_get(void * jarg1) {
  void * jresult ;
  GvDropHook *arg1 = (GvDropHook *) 0 ;
  GvNode *result = 0 ;
  
  arg1 = (GvDropHook *)jarg1; 
  result = (GvNode *) ((arg1)->parent);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvDropHook_type_set(void * jarg1, int jarg2) {
  GvDropHook *arg1 = (GvDropHook *) 0 ;
  GvDataType arg2 ;
  
  arg1 = (GvDropHook *)jarg1; 
  arg2 = (GvDataType)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvDropHook_type_get(void * jarg1) {
  int jresult ;
  GvDropHook *arg1 = (GvDropHook *) 0 ;
  GvDataType result;
  
  arg1 = (GvDropHook *)jarg1; 
  result =  ((arg1)->type);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvDropHook_data_set(void * jarg1, void * jarg2) {
  GvDropHook *arg1 = (GvDropHook *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (GvDropHook *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->data = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvDropHook_data_get(void * jarg1) {
  void * jresult ;
  GvDropHook *arg1 = (GvDropHook *) 0 ;
  void *result = 0 ;
  
  arg1 = (GvDropHook *)jarg1; 
  result = (void *) ((arg1)->data);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvDropHook_mode_set(void * jarg1, int jarg2) {
  GvDropHook *arg1 = (GvDropHook *) 0 ;
  GvOpSetDataMode arg2 ;
  
  arg1 = (GvDropHook *)jarg1; 
  arg2 = (GvOpSetDataMode)jarg2; 
  if (arg1) (arg1)->mode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvDropHook_mode_get(void * jarg1) {
  int jresult ;
  GvDropHook *arg1 = (GvDropHook *) 0 ;
  GvOpSetDataMode result;
  
  arg1 = (GvDropHook *)jarg1; 
  result = (GvOpSetDataMode) ((arg1)->mode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvDropHook_x_set(void * jarg1, int jarg2) {
  GvDropHook *arg1 = (GvDropHook *) 0 ;
  LONG arg2 ;
  
  arg1 = (GvDropHook *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvDropHook_x_get(void * jarg1) {
  int jresult ;
  GvDropHook *arg1 = (GvDropHook *) 0 ;
  LONG result;
  
  arg1 = (GvDropHook *)jarg1; 
  result =  ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvDropHook_y_set(void * jarg1, int jarg2) {
  GvDropHook *arg1 = (GvDropHook *) 0 ;
  LONG arg2 ;
  
  arg1 = (GvDropHook *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvDropHook_y_get(void * jarg1) {
  int jresult ;
  GvDropHook *arg1 = (GvDropHook *) 0 ;
  LONG result;
  
  arg1 = (GvDropHook *)jarg1; 
  result =  ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GvDropHook(void * jarg1) {
  GvDropHook *arg1 = (GvDropHook *) 0 ;
  
  arg1 = (GvDropHook *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GvCalcHook() {
  void * jresult ;
  GvCalcHook *result = 0 ;
  
  result = (GvCalcHook *)new GvCalcHook();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvCalcHook_master_set(void * jarg1, void * jarg2) {
  GvCalcHook *arg1 = (GvCalcHook *) 0 ;
  GvNodeMaster *arg2 = (GvNodeMaster *) 0 ;
  
  arg1 = (GvCalcHook *)jarg1; 
  arg2 = (GvNodeMaster *)jarg2; 
  if (arg1) (arg1)->master = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvCalcHook_master_get(void * jarg1) {
  void * jresult ;
  GvCalcHook *arg1 = (GvCalcHook *) 0 ;
  GvNodeMaster *result = 0 ;
  
  arg1 = (GvCalcHook *)jarg1; 
  result = (GvNodeMaster *) ((arg1)->master);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvCalcHook_document_set(void * jarg1, void * jarg2) {
  GvCalcHook *arg1 = (GvCalcHook *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  
  arg1 = (GvCalcHook *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  if (arg1) (arg1)->document = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvCalcHook_document_get(void * jarg1) {
  void * jresult ;
  GvCalcHook *arg1 = (GvCalcHook *) 0 ;
  BaseDocument *result = 0 ;
  
  arg1 = (GvCalcHook *)jarg1; 
  result = (BaseDocument *) ((arg1)->document);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvCalcHook_user_set(void * jarg1, void * jarg2) {
  GvCalcHook *arg1 = (GvCalcHook *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (GvCalcHook *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->user = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvCalcHook_user_get(void * jarg1) {
  void * jresult ;
  GvCalcHook *arg1 = (GvCalcHook *) 0 ;
  void *result = 0 ;
  
  arg1 = (GvCalcHook *)jarg1; 
  result = (void *) ((arg1)->user);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvCalcHook_calc_set(void * jarg1, void * jarg2) {
  GvCalcHook *arg1 = (GvCalcHook *) 0 ;
  GvCalc *arg2 = (GvCalc *) 0 ;
  
  arg1 = (GvCalcHook *)jarg1; 
  arg2 = (GvCalc *)jarg2; 
  if (arg1) (arg1)->calc = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvCalcHook_calc_get(void * jarg1) {
  void * jresult ;
  GvCalcHook *arg1 = (GvCalcHook *) 0 ;
  GvCalc *result = 0 ;
  
  arg1 = (GvCalcHook *)jarg1; 
  result = (GvCalc *) ((arg1)->calc);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvCalcHook_status_set(void * jarg1, unsigned int jarg2) {
  GvCalcHook *arg1 = (GvCalcHook *) 0 ;
  Bool arg2 ;
  
  arg1 = (GvCalcHook *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->status = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvCalcHook_status_get(void * jarg1) {
  unsigned int jresult ;
  GvCalcHook *arg1 = (GvCalcHook *) 0 ;
  Bool result;
  
  arg1 = (GvCalcHook *)jarg1; 
  result =  ((arg1)->status);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GvCalcHook(void * jarg1) {
  GvCalcHook *arg1 = (GvCalcHook *) 0 ;
  
  arg1 = (GvCalcHook *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GvMenuHook() {
  void * jresult ;
  GvMenuHook *result = 0 ;
  
  result = (GvMenuHook *)new GvMenuHook();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvMenuHook_master_set(void * jarg1, void * jarg2) {
  GvMenuHook *arg1 = (GvMenuHook *) 0 ;
  GvNodeMaster *arg2 = (GvNodeMaster *) 0 ;
  
  arg1 = (GvMenuHook *)jarg1; 
  arg2 = (GvNodeMaster *)jarg2; 
  if (arg1) (arg1)->master = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvMenuHook_master_get(void * jarg1) {
  void * jresult ;
  GvMenuHook *arg1 = (GvMenuHook *) 0 ;
  GvNodeMaster *result = 0 ;
  
  arg1 = (GvMenuHook *)jarg1; 
  result = (GvNodeMaster *) ((arg1)->master);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvMenuHook_document_set(void * jarg1, void * jarg2) {
  GvMenuHook *arg1 = (GvMenuHook *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  
  arg1 = (GvMenuHook *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  if (arg1) (arg1)->document = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvMenuHook_document_get(void * jarg1) {
  void * jresult ;
  GvMenuHook *arg1 = (GvMenuHook *) 0 ;
  BaseDocument *result = 0 ;
  
  arg1 = (GvMenuHook *)jarg1; 
  result = (BaseDocument *) ((arg1)->document);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvMenuHook_user_set(void * jarg1, void * jarg2) {
  GvMenuHook *arg1 = (GvMenuHook *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (GvMenuHook *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->user = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvMenuHook_user_get(void * jarg1) {
  void * jresult ;
  GvMenuHook *arg1 = (GvMenuHook *) 0 ;
  void *result = 0 ;
  
  arg1 = (GvMenuHook *)jarg1; 
  result = (void *) ((arg1)->user);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvMenuHook_menu_id_set(void * jarg1, int jarg2) {
  GvMenuHook *arg1 = (GvMenuHook *) 0 ;
  LONG arg2 ;
  
  arg1 = (GvMenuHook *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->menu_id = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvMenuHook_menu_id_get(void * jarg1) {
  int jresult ;
  GvMenuHook *arg1 = (GvMenuHook *) 0 ;
  LONG result;
  
  arg1 = (GvMenuHook *)jarg1; 
  result =  ((arg1)->menu_id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvMenuHook_menu_set(void * jarg1, void * jarg2) {
  GvMenuHook *arg1 = (GvMenuHook *) 0 ;
  BaseContainer *arg2 = (BaseContainer *) 0 ;
  
  arg1 = (GvMenuHook *)jarg1; 
  arg2 = (BaseContainer *)jarg2; 
  if (arg1) (arg1)->menu = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvMenuHook_menu_get(void * jarg1) {
  void * jresult ;
  GvMenuHook *arg1 = (GvMenuHook *) 0 ;
  BaseContainer *result = 0 ;
  
  arg1 = (GvMenuHook *)jarg1; 
  result = (BaseContainer *)& ((arg1)->menu);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GvMenuHook(void * jarg1) {
  GvMenuHook *arg1 = (GvMenuHook *) 0 ;
  
  arg1 = (GvMenuHook *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GvMessHook() {
  void * jresult ;
  GvMessHook *result = 0 ;
  
  result = (GvMessHook *)new GvMessHook();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvMessHook_master_set(void * jarg1, void * jarg2) {
  GvMessHook *arg1 = (GvMessHook *) 0 ;
  GvNodeMaster *arg2 = (GvNodeMaster *) 0 ;
  
  arg1 = (GvMessHook *)jarg1; 
  arg2 = (GvNodeMaster *)jarg2; 
  if (arg1) (arg1)->master = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvMessHook_master_get(void * jarg1) {
  void * jresult ;
  GvMessHook *arg1 = (GvMessHook *) 0 ;
  GvNodeMaster *result = 0 ;
  
  arg1 = (GvMessHook *)jarg1; 
  result = (GvNodeMaster *) ((arg1)->master);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvMessHook_document_set(void * jarg1, void * jarg2) {
  GvMessHook *arg1 = (GvMessHook *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  
  arg1 = (GvMessHook *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  if (arg1) (arg1)->document = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvMessHook_document_get(void * jarg1) {
  void * jresult ;
  GvMessHook *arg1 = (GvMessHook *) 0 ;
  BaseDocument *result = 0 ;
  
  arg1 = (GvMessHook *)jarg1; 
  result = (BaseDocument *) ((arg1)->document);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvMessHook_user_set(void * jarg1, void * jarg2) {
  GvMessHook *arg1 = (GvMessHook *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (GvMessHook *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->user = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvMessHook_user_get(void * jarg1) {
  void * jresult ;
  GvMessHook *arg1 = (GvMessHook *) 0 ;
  void *result = 0 ;
  
  arg1 = (GvMessHook *)jarg1; 
  result = (void *) ((arg1)->user);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvMessHook_id_set(void * jarg1, int jarg2) {
  GvMessHook *arg1 = (GvMessHook *) 0 ;
  LONG arg2 ;
  
  arg1 = (GvMessHook *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvMessHook_id_get(void * jarg1) {
  int jresult ;
  GvMessHook *arg1 = (GvMessHook *) 0 ;
  LONG result;
  
  arg1 = (GvMessHook *)jarg1; 
  result =  ((arg1)->id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvMessHook_mess_set(void * jarg1, void * jarg2) {
  GvMessHook *arg1 = (GvMessHook *) 0 ;
  BaseContainer *arg2 = (BaseContainer *) 0 ;
  
  arg1 = (GvMessHook *)jarg1; 
  arg2 = (BaseContainer *)jarg2; 
  if (arg1) (arg1)->mess = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvMessHook_mess_get(void * jarg1) {
  void * jresult ;
  GvMessHook *arg1 = (GvMessHook *) 0 ;
  BaseContainer *result = 0 ;
  
  arg1 = (GvMessHook *)jarg1; 
  result = (BaseContainer *)& ((arg1)->mess);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GvMessHook(void * jarg1) {
  GvMessHook *arg1 = (GvMessHook *) 0 ;
  
  arg1 = (GvMessHook *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GvAnimHook() {
  void * jresult ;
  GvAnimHook *result = 0 ;
  
  result = (GvAnimHook *)new GvAnimHook();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvAnimHook_document_set(void * jarg1, void * jarg2) {
  GvAnimHook *arg1 = (GvAnimHook *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  
  arg1 = (GvAnimHook *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  if (arg1) (arg1)->document = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvAnimHook_document_get(void * jarg1) {
  void * jresult ;
  GvAnimHook *arg1 = (GvAnimHook *) 0 ;
  BaseDocument *result = 0 ;
  
  arg1 = (GvAnimHook *)jarg1; 
  result = (BaseDocument *) ((arg1)->document);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvAnimHook_user_set(void * jarg1, void * jarg2) {
  GvAnimHook *arg1 = (GvAnimHook *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (GvAnimHook *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->user = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvAnimHook_user_get(void * jarg1) {
  void * jresult ;
  GvAnimHook *arg1 = (GvAnimHook *) 0 ;
  void *result = 0 ;
  
  arg1 = (GvAnimHook *)jarg1; 
  result = (void *) ((arg1)->user);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvAnimHook_time_set(void * jarg1, void * jarg2) {
  GvAnimHook *arg1 = (GvAnimHook *) 0 ;
  GvCalcTime *arg2 = (GvCalcTime *) 0 ;
  
  arg1 = (GvAnimHook *)jarg1; 
  arg2 = (GvCalcTime *)jarg2; 
  if (arg1) (arg1)->time = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvAnimHook_time_get(void * jarg1) {
  void * jresult ;
  GvAnimHook *arg1 = (GvAnimHook *) 0 ;
  GvCalcTime *result = 0 ;
  
  arg1 = (GvAnimHook *)jarg1; 
  result = (GvCalcTime *) ((arg1)->time);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GvAnimHook(void * jarg1) {
  GvAnimHook *arg1 = (GvAnimHook *) 0 ;
  
  arg1 = (GvAnimHook *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GvDrawHook() {
  void * jresult ;
  GvDrawHook *result = 0 ;
  
  result = (GvDrawHook *)new GvDrawHook();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvDrawHook_document_set(void * jarg1, void * jarg2) {
  GvDrawHook *arg1 = (GvDrawHook *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  
  arg1 = (GvDrawHook *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  if (arg1) (arg1)->document = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvDrawHook_document_get(void * jarg1) {
  void * jresult ;
  GvDrawHook *arg1 = (GvDrawHook *) 0 ;
  BaseDocument *result = 0 ;
  
  arg1 = (GvDrawHook *)jarg1; 
  result = (BaseDocument *) ((arg1)->document);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvDrawHook_user_set(void * jarg1, void * jarg2) {
  GvDrawHook *arg1 = (GvDrawHook *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (GvDrawHook *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->user = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvDrawHook_user_get(void * jarg1) {
  void * jresult ;
  GvDrawHook *arg1 = (GvDrawHook *) 0 ;
  void *result = 0 ;
  
  arg1 = (GvDrawHook *)jarg1; 
  result = (void *) ((arg1)->user);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvDrawHook_base_draw_set(void * jarg1, void * jarg2) {
  GvDrawHook *arg1 = (GvDrawHook *) 0 ;
  BaseDraw *arg2 = (BaseDraw *) 0 ;
  
  arg1 = (GvDrawHook *)jarg1; 
  arg2 = (BaseDraw *)jarg2; 
  if (arg1) (arg1)->base_draw = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvDrawHook_base_draw_get(void * jarg1) {
  void * jresult ;
  GvDrawHook *arg1 = (GvDrawHook *) 0 ;
  BaseDraw *result = 0 ;
  
  arg1 = (GvDrawHook *)jarg1; 
  result = (BaseDraw *) ((arg1)->base_draw);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvDrawHook_draw_help_set(void * jarg1, void * jarg2) {
  GvDrawHook *arg1 = (GvDrawHook *) 0 ;
  BaseDrawHelp *arg2 = (BaseDrawHelp *) 0 ;
  
  arg1 = (GvDrawHook *)jarg1; 
  arg2 = (BaseDrawHelp *)jarg2; 
  if (arg1) (arg1)->draw_help = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvDrawHook_draw_help_get(void * jarg1) {
  void * jresult ;
  GvDrawHook *arg1 = (GvDrawHook *) 0 ;
  BaseDrawHelp *result = 0 ;
  
  arg1 = (GvDrawHook *)jarg1; 
  result = (BaseDrawHelp *) ((arg1)->draw_help);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvDrawHook_base_thread_set(void * jarg1, void * jarg2) {
  GvDrawHook *arg1 = (GvDrawHook *) 0 ;
  BaseThread *arg2 = (BaseThread *) 0 ;
  
  arg1 = (GvDrawHook *)jarg1; 
  arg2 = (BaseThread *)jarg2; 
  if (arg1) (arg1)->base_thread = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvDrawHook_base_thread_get(void * jarg1) {
  void * jresult ;
  GvDrawHook *arg1 = (GvDrawHook *) 0 ;
  BaseThread *result = 0 ;
  
  arg1 = (GvDrawHook *)jarg1; 
  result = (BaseThread *) ((arg1)->base_thread);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvDrawHook_flags_set(void * jarg1, int jarg2) {
  GvDrawHook *arg1 = (GvDrawHook *) 0 ;
  LONG arg2 ;
  
  arg1 = (GvDrawHook *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvDrawHook_flags_get(void * jarg1) {
  int jresult ;
  GvDrawHook *arg1 = (GvDrawHook *) 0 ;
  LONG result;
  
  arg1 = (GvDrawHook *)jarg1; 
  result =  ((arg1)->flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GvDrawHook(void * jarg1) {
  GvDrawHook *arg1 = (GvDrawHook *) 0 ;
  
  arg1 = (GvDrawHook *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GvHook() {
  void * jresult ;
  GvHook *result = 0 ;
  
  result = (GvHook *)new GvHook();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvHook_drop_function_set(void * jarg1, void * jarg2) {
  GvHook *arg1 = (GvHook *) 0 ;
  GvDropHookFunc arg2 = (GvDropHookFunc) 0 ;
  
  arg1 = (GvHook *)jarg1; 
  arg2 = (GvDropHookFunc)jarg2; 
  if (arg1) (arg1)->drop_function = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvHook_drop_function_get(void * jarg1) {
  void * jresult ;
  GvHook *arg1 = (GvHook *) 0 ;
  GvDropHookFunc result;
  
  arg1 = (GvHook *)jarg1; 
  result = (GvDropHookFunc) ((arg1)->drop_function);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvHook_init_calculation_set(void * jarg1, void * jarg2) {
  GvHook *arg1 = (GvHook *) 0 ;
  GvCalcHookFunc arg2 = (GvCalcHookFunc) 0 ;
  
  arg1 = (GvHook *)jarg1; 
  arg2 = (GvCalcHookFunc)jarg2; 
  if (arg1) (arg1)->init_calculation = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvHook_init_calculation_get(void * jarg1) {
  void * jresult ;
  GvHook *arg1 = (GvHook *) 0 ;
  GvCalcHookFunc result;
  
  arg1 = (GvHook *)jarg1; 
  result = (GvCalcHookFunc) ((arg1)->init_calculation);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvHook_begin_calculation_set(void * jarg1, void * jarg2) {
  GvHook *arg1 = (GvHook *) 0 ;
  GvCalcHookFunc arg2 = (GvCalcHookFunc) 0 ;
  
  arg1 = (GvHook *)jarg1; 
  arg2 = (GvCalcHookFunc)jarg2; 
  if (arg1) (arg1)->begin_calculation = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvHook_begin_calculation_get(void * jarg1) {
  void * jresult ;
  GvHook *arg1 = (GvHook *) 0 ;
  GvCalcHookFunc result;
  
  arg1 = (GvHook *)jarg1; 
  result = (GvCalcHookFunc) ((arg1)->begin_calculation);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvHook_end_calculation_set(void * jarg1, void * jarg2) {
  GvHook *arg1 = (GvHook *) 0 ;
  GvCalcHookFunc arg2 = (GvCalcHookFunc) 0 ;
  
  arg1 = (GvHook *)jarg1; 
  arg2 = (GvCalcHookFunc)jarg2; 
  if (arg1) (arg1)->end_calculation = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvHook_end_calculation_get(void * jarg1) {
  void * jresult ;
  GvHook *arg1 = (GvHook *) 0 ;
  GvCalcHookFunc result;
  
  arg1 = (GvHook *)jarg1; 
  result = (GvCalcHookFunc) ((arg1)->end_calculation);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvHook_begin_recalculation_set(void * jarg1, void * jarg2) {
  GvHook *arg1 = (GvHook *) 0 ;
  GvCalcHookFunc arg2 = (GvCalcHookFunc) 0 ;
  
  arg1 = (GvHook *)jarg1; 
  arg2 = (GvCalcHookFunc)jarg2; 
  if (arg1) (arg1)->begin_recalculation = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvHook_begin_recalculation_get(void * jarg1) {
  void * jresult ;
  GvHook *arg1 = (GvHook *) 0 ;
  GvCalcHookFunc result;
  
  arg1 = (GvHook *)jarg1; 
  result = (GvCalcHookFunc) ((arg1)->begin_recalculation);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvHook_end_recalculation_set(void * jarg1, void * jarg2) {
  GvHook *arg1 = (GvHook *) 0 ;
  GvCalcHookFunc arg2 = (GvCalcHookFunc) 0 ;
  
  arg1 = (GvHook *)jarg1; 
  arg2 = (GvCalcHookFunc)jarg2; 
  if (arg1) (arg1)->end_recalculation = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvHook_end_recalculation_get(void * jarg1) {
  void * jresult ;
  GvHook *arg1 = (GvHook *) 0 ;
  GvCalcHookFunc result;
  
  arg1 = (GvHook *)jarg1; 
  result = (GvCalcHookFunc) ((arg1)->end_recalculation);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvHook_free_calculation_set(void * jarg1, void * jarg2) {
  GvHook *arg1 = (GvHook *) 0 ;
  GvCalcHookFunc arg2 = (GvCalcHookFunc) 0 ;
  
  arg1 = (GvHook *)jarg1; 
  arg2 = (GvCalcHookFunc)jarg2; 
  if (arg1) (arg1)->free_calculation = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvHook_free_calculation_get(void * jarg1) {
  void * jresult ;
  GvHook *arg1 = (GvHook *) 0 ;
  GvCalcHookFunc result;
  
  arg1 = (GvHook *)jarg1; 
  result = (GvCalcHookFunc) ((arg1)->free_calculation);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvHook_menu_command_set(void * jarg1, void * jarg2) {
  GvHook *arg1 = (GvHook *) 0 ;
  GvMenuHookFunc arg2 = (GvMenuHookFunc) 0 ;
  
  arg1 = (GvHook *)jarg1; 
  arg2 = (GvMenuHookFunc)jarg2; 
  if (arg1) (arg1)->menu_command = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvHook_menu_command_get(void * jarg1) {
  void * jresult ;
  GvHook *arg1 = (GvHook *) 0 ;
  GvMenuHookFunc result;
  
  arg1 = (GvHook *)jarg1; 
  result = (GvMenuHookFunc) ((arg1)->menu_command);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvHook_build_menu_set(void * jarg1, void * jarg2) {
  GvHook *arg1 = (GvHook *) 0 ;
  GvMenuHookFunc arg2 = (GvMenuHookFunc) 0 ;
  
  arg1 = (GvHook *)jarg1; 
  arg2 = (GvMenuHookFunc)jarg2; 
  if (arg1) (arg1)->build_menu = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvHook_build_menu_get(void * jarg1) {
  void * jresult ;
  GvHook *arg1 = (GvHook *) 0 ;
  GvMenuHookFunc result;
  
  arg1 = (GvHook *)jarg1; 
  result = (GvMenuHookFunc) ((arg1)->build_menu);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvHook_message_set(void * jarg1, void * jarg2) {
  GvHook *arg1 = (GvHook *) 0 ;
  GvMessHookFunc arg2 = (GvMessHookFunc) 0 ;
  
  arg1 = (GvHook *)jarg1; 
  arg2 = (GvMessHookFunc)jarg2; 
  if (arg1) (arg1)->message = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvHook_message_get(void * jarg1) {
  void * jresult ;
  GvHook *arg1 = (GvHook *) 0 ;
  GvMessHookFunc result;
  
  arg1 = (GvHook *)jarg1; 
  result = (GvMessHookFunc) ((arg1)->message);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvHook_hook_init_set(void * jarg1, void * jarg2) {
  GvHook *arg1 = (GvHook *) 0 ;
  GvAnimHookFunc arg2 = (GvAnimHookFunc) 0 ;
  
  arg1 = (GvHook *)jarg1; 
  arg2 = (GvAnimHookFunc)jarg2; 
  if (arg1) (arg1)->hook_init = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvHook_hook_init_get(void * jarg1) {
  void * jresult ;
  GvHook *arg1 = (GvHook *) 0 ;
  GvAnimHookFunc result;
  
  arg1 = (GvHook *)jarg1; 
  result = (GvAnimHookFunc) ((arg1)->hook_init);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvHook_hook_main_set(void * jarg1, void * jarg2) {
  GvHook *arg1 = (GvHook *) 0 ;
  GvAnimHookFunc arg2 = (GvAnimHookFunc) 0 ;
  
  arg1 = (GvHook *)jarg1; 
  arg2 = (GvAnimHookFunc)jarg2; 
  if (arg1) (arg1)->hook_main = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvHook_hook_main_get(void * jarg1) {
  void * jresult ;
  GvHook *arg1 = (GvHook *) 0 ;
  GvAnimHookFunc result;
  
  arg1 = (GvHook *)jarg1; 
  result = (GvAnimHookFunc) ((arg1)->hook_main);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvHook_hook_free_set(void * jarg1, void * jarg2) {
  GvHook *arg1 = (GvHook *) 0 ;
  GvAnimHookFunc arg2 = (GvAnimHookFunc) 0 ;
  
  arg1 = (GvHook *)jarg1; 
  arg2 = (GvAnimHookFunc)jarg2; 
  if (arg1) (arg1)->hook_free = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvHook_hook_free_get(void * jarg1) {
  void * jresult ;
  GvHook *arg1 = (GvHook *) 0 ;
  GvAnimHookFunc result;
  
  arg1 = (GvHook *)jarg1; 
  result = (GvAnimHookFunc) ((arg1)->hook_free);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvHook_draw_set(void * jarg1, void * jarg2) {
  GvHook *arg1 = (GvHook *) 0 ;
  GvDrawHookFunc arg2 = (GvDrawHookFunc) 0 ;
  
  arg1 = (GvHook *)jarg1; 
  arg2 = (GvDrawHookFunc)jarg2; 
  if (arg1) (arg1)->draw = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvHook_draw_get(void * jarg1) {
  void * jresult ;
  GvHook *arg1 = (GvHook *) 0 ;
  GvDrawHookFunc result;
  
  arg1 = (GvHook *)jarg1; 
  result = (GvDrawHookFunc) ((arg1)->draw);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvHook_hook_id_set(void * jarg1, int jarg2) {
  GvHook *arg1 = (GvHook *) 0 ;
  LONG arg2 ;
  
  arg1 = (GvHook *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->hook_id = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvHook_hook_id_get(void * jarg1) {
  int jresult ;
  GvHook *arg1 = (GvHook *) 0 ;
  LONG result;
  
  arg1 = (GvHook *)jarg1; 
  result =  ((arg1)->hook_id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvHook_owner_id_set(void * jarg1, int jarg2) {
  GvHook *arg1 = (GvHook *) 0 ;
  LONG arg2 ;
  
  arg1 = (GvHook *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->owner_id = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvHook_owner_id_get(void * jarg1) {
  int jresult ;
  GvHook *arg1 = (GvHook *) 0 ;
  LONG result;
  
  arg1 = (GvHook *)jarg1; 
  result =  ((arg1)->owner_id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvHook_hook_name_set(void * jarg1, char * /* constString&_ctype */ jarg2) {
  GvHook *arg1 = (GvHook *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (GvHook *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->hook_name = *arg2;
}


SWIGEXPORT char * /* constString&_ctype */ SWIGSTDCALL CSharp_GvHook_hook_name_get(void * jarg1) {
  char * /* constString&_ctype */ jresult ;
  GvHook *arg1 = (GvHook *) 0 ;
  String *result = 0 ;
  
  arg1 = (GvHook *)jarg1; 
  result = (String *) & ((arg1)->hook_name);
  jresult = SWIG_csharp_string_callback(result->GetCStringCopy()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvHook_menu_name_set(void * jarg1, char * /* constString&_ctype */ jarg2) {
  GvHook *arg1 = (GvHook *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (GvHook *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->menu_name = *arg2;
}


SWIGEXPORT char * /* constString&_ctype */ SWIGSTDCALL CSharp_GvHook_menu_name_get(void * jarg1) {
  char * /* constString&_ctype */ jresult ;
  GvHook *arg1 = (GvHook *) 0 ;
  String *result = 0 ;
  
  arg1 = (GvHook *)jarg1; 
  result = (String *) & ((arg1)->menu_name);
  jresult = SWIG_csharp_string_callback(result->GetCStringCopy()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GvHook(void * jarg1) {
  GvHook *arg1 = (GvHook *) 0 ;
  
  arg1 = (GvHook *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_C4D_GvCalcTable_AddNodeToTable_set(void * jarg1, void * jarg2) {
  C4D_GvCalcTable *arg1 = (C4D_GvCalcTable *) 0 ;
  Bool (*arg2)(GvCalcTable *,GvRun *,GvNode *) = (Bool (*)(GvCalcTable *,GvRun *,GvNode *)) 0 ;
  
  arg1 = (C4D_GvCalcTable *)jarg1; 
  arg2 = (Bool (*)(GvCalcTable *,GvRun *,GvNode *))jarg2; 
  if (arg1) (arg1)->AddNodeToTable = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_C4D_GvCalcTable_AddNodeToTable_get(void * jarg1) {
  void * jresult ;
  C4D_GvCalcTable *arg1 = (C4D_GvCalcTable *) 0 ;
  Bool (*result)(GvCalcTable *,GvRun *,GvNode *) = 0 ;
  
  arg1 = (C4D_GvCalcTable *)jarg1; 
  result = (Bool (*)(GvCalcTable *,GvRun *,GvNode *)) ((arg1)->AddNodeToTable);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_C4D_GvCalcTable_ResetTable_set(void * jarg1, void * jarg2) {
  C4D_GvCalcTable *arg1 = (C4D_GvCalcTable *) 0 ;
  void (*arg2)(GvCalcTable *,GvRun *) = (void (*)(GvCalcTable *,GvRun *)) 0 ;
  
  arg1 = (C4D_GvCalcTable *)jarg1; 
  arg2 = (void (*)(GvCalcTable *,GvRun *))jarg2; 
  if (arg1) (arg1)->ResetTable = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_C4D_GvCalcTable_ResetTable_get(void * jarg1) {
  void * jresult ;
  C4D_GvCalcTable *arg1 = (C4D_GvCalcTable *) 0 ;
  void (*result)(GvCalcTable *,GvRun *) = 0 ;
  
  arg1 = (C4D_GvCalcTable *)jarg1; 
  result = (void (*)(GvCalcTable *,GvRun *)) ((arg1)->ResetTable);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_C4D_GvCalcTable_GetTableCount_set(void * jarg1, void * jarg2) {
  C4D_GvCalcTable *arg1 = (C4D_GvCalcTable *) 0 ;
  LONG (*arg2)(GvCalcTable *,GvRun *) = (LONG (*)(GvCalcTable *,GvRun *)) 0 ;
  
  arg1 = (C4D_GvCalcTable *)jarg1; 
  arg2 = (LONG (*)(GvCalcTable *,GvRun *))jarg2; 
  if (arg1) (arg1)->GetTableCount = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_C4D_GvCalcTable_GetTableCount_get(void * jarg1) {
  void * jresult ;
  C4D_GvCalcTable *arg1 = (C4D_GvCalcTable *) 0 ;
  LONG (*result)(GvCalcTable *,GvRun *) = 0 ;
  
  arg1 = (C4D_GvCalcTable *)jarg1; 
  result = (LONG (*)(GvCalcTable *,GvRun *)) ((arg1)->GetTableCount);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_C4D_GvCalcTable_GetTableNode_set(void * jarg1, void * jarg2) {
  C4D_GvCalcTable *arg1 = (C4D_GvCalcTable *) 0 ;
  GvNode *(*arg2)(GvCalcTable *,GvRun *,LONG) = (GvNode *(*)(GvCalcTable *,GvRun *,LONG)) 0 ;
  
  arg1 = (C4D_GvCalcTable *)jarg1; 
  arg2 = (GvNode *(*)(GvCalcTable *,GvRun *,LONG))jarg2; 
  if (arg1) (arg1)->GetTableNode = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_C4D_GvCalcTable_GetTableNode_get(void * jarg1) {
  void * jresult ;
  C4D_GvCalcTable *arg1 = (C4D_GvCalcTable *) 0 ;
  GvNode *(*result)(GvCalcTable *,GvRun *,LONG) = 0 ;
  
  arg1 = (C4D_GvCalcTable *)jarg1; 
  result = (GvNode *(*)(GvCalcTable *,GvRun *,LONG)) ((arg1)->GetTableNode);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_C4D_GvCalcTable() {
  void * jresult ;
  C4D_GvCalcTable *result = 0 ;
  
  result = (C4D_GvCalcTable *)new C4D_GvCalcTable();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_C4D_GvCalcTable(void * jarg1) {
  C4D_GvCalcTable *arg1 = (C4D_GvCalcTable *) 0 ;
  
  arg1 = (C4D_GvCalcTable *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvWrapper_data_set(void * jarg1, void * jarg2) {
  GvWrapper *arg1 = (GvWrapper *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (GvWrapper *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->data = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvWrapper_data_get(void * jarg1) {
  void * jresult ;
  GvWrapper *arg1 = (GvWrapper *) 0 ;
  void *result = 0 ;
  
  arg1 = (GvWrapper *)jarg1; 
  result = (void *) ((arg1)->data);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GvWrapper() {
  void * jresult ;
  GvWrapper *result = 0 ;
  
  result = (GvWrapper *)new GvWrapper();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GvWrapper(void * jarg1) {
  GvWrapper *arg1 = (GvWrapper *) 0 ;
  
  arg1 = (GvWrapper *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvBuildValuesTable__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  GvValue ***arg2 = 0 ;
  LONG *arg3 = 0 ;
  GvPort ***arg4 = 0 ;
  LONG *arg5 = 0 ;
  Bool result;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = (GvValue ***)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GvValue **& type is null", 0);
    return 0;
  } 
  arg3 = (LONG *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  arg4 = (GvPort ***)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GvPort **& type is null", 0);
    return 0;
  } 
  arg5 = (LONG *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  result = GvBuildValuesTable(arg1,*arg2,*arg3,*arg4,*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvPortListEntry_id_set(void * jarg1, int jarg2) {
  GvPortListEntry *arg1 = (GvPortListEntry *) 0 ;
  LONG arg2 ;
  
  arg1 = (GvPortListEntry *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvPortListEntry_id_get(void * jarg1) {
  int jresult ;
  GvPortListEntry *arg1 = (GvPortListEntry *) 0 ;
  LONG result;
  
  arg1 = (GvPortListEntry *)jarg1; 
  result =  ((arg1)->id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GvPortListEntry(int jarg1) {
  void * jresult ;
  LONG arg1 ;
  GvPortListEntry *result = 0 ;
  
  arg1 = (LONG)jarg1; 
  result = (GvPortListEntry *)new GvPortListEntry(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GvPortListEntry(void * jarg1) {
  GvPortListEntry *arg1 = (GvPortListEntry *) 0 ;
  
  arg1 = (GvPortListEntry *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvPortList_GetCount(void * jarg1) {
  int jresult ;
  GvPortList *arg1 = (GvPortList *) 0 ;
  LONG result;
  
  arg1 = (GvPortList *)jarg1; 
  result = ((GvPortList const *)arg1)->GetCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPortList_Append(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GvPortList *arg1 = (GvPortList *) 0 ;
  GvPortListEntry *arg2 = (GvPortListEntry *) 0 ;
  Bool result;
  
  arg1 = (GvPortList *)jarg1; 
  arg2 = (GvPortListEntry *)jarg2; 
  result = (arg1)->Append(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPortList_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GvPortList *arg1 = (GvPortList *) 0 ;
  GvPortListEntry *arg2 = (GvPortListEntry *) 0 ;
  Bool result;
  
  arg1 = (GvPortList *)jarg1; 
  arg2 = (GvPortListEntry *)jarg2; 
  result = (arg1)->Remove(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvPortList_GetIndex(void * jarg1, int jarg2) {
  void * jresult ;
  GvPortList *arg1 = (GvPortList *) 0 ;
  LONG arg2 ;
  GvPortListEntry *result = 0 ;
  
  arg1 = (GvPortList *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (GvPortListEntry *)((GvPortList const *)arg1)->GetIndex(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvPortList_FlushAll(void * jarg1) {
  GvPortList *arg1 = (GvPortList *) 0 ;
  
  arg1 = (GvPortList *)jarg1; 
  (arg1)->FlushAll();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvPortList_Alloc() {
  void * jresult ;
  GvPortList *result = 0 ;
  
  result = (GvPortList *)GvPortList::Alloc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvPortList_Free(void * jarg1) {
  GvPortList **arg1 = 0 ;
  
  arg1 = (GvPortList **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GvPortList *& type is null", 0);
    return ;
  } 
  GvPortList::Free(*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvCalcTime_init_set(void * jarg1, unsigned int jarg2) {
  GvCalcTime *arg1 = (GvCalcTime *) 0 ;
  Bool arg2 ;
  
  arg1 = (GvCalcTime *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->init = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvCalcTime_init_get(void * jarg1) {
  unsigned int jresult ;
  GvCalcTime *arg1 = (GvCalcTime *) 0 ;
  Bool result;
  
  arg1 = (GvCalcTime *)jarg1; 
  result =  ((arg1)->init);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvCalcTime_init_time_set(void * jarg1, unsigned int jarg2) {
  GvCalcTime *arg1 = (GvCalcTime *) 0 ;
  Bool arg2 ;
  
  arg1 = (GvCalcTime *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->init_time = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvCalcTime_init_time_get(void * jarg1) {
  unsigned int jresult ;
  GvCalcTime *arg1 = (GvCalcTime *) 0 ;
  Bool result;
  
  arg1 = (GvCalcTime *)jarg1; 
  result =  ((arg1)->init_time);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvCalcTime_time_changed_set(void * jarg1, unsigned int jarg2) {
  GvCalcTime *arg1 = (GvCalcTime *) 0 ;
  Bool arg2 ;
  
  arg1 = (GvCalcTime *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->time_changed = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvCalcTime_time_changed_get(void * jarg1) {
  unsigned int jresult ;
  GvCalcTime *arg1 = (GvCalcTime *) 0 ;
  Bool result;
  
  arg1 = (GvCalcTime *)jarg1; 
  result =  ((arg1)->time_changed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvCalcTime_loop_changed_set(void * jarg1, unsigned int jarg2) {
  GvCalcTime *arg1 = (GvCalcTime *) 0 ;
  Bool arg2 ;
  
  arg1 = (GvCalcTime *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->loop_changed = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvCalcTime_loop_changed_get(void * jarg1) {
  unsigned int jresult ;
  GvCalcTime *arg1 = (GvCalcTime *) 0 ;
  Bool result;
  
  arg1 = (GvCalcTime *)jarg1; 
  result =  ((arg1)->loop_changed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvCalcTime_length_changed_set(void * jarg1, unsigned int jarg2) {
  GvCalcTime *arg1 = (GvCalcTime *) 0 ;
  Bool arg2 ;
  
  arg1 = (GvCalcTime *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->length_changed = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvCalcTime_length_changed_get(void * jarg1) {
  unsigned int jresult ;
  GvCalcTime *arg1 = (GvCalcTime *) 0 ;
  Bool result;
  
  arg1 = (GvCalcTime *)jarg1; 
  result =  ((arg1)->length_changed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvCalcTime_time_set(void * jarg1, void * jarg2) {
  GvCalcTime *arg1 = (GvCalcTime *) 0 ;
  BaseTime *arg2 = (BaseTime *) 0 ;
  
  arg1 = (GvCalcTime *)jarg1; 
  arg2 = (BaseTime *)jarg2; 
  if (arg1) (arg1)->time = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvCalcTime_time_get(void * jarg1) {
  void * jresult ;
  GvCalcTime *arg1 = (GvCalcTime *) 0 ;
  BaseTime *result = 0 ;
  
  arg1 = (GvCalcTime *)jarg1; 
  result = (BaseTime *)& ((arg1)->time);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvCalcTime_delta_set(void * jarg1, void * jarg2) {
  GvCalcTime *arg1 = (GvCalcTime *) 0 ;
  BaseTime *arg2 = (BaseTime *) 0 ;
  
  arg1 = (GvCalcTime *)jarg1; 
  arg2 = (BaseTime *)jarg2; 
  if (arg1) (arg1)->delta = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvCalcTime_delta_get(void * jarg1) {
  void * jresult ;
  GvCalcTime *arg1 = (GvCalcTime *) 0 ;
  BaseTime *result = 0 ;
  
  arg1 = (GvCalcTime *)jarg1; 
  result = (BaseTime *)& ((arg1)->delta);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvCalcTime_start_set(void * jarg1, void * jarg2) {
  GvCalcTime *arg1 = (GvCalcTime *) 0 ;
  BaseTime *arg2 = (BaseTime *) 0 ;
  
  arg1 = (GvCalcTime *)jarg1; 
  arg2 = (BaseTime *)jarg2; 
  if (arg1) (arg1)->start = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvCalcTime_start_get(void * jarg1) {
  void * jresult ;
  GvCalcTime *arg1 = (GvCalcTime *) 0 ;
  BaseTime *result = 0 ;
  
  arg1 = (GvCalcTime *)jarg1; 
  result = (BaseTime *)& ((arg1)->start);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvCalcTime_end_set(void * jarg1, void * jarg2) {
  GvCalcTime *arg1 = (GvCalcTime *) 0 ;
  BaseTime *arg2 = (BaseTime *) 0 ;
  
  arg1 = (GvCalcTime *)jarg1; 
  arg2 = (BaseTime *)jarg2; 
  if (arg1) (arg1)->end = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvCalcTime_end_get(void * jarg1) {
  void * jresult ;
  GvCalcTime *arg1 = (GvCalcTime *) 0 ;
  BaseTime *result = 0 ;
  
  arg1 = (GvCalcTime *)jarg1; 
  result = (BaseTime *)& ((arg1)->end);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvCalcTime_loop_start_set(void * jarg1, void * jarg2) {
  GvCalcTime *arg1 = (GvCalcTime *) 0 ;
  BaseTime *arg2 = (BaseTime *) 0 ;
  
  arg1 = (GvCalcTime *)jarg1; 
  arg2 = (BaseTime *)jarg2; 
  if (arg1) (arg1)->loop_start = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvCalcTime_loop_start_get(void * jarg1) {
  void * jresult ;
  GvCalcTime *arg1 = (GvCalcTime *) 0 ;
  BaseTime *result = 0 ;
  
  arg1 = (GvCalcTime *)jarg1; 
  result = (BaseTime *)& ((arg1)->loop_start);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvCalcTime_loop_end_set(void * jarg1, void * jarg2) {
  GvCalcTime *arg1 = (GvCalcTime *) 0 ;
  BaseTime *arg2 = (BaseTime *) 0 ;
  
  arg1 = (GvCalcTime *)jarg1; 
  arg2 = (BaseTime *)jarg2; 
  if (arg1) (arg1)->loop_end = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvCalcTime_loop_end_get(void * jarg1) {
  void * jresult ;
  GvCalcTime *arg1 = (GvCalcTime *) 0 ;
  BaseTime *result = 0 ;
  
  arg1 = (GvCalcTime *)jarg1; 
  result = (BaseTime *)& ((arg1)->loop_end);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvCalcTime_previous_set(void * jarg1, void * jarg2) {
  GvCalcTime *arg1 = (GvCalcTime *) 0 ;
  BaseTime *arg2 = (BaseTime *) 0 ;
  
  arg1 = (GvCalcTime *)jarg1; 
  arg2 = (BaseTime *)jarg2; 
  if (arg1) (arg1)->previous = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvCalcTime_previous_get(void * jarg1) {
  void * jresult ;
  GvCalcTime *arg1 = (GvCalcTime *) 0 ;
  BaseTime *result = 0 ;
  
  arg1 = (GvCalcTime *)jarg1; 
  result = (BaseTime *)& ((arg1)->previous);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvCalcTime_fps_set(void * jarg1, int jarg2) {
  GvCalcTime *arg1 = (GvCalcTime *) 0 ;
  LONG arg2 ;
  
  arg1 = (GvCalcTime *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->fps = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvCalcTime_fps_get(void * jarg1) {
  int jresult ;
  GvCalcTime *arg1 = (GvCalcTime *) 0 ;
  LONG result;
  
  arg1 = (GvCalcTime *)jarg1; 
  result =  ((arg1)->fps);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvCalc_time_set(void * jarg1, void * jarg2) {
  GvCalc *arg1 = (GvCalc *) 0 ;
  GvCalcTime *arg2 = (GvCalcTime *) 0 ;
  
  arg1 = (GvCalc *)jarg1; 
  arg2 = (GvCalcTime *)jarg2; 
  if (arg1) (arg1)->time = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvCalc_time_get(void * jarg1) {
  void * jresult ;
  GvCalc *arg1 = (GvCalc *) 0 ;
  GvCalcTime *result = 0 ;
  
  arg1 = (GvCalc *)jarg1; 
  result = (GvCalcTime *)& ((arg1)->time);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvCalc_cpu_count_set(void * jarg1, int jarg2) {
  GvCalc *arg1 = (GvCalc *) 0 ;
  LONG arg2 ;
  
  arg1 = (GvCalc *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->cpu_count = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvCalc_cpu_count_get(void * jarg1) {
  int jresult ;
  GvCalc *arg1 = (GvCalc *) 0 ;
  LONG result;
  
  arg1 = (GvCalc *)jarg1; 
  result =  ((arg1)->cpu_count);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvCalc_flags_set(void * jarg1, void * jarg2) {
  GvCalc *arg1 = (GvCalc *) 0 ;
  ULONG arg2 ;
  ULONG *argp2 ;
  
  arg1 = (GvCalc *)jarg1; 
  argp2 = (ULONG *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ULONG", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvCalc_flags_get(void * jarg1) {
  void * jresult ;
  GvCalc *arg1 = (GvCalc *) 0 ;
  ULONG result;
  
  arg1 = (GvCalc *)jarg1; 
  result =  ((arg1)->flags);
  jresult = new ULONG((const ULONG &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvCalc_document_set(void * jarg1, void * jarg2) {
  GvCalc *arg1 = (GvCalc *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  
  arg1 = (GvCalc *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  if (arg1) (arg1)->document = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvCalc_document_get(void * jarg1) {
  void * jresult ;
  GvCalc *arg1 = (GvCalc *) 0 ;
  BaseDocument *result = 0 ;
  
  arg1 = (GvCalc *)jarg1; 
  result = (BaseDocument *) ((arg1)->document);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvCalc_master_set(void * jarg1, void * jarg2) {
  GvCalc *arg1 = (GvCalc *) 0 ;
  GvNodeMaster *arg2 = (GvNodeMaster *) 0 ;
  
  arg1 = (GvCalc *)jarg1; 
  arg2 = (GvNodeMaster *)jarg2; 
  if (arg1) (arg1)->master = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvCalc_master_get(void * jarg1) {
  void * jresult ;
  GvCalc *arg1 = (GvCalc *) 0 ;
  GvNodeMaster *result = 0 ;
  
  arg1 = (GvCalc *)jarg1; 
  result = (GvNodeMaster *) ((arg1)->master);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvCalc_counter_set(void * jarg1, void * jarg2) {
  GvCalc *arg1 = (GvCalc *) 0 ;
  ULONG arg2 ;
  ULONG *argp2 ;
  
  arg1 = (GvCalc *)jarg1; 
  argp2 = (ULONG *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ULONG", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->counter = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvCalc_counter_get(void * jarg1) {
  void * jresult ;
  GvCalc *arg1 = (GvCalc *) 0 ;
  ULONG result;
  
  arg1 = (GvCalc *)jarg1; 
  result =  ((arg1)->counter);
  jresult = new ULONG((const ULONG &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvCalc_thread_set(void * jarg1, void * jarg2) {
  GvCalc *arg1 = (GvCalc *) 0 ;
  BaseThread *arg2 = (BaseThread *) 0 ;
  
  arg1 = (GvCalc *)jarg1; 
  arg2 = (BaseThread *)jarg2; 
  if (arg1) (arg1)->thread = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvCalc_thread_get(void * jarg1) {
  void * jresult ;
  GvCalc *arg1 = (GvCalc *) 0 ;
  BaseThread *result = 0 ;
  
  arg1 = (GvCalc *)jarg1; 
  result = (BaseThread *) ((arg1)->thread);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvInit_cpu_count_set(void * jarg1, int jarg2) {
  GvInit *arg1 = (GvInit *) 0 ;
  LONG arg2 ;
  
  arg1 = (GvInit *)jarg1; 
  arg2 = (LONG)jarg2; 
  if (arg1) (arg1)->cpu_count = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvInit_cpu_count_get(void * jarg1) {
  int jresult ;
  GvInit *arg1 = (GvInit *) 0 ;
  LONG result;
  
  arg1 = (GvInit *)jarg1; 
  result =  ((arg1)->cpu_count);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvInit_flags_set(void * jarg1, int jarg2) {
  GvInit *arg1 = (GvInit *) 0 ;
  GvCalcFlags arg2 ;
  
  arg1 = (GvInit *)jarg1; 
  arg2 = (GvCalcFlags)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvInit_flags_get(void * jarg1) {
  int jresult ;
  GvInit *arg1 = (GvInit *) 0 ;
  GvCalcFlags result;
  
  arg1 = (GvInit *)jarg1; 
  result = (GvCalcFlags) ((arg1)->flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvInit_SetError(void * jarg1, int jarg2) {
  GvInit *arg1 = (GvInit *) 0 ;
  GvCalcError arg2 ;
  
  arg1 = (GvInit *)jarg1; 
  arg2 = (GvCalcError)jarg2; 
  (arg1)->SetError(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvInit_GetError(void * jarg1) {
  int jresult ;
  GvInit *arg1 = (GvInit *) 0 ;
  GvCalcError result;
  
  arg1 = (GvInit *)jarg1; 
  result = (GvCalcError)(arg1)->GetError();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvValue_Calculate__SWIG_0(void * jarg1, void * jarg2, int jarg3, void * jarg4, void * jarg5, int jarg6, void * jarg7) {
  unsigned int jresult ;
  GvValue *arg1 = (GvValue *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  GvPortIO arg3 ;
  GvRun *arg4 = (GvRun *) 0 ;
  GvCalc *arg5 = (GvCalc *) 0 ;
  LONG arg6 ;
  BaseTime *arg7 = (BaseTime *) 0 ;
  Bool result;
  
  arg1 = (GvValue *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = (GvPortIO)jarg3; 
  arg4 = (GvRun *)jarg4; 
  arg5 = (GvCalc *)jarg5; 
  arg6 = (LONG)jarg6; 
  arg7 = (BaseTime *)jarg7; 
  result = (arg1)->Calculate(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvValue_Calculate__SWIG_1(void * jarg1, void * jarg2, int jarg3, void * jarg4, void * jarg5, int jarg6) {
  unsigned int jresult ;
  GvValue *arg1 = (GvValue *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  GvPortIO arg3 ;
  GvRun *arg4 = (GvRun *) 0 ;
  GvCalc *arg5 = (GvCalc *) 0 ;
  LONG arg6 ;
  Bool result;
  
  arg1 = (GvValue *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = (GvPortIO)jarg3; 
  arg4 = (GvRun *)jarg4; 
  arg5 = (GvCalc *)jarg5; 
  arg6 = (LONG)jarg6; 
  result = (arg1)->Calculate(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvValue_Calculate__SWIG_2(void * jarg1, void * jarg2, int jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  GvValue *arg1 = (GvValue *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  GvPortIO arg3 ;
  GvRun *arg4 = (GvRun *) 0 ;
  GvCalc *arg5 = (GvCalc *) 0 ;
  Bool result;
  
  arg1 = (GvValue *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = (GvPortIO)jarg3; 
  arg4 = (GvRun *)jarg4; 
  arg5 = (GvCalc *)jarg5; 
  result = (arg1)->Calculate(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvValue_IsConnected(void * jarg1, int jarg2) {
  unsigned int jresult ;
  GvValue *arg1 = (GvValue *) 0 ;
  LONG arg2 ;
  Bool result;
  
  arg1 = (GvValue *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (arg1)->IsConnected(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvValue_IsPort(void * jarg1) {
  unsigned int jresult ;
  GvValue *arg1 = (GvValue *) 0 ;
  Bool result;
  
  arg1 = (GvValue *)jarg1; 
  result = (arg1)->IsPort();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvValue_NrOfPorts(void * jarg1) {
  int jresult ;
  GvValue *arg1 = (GvValue *) 0 ;
  LONG result;
  
  arg1 = (GvValue *)jarg1; 
  result = (arg1)->NrOfPorts();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvValue_GetValueID(void * jarg1) {
  int jresult ;
  GvValue *arg1 = (GvValue *) 0 ;
  GvValueID result;
  
  arg1 = (GvValue *)jarg1; 
  result = (arg1)->GetValueID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvValue_GetMainID(void * jarg1) {
  int jresult ;
  GvValue *arg1 = (GvValue *) 0 ;
  LONG result;
  
  arg1 = (GvValue *)jarg1; 
  result = (arg1)->GetMainID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvValue_GetPort__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  GvValue *arg1 = (GvValue *) 0 ;
  LONG arg2 ;
  GvPort *result = 0 ;
  
  arg1 = (GvValue *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (GvPort *)(arg1)->GetPort(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvValue_GetPort__SWIG_1(void * jarg1) {
  void * jresult ;
  GvValue *arg1 = (GvValue *) 0 ;
  GvPort *result = 0 ;
  
  arg1 = (GvValue *)jarg1; 
  result = (GvPort *)(arg1)->GetPort();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvQuery_GetFlags(void * jarg1) {
  int jresult ;
  GvQuery *arg1 = (GvQuery *) 0 ;
  GvCalcFlags result;
  
  arg1 = (GvQuery *)jarg1; 
  result = (GvCalcFlags)(arg1)->GetFlags();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvQuery_SetFlags(void * jarg1, int jarg2) {
  GvQuery *arg1 = (GvQuery *) 0 ;
  GvCalcFlags arg2 ;
  
  arg1 = (GvQuery *)jarg1; 
  arg2 = (GvCalcFlags)jarg2; 
  (arg1)->SetFlags(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvQuery_SetError(void * jarg1, int jarg2) {
  GvQuery *arg1 = (GvQuery *) 0 ;
  GvCalcError arg2 ;
  
  arg1 = (GvQuery *)jarg1; 
  arg2 = (GvCalcError)jarg2; 
  (arg1)->SetError(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvQuery_GetError(void * jarg1) {
  int jresult ;
  GvQuery *arg1 = (GvQuery *) 0 ;
  GvCalcError result;
  
  arg1 = (GvQuery *)jarg1; 
  result = (GvCalcError)(arg1)->GetError();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvRun_SetCalculationTable(void * jarg1, void * jarg2) {
  GvRun *arg1 = (GvRun *) 0 ;
  GvCalcTable *arg2 = (GvCalcTable *) 0 ;
  
  arg1 = (GvRun *)jarg1; 
  arg2 = (GvCalcTable *)jarg2; 
  (arg1)->SetCalculationTable(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvRun_AddNodeToCalculationTable__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  GvRun *arg1 = (GvRun *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  Bool arg3 ;
  Bool result;
  
  arg1 = (GvRun *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->AddNodeToCalculationTable(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvRun_AddNodeToCalculationTable__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GvRun *arg1 = (GvRun *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  Bool result;
  
  arg1 = (GvRun *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  result = (arg1)->AddNodeToCalculationTable(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvRun_CalculateTable(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GvRun *arg1 = (GvRun *) 0 ;
  GvCalc *arg2 = (GvCalc *) 0 ;
  Bool result;
  
  arg1 = (GvRun *)jarg1; 
  arg2 = (GvCalc *)jarg2; 
  result = (arg1)->CalculateTable(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvRun_GetCpuID(void * jarg1) {
  int jresult ;
  GvRun *arg1 = (GvRun *) 0 ;
  LONG result;
  
  arg1 = (GvRun *)jarg1; 
  result = (arg1)->GetCpuID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvRun_IncrementID(void * jarg1) {
  GvRun *arg1 = (GvRun *) 0 ;
  
  arg1 = (GvRun *)jarg1; 
  (arg1)->IncrementID();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvRun_SetError(void * jarg1, int jarg2) {
  GvRun *arg1 = (GvRun *) 0 ;
  GvCalcError arg2 ;
  
  arg1 = (GvRun *)jarg1; 
  arg2 = (GvCalcError)jarg2; 
  (arg1)->SetError(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvRun_GetError(void * jarg1) {
  int jresult ;
  GvRun *arg1 = (GvRun *) 0 ;
  GvCalcError result;
  
  arg1 = (GvRun *)jarg1; 
  result = (GvCalcError)(arg1)->GetError();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvRun_SetState(void * jarg1, int jarg2) {
  GvRun *arg1 = (GvRun *) 0 ;
  GvCalcState arg2 ;
  
  arg1 = (GvRun *)jarg1; 
  arg2 = (GvCalcState)jarg2; 
  (arg1)->SetState(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvRun_GetState(void * jarg1) {
  int jresult ;
  GvRun *arg1 = (GvRun *) 0 ;
  GvCalcState result;
  
  arg1 = (GvRun *)jarg1; 
  result = (GvCalcState)(arg1)->GetState();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvRun_IsIterationPath(void * jarg1) {
  unsigned int jresult ;
  GvRun *arg1 = (GvRun *) 0 ;
  Bool result;
  
  arg1 = (GvRun *)jarg1; 
  result = (arg1)->IsIterationPath();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvCalcTable_AddNodeToTable(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  GvCalcTable *arg1 = (GvCalcTable *) 0 ;
  GvRun *arg2 = (GvRun *) 0 ;
  GvNode *arg3 = (GvNode *) 0 ;
  Bool result;
  
  arg1 = (GvCalcTable *)jarg1; 
  arg2 = (GvRun *)jarg2; 
  arg3 = (GvNode *)jarg3; 
  result = (arg1)->AddNodeToTable(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvCalcTable_ResetTable(void * jarg1, void * jarg2) {
  GvCalcTable *arg1 = (GvCalcTable *) 0 ;
  GvRun *arg2 = (GvRun *) 0 ;
  
  arg1 = (GvCalcTable *)jarg1; 
  arg2 = (GvRun *)jarg2; 
  (arg1)->ResetTable(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvCalcTable_GetTableCount(void * jarg1, void * jarg2) {
  int jresult ;
  GvCalcTable *arg1 = (GvCalcTable *) 0 ;
  GvRun *arg2 = (GvRun *) 0 ;
  LONG result;
  
  arg1 = (GvCalcTable *)jarg1; 
  arg2 = (GvRun *)jarg2; 
  result = (arg1)->GetTableCount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvCalcTable_GetTableNode(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  GvCalcTable *arg1 = (GvCalcTable *) 0 ;
  GvRun *arg2 = (GvRun *) 0 ;
  LONG arg3 ;
  GvNode *result = 0 ;
  
  arg1 = (GvCalcTable *)jarg1; 
  arg2 = (GvRun *)jarg2; 
  arg3 = (LONG)jarg3; 
  result = (GvNode *)(arg1)->GetTableNode(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvNode_GetNext(void * jarg1) {
  void * jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  GvNode *result = 0 ;
  
  arg1 = (GvNode *)jarg1; 
  result = (GvNode *)(arg1)->GetNext();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvNode_GetPred(void * jarg1) {
  void * jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  GvNode *result = 0 ;
  
  arg1 = (GvNode *)jarg1; 
  result = (GvNode *)(arg1)->GetPred();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvNode_GetUp(void * jarg1) {
  void * jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  GvNode *result = 0 ;
  
  arg1 = (GvNode *)jarg1; 
  result = (GvNode *)(arg1)->GetUp();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvNode_GetDown(void * jarg1) {
  void * jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  GvNode *result = 0 ;
  
  arg1 = (GvNode *)jarg1; 
  result = (GvNode *)(arg1)->GetDown();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvNode_Redraw(void * jarg1) {
  GvNode *arg1 = (GvNode *) 0 ;
  
  arg1 = (GvNode *)jarg1; 
  (arg1)->Redraw();
}


SWIGEXPORT char * /* String_ctype */ SWIGSTDCALL CSharp_GvNode_GetTitle(void * jarg1) {
  char * /* String_ctype */ jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  String result;
  
  arg1 = (GvNode *)jarg1; 
  result = (arg1)->GetTitle();
  /* <String_out> */ 
  jresult = SWIG_csharp_string_callback((&result)->GetCStringCopy()); 
  /* </String_out> */
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvNode_SetTitle(void * jarg1, char * /* constString&_ctype */ jarg2) {
  GvNode *arg1 = (GvNode *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (GvNode *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  String arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->SetTitle((String const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvNode_CreateOperator(void * jarg1) {
  unsigned int jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  Bool result;
  
  arg1 = (GvNode *)jarg1; 
  result = (arg1)->CreateOperator();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvNode_GetNodeMaster(void * jarg1) {
  void * jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  GvNodeMaster *result = 0 ;
  
  arg1 = (GvNode *)jarg1; 
  result = (GvNodeMaster *)(arg1)->GetNodeMaster();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvNode_GetOperatorData(void * jarg1) {
  void * jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  GvOperatorData *result = 0 ;
  
  arg1 = (GvNode *)jarg1; 
  result = (GvOperatorData *)(arg1)->GetOperatorData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvNode_GetOperatorID(void * jarg1) {
  int jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  LONG result;
  
  arg1 = (GvNode *)jarg1; 
  result = (arg1)->GetOperatorID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvNode_GetOwnerID(void * jarg1) {
  int jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  LONG result;
  
  arg1 = (GvNode *)jarg1; 
  result = (arg1)->GetOwnerID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvNode_IsGroupNode(void * jarg1) {
  unsigned int jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  Bool result;
  
  arg1 = (GvNode *)jarg1; 
  result = (arg1)->IsGroupNode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvNode_AddPort__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, unsigned int jarg5) {
  void * jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  GvPortIO arg2 ;
  LONG arg3 ;
  GvPortFlags arg4 ;
  Bool arg5 ;
  GvPort *result = 0 ;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = (GvPortIO)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (GvPortFlags)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (GvPort *)(arg1)->AddPort(arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvNode_AddPort__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  GvPortIO arg2 ;
  LONG arg3 ;
  GvPortFlags arg4 ;
  GvPort *result = 0 ;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = (GvPortIO)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (GvPortFlags)jarg4; 
  result = (GvPort *)(arg1)->AddPort(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvNode_AddPort__SWIG_2(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  GvPortIO arg2 ;
  LONG arg3 ;
  GvPort *result = 0 ;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = (GvPortIO)jarg2; 
  arg3 = (LONG)jarg3; 
  result = (GvPort *)(arg1)->AddPort(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvNode_AddPortIsOK(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  GvPortIO arg2 ;
  LONG arg3 ;
  Bool result;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = (GvPortIO)jarg2; 
  arg3 = (LONG)jarg3; 
  result = (arg1)->AddPortIsOK(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvNode_SetPortType(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  GvPort *arg2 = (GvPort *) 0 ;
  LONG arg3 ;
  Bool result;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = (GvPort *)jarg2; 
  arg3 = (LONG)jarg3; 
  result = (arg1)->SetPortType(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvNode_ResetPortType(void * jarg1, int jarg2) {
  unsigned int jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  LONG arg2 ;
  Bool result;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (arg1)->ResetPortType(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvNode_RemovePort__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  GvNode *arg1 = (GvNode *) 0 ;
  GvPort *arg2 = (GvPort *) 0 ;
  Bool arg3 ;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = (GvPort *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->RemovePort(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvNode_RemovePort__SWIG_1(void * jarg1, void * jarg2) {
  GvNode *arg1 = (GvNode *) 0 ;
  GvPort *arg2 = (GvPort *) 0 ;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = (GvPort *)jarg2; 
  (arg1)->RemovePort(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvNode_RemovePortIsOK(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  GvPort *arg2 = (GvPort *) 0 ;
  Bool result;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = (GvPort *)jarg2; 
  result = (arg1)->RemovePortIsOK(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvNode_RemoveUnusedPorts__SWIG_0(void * jarg1, unsigned int jarg2) {
  GvNode *arg1 = (GvNode *) 0 ;
  Bool arg2 ;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->RemoveUnusedPorts(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvNode_RemoveUnusedPorts__SWIG_1(void * jarg1) {
  GvNode *arg1 = (GvNode *) 0 ;
  
  arg1 = (GvNode *)jarg1; 
  (arg1)->RemoveUnusedPorts();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvNode_AddConnection(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  GvPort *arg3 = (GvPort *) 0 ;
  GvNode *arg4 = (GvNode *) 0 ;
  GvPort *arg5 = (GvPort *) 0 ;
  GvPort *result = 0 ;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = (GvPort *)jarg3; 
  arg4 = (GvNode *)jarg4; 
  arg5 = (GvPort *)jarg5; 
  result = (GvPort *)(arg1)->AddConnection(arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvNode_RemoveConnections(void * jarg1) {
  GvNode *arg1 = (GvNode *) 0 ;
  
  arg1 = (GvNode *)jarg1; 
  (arg1)->RemoveConnections();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvNode_GetPortList(void * jarg1, int jarg2, void * jarg3) {
  GvNode *arg1 = (GvNode *) 0 ;
  GvPortIO arg2 ;
  GvPortList *arg3 = 0 ;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = (GvPortIO)jarg2; 
  arg3 = (GvPortList *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GvPortList & type is null", 0);
    return ;
  } 
  (arg1)->GetPortList(arg2,*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvNode_GetPortDescription(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  GvPortIO arg2 ;
  LONG arg3 ;
  GvPortDescription *arg4 = (GvPortDescription *) 0 ;
  Bool result;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = (GvPortIO)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (GvPortDescription *)jarg4; 
  result = (arg1)->GetPortDescription(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvNode_GetInPortCount(void * jarg1) {
  int jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  LONG result;
  
  arg1 = (GvNode *)jarg1; 
  result = (arg1)->GetInPortCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvNode_GetOutPortCount(void * jarg1) {
  int jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  LONG result;
  
  arg1 = (GvNode *)jarg1; 
  result = (arg1)->GetOutPortCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvNode_GetInPort(void * jarg1, int jarg2) {
  void * jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  LONG arg2 ;
  GvPort *result = 0 ;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (GvPort *)(arg1)->GetInPort(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvNode_GetOutPort(void * jarg1, int jarg2) {
  void * jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  LONG arg2 ;
  GvPort *result = 0 ;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (GvPort *)(arg1)->GetOutPort(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvNode_GetInPortFirstMainID(void * jarg1, int jarg2) {
  void * jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  LONG arg2 ;
  GvPort *result = 0 ;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (GvPort *)(arg1)->GetInPortFirstMainID(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvNode_GetOutPortFirstMainID(void * jarg1, int jarg2) {
  void * jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  LONG arg2 ;
  GvPort *result = 0 ;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (GvPort *)(arg1)->GetOutPortFirstMainID(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvNode_GetInPortMainID(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  LONG arg2 ;
  LONG *arg3 = 0 ;
  GvPort *result = 0 ;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  result = (GvPort *)(arg1)->GetInPortMainID(arg2,*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvNode_GetOutPortMainID(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  LONG arg2 ;
  LONG *arg3 = 0 ;
  GvPort *result = 0 ;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  result = (GvPort *)(arg1)->GetOutPortMainID(arg2,*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvNode_GetInPortSubID(void * jarg1, int jarg2) {
  void * jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  LONG arg2 ;
  GvPort *result = 0 ;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (GvPort *)(arg1)->GetInPortSubID(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvNode_GetOutPortSubID(void * jarg1, int jarg2) {
  void * jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  LONG arg2 ;
  GvPort *result = 0 ;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (GvPort *)(arg1)->GetOutPortSubID(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvNode_GetPort(void * jarg1, int jarg2) {
  void * jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  LONG arg2 ;
  GvPort *result = 0 ;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (GvPort *)(arg1)->GetPort(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvNode_GetPortIndex(void * jarg1, int jarg2) {
  int jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  LONG arg2 ;
  LONG result;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (arg1)->GetPortIndex(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvNode_CalculateInPortIndex(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  LONG arg2 ;
  GvRun *arg3 = (GvRun *) 0 ;
  GvCalc *arg4 = (GvCalc *) 0 ;
  GvPort *result = 0 ;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (GvRun *)jarg3; 
  arg4 = (GvCalc *)jarg4; 
  result = (GvPort *)(arg1)->CalculateInPortIndex(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvNode_CalculateOutPortIndex(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  LONG arg2 ;
  GvRun *arg3 = (GvRun *) 0 ;
  GvCalc *arg4 = (GvCalc *) 0 ;
  GvPort *result = 0 ;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (GvRun *)jarg3; 
  arg4 = (GvCalc *)jarg4; 
  result = (GvPort *)(arg1)->CalculateOutPortIndex(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvNode_CalculateInPort(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  GvPort *arg2 = (GvPort *) 0 ;
  GvRun *arg3 = (GvRun *) 0 ;
  GvCalc *arg4 = (GvCalc *) 0 ;
  GvPort *result = 0 ;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = (GvPort *)jarg2; 
  arg3 = (GvRun *)jarg3; 
  arg4 = (GvCalc *)jarg4; 
  result = (GvPort *)(arg1)->CalculateInPort(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvNode_CalculateOutPort(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  GvPort *arg2 = (GvPort *) 0 ;
  GvRun *arg3 = (GvRun *) 0 ;
  GvCalc *arg4 = (GvCalc *) 0 ;
  GvPort *result = 0 ;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = (GvPort *)jarg2; 
  arg3 = (GvRun *)jarg3; 
  arg4 = (GvCalc *)jarg4; 
  result = (GvPort *)(arg1)->CalculateOutPort(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvNode_SetRecalculate__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  GvRun *arg2 = (GvRun *) 0 ;
  Bool arg3 ;
  Bool result;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = (GvRun *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->SetRecalculate(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvNode_SetRecalculate__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  GvRun *arg2 = (GvRun *) 0 ;
  Bool result;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = (GvRun *)jarg2; 
  result = (arg1)->SetRecalculate(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvNode_GetOpContainerInstance(void * jarg1) {
  void * jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  BaseContainer *result = 0 ;
  
  arg1 = (GvNode *)jarg1; 
  result = (BaseContainer *)(arg1)->GetOpContainerInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvNode_GetOperatorContainer(void * jarg1) {
  void * jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  BaseContainer result;
  
  arg1 = (GvNode *)jarg1; 
  result = (arg1)->GetOperatorContainer();
  jresult = new BaseContainer((const BaseContainer &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvNode_SetOperatorContainer(void * jarg1, void * jarg2) {
  GvNode *arg1 = (GvNode *) 0 ;
  BaseContainer *arg2 = 0 ;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = (BaseContainer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer const & type is null", 0);
    return ;
  } 
  (arg1)->SetOperatorContainer((BaseContainer const &)*arg2);
}


SWIGEXPORT char * /* String_ctype */ SWIGSTDCALL CSharp_GvNode_OperatorGetDetailedText(void * jarg1) {
  char * /* String_ctype */ jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  String result;
  
  arg1 = (GvNode *)jarg1; 
  result = (arg1)->OperatorGetDetailedText();
  /* <String_out> */ 
  jresult = SWIG_csharp_string_callback((&result)->GetCStringCopy()); 
  /* </String_out> */
  return jresult;
}


SWIGEXPORT char * /* String_ctype */ SWIGSTDCALL CSharp_GvNode_OperatorGetErrorString(void * jarg1, int jarg2) {
  char * /* String_ctype */ jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  LONG arg2 ;
  String result;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (arg1)->OperatorGetErrorString(arg2);
  /* <String_out> */ 
  jresult = SWIG_csharp_string_callback((&result)->GetCStringCopy()); 
  /* </String_out> */
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvNode_OperatorSetData(void * jarg1, int jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  GvDataType arg2 ;
  void *arg3 = (void *) 0 ;
  GvOpSetDataMode arg4 ;
  Bool result;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = (GvDataType)jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (GvOpSetDataMode)jarg4; 
  result = (arg1)->OperatorSetData(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvNode_OperatorIsSetDataAllowed(void * jarg1, int jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  GvDataType arg2 ;
  void *arg3 = (void *) 0 ;
  GvOpSetDataMode arg4 ;
  Bool result;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = (GvDataType)jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (GvOpSetDataMode)jarg4; 
  result = (arg1)->OperatorIsSetDataAllowed(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvNode_OperatorGetIcon(void * jarg1, void * jarg2) {
  GvNode *arg1 = (GvNode *) 0 ;
  IconData *arg2 = 0 ;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = (IconData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "IconData & type is null", 0);
    return ;
  } 
  (arg1)->OperatorGetIcon(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvNode_GetSelectState(void * jarg1) {
  unsigned int jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  Bool result;
  
  arg1 = (GvNode *)jarg1; 
  result = (arg1)->GetSelectState();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvNode_GetFailureState(void * jarg1) {
  unsigned int jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  Bool result;
  
  arg1 = (GvNode *)jarg1; 
  result = (arg1)->GetFailureState();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvNode_GetDisabledState(void * jarg1) {
  unsigned int jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  Bool result;
  
  arg1 = (GvNode *)jarg1; 
  result = (arg1)->GetDisabledState();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvNode_GetOpenState(void * jarg1) {
  unsigned int jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  Bool result;
  
  arg1 = (GvNode *)jarg1; 
  result = (arg1)->GetOpenState();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvNode_SetOpenState(void * jarg1, unsigned int jarg2) {
  GvNode *arg1 = (GvNode *) 0 ;
  Bool arg2 ;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetOpenState(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvNode_GetLockState(void * jarg1) {
  unsigned int jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  Bool result;
  
  arg1 = (GvNode *)jarg1; 
  result = (arg1)->GetLockState();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvNode_SetLockState(void * jarg1, unsigned int jarg2) {
  GvNode *arg1 = (GvNode *) 0 ;
  Bool arg2 ;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetLockState(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvNode_GetShowPortNamesState(void * jarg1) {
  unsigned int jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  Bool result;
  
  arg1 = (GvNode *)jarg1; 
  result = (arg1)->GetShowPortNamesState();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvNode_SetShowPortNamesState(void * jarg1, unsigned int jarg2) {
  GvNode *arg1 = (GvNode *) 0 ;
  Bool arg2 ;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetShowPortNamesState(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvNode_AllocCalculationHandler(void * jarg1, int jarg2, void * jarg3, void * jarg4, int jarg5) {
  void * jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  LONG arg2 ;
  GvCalc *arg3 = (GvCalc *) 0 ;
  GvRun *arg4 = (GvRun *) 0 ;
  LONG arg5 ;
  GvValue *result = 0 ;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (GvCalc *)jarg3; 
  arg4 = (GvRun *)jarg4; 
  arg5 = (LONG)jarg5; 
  result = (GvValue *)(arg1)->AllocCalculationHandler(arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvNode_FreeCalculationHandler(void * jarg1, void * jarg2) {
  GvNode *arg1 = (GvNode *) 0 ;
  GvValue **arg2 = 0 ;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = (GvValue **)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GvValue *& type is null", 0);
    return ;
  } 
  (arg1)->FreeCalculationHandler(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvNode_CalculateRawData(void * jarg1, int jarg2, void * jarg3, void * jarg4, void * jarg5, int jarg6, double jarg7) {
  unsigned int jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  GvValueID arg2 ;
  void *arg3 = (void *) (void *)0 ;
  void *arg4 = (void *) (void *)0 ;
  void *arg5 = (void *) 0 ;
  GvValueFlags arg6 ;
  Real arg7 ;
  Bool result;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = (GvValueID)jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (void *)jarg4; 
  arg5 = (void *)jarg5; 
  arg6 = (GvValueFlags)jarg6; 
  arg7 = (Real)jarg7; 
  result = (arg1)->CalculateRawData(arg2,(void const *)arg3,(void const *)arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvPort_RemoveConnection(void * jarg1) {
  GvPort *arg1 = (GvPort *) 0 ;
  
  arg1 = (GvPort *)jarg1; 
  (arg1)->RemoveConnection();
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvPort_GetNrOfConnections(void * jarg1) {
  int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  LONG result;
  
  arg1 = (GvPort *)jarg1; 
  result = (arg1)->GetNrOfConnections();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvPort_RemovePortConnections(void * jarg1) {
  GvPort *arg1 = (GvPort *) 0 ;
  
  arg1 = (GvPort *)jarg1; 
  (arg1)->RemovePortConnections();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_IsIncomingConnected(void * jarg1) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  result = (arg1)->IsIncomingConnected();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_GetIncomingDestination(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  GvNode **arg2 = 0 ;
  GvPort **arg3 = 0 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (GvNode **)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GvNode *& type is null", 0);
    return 0;
  } 
  arg3 = (GvPort **)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GvPort *& type is null", 0);
    return 0;
  } 
  result = (arg1)->GetIncomingDestination(*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_GetIncomingSource(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  GvNode **arg2 = 0 ;
  GvPort **arg3 = 0 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (GvNode **)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GvNode *& type is null", 0);
    return 0;
  } 
  arg3 = (GvPort **)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GvPort *& type is null", 0);
    return 0;
  } 
  result = (arg1)->GetIncomingSource(*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvPort_GetIO(void * jarg1) {
  int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  GvPortIO result;
  
  arg1 = (GvPort *)jarg1; 
  result = (GvPortIO)(arg1)->GetIO();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvPort_SetMainID(void * jarg1, int jarg2) {
  GvPort *arg1 = (GvPort *) 0 ;
  LONG arg2 ;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (LONG)jarg2; 
  (arg1)->SetMainID(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvPort_GetMainID(void * jarg1) {
  int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  LONG result;
  
  arg1 = (GvPort *)jarg1; 
  result = (arg1)->GetMainID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvPort_SetUserID(void * jarg1, int jarg2) {
  GvPort *arg1 = (GvPort *) 0 ;
  LONG arg2 ;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (LONG)jarg2; 
  (arg1)->SetUserID(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvPort_GetUserID(void * jarg1) {
  int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  LONG result;
  
  arg1 = (GvPort *)jarg1; 
  result = (arg1)->GetUserID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvPort_GetSubID(void * jarg1) {
  int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  LONG result;
  
  arg1 = (GvPort *)jarg1; 
  result = (arg1)->GetSubID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvPort_GetValueType(void * jarg1) {
  int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  GvValueID result;
  
  arg1 = (GvPort *)jarg1; 
  result = (arg1)->GetValueType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvPort_SetVisible(void * jarg1, unsigned int jarg2) {
  GvPort *arg1 = (GvPort *) 0 ;
  Bool arg2 ;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetVisible(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_GetVisible(void * jarg1) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  result = (arg1)->GetVisible();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvPort_SetValid(void * jarg1, void * jarg2, unsigned int jarg3) {
  GvPort *arg1 = (GvPort *) 0 ;
  GvRun *arg2 = (GvRun *) 0 ;
  Bool arg3 ;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (GvRun *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetValid(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_GetValid(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  GvRun *arg2 = (GvRun *) 0 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (GvRun *)jarg2; 
  result = (arg1)->GetValid(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvPort_SetCalculated(void * jarg1, void * jarg2) {
  GvPort *arg1 = (GvPort *) 0 ;
  GvRun *arg2 = (GvRun *) 0 ;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (GvRun *)jarg2; 
  (arg1)->SetCalculated(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvPort_Calculate(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  GvRun *arg3 = (GvRun *) 0 ;
  GvCalc *arg4 = (GvCalc *) 0 ;
  GvPort *result = 0 ;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = (GvRun *)jarg3; 
  arg4 = (GvCalc *)jarg4; 
  result = (GvPort *)(arg1)->Calculate(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_SetRecalculate__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  GvRun *arg2 = (GvRun *) 0 ;
  Bool arg3 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (GvRun *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->SetRecalculate(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_SetRecalculate__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  GvRun *arg2 = (GvRun *) 0 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (GvRun *)jarg2; 
  result = (arg1)->SetRecalculate(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_GetBool(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  Bool *arg2 = (Bool *) 0 ;
  GvRun *arg3 = (GvRun *) 0 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (Bool *)jarg2; 
  arg3 = (GvRun *)jarg3; 
  result = (arg1)->GetBool(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_GetInteger(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  LONG *arg2 = (LONG *) 0 ;
  GvRun *arg3 = (GvRun *) 0 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (LONG *)jarg2; 
  arg3 = (GvRun *)jarg3; 
  result = (arg1)->GetInteger(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_GetReal(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  Real *arg2 = (Real *) 0 ;
  GvRun *arg3 = (GvRun *) 0 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (Real *)jarg2; 
  arg3 = (GvRun *)jarg3; 
  result = (arg1)->GetReal(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_GetVector(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  Vector *arg2 = (Vector *) 0 ;
  GvRun *arg3 = (GvRun *) 0 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  arg3 = (GvRun *)jarg3; 
  result = (arg1)->GetVector(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_GetNormal(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  Vector *arg2 = (Vector *) 0 ;
  GvRun *arg3 = (GvRun *) 0 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  arg3 = (GvRun *)jarg3; 
  result = (arg1)->GetNormal(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_GetMatrix(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  GvRun *arg3 = (GvRun *) 0 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (Matrix *)jarg2; /* Matrix*&_in */
  arg3 = (GvRun *)jarg3; 
  result = (arg1)->GetMatrix(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_GetTime(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  BaseTime *arg2 = (BaseTime *) 0 ;
  GvRun *arg3 = (GvRun *) 0 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (BaseTime *)jarg2; 
  arg3 = (GvRun *)jarg3; 
  result = (arg1)->GetTime(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_GetString(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  String *arg2 = (String *) 0 ;
  GvRun *arg3 = (GvRun *) 0 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (String *)jarg2; 
  arg3 = (GvRun *)jarg3; 
  result = (arg1)->GetString(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_GetObject(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  BaseList2D **arg2 = 0 ;
  GvRun *arg3 = (GvRun *) 0 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (BaseList2D **)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseList2D *& type is null", 0);
    return 0;
  } 
  arg3 = (GvRun *)jarg3; 
  result = (arg1)->GetObject(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_GetData(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  void *arg2 = (void *) 0 ;
  GvValueID arg3 ;
  GvRun *arg4 = (GvRun *) 0 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (GvValueID)jarg3; 
  arg4 = (GvRun *)jarg4; 
  result = (arg1)->GetData(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_GetDataInstance(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  void **arg2 = 0 ;
  GvValueID arg3 ;
  GvRun *arg4 = (GvRun *) 0 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (void **)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "void const *& type is null", 0);
    return 0;
  } 
  arg3 = (GvValueID)jarg3; 
  arg4 = (GvRun *)jarg4; 
  result = (arg1)->GetDataInstance((void const *&)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_SetBool(void * jarg1, unsigned int jarg2, void * jarg3) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  Bool arg2 ;
  GvRun *arg3 = (GvRun *) 0 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (GvRun *)jarg3; 
  result = (arg1)->SetBool(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_SetInteger(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  LONG arg2 ;
  GvRun *arg3 = (GvRun *) 0 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (GvRun *)jarg3; 
  result = (arg1)->SetInteger(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_SetReal(void * jarg1, double jarg2, void * jarg3) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  Real arg2 ;
  GvRun *arg3 = (GvRun *) 0 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (Real)jarg2; 
  arg3 = (GvRun *)jarg3; 
  result = (arg1)->SetReal(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_SetVector(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  Vector *arg2 = 0 ;
  GvRun *arg3 = (GvRun *) 0 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  arg3 = (GvRun *)jarg3; 
  result = (arg1)->SetVector((Vector const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_SetNormal(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  Vector *arg2 = 0 ;
  GvRun *arg3 = (GvRun *) 0 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (Vector *)jarg2; /* Vector*&_in */
  arg3 = (GvRun *)jarg3; 
  result = (arg1)->SetNormal((Vector const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_SetMatrix(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  Matrix *arg2 = 0 ;
  GvRun *arg3 = (GvRun *) 0 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (Matrix *)jarg2; /* constMatrix&_in */
  arg3 = (GvRun *)jarg3; 
  result = (arg1)->SetMatrix((Matrix const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_SetTime(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  BaseTime *arg2 = 0 ;
  GvRun *arg3 = (GvRun *) 0 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (BaseTime *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseTime const & type is null", 0);
    return 0;
  } 
  arg3 = (GvRun *)jarg3; 
  result = (arg1)->SetTime((BaseTime const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_SetString(void * jarg1, char * /* constString&_ctype */ jarg2, void * jarg3) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  String *arg2 = 0 ;
  GvRun *arg3 = (GvRun *) 0 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (GvRun *)jarg3; 
  result = (arg1)->SetString((String const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_SetObject(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  BaseList2D *arg2 = (BaseList2D *) 0 ;
  GvRun *arg3 = (GvRun *) 0 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (BaseList2D *)jarg2; 
  arg3 = (GvRun *)jarg3; 
  result = (arg1)->SetObject((BaseList2D const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_SetData(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  void *arg2 = (void *) 0 ;
  GvValueID arg3 ;
  GvRun *arg4 = (GvRun *) 0 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (GvValueID)jarg3; 
  arg4 = (GvRun *)jarg4; 
  result = (arg1)->SetData((void const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * /* String_ctype */ SWIGSTDCALL CSharp_GvPort_GetName(void * jarg1, void * jarg2) {
  char * /* String_ctype */ jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  String result;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  result = (arg1)->GetName(arg2);
  /* <String_out> */ 
  jresult = SWIG_csharp_string_callback((&result)->GetCStringCopy()); 
  /* </String_out> */
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvPort_SetName(void * jarg1, char * /* constString&_ctype */ jarg2) {
  GvPort *arg1 = (GvPort *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (GvPort *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  String arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->SetName((String const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_CopyPortData(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  GvPort *arg2 = (GvPort *) 0 ;
  GvRun *arg3 = (GvRun *) 0 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (GvPort *)jarg2; 
  arg3 = (GvRun *)jarg3; 
  result = (arg1)->CopyPortData(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_CopyRawData(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  void *arg2 = (void *) 0 ;
  GvRun *arg3 = (GvRun *) 0 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (GvRun *)jarg3; 
  result = (arg1)->CopyRawData(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_CalculateRawData__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, double jarg6) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  GvRun *arg4 = (GvRun *) 0 ;
  GvValueFlags arg5 ;
  Real arg6 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (GvRun *)jarg4; 
  arg5 = (GvValueFlags)jarg5; 
  arg6 = (Real)jarg6; 
  result = (arg1)->CalculateRawData(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_CalculateRawData__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  GvRun *arg4 = (GvRun *) 0 ;
  GvValueFlags arg5 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (GvRun *)jarg4; 
  arg5 = (GvValueFlags)jarg5; 
  result = (arg1)->CalculateRawData(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_CalculateRawRawData__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, int jarg6, double jarg7) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  void *arg4 = (void *) 0 ;
  GvRun *arg5 = (GvRun *) 0 ;
  GvValueFlags arg6 ;
  Real arg7 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (void *)jarg4; 
  arg5 = (GvRun *)jarg5; 
  arg6 = (GvValueFlags)jarg6; 
  arg7 = (Real)jarg7; 
  result = (arg1)->CalculateRawRawData(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_CalculateRawRawData__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, int jarg6) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  void *arg4 = (void *) 0 ;
  GvRun *arg5 = (GvRun *) 0 ;
  GvValueFlags arg6 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (void *)jarg4; 
  arg5 = (GvRun *)jarg5; 
  arg6 = (GvValueFlags)jarg6; 
  result = (arg1)->CalculateRawRawData(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_CalculatePortData__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, double jarg6) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  GvPort *arg2 = (GvPort *) 0 ;
  void *arg3 = (void *) 0 ;
  GvRun *arg4 = (GvRun *) 0 ;
  GvValueFlags arg5 ;
  Real arg6 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (GvPort *)jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (GvRun *)jarg4; 
  arg5 = (GvValueFlags)jarg5; 
  arg6 = (Real)jarg6; 
  result = (arg1)->CalculatePortData(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_CalculatePortData__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  GvPort *arg2 = (GvPort *) 0 ;
  void *arg3 = (void *) 0 ;
  GvRun *arg4 = (GvRun *) 0 ;
  GvValueFlags arg5 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (GvPort *)jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (GvRun *)jarg4; 
  arg5 = (GvValueFlags)jarg5; 
  result = (arg1)->CalculatePortData(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_CalculateRawDataRev__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, double jarg6) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  GvRun *arg4 = (GvRun *) 0 ;
  GvValueFlags arg5 ;
  Real arg6 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (GvRun *)jarg4; 
  arg5 = (GvValueFlags)jarg5; 
  arg6 = (Real)jarg6; 
  result = (arg1)->CalculateRawDataRev(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_CalculateRawDataRev__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  GvRun *arg4 = (GvRun *) 0 ;
  GvValueFlags arg5 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (GvRun *)jarg4; 
  arg5 = (GvValueFlags)jarg5; 
  result = (arg1)->CalculateRawDataRev(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_GetTag__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  BaseList2D **arg2 = 0 ;
  GvRun *arg3 = (GvRun *) 0 ;
  LONG *arg4 = (LONG *) 0 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (BaseList2D **)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseList2D *& type is null", 0);
    return 0;
  } 
  arg3 = (GvRun *)jarg3; 
  arg4 = (LONG *)jarg4; 
  result = (arg1)->GetTag(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_GetTag__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  BaseList2D **arg2 = 0 ;
  GvRun *arg3 = (GvRun *) 0 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (BaseList2D **)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseList2D *& type is null", 0);
    return 0;
  } 
  arg3 = (GvRun *)jarg3; 
  result = (arg1)->GetTag(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_SetTag__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  BaseList2D *arg2 = (BaseList2D *) (BaseList2D *)0 ;
  GvRun *arg3 = (GvRun *) 0 ;
  LONG arg4 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (BaseList2D *)jarg2; 
  arg3 = (GvRun *)jarg3; 
  arg4 = (LONG)jarg4; 
  result = (arg1)->SetTag((BaseList2D const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_SetTag__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  BaseList2D *arg2 = (BaseList2D *) (BaseList2D *)0 ;
  GvRun *arg3 = (GvRun *) 0 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (BaseList2D *)jarg2; 
  arg3 = (GvRun *)jarg3; 
  result = (arg1)->SetTag((BaseList2D const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_GetMaterial__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  BaseList2D **arg2 = 0 ;
  GvRun *arg3 = (GvRun *) 0 ;
  LONG *arg4 = (LONG *) 0 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (BaseList2D **)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseList2D *& type is null", 0);
    return 0;
  } 
  arg3 = (GvRun *)jarg3; 
  arg4 = (LONG *)jarg4; 
  result = (arg1)->GetMaterial(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_GetMaterial__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  BaseList2D **arg2 = 0 ;
  GvRun *arg3 = (GvRun *) 0 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (BaseList2D **)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseList2D *& type is null", 0);
    return 0;
  } 
  arg3 = (GvRun *)jarg3; 
  result = (arg1)->GetMaterial(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_SetMaterial__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  BaseList2D *arg2 = (BaseList2D *) (BaseList2D *)0 ;
  GvRun *arg3 = (GvRun *) 0 ;
  LONG arg4 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (BaseList2D *)jarg2; 
  arg3 = (GvRun *)jarg3; 
  arg4 = (LONG)jarg4; 
  result = (arg1)->SetMaterial((BaseList2D const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_SetMaterial__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  BaseList2D *arg2 = (BaseList2D *) (BaseList2D *)0 ;
  GvRun *arg3 = (GvRun *) 0 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (BaseList2D *)jarg2; 
  arg3 = (GvRun *)jarg3; 
  result = (arg1)->SetMaterial((BaseList2D const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_GetInstance__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  BaseList2D **arg2 = 0 ;
  GvRun *arg3 = (GvRun *) 0 ;
  LONG *arg4 = (LONG *) 0 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (BaseList2D **)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseList2D *& type is null", 0);
    return 0;
  } 
  arg3 = (GvRun *)jarg3; 
  arg4 = (LONG *)jarg4; 
  result = (arg1)->GetInstance(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_GetInstance__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  BaseList2D **arg2 = 0 ;
  GvRun *arg3 = (GvRun *) 0 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (BaseList2D **)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseList2D *& type is null", 0);
    return 0;
  } 
  arg3 = (GvRun *)jarg3; 
  result = (arg1)->GetInstance(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_SetInstance__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  BaseList2D *arg2 = (BaseList2D *) (BaseList2D *)0 ;
  GvRun *arg3 = (GvRun *) 0 ;
  LONG arg4 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (BaseList2D *)jarg2; 
  arg3 = (GvRun *)jarg3; 
  arg4 = (LONG)jarg4; 
  result = (arg1)->SetInstance((BaseList2D const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_SetInstance__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  BaseList2D *arg2 = (BaseList2D *) (BaseList2D *)0 ;
  GvRun *arg3 = (GvRun *) 0 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (BaseList2D *)jarg2; 
  arg3 = (GvRun *)jarg3; 
  result = (arg1)->SetInstance((BaseList2D const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_GetObjectWithIndex__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  BaseList2D **arg2 = 0 ;
  GvRun *arg3 = (GvRun *) 0 ;
  LONG *arg4 = (LONG *) 0 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (BaseList2D **)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseList2D *& type is null", 0);
    return 0;
  } 
  arg3 = (GvRun *)jarg3; 
  arg4 = (LONG *)jarg4; 
  result = (arg1)->GetObjectWithIndex(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_GetObjectWithIndex__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  BaseList2D **arg2 = 0 ;
  GvRun *arg3 = (GvRun *) 0 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (BaseList2D **)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseList2D *& type is null", 0);
    return 0;
  } 
  arg3 = (GvRun *)jarg3; 
  result = (arg1)->GetObjectWithIndex(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_SetObjectWithIndex__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  BaseList2D *arg2 = (BaseList2D *) (BaseList2D *)0 ;
  GvRun *arg3 = (GvRun *) 0 ;
  LONG arg4 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (BaseList2D *)jarg2; 
  arg3 = (GvRun *)jarg3; 
  arg4 = (LONG)jarg4; 
  result = (arg1)->SetObjectWithIndex((BaseList2D const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvPort_SetObjectWithIndex__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  BaseList2D *arg2 = (BaseList2D *) (BaseList2D *)0 ;
  GvRun *arg3 = (GvRun *) 0 ;
  Bool result;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (BaseList2D *)jarg2; 
  arg3 = (GvRun *)jarg3; 
  result = (arg1)->SetObjectWithIndex((BaseList2D const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvPort_GetOutgoing(void * jarg1, int jarg2) {
  void * jresult ;
  GvPort *arg1 = (GvPort *) 0 ;
  LONG arg2 ;
  GvDestination *result = 0 ;
  
  arg1 = (GvPort *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (GvDestination *)(arg1)->GetOutgoing(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvNodeMaster_AllocNode(void * jarg1, int jarg2) {
  void * jresult ;
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  LONG arg2 ;
  GvNode *result = 0 ;
  
  arg1 = (GvNodeMaster *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (GvNode *)(arg1)->AllocNode(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvNodeMaster_FreeNode(void * jarg1, void * jarg2) {
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  GvNode **arg2 = 0 ;
  
  arg1 = (GvNodeMaster *)jarg1; 
  arg2 = (GvNode **)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GvNode *& type is null", 0);
    return ;
  } 
  (arg1)->FreeNode(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvNodeMaster_CreateNode__SWIG_0(void * jarg1, void * jarg2, int jarg3, void * jarg4, int jarg5, int jarg6) {
  void * jresult ;
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  LONG arg3 ;
  GvNode *arg4 = (GvNode *) 0 ;
  LONG arg5 ;
  LONG arg6 ;
  GvNode *result = 0 ;
  
  arg1 = (GvNodeMaster *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (GvNode *)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (LONG)jarg6; 
  result = (GvNode *)(arg1)->CreateNode(arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvNodeMaster_CreateNode__SWIG_1(void * jarg1, void * jarg2, int jarg3, void * jarg4, int jarg5) {
  void * jresult ;
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  LONG arg3 ;
  GvNode *arg4 = (GvNode *) 0 ;
  LONG arg5 ;
  GvNode *result = 0 ;
  
  arg1 = (GvNodeMaster *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (GvNode *)jarg4; 
  arg5 = (LONG)jarg5; 
  result = (GvNode *)(arg1)->CreateNode(arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvNodeMaster_CreateNode__SWIG_2(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  void * jresult ;
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  LONG arg3 ;
  GvNode *arg4 = (GvNode *) 0 ;
  GvNode *result = 0 ;
  
  arg1 = (GvNodeMaster *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (GvNode *)jarg4; 
  result = (GvNode *)(arg1)->CreateNode(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvNodeMaster_CreateNode__SWIG_3(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  LONG arg3 ;
  GvNode *result = 0 ;
  
  arg1 = (GvNodeMaster *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = (LONG)jarg3; 
  result = (GvNode *)(arg1)->CreateNode(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvNodeMaster_GetRoot(void * jarg1) {
  void * jresult ;
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  GvNode *result = 0 ;
  
  arg1 = (GvNodeMaster *)jarg1; 
  result = (GvNode *)(arg1)->GetRoot();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvNodeMaster_GetOwner(void * jarg1) {
  void * jresult ;
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  BaseList2D *result = 0 ;
  
  arg1 = (GvNodeMaster *)jarg1; 
  result = (BaseList2D *)(arg1)->GetOwner();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvNodeMaster_IsConnectionValid(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9) {
  unsigned int jresult ;
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  GvPort *arg3 = (GvPort *) 0 ;
  GvNode *arg4 = (GvNode *) 0 ;
  GvPort *arg5 = (GvPort *) 0 ;
  GvNode **arg6 = 0 ;
  GvPort **arg7 = 0 ;
  GvNode **arg8 = 0 ;
  GvPort **arg9 = 0 ;
  Bool result;
  
  arg1 = (GvNodeMaster *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = (GvPort *)jarg3; 
  arg4 = (GvNode *)jarg4; 
  arg5 = (GvPort *)jarg5; 
  arg6 = (GvNode **)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GvNode *& type is null", 0);
    return 0;
  } 
  arg7 = (GvPort **)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GvPort *& type is null", 0);
    return 0;
  } 
  arg8 = (GvNode **)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GvNode *& type is null", 0);
    return 0;
  } 
  arg9 = (GvPort **)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GvPort *& type is null", 0);
    return 0;
  } 
  result = (arg1)->IsConnectionValid(arg2,arg3,arg4,arg5,*arg6,*arg7,*arg8,*arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvNodeMaster_InsertFirst(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  GvNode *arg3 = (GvNode *) 0 ;
  Bool result;
  
  arg1 = (GvNodeMaster *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = (GvNode *)jarg3; 
  result = (arg1)->InsertFirst(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvNodeMaster_InsertLast(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  GvNode *arg3 = (GvNode *) 0 ;
  Bool result;
  
  arg1 = (GvNodeMaster *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = (GvNode *)jarg3; 
  result = (arg1)->InsertLast(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvNodeMaster_SetHierarchy__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  GvNode *arg3 = (GvNode *) 0 ;
  GvInsertMode arg4 ;
  Bool result;
  
  arg1 = (GvNodeMaster *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = (GvNode *)jarg3; 
  arg4 = (GvInsertMode)jarg4; 
  result = (arg1)->SetHierarchy(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvNodeMaster_SetHierarchy__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  GvNode *arg3 = (GvNode *) 0 ;
  Bool result;
  
  arg1 = (GvNodeMaster *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = (GvNode *)jarg3; 
  result = (arg1)->SetHierarchy(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvNodeMaster_QueryCalculation(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  GvQuery *arg2 = (GvQuery *) 0 ;
  BaseThread *arg3 = (BaseThread *) 0 ;
  GvCalcError result;
  
  arg1 = (GvNodeMaster *)jarg1; 
  arg2 = (GvQuery *)jarg2; 
  arg3 = (BaseThread *)jarg3; 
  result = (GvCalcError)(arg1)->QueryCalculation(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvNodeMaster_InitCalculation(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  GvInit *arg2 = (GvInit *) 0 ;
  BaseThread *arg3 = (BaseThread *) 0 ;
  GvCalcError result;
  
  arg1 = (GvNodeMaster *)jarg1; 
  arg2 = (GvInit *)jarg2; 
  arg3 = (BaseThread *)jarg3; 
  result = (GvCalcError)(arg1)->InitCalculation(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvNodeMaster_Calculate(void * jarg1, int jarg2) {
  int jresult ;
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  LONG arg2 ;
  GvCalcError result;
  
  arg1 = (GvNodeMaster *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (GvCalcError)(arg1)->Calculate(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvNodeMaster_Recalculate(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  int jresult ;
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  GvNodeMaster *arg2 = (GvNodeMaster *) 0 ;
  GvNode *arg3 = (GvNode *) 0 ;
  LONG arg4 ;
  GvCalcError result;
  
  arg1 = (GvNodeMaster *)jarg1; 
  arg2 = (GvNodeMaster *)jarg2; 
  arg3 = (GvNode *)jarg3; 
  arg4 = (LONG)jarg4; 
  result = (GvCalcError)(arg1)->Recalculate(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvNodeMaster_FreeCalculation(void * jarg1) {
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  
  arg1 = (GvNodeMaster *)jarg1; 
  (arg1)->FreeCalculation();
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvNodeMaster_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  BaseThread *arg2 = (BaseThread *) 0 ;
  GvCalcError result;
  
  arg1 = (GvNodeMaster *)jarg1; 
  arg2 = (BaseThread *)jarg2; 
  result = (GvCalcError)(arg1)->Execute(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvNodeMaster_GetBranchInfo(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  int jresult ;
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  BranchInfo *arg2 = (BranchInfo *) 0 ;
  LONG arg3 ;
  GETBRANCHINFO arg4 ;
  LONG result;
  
  arg1 = (GvNodeMaster *)jarg1; 
  arg2 = (BranchInfo *)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (GETBRANCHINFO)jarg4; 
  result = (arg1)->GetBranchInfo(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvNodeMaster_GetRun(void * jarg1) {
  void * jresult ;
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  GvRun *result = 0 ;
  
  arg1 = (GvNodeMaster *)jarg1; 
  result = (GvRun *)(arg1)->GetRun();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvNodeMaster_GetCalc(void * jarg1) {
  void * jresult ;
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  GvCalc *result = 0 ;
  
  arg1 = (GvNodeMaster *)jarg1; 
  result = (GvCalc *)(arg1)->GetCalc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvNodeMaster_AllocQuery(void * jarg1) {
  void * jresult ;
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  GvQuery *result = 0 ;
  
  arg1 = (GvNodeMaster *)jarg1; 
  result = (GvQuery *)(arg1)->AllocQuery();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvNodeMaster_FreeQuery(void * jarg1, void * jarg2) {
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  GvQuery **arg2 = 0 ;
  
  arg1 = (GvNodeMaster *)jarg1; 
  arg2 = (GvQuery **)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GvQuery *& type is null", 0);
    return ;
  } 
  (arg1)->FreeQuery(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvNodeMaster_AllocInit(void * jarg1) {
  void * jresult ;
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  GvInit *result = 0 ;
  
  arg1 = (GvNodeMaster *)jarg1; 
  result = (GvInit *)(arg1)->AllocInit();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvNodeMaster_FreeInit(void * jarg1, void * jarg2) {
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  GvInit **arg2 = 0 ;
  
  arg1 = (GvNodeMaster *)jarg1; 
  arg2 = (GvInit **)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GvInit *& type is null", 0);
    return ;
  } 
  (arg1)->FreeInit(*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvNodeMaster_RegisterUserData__SWIG_0(void * jarg1, void * jarg2) {
  int jresult ;
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  void *arg2 = (void *) 0 ;
  GvUserDataID result;
  
  arg1 = (GvNodeMaster *)jarg1; 
  arg2 = (void *)jarg2; 
  result = (arg1)->RegisterUserData(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvNodeMaster_RegisterUserData__SWIG_1(void * jarg1) {
  int jresult ;
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  GvUserDataID result;
  
  arg1 = (GvNodeMaster *)jarg1; 
  result = (arg1)->RegisterUserData();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvNodeMaster_SetUserData(void * jarg1, int jarg2, void * jarg3) {
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  GvUserDataID arg2 ;
  void *arg3 = (void *) 0 ;
  
  arg1 = (GvNodeMaster *)jarg1; 
  arg2 = (GvUserDataID)jarg2; 
  arg3 = (void *)jarg3; 
  (arg1)->SetUserData(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvNodeMaster_GetUserData(void * jarg1, int jarg2) {
  void * jresult ;
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  GvUserDataID arg2 ;
  void *result = 0 ;
  
  arg1 = (GvNodeMaster *)jarg1; 
  arg2 = (GvUserDataID)jarg2; 
  result = (void *)(arg1)->GetUserData(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvNodeMaster_AllocCalculationTable__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3, int jarg4, unsigned int jarg5) {
  void * jresult ;
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  LONG arg2 ;
  Bool arg3 ;
  LONG arg4 ;
  Bool arg5 ;
  GvCalcTable *result = 0 ;
  
  arg1 = (GvNodeMaster *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (LONG)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (GvCalcTable *)(arg1)->AllocCalculationTable(arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvNodeMaster_AllocCalculationTable__SWIG_1(void * jarg1, int jarg2, unsigned int jarg3, int jarg4) {
  void * jresult ;
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  LONG arg2 ;
  Bool arg3 ;
  LONG arg4 ;
  GvCalcTable *result = 0 ;
  
  arg1 = (GvNodeMaster *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (LONG)jarg4; 
  result = (GvCalcTable *)(arg1)->AllocCalculationTable(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvNodeMaster_AllocCalculationTable__SWIG_2(void * jarg1, int jarg2, unsigned int jarg3) {
  void * jresult ;
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  LONG arg2 ;
  Bool arg3 ;
  GvCalcTable *result = 0 ;
  
  arg1 = (GvNodeMaster *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (GvCalcTable *)(arg1)->AllocCalculationTable(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvNodeMaster_AllocCalculationTable__SWIG_3(void * jarg1, int jarg2) {
  void * jresult ;
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  LONG arg2 ;
  GvCalcTable *result = 0 ;
  
  arg1 = (GvNodeMaster *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (GvCalcTable *)(arg1)->AllocCalculationTable(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvNodeMaster_FreeCalculationTable(void * jarg1, void * jarg2) {
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  GvCalcTable **arg2 = 0 ;
  
  arg1 = (GvNodeMaster *)jarg1; 
  arg2 = (GvCalcTable **)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GvCalcTable *& type is null", 0);
    return ;
  } 
  (arg1)->FreeCalculationTable(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvNodeMaster_AddToDrawList__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  void **arg3 = (void **) 0 ;
  LONG arg4 ;
  Bool result;
  
  arg1 = (GvNodeMaster *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = (void **)jarg3; 
  arg4 = (LONG)jarg4; 
  result = (arg1)->AddToDrawList(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvNodeMaster_AddToDrawList__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  void **arg3 = (void **) 0 ;
  Bool result;
  
  arg1 = (GvNodeMaster *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = (void **)jarg3; 
  result = (arg1)->AddToDrawList(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvNodeMaster_AddToDrawList__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  Bool result;
  
  arg1 = (GvNodeMaster *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  result = (arg1)->AddToDrawList(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvNodeMaster_GetCopyBuffer__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  Bool arg3 ;
  GvCopyBuffer *result = 0 ;
  
  arg1 = (GvNodeMaster *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (GvCopyBuffer *)(arg1)->GetCopyBuffer(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvNodeMaster_GetCopyBuffer__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  GvCopyBuffer *result = 0 ;
  
  arg1 = (GvNodeMaster *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  result = (GvCopyBuffer *)(arg1)->GetCopyBuffer(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvNodeMaster_GetCopyBuffer__SWIG_2(void * jarg1) {
  void * jresult ;
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  GvCopyBuffer *result = 0 ;
  
  arg1 = (GvNodeMaster *)jarg1; 
  result = (GvCopyBuffer *)(arg1)->GetCopyBuffer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvNodeMaster_FreeCopyBuffer(void * jarg1, void * jarg2) {
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  GvCopyBuffer **arg2 = 0 ;
  
  arg1 = (GvNodeMaster *)jarg1; 
  arg2 = (GvCopyBuffer **)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GvCopyBuffer *& type is null", 0);
    return ;
  } 
  (arg1)->FreeCopyBuffer(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvNodeMaster_PasteFromBuffer__SWIG_0(void * jarg1, void * jarg2, int jarg3, void * jarg4, int jarg5, int jarg6, unsigned int jarg7, void * jarg8) {
  unsigned int jresult ;
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  GvCopyBuffer *arg2 = 0 ;
  GvInsertMode arg3 ;
  GvNode *arg4 = (GvNode *) 0 ;
  LONG arg5 ;
  LONG arg6 ;
  Bool arg7 ;
  void *arg8 = (void *) 0 ;
  Bool result;
  
  arg1 = (GvNodeMaster *)jarg1; 
  arg2 = (GvCopyBuffer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GvCopyBuffer & type is null", 0);
    return 0;
  } 
  arg3 = (GvInsertMode)jarg3; 
  arg4 = (GvNode *)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (LONG)jarg6; 
  arg7 = jarg7 ? true : false; 
  arg8 = (void *)jarg8; 
  result = (arg1)->PasteFromBuffer(*arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvNodeMaster_PasteFromBuffer__SWIG_1(void * jarg1, void * jarg2, int jarg3, void * jarg4, int jarg5, int jarg6, unsigned int jarg7) {
  unsigned int jresult ;
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  GvCopyBuffer *arg2 = 0 ;
  GvInsertMode arg3 ;
  GvNode *arg4 = (GvNode *) 0 ;
  LONG arg5 ;
  LONG arg6 ;
  Bool arg7 ;
  Bool result;
  
  arg1 = (GvNodeMaster *)jarg1; 
  arg2 = (GvCopyBuffer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GvCopyBuffer & type is null", 0);
    return 0;
  } 
  arg3 = (GvInsertMode)jarg3; 
  arg4 = (GvNode *)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (LONG)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = (arg1)->PasteFromBuffer(*arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvNodeMaster_PasteFromBuffer__SWIG_2(void * jarg1, void * jarg2, int jarg3, void * jarg4, int jarg5, int jarg6) {
  unsigned int jresult ;
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  GvCopyBuffer *arg2 = 0 ;
  GvInsertMode arg3 ;
  GvNode *arg4 = (GvNode *) 0 ;
  LONG arg5 ;
  LONG arg6 ;
  Bool result;
  
  arg1 = (GvNodeMaster *)jarg1; 
  arg2 = (GvCopyBuffer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GvCopyBuffer & type is null", 0);
    return 0;
  } 
  arg3 = (GvInsertMode)jarg3; 
  arg4 = (GvNode *)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (LONG)jarg6; 
  result = (arg1)->PasteFromBuffer(*arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvNodeMaster_PasteFromBuffer__SWIG_3(void * jarg1, void * jarg2, int jarg3, void * jarg4, int jarg5) {
  unsigned int jresult ;
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  GvCopyBuffer *arg2 = 0 ;
  GvInsertMode arg3 ;
  GvNode *arg4 = (GvNode *) 0 ;
  LONG arg5 ;
  Bool result;
  
  arg1 = (GvNodeMaster *)jarg1; 
  arg2 = (GvCopyBuffer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GvCopyBuffer & type is null", 0);
    return 0;
  } 
  arg3 = (GvInsertMode)jarg3; 
  arg4 = (GvNode *)jarg4; 
  arg5 = (LONG)jarg5; 
  result = (arg1)->PasteFromBuffer(*arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvNodeMaster_PasteFromBuffer__SWIG_4(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  GvCopyBuffer *arg2 = 0 ;
  GvInsertMode arg3 ;
  GvNode *arg4 = (GvNode *) 0 ;
  Bool result;
  
  arg1 = (GvNodeMaster *)jarg1; 
  arg2 = (GvCopyBuffer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GvCopyBuffer & type is null", 0);
    return 0;
  } 
  arg3 = (GvInsertMode)jarg3; 
  arg4 = (GvNode *)jarg4; 
  result = (arg1)->PasteFromBuffer(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvNodeMaster_PasteFromBuffer__SWIG_5(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  GvCopyBuffer *arg2 = 0 ;
  GvInsertMode arg3 ;
  Bool result;
  
  arg1 = (GvNodeMaster *)jarg1; 
  arg2 = (GvCopyBuffer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GvCopyBuffer & type is null", 0);
    return 0;
  } 
  arg3 = (GvInsertMode)jarg3; 
  result = (arg1)->PasteFromBuffer(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvNodeMaster_PasteFromBuffer__SWIG_6(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  GvCopyBuffer *arg2 = 0 ;
  Bool result;
  
  arg1 = (GvNodeMaster *)jarg1; 
  arg2 = (GvCopyBuffer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GvCopyBuffer & type is null", 0);
    return 0;
  } 
  result = (arg1)->PasteFromBuffer(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvNodeMaster_IsEnabled(void * jarg1) {
  unsigned int jresult ;
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  Bool result;
  
  arg1 = (GvNodeMaster *)jarg1; 
  result = (arg1)->IsEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvNodeMaster_SetPrefs(void * jarg1, void * jarg2) {
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  BaseContainer *arg2 = 0 ;
  
  arg1 = (GvNodeMaster *)jarg1; 
  arg2 = (BaseContainer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer const & type is null", 0);
    return ;
  } 
  (arg1)->SetPrefs((BaseContainer const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvNodeMaster_GetPrefs(void * jarg1, void * jarg2) {
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  BaseContainer *arg2 = 0 ;
  
  arg1 = (GvNodeMaster *)jarg1; 
  arg2 = (BaseContainer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return ;
  } 
  (arg1)->GetPrefs(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvNodeMaster_AddUndo(void * jarg1) {
  unsigned int jresult ;
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  Bool result;
  
  arg1 = (GvNodeMaster *)jarg1; 
  result = (arg1)->AddUndo();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvNodeMaster_Execute2(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  GvNodeMaster *arg1 = (GvNodeMaster *) 0 ;
  BaseThread *arg2 = (BaseThread *) 0 ;
  GvCalcFlags arg3 ;
  GvCalcError result;
  
  arg1 = (GvNodeMaster *)jarg1; 
  arg2 = (BaseThread *)jarg2; 
  arg3 = (GvCalcFlags)jarg3; 
  result = (GvCalcError)(arg1)->Execute2(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvNodeGUI_Attach(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  GvNodeGUI *arg1 = (GvNodeGUI *) 0 ;
  GeDialog *arg2 = (GeDialog *) 0 ;
  GvNodeMaster *arg3 = (GvNodeMaster *) 0 ;
  Bool result;
  
  arg1 = (GvNodeGUI *)jarg1; 
  arg2 = (GeDialog *)jarg2; 
  arg3 = (GvNodeMaster *)jarg3; 
  result = (arg1)->Attach(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvNodeGUI_Detach(void * jarg1) {
  GvNodeGUI *arg1 = (GvNodeGUI *) 0 ;
  
  arg1 = (GvNodeGUI *)jarg1; 
  (arg1)->Detach();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvNodeGUI_InitShapes(void * jarg1) {
  unsigned int jresult ;
  GvNodeGUI *arg1 = (GvNodeGUI *) 0 ;
  Bool result;
  
  arg1 = (GvNodeGUI *)jarg1; 
  result = (arg1)->InitShapes();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvNodeGUI_Draw(void * jarg1) {
  GvNodeGUI *arg1 = (GvNodeGUI *) 0 ;
  
  arg1 = (GvNodeGUI *)jarg1; 
  (arg1)->Draw();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvNodeGUI_MouseDown(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6) {
  GvNodeGUI *arg1 = (GvNodeGUI *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  LONG arg4 ;
  LONG arg5 ;
  BaseContainer *arg6 = 0 ;
  
  arg1 = (GvNodeGUI *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (BaseContainer *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer const & type is null", 0);
    return ;
  } 
  (arg1)->MouseDown(arg2,arg3,arg4,arg5,(BaseContainer const &)*arg6);
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvNodeGUI_Message(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  GvNodeGUI *arg1 = (GvNodeGUI *) 0 ;
  BaseContainer *arg2 = 0 ;
  BaseContainer *arg3 = 0 ;
  LONG result;
  
  arg1 = (GvNodeGUI *)jarg1; 
  arg2 = (BaseContainer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer const & type is null", 0);
    return 0;
  } 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  result = (arg1)->Message((BaseContainer const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvNodeGUI_Command(void * jarg1, int jarg2) {
  int jresult ;
  GvNodeGUI *arg1 = (GvNodeGUI *) 0 ;
  LONG arg2 ;
  LONG result;
  
  arg1 = (GvNodeGUI *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (arg1)->Command(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvNodeGUI_Redraw(void * jarg1) {
  GvNodeGUI *arg1 = (GvNodeGUI *) 0 ;
  
  arg1 = (GvNodeGUI *)jarg1; 
  (arg1)->Redraw();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvNodeGUI_GetUserArea(void * jarg1) {
  void * jresult ;
  GvNodeGUI *arg1 = (GvNodeGUI *) 0 ;
  GeUserArea *result = 0 ;
  
  arg1 = (GvNodeGUI *)jarg1; 
  result = (GeUserArea *)(arg1)->GetUserArea();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvNodeGUI_GetMaster(void * jarg1) {
  void * jresult ;
  GvNodeGUI *arg1 = (GvNodeGUI *) 0 ;
  GvNodeMaster *result = 0 ;
  
  arg1 = (GvNodeGUI *)jarg1; 
  result = (GvNodeMaster *)(arg1)->GetMaster();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvNodeGUI_GetDialog(void * jarg1) {
  void * jresult ;
  GvNodeGUI *arg1 = (GvNodeGUI *) 0 ;
  GeDialog *result = 0 ;
  
  arg1 = (GvNodeGUI *)jarg1; 
  result = (GeDialog *)(arg1)->GetDialog();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvNodeGUI_SelectAllNodes__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  GvNodeGUI *arg1 = (GvNodeGUI *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  Bool arg3 ;
  Bool arg4 ;
  
  arg1 = (GvNodeGUI *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  (arg1)->SelectAllNodes(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvNodeGUI_SelectAllNodes__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  GvNodeGUI *arg1 = (GvNodeGUI *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  Bool arg3 ;
  
  arg1 = (GvNodeGUI *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SelectAllNodes(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvNodeGUI_RemoveAllSelectedNodes(void * jarg1, void * jarg2) {
  GvNodeGUI *arg1 = (GvNodeGUI *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  
  arg1 = (GvNodeGUI *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  (arg1)->RemoveAllSelectedNodes(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvNodeGUI_SelectNode__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  GvNodeGUI *arg1 = (GvNodeGUI *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  Bool arg3 ;
  Bool arg4 ;
  Bool arg5 ;
  
  arg1 = (GvNodeGUI *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  (arg1)->SelectNode(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvNodeGUI_SelectNode__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  GvNodeGUI *arg1 = (GvNodeGUI *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  Bool arg3 ;
  Bool arg4 ;
  
  arg1 = (GvNodeGUI *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  (arg1)->SelectNode(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvNodeGUI_SelectNode__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3) {
  GvNodeGUI *arg1 = (GvNodeGUI *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  Bool arg3 ;
  
  arg1 = (GvNodeGUI *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SelectNode(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvNodeGUI_DisableSelected(void * jarg1, void * jarg2, unsigned int jarg3) {
  GvNodeGUI *arg1 = (GvNodeGUI *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  Bool arg3 ;
  
  arg1 = (GvNodeGUI *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->DisableSelected(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvNodeGUI_SetFocus(void * jarg1, void * jarg2) {
  GvNodeGUI *arg1 = (GvNodeGUI *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  
  arg1 = (GvNodeGUI *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  (arg1)->SetFocus(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvNodeGUI_GetNodeGlobal(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  GvNodeGUI *arg1 = (GvNodeGUI *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  GvNode *result = 0 ;
  
  arg1 = (GvNodeGUI *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  result = (GvNode *)(arg1)->GetNodeGlobal(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvNodeGUI_GetNodeLocal(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  void * jresult ;
  GvNodeGUI *arg1 = (GvNodeGUI *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  LONG arg3 ;
  LONG arg4 ;
  GvNode *result = 0 ;
  
  arg1 = (GvNodeGUI *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  result = (GvNode *)(arg1)->GetNodeLocal(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvNodeGUI_IsInNodeBody(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  unsigned int jresult ;
  GvNodeGUI *arg1 = (GvNodeGUI *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  LONG arg3 ;
  LONG arg4 ;
  Bool result;
  
  arg1 = (GvNodeGUI *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  result = (arg1)->IsInNodeBody(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvNodeGUI_IsInNodeHead(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  unsigned int jresult ;
  GvNodeGUI *arg1 = (GvNodeGUI *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  LONG arg3 ;
  LONG arg4 ;
  Bool result;
  
  arg1 = (GvNodeGUI *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  result = (arg1)->IsInNodeHead(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvNodeGUI_NodeContextMenu(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GvNodeGUI *arg1 = (GvNodeGUI *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  Bool result;
  
  arg1 = (GvNodeGUI *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  result = (arg1)->NodeContextMenu(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvNodeGUI_SetPrefs(void * jarg1, void * jarg2) {
  GvNodeGUI *arg1 = (GvNodeGUI *) 0 ;
  BaseContainer *arg2 = 0 ;
  
  arg1 = (GvNodeGUI *)jarg1; 
  arg2 = (BaseContainer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer const & type is null", 0);
    return ;
  } 
  (arg1)->SetPrefs((BaseContainer const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvNodeGUI_GetPrefs(void * jarg1, void * jarg2) {
  GvNodeGUI *arg1 = (GvNodeGUI *) 0 ;
  BaseContainer *arg2 = 0 ;
  
  arg1 = (GvNodeGUI *)jarg1; 
  arg2 = (BaseContainer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return ;
  } 
  (arg1)->GetPrefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvNodeGUI_SetNodePosGlobal__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4, unsigned int jarg5) {
  GvNodeGUI *arg1 = (GvNodeGUI *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  LONG arg3 ;
  LONG arg4 ;
  Bool arg5 ;
  
  arg1 = (GvNodeGUI *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->SetNodePosGlobal(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvNodeGUI_SetNodePosGlobal__SWIG_1(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  GvNodeGUI *arg1 = (GvNodeGUI *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  LONG arg3 ;
  LONG arg4 ;
  
  arg1 = (GvNodeGUI *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  (arg1)->SetNodePosGlobal(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvNodeGUI_SetNodePos(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  GvNodeGUI *arg1 = (GvNodeGUI *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  LONG arg3 ;
  LONG arg4 ;
  
  arg1 = (GvNodeGUI *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  (arg1)->SetNodePos(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvNodeGUI_SetNodeSize(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  GvNodeGUI *arg1 = (GvNodeGUI *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  LONG arg3 ;
  LONG arg4 ;
  
  arg1 = (GvNodeGUI *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  (arg1)->SetNodeSize(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvNodeGUI_OptimizeNode(void * jarg1, void * jarg2) {
  GvNodeGUI *arg1 = (GvNodeGUI *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  
  arg1 = (GvNodeGUI *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  (arg1)->OptimizeNode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvNodeGUI_ShowAllNodes(void * jarg1, void * jarg2) {
  GvNodeGUI *arg1 = (GvNodeGUI *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  
  arg1 = (GvNodeGUI *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  (arg1)->ShowAllNodes(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvNodeGUI_CenterNodes(void * jarg1, void * jarg2) {
  GvNodeGUI *arg1 = (GvNodeGUI *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  
  arg1 = (GvNodeGUI *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  (arg1)->CenterNodes(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvNodeGUI_AlignNodesToUpperLeft(void * jarg1, void * jarg2) {
  GvNodeGUI *arg1 = (GvNodeGUI *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  
  arg1 = (GvNodeGUI *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  (arg1)->AlignNodesToUpperLeft(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvNodeGUI_GetZoom(void * jarg1, void * jarg2, void * jarg3) {
  GvNodeGUI *arg1 = (GvNodeGUI *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  Real *arg3 = 0 ;
  
  arg1 = (GvNodeGUI *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = (Real *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Real & type is null", 0);
    return ;
  } 
  (arg1)->GetZoom(arg2,*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvWorld_AllocNodeMaster__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  GvWorld *arg1 = (GvWorld *) 0 ;
  BaseList2D *arg2 = (BaseList2D *) 0 ;
  Bool arg3 ;
  Bool arg4 ;
  GvNodeMaster *result = 0 ;
  
  arg1 = (GvWorld *)jarg1; 
  arg2 = (BaseList2D *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (GvNodeMaster *)(arg1)->AllocNodeMaster(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvWorld_AllocNodeMaster__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  GvWorld *arg1 = (GvWorld *) 0 ;
  BaseList2D *arg2 = (BaseList2D *) 0 ;
  Bool arg3 ;
  GvNodeMaster *result = 0 ;
  
  arg1 = (GvWorld *)jarg1; 
  arg2 = (BaseList2D *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (GvNodeMaster *)(arg1)->AllocNodeMaster(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvWorld_AllocNodeMaster__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  GvWorld *arg1 = (GvWorld *) 0 ;
  BaseList2D *arg2 = (BaseList2D *) 0 ;
  GvNodeMaster *result = 0 ;
  
  arg1 = (GvWorld *)jarg1; 
  arg2 = (BaseList2D *)jarg2; 
  result = (GvNodeMaster *)(arg1)->AllocNodeMaster(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvWorld_FreeNodeMaster(void * jarg1, void * jarg2) {
  GvWorld *arg1 = (GvWorld *) 0 ;
  GvNodeMaster **arg2 = 0 ;
  
  arg1 = (GvWorld *)jarg1; 
  arg2 = (GvNodeMaster **)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GvNodeMaster *& type is null", 0);
    return ;
  } 
  (arg1)->FreeNodeMaster(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvWorld_AllocNodeGUI(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  void * jresult ;
  GvWorld *arg1 = (GvWorld *) 0 ;
  GvShape *arg2 = (GvShape *) 0 ;
  GvShape *arg3 = (GvShape *) 0 ;
  LONG arg4 ;
  GvNodeGUI *result = 0 ;
  
  arg1 = (GvWorld *)jarg1; 
  arg2 = (GvShape *)jarg2; 
  arg3 = (GvShape *)jarg3; 
  arg4 = (LONG)jarg4; 
  result = (GvNodeGUI *)(arg1)->AllocNodeGUI(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvWorld_FreeNodeGUI(void * jarg1, void * jarg2) {
  GvWorld *arg1 = (GvWorld *) 0 ;
  GvNodeGUI **arg2 = 0 ;
  
  arg1 = (GvWorld *)jarg1; 
  arg2 = (GvNodeGUI **)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GvNodeGUI *& type is null", 0);
    return ;
  } 
  (arg1)->FreeNodeGUI(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvWorld_AllocShape(void * jarg1) {
  void * jresult ;
  GvWorld *arg1 = (GvWorld *) 0 ;
  GvShape *result = 0 ;
  
  arg1 = (GvWorld *)jarg1; 
  result = (GvShape *)(arg1)->AllocShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvWorld_AllocGroupShape(void * jarg1) {
  void * jresult ;
  GvWorld *arg1 = (GvWorld *) 0 ;
  GvShape *result = 0 ;
  
  arg1 = (GvWorld *)jarg1; 
  result = (GvShape *)(arg1)->AllocGroupShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvWorld_FreeShape(void * jarg1, void * jarg2) {
  GvWorld *arg1 = (GvWorld *) 0 ;
  GvShape **arg2 = 0 ;
  
  arg1 = (GvWorld *)jarg1; 
  arg2 = (GvShape **)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GvShape *& type is null", 0);
    return ;
  } 
  (arg1)->FreeShape(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvWorld_RegisterHook(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  GvWorld *arg1 = (GvWorld *) 0 ;
  GvHook *arg2 = 0 ;
  void *arg3 = (void *) 0 ;
  Bool result;
  
  arg1 = (GvWorld *)jarg1; 
  arg2 = (GvHook *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GvHook const & type is null", 0);
    return 0;
  } 
  arg3 = (void *)jarg3; 
  result = (arg1)->RegisterHook((GvHook const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvWorld_AttachHook(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  GvWorld *arg1 = (GvWorld *) 0 ;
  LONG arg2 ;
  GvHookCallback arg3 = (GvHookCallback) 0 ;
  Bool result;
  
  arg1 = (GvWorld *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (GvHookCallback)jarg3; 
  result = (arg1)->AttachHook(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvWorld_DetachHook(void * jarg1, int jarg2) {
  GvWorld *arg1 = (GvWorld *) 0 ;
  LONG arg2 ;
  
  arg1 = (GvWorld *)jarg1; 
  arg2 = (LONG)jarg2; 
  (arg1)->DetachHook(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvWorld_GetHookInstance(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  GvWorld *arg1 = (GvWorld *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  LONG arg3 ;
  BaseList2D *result = 0 ;
  
  arg1 = (GvWorld *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (LONG)jarg3; 
  result = (BaseList2D *)(arg1)->GetHookInstance(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvWorld_SendHookMessage(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  unsigned int jresult ;
  GvWorld *arg1 = (GvWorld *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  GvNodeMaster *arg3 = (GvNodeMaster *) 0 ;
  GvMessHook *arg4 = 0 ;
  LONG arg5 ;
  Bool result;
  
  arg1 = (GvWorld *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (GvNodeMaster *)jarg3; 
  arg4 = (GvMessHook *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GvMessHook & type is null", 0);
    return 0;
  } 
  arg5 = (LONG)jarg5; 
  result = (arg1)->SendHookMessage(arg2,arg3,*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvWorld_SendOperatorMessage(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  GvWorld *arg1 = (GvWorld *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  LONG arg3 ;
  void *arg4 = (void *) 0 ;
  Bool result;
  
  arg1 = (GvWorld *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (void *)jarg4; 
  result = (arg1)->SendOperatorMessage(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvWorld_OpenDialog(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  GvWorld *arg1 = (GvWorld *) 0 ;
  LONG arg2 ;
  GvNodeMaster *arg3 = (GvNodeMaster *) 0 ;
  Bool result;
  
  arg1 = (GvWorld *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (GvNodeMaster *)jarg3; 
  result = (arg1)->OpenDialog(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvWorld_CloseDialog(void * jarg1, int jarg2) {
  GvWorld *arg1 = (GvWorld *) 0 ;
  LONG arg2 ;
  
  arg1 = (GvWorld *)jarg1; 
  arg2 = (LONG)jarg2; 
  (arg1)->CloseDialog(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvWorld_RedrawAll(void * jarg1) {
  GvWorld *arg1 = (GvWorld *) 0 ;
  
  arg1 = (GvWorld *)jarg1; 
  (arg1)->RedrawAll();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvWorld_RedrawMaster(void * jarg1, void * jarg2) {
  GvWorld *arg1 = (GvWorld *) 0 ;
  GvNodeMaster *arg2 = (GvNodeMaster *) 0 ;
  
  arg1 = (GvWorld *)jarg1; 
  arg2 = (GvNodeMaster *)jarg2; 
  (arg1)->RedrawMaster(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvWorld_AttachNode(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5) {
  unsigned int jresult ;
  GvWorld *arg1 = (GvWorld *) 0 ;
  GvNodeMaster *arg2 = (GvNodeMaster *) 0 ;
  GvNode *arg3 = (GvNode *) 0 ;
  LONG arg4 ;
  LONG arg5 ;
  Bool result;
  
  arg1 = (GvWorld *)jarg1; 
  arg2 = (GvNodeMaster *)jarg2; 
  arg3 = (GvNode *)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (LONG)jarg5; 
  result = (arg1)->AttachNode(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * /* String_ctype */ SWIGSTDCALL CSharp_GvWorld_GetString(void * jarg1, char * /* constString&_ctype */ jarg2, char * /* constString&_ctype */ jarg3) {
  char * /* String_ctype */ jresult ;
  GvWorld *arg1 = (GvWorld *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  String result;
  
  arg1 = (GvWorld *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (arg1)->GetString((String const &)*arg2,(String const &)*arg3);
  /* <String_out> */ 
  jresult = SWIG_csharp_string_callback((&result)->GetCStringCopy()); 
  /* </String_out> */
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_GvWorld_GetReal(void * jarg1, char * /* constString&_ctype */ jarg2, double jarg3) {
  double jresult ;
  GvWorld *arg1 = (GvWorld *) 0 ;
  String *arg2 = 0 ;
  Real arg3 ;
  Real result;
  
  arg1 = (GvWorld *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (Real)jarg3; 
  result = (arg1)->GetReal((String const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvWorld_GetInteger(void * jarg1, char * /* constString&_ctype */ jarg2, int jarg3) {
  int jresult ;
  GvWorld *arg1 = (GvWorld *) 0 ;
  String *arg2 = 0 ;
  LONG arg3 ;
  LONG result;
  
  arg1 = (GvWorld *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (LONG)jarg3; 
  result = (arg1)->GetInteger((String const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvWorld_GetDataTypesMenu__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5, unsigned int jarg6, int jarg7) {
  int jresult ;
  GvWorld *arg1 = (GvWorld *) 0 ;
  BaseContainer *arg2 = 0 ;
  BaseContainer *arg3 = 0 ;
  LONG arg4 ;
  LONG arg5 ;
  Bool arg6 ;
  GvValueFlags arg7 ;
  LONG result;
  
  arg1 = (GvWorld *)jarg1; 
  arg2 = (BaseContainer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  arg4 = (LONG)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = (GvValueFlags)jarg7; 
  result = (arg1)->GetDataTypesMenu(*arg2,*arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvWorld_GetDataTypesMenu__SWIG_1(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5, unsigned int jarg6) {
  int jresult ;
  GvWorld *arg1 = (GvWorld *) 0 ;
  BaseContainer *arg2 = 0 ;
  BaseContainer *arg3 = 0 ;
  LONG arg4 ;
  LONG arg5 ;
  Bool arg6 ;
  LONG result;
  
  arg1 = (GvWorld *)jarg1; 
  arg2 = (BaseContainer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  arg4 = (LONG)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (arg1)->GetDataTypesMenu(*arg2,*arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvWorld_GetDataTypesMenu__SWIG_2(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5) {
  int jresult ;
  GvWorld *arg1 = (GvWorld *) 0 ;
  BaseContainer *arg2 = 0 ;
  BaseContainer *arg3 = 0 ;
  LONG arg4 ;
  LONG arg5 ;
  LONG result;
  
  arg1 = (GvWorld *)jarg1; 
  arg2 = (BaseContainer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  arg4 = (LONG)jarg4; 
  arg5 = (LONG)jarg5; 
  result = (arg1)->GetDataTypesMenu(*arg2,*arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvWorld_GetDataTypes__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  int jresult ;
  GvWorld *arg1 = (GvWorld *) 0 ;
  BaseContainer *arg2 = 0 ;
  GvDataOptions arg3 ;
  GvValueFlags arg4 ;
  LONG result;
  
  arg1 = (GvWorld *)jarg1; 
  arg2 = (BaseContainer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  arg3 = (GvDataOptions)jarg3; 
  arg4 = (GvValueFlags)jarg4; 
  result = (arg1)->GetDataTypes(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvWorld_GetDataTypes__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  GvWorld *arg1 = (GvWorld *) 0 ;
  BaseContainer *arg2 = 0 ;
  GvDataOptions arg3 ;
  LONG result;
  
  arg1 = (GvWorld *)jarg1; 
  arg2 = (BaseContainer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  arg3 = (GvDataOptions)jarg3; 
  result = (arg1)->GetDataTypes(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvWorld_GetDataTypes__SWIG_2(void * jarg1, void * jarg2) {
  int jresult ;
  GvWorld *arg1 = (GvWorld *) 0 ;
  BaseContainer *arg2 = 0 ;
  LONG result;
  
  arg1 = (GvWorld *)jarg1; 
  arg2 = (BaseContainer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  result = (arg1)->GetDataTypes(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvWorld_GetDataTypesTable(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  GvWorld *arg1 = (GvWorld *) 0 ;
  GvDataInfo **arg2 = 0 ;
  LONG *arg3 = 0 ;
  Bool result;
  
  arg1 = (GvWorld *)jarg1; 
  arg2 = (GvDataInfo **)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GvDataInfo *& type is null", 0);
    return 0;
  } 
  arg3 = (LONG *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  result = (arg1)->GetDataTypesTable(*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvWorld_GetDataTypeIndex(void * jarg1, int jarg2) {
  int jresult ;
  GvWorld *arg1 = (GvWorld *) 0 ;
  GvDataID arg2 ;
  LONG result;
  
  arg1 = (GvWorld *)jarg1; 
  arg2 = (GvDataID)jarg2; 
  result = (arg1)->GetDataTypeIndex(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvWorld_GetDataTypeInfo(void * jarg1, int jarg2) {
  void * jresult ;
  GvWorld *arg1 = (GvWorld *) 0 ;
  GvDataID arg2 ;
  GvDataInfo *result = 0 ;
  
  arg1 = (GvWorld *)jarg1; 
  arg2 = (GvDataID)jarg2; 
  result = (GvDataInfo *)(arg1)->GetDataTypeInfo(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvWorld_GetMasterGUI__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  GvWorld *arg1 = (GvWorld *) 0 ;
  GvNodeMaster *arg2 = (GvNodeMaster *) 0 ;
  ULONG arg3 ;
  ULONG *argp3 ;
  GvNodeGUI *result = 0 ;
  
  arg1 = (GvWorld *)jarg1; 
  arg2 = (GvNodeMaster *)jarg2; 
  argp3 = (ULONG *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ULONG", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (GvNodeGUI *)(arg1)->GetMasterGUI(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvWorld_GetMasterGUI__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  GvWorld *arg1 = (GvWorld *) 0 ;
  GvNodeMaster *arg2 = (GvNodeMaster *) 0 ;
  GvNodeGUI *result = 0 ;
  
  arg1 = (GvWorld *)jarg1; 
  arg2 = (GvNodeMaster *)jarg2; 
  result = (GvNodeGUI *)(arg1)->GetMasterGUI(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvWorld_GetUniqueID(void * jarg1) {
  void * jresult ;
  GvWorld *arg1 = (GvWorld *) 0 ;
  ULONG result;
  
  arg1 = (GvWorld *)jarg1; 
  result = (arg1)->GetUniqueID();
  jresult = new ULONG((const ULONG &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvWorld_GetDefaultOperatorIcon(void * jarg1, int jarg2) {
  void * jresult ;
  GvWorld *arg1 = (GvWorld *) 0 ;
  GvOperatorType arg2 ;
  BaseBitmap *result = 0 ;
  
  arg1 = (GvWorld *)jarg1; 
  arg2 = (GvOperatorType)jarg2; 
  result = (BaseBitmap *)(arg1)->GetDefaultOperatorIcon(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvWorld_SetPrefs(void * jarg1, void * jarg2) {
  GvWorld *arg1 = (GvWorld *) 0 ;
  BaseContainer *arg2 = 0 ;
  
  arg1 = (GvWorld *)jarg1; 
  arg2 = (BaseContainer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer const & type is null", 0);
    return ;
  } 
  (arg1)->SetPrefs((BaseContainer const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvWorld_GetPrefs(void * jarg1, void * jarg2) {
  GvWorld *arg1 = (GvWorld *) 0 ;
  BaseContainer *arg2 = 0 ;
  
  arg1 = (GvWorld *)jarg1; 
  arg2 = (BaseContainer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return ;
  } 
  (arg1)->GetPrefs(*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvWorld_GetDataTypeNames(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  GvWorld *arg1 = (GvWorld *) 0 ;
  BaseContainer *arg2 = 0 ;
  GvDataID *arg3 = (GvDataID *) 0 ;
  LONG result;
  
  arg1 = (GvWorld *)jarg1; 
  arg2 = (BaseContainer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  arg3 = (GvDataID *)jarg3; 
  result = (arg1)->GetDataTypeNames(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvWorld_GetMaster(void * jarg1, int jarg2) {
  void * jresult ;
  GvWorld *arg1 = (GvWorld *) 0 ;
  LONG arg2 ;
  GvNodeMaster *result = 0 ;
  
  arg1 = (GvWorld *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (GvNodeMaster *)(arg1)->GetMaster(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvGetWorld() {
  void * jresult ;
  GvWorld *result = 0 ;
  
  result = (GvWorld *)GvGetWorld();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * /* String_ctype */ SWIGSTDCALL CSharp_GvGetEmptyString() {
  char * /* String_ctype */ jresult ;
  String result;
  
  result = GvGetEmptyString();
  /* <String_out> */ 
  jresult = SWIG_csharp_string_callback((&result)->GetCStringCopy()); 
  /* </String_out> */
  return jresult;
}


SWIGEXPORT char * /* String_ctype */ SWIGSTDCALL CSharp_GvGetErrorString(char * /* constString&_ctype */ jarg1, int jarg2) {
  char * /* String_ctype */ jresult ;
  String *arg1 = 0 ;
  LONG arg2 ;
  String result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (LONG)jarg2; 
  result = GvGetErrorString((String const &)*arg1,arg2);
  /* <String_out> */ 
  jresult = SWIG_csharp_string_callback((&result)->GetCStringCopy()); 
  /* </String_out> */
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvGetPortList(void * jarg1, int jarg2, void * jarg3) {
  GvPortsDescInfo *arg1 = (GvPortsDescInfo *) 0 ;
  GvPortIO arg2 ;
  GvPortList *arg3 = 0 ;
  
  arg1 = (GvPortsDescInfo *)jarg1; 
  arg2 = (GvPortIO)jarg2; 
  arg3 = (GvPortList *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GvPortList & type is null", 0);
    return ;
  } 
  GvGetPortList(arg1,arg2,*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvGetPortDescription(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  GvPortsDescInfo *arg1 = (GvPortsDescInfo *) 0 ;
  GvPortIO arg2 ;
  LONG arg3 ;
  GvPortDescription *arg4 = (GvPortDescription *) 0 ;
  Bool result;
  
  arg1 = (GvPortsDescInfo *)jarg1; 
  arg2 = (GvPortIO)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (GvPortDescription *)jarg4; 
  result = GvGetPortDescription(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvGetAllDataTypes(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  GvPortDescInfo *arg1 = (GvPortDescInfo *) 0 ;
  ULONG arg2 ;
  LONG arg3 ;
  ULONG *argp2 ;
  Bool result;
  
  arg1 = (GvPortDescInfo *)jarg1; 
  argp2 = (ULONG *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ULONG", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (LONG)jarg3; 
  result = GvGetAllDataTypes(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvFreePortDescInfo(void * jarg1) {
  GvPortDescInfo *arg1 = (GvPortDescInfo *) 0 ;
  
  arg1 = (GvPortDescInfo *)jarg1; 
  GvFreePortDescInfo(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvRegisterOpClassType(void * jarg1, int jarg2) {
  unsigned int jresult ;
  GV_OPCLASS_HANDLER *arg1 = (GV_OPCLASS_HANDLER *) 0 ;
  LONG arg2 ;
  Bool result;
  
  arg1 = (GV_OPCLASS_HANDLER *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = GvRegisterOpClassType(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvRegisterOpGroupType(void * jarg1, int jarg2) {
  unsigned int jresult ;
  GV_OPGROUP_HANDLER *arg1 = (GV_OPGROUP_HANDLER *) 0 ;
  LONG arg2 ;
  Bool result;
  
  arg1 = (GV_OPGROUP_HANDLER *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = GvRegisterOpGroupType(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvRegisterValueType(void * jarg1, int jarg2) {
  unsigned int jresult ;
  GV_VALUE_HANDLER *arg1 = (GV_VALUE_HANDLER *) 0 ;
  LONG arg2 ;
  Bool result;
  
  arg1 = (GV_VALUE_HANDLER *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = GvRegisterValueType(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvRegisterDataType__SWIG_0(void * jarg1, int jarg2, char * jarg3) {
  unsigned int jresult ;
  GV_DATA_HANDLER *arg1 = (GV_DATA_HANDLER *) 0 ;
  LONG arg2 ;
  char *arg3 = (char *) 0 ;
  Bool result;
  
  arg1 = (GV_DATA_HANDLER *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (char *)jarg3; 
  result = GvRegisterDataType(arg1,arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvRegisterDataType__SWIG_1(void * jarg1, int jarg2) {
  unsigned int jresult ;
  GV_DATA_HANDLER *arg1 = (GV_DATA_HANDLER *) 0 ;
  LONG arg2 ;
  Bool result;
  
  arg1 = (GV_DATA_HANDLER *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = GvRegisterDataType(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvRegisterValGroupType(void * jarg1, int jarg2) {
  unsigned int jresult ;
  GV_VALGROUP_HANDLER *arg1 = (GV_VALGROUP_HANDLER *) 0 ;
  LONG arg2 ;
  Bool result;
  
  arg1 = (GV_VALGROUP_HANDLER *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = GvRegisterValGroupType(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvFindRegisteredOpClass(int jarg1) {
  void * jresult ;
  GvOpClassID arg1 ;
  GV_OPCLASS_HANDLER *result = 0 ;
  
  arg1 = (GvOpClassID)jarg1; 
  result = (GV_OPCLASS_HANDLER *)GvFindRegisteredOpClass(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvFindRegisteredOpGroup(int jarg1) {
  void * jresult ;
  GvOpGroupID arg1 ;
  GV_OPGROUP_HANDLER *result = 0 ;
  
  arg1 = (GvOpGroupID)jarg1; 
  result = (GV_OPGROUP_HANDLER *)GvFindRegisteredOpGroup(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * /* String_ctype */ SWIGSTDCALL CSharp_GvGetOperatorDetailedText(void * jarg1, void * jarg2) {
  char * /* String_ctype */ jresult ;
  GvOperatorData *arg1 = (GvOperatorData *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  String result;
  
  arg1 = (GvOperatorData *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  result = GvGetOperatorDetailedText(arg1,arg2);
  /* <String_out> */ 
  jresult = SWIG_csharp_string_callback((&result)->GetCStringCopy()); 
  /* </String_out> */
  return jresult;
}


SWIGEXPORT char * /* String_ctype */ SWIGSTDCALL CSharp_GvGetOperatorTitle(void * jarg1, int jarg2) {
  char * /* String_ctype */ jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  LONG arg2 ;
  String result;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = GvGetOperatorTitle(arg1,arg2);
  /* <String_out> */ 
  jresult = SWIG_csharp_string_callback((&result)->GetCStringCopy()); 
  /* </String_out> */
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvFreeValuesTable__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  GvNode *arg1 = (GvNode *) 0 ;
  GvValue ***arg2 = 0 ;
  LONG *arg3 = 0 ;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = (GvValue ***)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GvValue **& type is null", 0);
    return ;
  } 
  arg3 = (LONG *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return ;
  } 
  GvFreeValuesTable(arg1,*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvFreeValuesTable__SWIG_1(void * jarg1, void * jarg2) {
  GvNode *arg1 = (GvNode *) 0 ;
  GvValuesInfo *arg2 = 0 ;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = (GvValuesInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GvValuesInfo & type is null", 0);
    return ;
  } 
  GvFreeValuesTable(arg1,*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvBuildInValuesTable__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  GvValue ***arg2 = 0 ;
  LONG *arg3 = 0 ;
  GvCalc *arg4 = (GvCalc *) 0 ;
  GvRun *arg5 = (GvRun *) 0 ;
  LONG *arg6 = (LONG *) 0 ;
  Bool result;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = (GvValue ***)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GvValue **& type is null", 0);
    return 0;
  } 
  arg3 = (LONG *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  arg4 = (GvCalc *)jarg4; 
  arg5 = (GvRun *)jarg5; 
  arg6 = (LONG *)jarg6; 
  result = GvBuildInValuesTable(arg1,*arg2,*arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvBuildOutPortsTable(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  GvPort ***arg2 = 0 ;
  LONG *arg3 = 0 ;
  Bool result;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = (GvPort ***)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GvPort **& type is null", 0);
    return 0;
  } 
  arg3 = (LONG *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  result = GvBuildOutPortsTable(arg1,*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvCalculateInValuesTable__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, void * jarg6) {
  unsigned int jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  GvRun *arg2 = (GvRun *) 0 ;
  GvCalc *arg3 = (GvCalc *) 0 ;
  GvValuesInfo *arg4 = 0 ;
  LONG arg5 ;
  BaseTime *arg6 = (BaseTime *) 0 ;
  Bool result;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = (GvRun *)jarg2; 
  arg3 = (GvCalc *)jarg3; 
  arg4 = (GvValuesInfo *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GvValuesInfo & type is null", 0);
    return 0;
  } 
  arg5 = (LONG)jarg5; 
  arg6 = (BaseTime *)jarg6; 
  result = GvCalculateInValuesTable(arg1,arg2,arg3,*arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvCalculateInValuesTable__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  unsigned int jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  GvRun *arg2 = (GvRun *) 0 ;
  GvCalc *arg3 = (GvCalc *) 0 ;
  GvValuesInfo *arg4 = 0 ;
  LONG arg5 ;
  Bool result;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = (GvRun *)jarg2; 
  arg3 = (GvCalc *)jarg3; 
  arg4 = (GvValuesInfo *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GvValuesInfo & type is null", 0);
    return 0;
  } 
  arg5 = (LONG)jarg5; 
  result = GvCalculateInValuesTable(arg1,arg2,arg3,*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvCalculateInValuesTable__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  GvRun *arg2 = (GvRun *) 0 ;
  GvCalc *arg3 = (GvCalc *) 0 ;
  GvValuesInfo *arg4 = 0 ;
  Bool result;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = (GvRun *)jarg2; 
  arg3 = (GvCalc *)jarg3; 
  arg4 = (GvValuesInfo *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GvValuesInfo & type is null", 0);
    return 0;
  } 
  result = GvCalculateInValuesTable(arg1,arg2,arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvBuildInValuesTable__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  GvValuesInfo *arg2 = 0 ;
  GvCalc *arg3 = (GvCalc *) 0 ;
  GvRun *arg4 = (GvRun *) 0 ;
  GvIdTablePtr arg5 = (GvIdTablePtr) 0 ;
  Bool result;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = (GvValuesInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GvValuesInfo & type is null", 0);
    return 0;
  } 
  arg3 = (GvCalc *)jarg3; 
  arg4 = (GvRun *)jarg4; 
  arg5 = (GvIdTablePtr)jarg5; 
  result = GvBuildInValuesTable(arg1,*arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvBuildOutValuesTable(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  GvValuesInfo *arg2 = 0 ;
  Bool result;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = (GvValuesInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GvValuesInfo & type is null", 0);
    return 0;
  } 
  result = GvBuildOutValuesTable(arg1,*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvBuildValuesTable__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  GvValuesInfo *arg2 = 0 ;
  GvCalc *arg3 = (GvCalc *) 0 ;
  GvRun *arg4 = (GvRun *) 0 ;
  GvIdTablePtr arg5 = (GvIdTablePtr) 0 ;
  Bool result;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = (GvValuesInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GvValuesInfo & type is null", 0);
    return 0;
  } 
  arg3 = (GvCalc *)jarg3; 
  arg4 = (GvRun *)jarg4; 
  arg5 = (GvIdTablePtr)jarg5; 
  result = GvBuildValuesTable(arg1,*arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvGetDataInfo(void * jarg1, int jarg2) {
  void * jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  LONG arg2 ;
  GvDataInfo *result = 0 ;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (GvDataInfo *)GvGetDataInfo(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvCheckDataInfo(void * jarg1, int jarg2) {
  unsigned int jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  LONG arg2 ;
  Bool result;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = GvCheckDataInfo(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvAllocDynamicData__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  GvDynamicData *arg2 = 0 ;
  GvCalc *arg3 = (GvCalc *) 0 ;
  LONG arg4 ;
  Bool result;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = (GvDynamicData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GvDynamicData & type is null", 0);
    return 0;
  } 
  arg3 = (GvCalc *)jarg3; 
  arg4 = (LONG)jarg4; 
  result = GvAllocDynamicData(arg1,*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvFreeDynamicData(void * jarg1) {
  GvDynamicData *arg1 = 0 ;
  
  arg1 = (GvDynamicData *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GvDynamicData & type is null", 0);
    return ;
  } 
  GvFreeDynamicData(*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvClearDynamicData__SWIG_0(void * jarg1, void * jarg2) {
  GvDynamicData *arg1 = 0 ;
  GvRun *arg2 = (GvRun *) 0 ;
  
  arg1 = (GvDynamicData *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GvDynamicData & type is null", 0);
    return ;
  } 
  arg2 = (GvRun *)jarg2; 
  GvClearDynamicData(*arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvClearDynamicData__SWIG_1(void * jarg1) {
  GvDynamicData *arg1 = 0 ;
  
  arg1 = (GvDynamicData *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GvDynamicData & type is null", 0);
    return ;
  } 
  GvClearDynamicData(*arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvAllocDynamicDataClear(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  GvDynamicData *arg2 = 0 ;
  GvCalc *arg3 = (GvCalc *) 0 ;
  LONG arg4 ;
  Bool result;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = (GvDynamicData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GvDynamicData & type is null", 0);
    return 0;
  } 
  arg3 = (GvCalc *)jarg3; 
  arg4 = (LONG)jarg4; 
  result = GvAllocDynamicDataClear(arg1,*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvAllocDynamicData__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  GvNode *arg1 = (GvNode *) 0 ;
  GvDynamicData *arg2 = 0 ;
  GvDataInfo *arg3 = (GvDataInfo *) 0 ;
  Bool result;
  
  arg1 = (GvNode *)jarg1; 
  arg2 = (GvDynamicData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GvDynamicData & type is null", 0);
    return 0;
  } 
  arg3 = (GvDataInfo *)jarg3; 
  result = GvAllocDynamicData(arg1,*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvSetDataInContainer__SWIG_0(void * jarg1, int jarg2, void * jarg3, int jarg4, int jarg5) {
  unsigned int jresult ;
  void *arg1 = (void *) (void *)0 ;
  GvValueID arg2 ;
  BaseContainer *arg3 = 0 ;
  LONG arg4 ;
  LONG arg5 ;
  Bool result;
  
  arg1 = (void *)jarg1; 
  arg2 = (GvValueID)jarg2; 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  arg4 = (LONG)jarg4; 
  arg5 = (LONG)jarg5; 
  result = GvSetDataInContainer((void const *)arg1,arg2,*arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvSetDataInContainer__SWIG_1(void * jarg1, int jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  void *arg1 = (void *) (void *)0 ;
  GvValueID arg2 ;
  BaseContainer *arg3 = 0 ;
  LONG arg4 ;
  Bool result;
  
  arg1 = (void *)jarg1; 
  arg2 = (GvValueID)jarg2; 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  arg4 = (LONG)jarg4; 
  result = GvSetDataInContainer((void const *)arg1,arg2,*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetNode(void * jarg1) {
  void * jresult ;
  GeListNode *arg1 = (GeListNode *) 0 ;
  GvNode *result = 0 ;
  
  arg1 = (GeListNode *)jarg1; 
  result = (GvNode *)GetNode(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvOperatorData_Init(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GvOperatorData *arg1 = (GvOperatorData *) 0 ;
  GeListNode *arg2 = (GeListNode *) 0 ;
  Bool result;
  
  arg1 = (GvOperatorData *)jarg1; 
  arg2 = (GeListNode *)jarg2; 
  result = (arg1)->Init(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvOperatorData_GetDDescription(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  GvOperatorData *arg1 = (GvOperatorData *) 0 ;
  GeListNode *arg2 = (GeListNode *) 0 ;
  Description *arg3 = (Description *) 0 ;
  DESCFLAGS_DESC *arg4 = 0 ;
  Bool result;
  
  arg1 = (GvOperatorData *)jarg1; 
  arg2 = (GeListNode *)jarg2; 
  arg3 = (Description *)jarg3; 
  arg4 = (DESCFLAGS_DESC *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DESCFLAGS_DESC & type is null", 0);
    return 0;
  } 
  result = (arg1)->GetDDescription(arg2,arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvOperatorData_GetDParameter(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  GvOperatorData *arg1 = (GvOperatorData *) 0 ;
  GeListNode *arg2 = (GeListNode *) 0 ;
  DescID *arg3 = 0 ;
  GeData *arg4 = 0 ;
  DESCFLAGS_GET *arg5 = 0 ;
  Bool result;
  
  arg1 = (GvOperatorData *)jarg1; 
  arg2 = (GeListNode *)jarg2; 
  arg3 = (DescID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescID const & type is null", 0);
    return 0;
  } 
  arg4 = (GeData *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeData & type is null", 0);
    return 0;
  } 
  arg5 = (DESCFLAGS_GET *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DESCFLAGS_GET & type is null", 0);
    return 0;
  } 
  result = (arg1)->GetDParameter(arg2,(DescID const &)*arg3,*arg4,*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvOperatorData_GetDEnabling(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, void * jarg6) {
  unsigned int jresult ;
  GvOperatorData *arg1 = (GvOperatorData *) 0 ;
  GeListNode *arg2 = (GeListNode *) 0 ;
  DescID *arg3 = 0 ;
  GeData *arg4 = 0 ;
  DESCFLAGS_ENABLE arg5 ;
  BaseContainer *arg6 = (BaseContainer *) 0 ;
  Bool result;
  
  arg1 = (GvOperatorData *)jarg1; 
  arg2 = (GeListNode *)jarg2; 
  arg3 = (DescID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescID const & type is null", 0);
    return 0;
  } 
  arg4 = (GeData *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeData const & type is null", 0);
    return 0;
  } 
  arg5 = (DESCFLAGS_ENABLE)jarg5; 
  arg6 = (BaseContainer *)jarg6; 
  result = (arg1)->GetDEnabling(arg2,(DescID const &)*arg3,(GeData const &)*arg4,arg5,(BaseContainer const *)arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvOperatorData_SetDParameter(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  GvOperatorData *arg1 = (GvOperatorData *) 0 ;
  GeListNode *arg2 = (GeListNode *) 0 ;
  DescID *arg3 = 0 ;
  GeData *arg4 = 0 ;
  DESCFLAGS_SET *arg5 = 0 ;
  Bool result;
  
  arg1 = (GvOperatorData *)jarg1; 
  arg2 = (GeListNode *)jarg2; 
  arg3 = (DescID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescID const & type is null", 0);
    return 0;
  } 
  arg4 = (GeData *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeData const & type is null", 0);
    return 0;
  } 
  arg5 = (DESCFLAGS_SET *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DESCFLAGS_SET & type is null", 0);
    return 0;
  } 
  result = (arg1)->SetDParameter(arg2,(DescID const &)*arg3,(GeData const &)*arg4,*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvOperatorData_iGetPortList(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  GvOperatorData *arg1 = (GvOperatorData *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  GvPortIO arg3 ;
  GvPortList *arg4 = 0 ;
  
  arg1 = (GvOperatorData *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = (GvPortIO)jarg3; 
  arg4 = (GvPortList *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GvPortList & type is null", 0);
    return ;
  } 
  (arg1)->iGetPortList(arg2,arg3,*arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvOperatorData_iGetPortDescription(void * jarg1, void * jarg2, int jarg3, int jarg4, void * jarg5) {
  unsigned int jresult ;
  GvOperatorData *arg1 = (GvOperatorData *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  GvPortIO arg3 ;
  LONG arg4 ;
  GvPortDescription *arg5 = (GvPortDescription *) 0 ;
  Bool result;
  
  arg1 = (GvOperatorData *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = (GvPortIO)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (GvPortDescription *)jarg5; 
  result = (arg1)->iGetPortDescription(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvOperatorData_iCreateOperator(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GvOperatorData *arg1 = (GvOperatorData *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  Bool result;
  
  arg1 = (GvOperatorData *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  result = (arg1)->iCreateOperator(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvOperatorData_CreatePortDescriptionCache__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  GvOperatorData *arg1 = (GvOperatorData *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  Bool arg3 ;
  Bool result;
  
  arg1 = (GvOperatorData *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->CreatePortDescriptionCache(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvOperatorData_CreatePortDescriptionCache__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GvOperatorData *arg1 = (GvOperatorData *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  Bool result;
  
  arg1 = (GvOperatorData *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  result = (arg1)->CreatePortDescriptionCache(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvOperatorData_FreePortDescriptionCache(void * jarg1, void * jarg2) {
  GvOperatorData *arg1 = (GvOperatorData *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  
  arg1 = (GvOperatorData *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  (arg1)->FreePortDescriptionCache(arg2);
}


SWIGEXPORT char * /* String_ctype */ SWIGSTDCALL CSharp_GvOperatorData_GetDetailedText(void * jarg1, void * jarg2) {
  char * /* String_ctype */ jresult ;
  GvOperatorData *arg1 = (GvOperatorData *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  String result;
  
  arg1 = (GvOperatorData *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  result = (arg1)->GetDetailedText(arg2);
  /* <String_out> */ 
  jresult = SWIG_csharp_string_callback((&result)->GetCStringCopy()); 
  /* </String_out> */
  return jresult;
}


SWIGEXPORT char * /* String_ctype */ SWIGSTDCALL CSharp_GvOperatorData_GetText(void * jarg1, void * jarg2) {
  char * /* String_ctype */ jresult ;
  GvOperatorData *arg1 = (GvOperatorData *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  String result;
  
  arg1 = (GvOperatorData *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  result = (arg1)->GetText(arg2);
  /* <String_out> */ 
  jresult = SWIG_csharp_string_callback((&result)->GetCStringCopy()); 
  /* </String_out> */
  return jresult;
}


SWIGEXPORT char * /* String_ctype */ SWIGSTDCALL CSharp_GvOperatorData_GetTitle(void * jarg1, void * jarg2) {
  char * /* String_ctype */ jresult ;
  GvOperatorData *arg1 = (GvOperatorData *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  String result;
  
  arg1 = (GvOperatorData *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  result = (arg1)->GetTitle(arg2);
  /* <String_out> */ 
  jresult = SWIG_csharp_string_callback((&result)->GetCStringCopy()); 
  /* </String_out> */
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvOperatorData_GetPortIcon(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  void * jresult ;
  GvOperatorData *arg1 = (GvOperatorData *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  LONG arg3 ;
  GvLayoutType arg4 ;
  BaseBitmap *result = 0 ;
  
  arg1 = (GvOperatorData *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (GvLayoutType)jarg4; 
  result = (BaseBitmap *)(arg1)->GetPortIcon(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvOperatorData_GetBodySize(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  GvOperatorData *arg1 = (GvOperatorData *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  LONG *arg3 = (LONG *) 0 ;
  LONG *arg4 = (LONG *) 0 ;
  
  arg1 = (GvOperatorData *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = (LONG *)jarg3; 
  arg4 = (LONG *)jarg4; 
  (arg1)->GetBodySize(arg2,arg3,arg4);
}


SWIGEXPORT Vector_POD /* Vector_ctype_out */ SWIGSTDCALL CSharp_GvOperatorData_GetBodyColor(void * jarg1, void * jarg2) {
  Vector_POD /* Vector_ctype_out */ jresult ;
  GvOperatorData *arg1 = (GvOperatorData *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  Vector result;
  
  arg1 = (GvOperatorData *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  result = (arg1)->GetBodyColor(arg2);
  
  /* <Vector_out> */
  jresult = *((Vector_POD *)&(result));
  /* </Vector_out> */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvOperatorData_EditorDraw(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, int jarg6, int jarg7, int jarg8) {
  GvOperatorData *arg1 = (GvOperatorData *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  GvNodeGUI *arg3 = (GvNodeGUI *) 0 ;
  GeUserArea *arg4 = (GeUserArea *) 0 ;
  LONG arg5 ;
  LONG arg6 ;
  LONG arg7 ;
  LONG arg8 ;
  
  arg1 = (GvOperatorData *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = (GvNodeGUI *)jarg3; 
  arg4 = (GeUserArea *)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (LONG)jarg6; 
  arg7 = (LONG)jarg7; 
  arg8 = (LONG)jarg8; 
  (arg1)->EditorDraw(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvOperatorData_GetOperatorDescription(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  GvOperatorData *arg1 = (GvOperatorData *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  GvOperatorDescription *arg3 = (GvOperatorDescription *) 0 ;
  Bool result;
  
  arg1 = (GvOperatorData *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = (GvOperatorDescription *)jarg3; 
  result = (arg1)->GetOperatorDescription(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvOperatorData_QueryCalculation(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  GvOperatorData *arg1 = (GvOperatorData *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  GvQuery *arg3 = (GvQuery *) 0 ;
  Bool result;
  
  arg1 = (GvOperatorData *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = (GvQuery *)jarg3; 
  result = (arg1)->QueryCalculation(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvOperatorData_InitCalculation(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  GvOperatorData *arg1 = (GvOperatorData *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  GvCalc *arg3 = (GvCalc *) 0 ;
  GvRun *arg4 = (GvRun *) 0 ;
  Bool result;
  
  arg1 = (GvOperatorData *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = (GvCalc *)jarg3; 
  arg4 = (GvRun *)jarg4; 
  result = (arg1)->InitCalculation(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvOperatorData_FreeCalculation(void * jarg1, void * jarg2, void * jarg3) {
  GvOperatorData *arg1 = (GvOperatorData *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  GvCalc *arg3 = (GvCalc *) 0 ;
  
  arg1 = (GvOperatorData *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = (GvCalc *)jarg3; 
  (arg1)->FreeCalculation(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvOperatorData_Calculate(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  GvOperatorData *arg1 = (GvOperatorData *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  GvPort *arg3 = (GvPort *) 0 ;
  GvRun *arg4 = (GvRun *) 0 ;
  GvCalc *arg5 = (GvCalc *) 0 ;
  Bool result;
  
  arg1 = (GvOperatorData *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = (GvPort *)jarg3; 
  arg4 = (GvRun *)jarg4; 
  arg5 = (GvCalc *)jarg5; 
  result = (arg1)->Calculate(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvOperatorData_AddToCalculationTable(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  GvOperatorData *arg1 = (GvOperatorData *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  GvRun *arg3 = (GvRun *) 0 ;
  Bool result;
  
  arg1 = (GvOperatorData *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = (GvRun *)jarg3; 
  result = (arg1)->AddToCalculationTable(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvOperatorData_SetRecalculate__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  GvOperatorData *arg1 = (GvOperatorData *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  GvPort *arg3 = (GvPort *) 0 ;
  GvRun *arg4 = (GvRun *) 0 ;
  Bool arg5 ;
  Bool result;
  
  arg1 = (GvOperatorData *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = (GvPort *)jarg3; 
  arg4 = (GvRun *)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (arg1)->SetRecalculate(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvOperatorData_SetRecalculate__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  GvOperatorData *arg1 = (GvOperatorData *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  GvPort *arg3 = (GvPort *) 0 ;
  GvRun *arg4 = (GvRun *) 0 ;
  Bool result;
  
  arg1 = (GvOperatorData *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = (GvPort *)jarg3; 
  arg4 = (GvRun *)jarg4; 
  result = (arg1)->SetRecalculate(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvOperatorData_SetData__SWIG_0(void * jarg1, void * jarg2, int jarg3, void * jarg4, int jarg5) {
  unsigned int jresult ;
  GvOperatorData *arg1 = (GvOperatorData *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  GvDataType arg3 ;
  void *arg4 = (void *) 0 ;
  GvOpSetDataMode arg5 ;
  Bool result;
  
  arg1 = (GvOperatorData *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = (GvDataType)jarg3; 
  arg4 = (void *)jarg4; 
  arg5 = (GvOpSetDataMode)jarg5; 
  result = (arg1)->SetData(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvOperatorData_SetData__SWIG_1(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  GvOperatorData *arg1 = (GvOperatorData *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  GvDataType arg3 ;
  void *arg4 = (void *) 0 ;
  Bool result;
  
  arg1 = (GvOperatorData *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = (GvDataType)jarg3; 
  arg4 = (void *)jarg4; 
  result = (arg1)->SetData(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvOperatorData_IsSetDataAllowed__SWIG_0(void * jarg1, void * jarg2, int jarg3, void * jarg4, int jarg5) {
  unsigned int jresult ;
  GvOperatorData *arg1 = (GvOperatorData *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  GvDataType arg3 ;
  void *arg4 = (void *) 0 ;
  GvOpSetDataMode arg5 ;
  Bool result;
  
  arg1 = (GvOperatorData *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = (GvDataType)jarg3; 
  arg4 = (void *)jarg4; 
  arg5 = (GvOpSetDataMode)jarg5; 
  result = (arg1)->IsSetDataAllowed(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvOperatorData_IsSetDataAllowed__SWIG_1(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  GvOperatorData *arg1 = (GvOperatorData *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  GvDataType arg3 ;
  void *arg4 = (void *) 0 ;
  Bool result;
  
  arg1 = (GvOperatorData *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = (GvDataType)jarg3; 
  arg4 = (void *)jarg4; 
  result = (arg1)->IsSetDataAllowed(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvOperatorData_FillPortMenu(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5) {
  int jresult ;
  GvOperatorData *arg1 = (GvOperatorData *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  BaseContainer *arg3 = 0 ;
  LONG arg4 ;
  LONG arg5 ;
  LONG result;
  
  arg1 = (GvOperatorData *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  arg4 = (LONG)jarg4; 
  arg5 = (LONG)jarg5; 
  result = (arg1)->FillPortMenu(arg2,*arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvOperatorData_PortMenuCommand(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6) {
  unsigned int jresult ;
  GvOperatorData *arg1 = (GvOperatorData *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  LONG arg3 ;
  LONG arg4 ;
  LONG arg5 ;
  LONG arg6 ;
  Bool result;
  
  arg1 = (GvOperatorData *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (LONG)jarg6; 
  result = (arg1)->PortMenuCommand(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvOperatorData_FillOperatorMenu(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  int jresult ;
  GvOperatorData *arg1 = (GvOperatorData *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  BaseContainer *arg3 = 0 ;
  LONG arg4 ;
  LONG result;
  
  arg1 = (GvOperatorData *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  arg4 = (LONG)jarg4; 
  result = (arg1)->FillOperatorMenu(arg2,*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvOperatorData_OperatorMenuCommand(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5) {
  unsigned int jresult ;
  GvOperatorData *arg1 = (GvOperatorData *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  LONG arg3 ;
  LONG arg4 ;
  LONG arg5 ;
  Bool result;
  
  arg1 = (GvOperatorData *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (LONG)jarg5; 
  result = (arg1)->OperatorMenuCommand(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvOperatorData_FillPortsMenu(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, int jarg6, int jarg7) {
  int jresult ;
  GvOperatorData *arg1 = (GvOperatorData *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  BaseContainer *arg3 = 0 ;
  BaseContainer *arg4 = 0 ;
  GvValueID arg5 ;
  GvPortIO arg6 ;
  LONG arg7 ;
  LONG result;
  
  arg1 = (GvOperatorData *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = (BaseContainer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  arg4 = (BaseContainer *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return 0;
  } 
  arg5 = (GvValueID)jarg5; 
  arg6 = (GvPortIO)jarg6; 
  arg7 = (LONG)jarg7; 
  result = (arg1)->FillPortsMenu(arg2,*arg3,*arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvOperatorData_BodyMessage(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5, int jarg6, int jarg7, void * jarg8) {
  unsigned int jresult ;
  GvOperatorData *arg1 = (GvOperatorData *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  GvNodeGUI *arg3 = (GvNodeGUI *) 0 ;
  LONG arg4 ;
  LONG arg5 ;
  LONG arg6 ;
  LONG arg7 ;
  BaseContainer *arg8 = 0 ;
  Bool result;
  
  arg1 = (GvOperatorData *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = (GvNodeGUI *)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (LONG)jarg5; 
  arg6 = (LONG)jarg6; 
  arg7 = (LONG)jarg7; 
  arg8 = (BaseContainer *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer const & type is null", 0);
    return 0;
  } 
  result = (arg1)->BodyMessage(arg2,arg3,arg4,arg5,arg6,arg7,(BaseContainer const &)*arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvOperatorData_EditSettings(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  GvOperatorData *arg1 = (GvOperatorData *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  GvNodeGUI *arg3 = (GvNodeGUI *) 0 ;
  Bool result;
  
  arg1 = (GvOperatorData *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = (GvNodeGUI *)jarg3; 
  result = (arg1)->EditSettings(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * /* String_ctype */ SWIGSTDCALL CSharp_GvOperatorData_GetErrorString(void * jarg1, void * jarg2, int jarg3) {
  char * /* String_ctype */ jresult ;
  GvOperatorData *arg1 = (GvOperatorData *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  LONG arg3 ;
  String result;
  
  arg1 = (GvOperatorData *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = (LONG)jarg3; 
  result = (arg1)->GetErrorString(arg2,arg3);
  /* <String_out> */ 
  jresult = SWIG_csharp_string_callback((&result)->GetCStringCopy()); 
  /* </String_out> */
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvOperatorData_SceneDraw(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, int jarg6, void * jarg7, void * jarg8) {
  unsigned int jresult ;
  GvOperatorData *arg1 = (GvOperatorData *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  BaseDraw *arg3 = (BaseDraw *) 0 ;
  BaseDrawHelp *arg4 = (BaseDrawHelp *) 0 ;
  BaseThread *arg5 = (BaseThread *) 0 ;
  LONG arg6 ;
  void *arg7 = (void *) 0 ;
  ULONG arg8 ;
  ULONG *argp8 ;
  Bool result;
  
  arg1 = (GvOperatorData *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = (BaseDraw *)jarg3; 
  arg4 = (BaseDrawHelp *)jarg4; 
  arg5 = (BaseThread *)jarg5; 
  arg6 = (LONG)jarg6; 
  arg7 = (void *)jarg7; 
  argp8 = (ULONG *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ULONG", 0);
    return 0;
  }
  arg8 = *argp8; 
  result = (arg1)->SceneDraw(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GvOperatorData_GetMainID(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  int jresult ;
  GvOperatorData *arg1 = (GvOperatorData *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  GvPortIO arg3 ;
  DescID *arg4 = 0 ;
  LONG result;
  
  arg1 = (GvOperatorData *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = (GvPortIO)jarg3; 
  arg4 = (DescID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescID const & type is null", 0);
    return 0;
  } 
  result = (arg1)->GetMainID(arg2,arg3,(DescID const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvOperatorData_GetDescID(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  void * jresult ;
  GvOperatorData *arg1 = (GvOperatorData *) 0 ;
  GvNode *arg2 = (GvNode *) 0 ;
  GvPortIO arg3 ;
  LONG arg4 ;
  DescID result;
  
  arg1 = (GvOperatorData *)jarg1; 
  arg2 = (GvNode *)jarg2; 
  arg3 = (GvPortIO)jarg3; 
  arg4 = (LONG)jarg4; 
  result = (arg1)->GetDescID(arg2,arg3,arg4);
  jresult = new DescID((const DescID &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GvOperatorData() {
  void * jresult ;
  GvOperatorData *result = 0 ;
  
  result = (GvOperatorData *)new GvOperatorData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GvOperatorData(void * jarg1) {
  GvOperatorData *arg1 = (GvOperatorData *) 0 ;
  
  arg1 = (GvOperatorData *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GvRegisterOperatorPlugin(int jarg1, char * /* constString&_ctype */ jarg2, int jarg3, void* /* DataAllocator*_ctype */ jarg4, char * /* constString&_ctype */ jarg5, int jarg6, int jarg7, int jarg8, int jarg9, void * jarg10) {
  unsigned int jresult ;
  GvOperatorID arg1 ;
  String *arg2 = 0 ;
  LONG arg3 ;
  DataAllocator *arg4 = (DataAllocator *) 0 ;
  String *arg5 = 0 ;
  LONG arg6 ;
  GvOpClassID arg7 ;
  GvOpGroupID arg8 ;
  LONG arg9 ;
  BaseBitmap *arg10 = (BaseBitmap *) 0 ;
  Bool result;
  
  arg1 = (GvOperatorID)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (LONG)jarg3; 
  arg4 = (DataAllocator*)jarg4; /* DataAllocator*_in */
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg5_str(jarg5);
  arg5 = &arg5_str; 
  arg6 = (LONG)jarg6; 
  arg7 = (GvOpClassID)jarg7; 
  arg8 = (GvOpGroupID)jarg8; 
  arg9 = (LONG)jarg9; 
  arg10 = (BaseBitmap *)jarg10; 
  result = GvRegisterOperatorPlugin(arg1,(String const &)*arg2,arg3,arg4,(String const &)*arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OPERATORPLUGIN_op_group_set(void * jarg1, void * jarg2) {
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  VLONG arg2 ;
  VLONG *argp2 ;
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  argp2 = (VLONG *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null VLONG", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->op_group = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OPERATORPLUGIN_op_group_get(void * jarg1) {
  void * jresult ;
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  VLONG result;
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  result =  ((arg1)->op_group);
  jresult = new VLONG((const VLONG &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OPERATORPLUGIN_op_class_set(void * jarg1, void * jarg2) {
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  VLONG arg2 ;
  VLONG *argp2 ;
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  argp2 = (VLONG *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null VLONG", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->op_class = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OPERATORPLUGIN_op_class_get(void * jarg1) {
  void * jresult ;
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  VLONG result;
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  result =  ((arg1)->op_class);
  jresult = new VLONG((const VLONG &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OPERATORPLUGIN_op_owner_set(void * jarg1, void * jarg2) {
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  VLONG arg2 ;
  VLONG *argp2 ;
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  argp2 = (VLONG *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null VLONG", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->op_owner = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OPERATORPLUGIN_op_owner_get(void * jarg1) {
  void * jresult ;
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  VLONG result;
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  result =  ((arg1)->op_owner);
  jresult = new VLONG((const VLONG &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OPERATORPLUGIN_iCreateOperator_set(void * jarg1, char * jarg2) {
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  Bool (GvOperatorData::*arg2)(GvNode *) ;
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  
  SWIG_UnpackData(jarg2, (void *)&arg2, sizeof(arg2));
  
  if (arg1) (arg1)->iCreateOperator = arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OPERATORPLUGIN_iCreateOperator_get(void * jarg1) {
  char * jresult ;
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  Bool (GvOperatorData::*result)(GvNode *);
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  result = (Bool (GvOperatorData::*)(GvNode *)) ((arg1)->iCreateOperator);
  
  char buf[128];
  char *data = SWIG_PackData(buf, (void *)&result, sizeof(result));
  *data = '\0';
  jresult = SWIG_csharp_string_callback(buf);
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OPERATORPLUGIN_GetDetailedText_set(void * jarg1, char * jarg2) {
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  String (GvOperatorData::*arg2)(GvNode *) ;
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  
  SWIG_UnpackData(jarg2, (void *)&arg2, sizeof(arg2));
  
  if (arg1) (arg1)->GetDetailedText = (String const (GvOperatorData::*)(GvNode *))arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OPERATORPLUGIN_GetDetailedText_get(void * jarg1) {
  char * jresult ;
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  String (GvOperatorData::*result)(GvNode *);
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  result = (String (GvOperatorData::*)(GvNode *)) ((arg1)->GetDetailedText);
  
  char buf[128];
  char *data = SWIG_PackData(buf, (void *)&result, sizeof(result));
  *data = '\0';
  jresult = SWIG_csharp_string_callback(buf);
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OPERATORPLUGIN_GetText_set(void * jarg1, char * jarg2) {
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  String (GvOperatorData::*arg2)(GvNode *) ;
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  
  SWIG_UnpackData(jarg2, (void *)&arg2, sizeof(arg2));
  
  if (arg1) (arg1)->GetText = (String const (GvOperatorData::*)(GvNode *))arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OPERATORPLUGIN_GetText_get(void * jarg1) {
  char * jresult ;
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  String (GvOperatorData::*result)(GvNode *);
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  result = (String (GvOperatorData::*)(GvNode *)) ((arg1)->GetText);
  
  char buf[128];
  char *data = SWIG_PackData(buf, (void *)&result, sizeof(result));
  *data = '\0';
  jresult = SWIG_csharp_string_callback(buf);
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OPERATORPLUGIN_GetTitle_set(void * jarg1, char * jarg2) {
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  String (GvOperatorData::*arg2)(GvNode *) ;
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  
  SWIG_UnpackData(jarg2, (void *)&arg2, sizeof(arg2));
  
  if (arg1) (arg1)->GetTitle = (String const (GvOperatorData::*)(GvNode *))arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OPERATORPLUGIN_GetTitle_get(void * jarg1) {
  char * jresult ;
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  String (GvOperatorData::*result)(GvNode *);
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  result = (String (GvOperatorData::*)(GvNode *)) ((arg1)->GetTitle);
  
  char buf[128];
  char *data = SWIG_PackData(buf, (void *)&result, sizeof(result));
  *data = '\0';
  jresult = SWIG_csharp_string_callback(buf);
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OPERATORPLUGIN_GetPortIcon_set(void * jarg1, char * jarg2) {
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  BaseBitmap *(GvOperatorData::*arg2)(GvNode *,LONG,GvLayoutType) ;
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  
  SWIG_UnpackData(jarg2, (void *)&arg2, sizeof(arg2));
  
  if (arg1) (arg1)->GetPortIcon = arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OPERATORPLUGIN_GetPortIcon_get(void * jarg1) {
  char * jresult ;
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  BaseBitmap *(GvOperatorData::*result)(GvNode *,LONG,GvLayoutType);
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  result = (BaseBitmap *(GvOperatorData::*)(GvNode *,LONG,GvLayoutType)) ((arg1)->GetPortIcon);
  
  char buf[128];
  char *data = SWIG_PackData(buf, (void *)&result, sizeof(result));
  *data = '\0';
  jresult = SWIG_csharp_string_callback(buf);
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OPERATORPLUGIN_GetBodySize_set(void * jarg1, char * jarg2) {
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  void (GvOperatorData::*arg2)(GvNode *,LONG *,LONG *) ;
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  
  SWIG_UnpackData(jarg2, (void *)&arg2, sizeof(arg2));
  
  if (arg1) (arg1)->GetBodySize = arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OPERATORPLUGIN_GetBodySize_get(void * jarg1) {
  char * jresult ;
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  void (GvOperatorData::*result)(GvNode *,LONG *,LONG *);
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  result = (void (GvOperatorData::*)(GvNode *,LONG *,LONG *)) ((arg1)->GetBodySize);
  
  char buf[128];
  char *data = SWIG_PackData(buf, (void *)&result, sizeof(result));
  *data = '\0';
  jresult = SWIG_csharp_string_callback(buf);
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OPERATORPLUGIN_GetBodyColor_set(void * jarg1, char * jarg2) {
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  Vector (GvOperatorData::*arg2)(GvNode *) ;
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  
  SWIG_UnpackData(jarg2, (void *)&arg2, sizeof(arg2));
  
  if (arg1) (arg1)->GetBodyColor = (Vector const (GvOperatorData::*)(GvNode *))arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OPERATORPLUGIN_GetBodyColor_get(void * jarg1) {
  char * jresult ;
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  Vector (GvOperatorData::*result)(GvNode *);
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  result = (Vector (GvOperatorData::*)(GvNode *)) ((arg1)->GetBodyColor);
  
  char buf[128];
  char *data = SWIG_PackData(buf, (void *)&result, sizeof(result));
  *data = '\0';
  jresult = SWIG_csharp_string_callback(buf);
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OPERATORPLUGIN_EditorDraw_set(void * jarg1, char * jarg2) {
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  void (GvOperatorData::*arg2)(GvNode *,GvNodeGUI *,GeUserArea *,LONG,LONG,LONG,LONG) ;
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  
  SWIG_UnpackData(jarg2, (void *)&arg2, sizeof(arg2));
  
  if (arg1) (arg1)->EditorDraw = arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OPERATORPLUGIN_EditorDraw_get(void * jarg1) {
  char * jresult ;
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  void (GvOperatorData::*result)(GvNode *,GvNodeGUI *,GeUserArea *,LONG,LONG,LONG,LONG);
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  result = (void (GvOperatorData::*)(GvNode *,GvNodeGUI *,GeUserArea *,LONG,LONG,LONG,LONG)) ((arg1)->EditorDraw);
  
  char buf[128];
  char *data = SWIG_PackData(buf, (void *)&result, sizeof(result));
  *data = '\0';
  jresult = SWIG_csharp_string_callback(buf);
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OPERATORPLUGIN_iGetPortList_set(void * jarg1, char * jarg2) {
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  void (GvOperatorData::*arg2)(GvNode *,GvPortIO,GvPortList &) ;
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  
  SWIG_UnpackData(jarg2, (void *)&arg2, sizeof(arg2));
  
  if (arg1) (arg1)->iGetPortList = arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OPERATORPLUGIN_iGetPortList_get(void * jarg1) {
  char * jresult ;
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  void (GvOperatorData::*result)(GvNode *,GvPortIO,GvPortList &);
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  result = (void (GvOperatorData::*)(GvNode *,GvPortIO,GvPortList &)) ((arg1)->iGetPortList);
  
  char buf[128];
  char *data = SWIG_PackData(buf, (void *)&result, sizeof(result));
  *data = '\0';
  jresult = SWIG_csharp_string_callback(buf);
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OPERATORPLUGIN_iGetPortDescription_set(void * jarg1, char * jarg2) {
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  Bool (GvOperatorData::*arg2)(GvNode *,GvPortIO,LONG,GvPortDescription *) ;
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  
  SWIG_UnpackData(jarg2, (void *)&arg2, sizeof(arg2));
  
  if (arg1) (arg1)->iGetPortDescription = arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OPERATORPLUGIN_iGetPortDescription_get(void * jarg1) {
  char * jresult ;
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  Bool (GvOperatorData::*result)(GvNode *,GvPortIO,LONG,GvPortDescription *);
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  result = (Bool (GvOperatorData::*)(GvNode *,GvPortIO,LONG,GvPortDescription *)) ((arg1)->iGetPortDescription);
  
  char buf[128];
  char *data = SWIG_PackData(buf, (void *)&result, sizeof(result));
  *data = '\0';
  jresult = SWIG_csharp_string_callback(buf);
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OPERATORPLUGIN_GetOperatorDescription_set(void * jarg1, char * jarg2) {
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  Bool (GvOperatorData::*arg2)(GvNode *,GvOperatorDescription *) ;
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  
  SWIG_UnpackData(jarg2, (void *)&arg2, sizeof(arg2));
  
  if (arg1) (arg1)->GetOperatorDescription = arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OPERATORPLUGIN_GetOperatorDescription_get(void * jarg1) {
  char * jresult ;
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  Bool (GvOperatorData::*result)(GvNode *,GvOperatorDescription *);
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  result = (Bool (GvOperatorData::*)(GvNode *,GvOperatorDescription *)) ((arg1)->GetOperatorDescription);
  
  char buf[128];
  char *data = SWIG_PackData(buf, (void *)&result, sizeof(result));
  *data = '\0';
  jresult = SWIG_csharp_string_callback(buf);
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OPERATORPLUGIN_QueryCalculation_set(void * jarg1, char * jarg2) {
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  Bool (GvOperatorData::*arg2)(GvNode *,GvQuery *) ;
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  
  SWIG_UnpackData(jarg2, (void *)&arg2, sizeof(arg2));
  
  if (arg1) (arg1)->QueryCalculation = arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OPERATORPLUGIN_QueryCalculation_get(void * jarg1) {
  char * jresult ;
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  Bool (GvOperatorData::*result)(GvNode *,GvQuery *);
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  result = (Bool (GvOperatorData::*)(GvNode *,GvQuery *)) ((arg1)->QueryCalculation);
  
  char buf[128];
  char *data = SWIG_PackData(buf, (void *)&result, sizeof(result));
  *data = '\0';
  jresult = SWIG_csharp_string_callback(buf);
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OPERATORPLUGIN_InitCalculation_set(void * jarg1, char * jarg2) {
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  Bool (GvOperatorData::*arg2)(GvNode *,GvCalc *,GvRun *) ;
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  
  SWIG_UnpackData(jarg2, (void *)&arg2, sizeof(arg2));
  
  if (arg1) (arg1)->InitCalculation = arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OPERATORPLUGIN_InitCalculation_get(void * jarg1) {
  char * jresult ;
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  Bool (GvOperatorData::*result)(GvNode *,GvCalc *,GvRun *);
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  result = (Bool (GvOperatorData::*)(GvNode *,GvCalc *,GvRun *)) ((arg1)->InitCalculation);
  
  char buf[128];
  char *data = SWIG_PackData(buf, (void *)&result, sizeof(result));
  *data = '\0';
  jresult = SWIG_csharp_string_callback(buf);
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OPERATORPLUGIN_FreeCalculation_set(void * jarg1, char * jarg2) {
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  void (GvOperatorData::*arg2)(GvNode *,GvCalc *) ;
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  
  SWIG_UnpackData(jarg2, (void *)&arg2, sizeof(arg2));
  
  if (arg1) (arg1)->FreeCalculation = arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OPERATORPLUGIN_FreeCalculation_get(void * jarg1) {
  char * jresult ;
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  void (GvOperatorData::*result)(GvNode *,GvCalc *);
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  result = (void (GvOperatorData::*)(GvNode *,GvCalc *)) ((arg1)->FreeCalculation);
  
  char buf[128];
  char *data = SWIG_PackData(buf, (void *)&result, sizeof(result));
  *data = '\0';
  jresult = SWIG_csharp_string_callback(buf);
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OPERATORPLUGIN_Calculate_set(void * jarg1, char * jarg2) {
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  Bool (GvOperatorData::*arg2)(GvNode *,GvPort *,GvRun *,GvCalc *) ;
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  
  SWIG_UnpackData(jarg2, (void *)&arg2, sizeof(arg2));
  
  if (arg1) (arg1)->Calculate = arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OPERATORPLUGIN_Calculate_get(void * jarg1) {
  char * jresult ;
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  Bool (GvOperatorData::*result)(GvNode *,GvPort *,GvRun *,GvCalc *);
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  result = (Bool (GvOperatorData::*)(GvNode *,GvPort *,GvRun *,GvCalc *)) ((arg1)->Calculate);
  
  char buf[128];
  char *data = SWIG_PackData(buf, (void *)&result, sizeof(result));
  *data = '\0';
  jresult = SWIG_csharp_string_callback(buf);
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OPERATORPLUGIN_AddToCalculationTable_set(void * jarg1, char * jarg2) {
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  Bool (GvOperatorData::*arg2)(GvNode *,GvRun *) ;
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  
  SWIG_UnpackData(jarg2, (void *)&arg2, sizeof(arg2));
  
  if (arg1) (arg1)->AddToCalculationTable = arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OPERATORPLUGIN_AddToCalculationTable_get(void * jarg1) {
  char * jresult ;
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  Bool (GvOperatorData::*result)(GvNode *,GvRun *);
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  result = (Bool (GvOperatorData::*)(GvNode *,GvRun *)) ((arg1)->AddToCalculationTable);
  
  char buf[128];
  char *data = SWIG_PackData(buf, (void *)&result, sizeof(result));
  *data = '\0';
  jresult = SWIG_csharp_string_callback(buf);
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OPERATORPLUGIN_SetRecalculate_set(void * jarg1, char * jarg2) {
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  Bool (GvOperatorData::*arg2)(GvNode *,GvPort *,GvRun *,Bool) ;
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  
  SWIG_UnpackData(jarg2, (void *)&arg2, sizeof(arg2));
  
  if (arg1) (arg1)->SetRecalculate = arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OPERATORPLUGIN_SetRecalculate_get(void * jarg1) {
  char * jresult ;
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  Bool (GvOperatorData::*result)(GvNode *,GvPort *,GvRun *,Bool);
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  result = (Bool (GvOperatorData::*)(GvNode *,GvPort *,GvRun *,Bool)) ((arg1)->SetRecalculate);
  
  char buf[128];
  char *data = SWIG_PackData(buf, (void *)&result, sizeof(result));
  *data = '\0';
  jresult = SWIG_csharp_string_callback(buf);
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OPERATORPLUGIN_SetData_set(void * jarg1, char * jarg2) {
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  Bool (GvOperatorData::*arg2)(GvNode *,GvDataType,void *,GvOpSetDataMode) ;
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  
  SWIG_UnpackData(jarg2, (void *)&arg2, sizeof(arg2));
  
  if (arg1) (arg1)->SetData = arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OPERATORPLUGIN_SetData_get(void * jarg1) {
  char * jresult ;
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  Bool (GvOperatorData::*result)(GvNode *,GvDataType,void *,GvOpSetDataMode);
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  result = (Bool (GvOperatorData::*)(GvNode *,GvDataType,void *,GvOpSetDataMode)) ((arg1)->SetData);
  
  char buf[128];
  char *data = SWIG_PackData(buf, (void *)&result, sizeof(result));
  *data = '\0';
  jresult = SWIG_csharp_string_callback(buf);
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OPERATORPLUGIN_IsSetDataAllowed_set(void * jarg1, char * jarg2) {
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  Bool (GvOperatorData::*arg2)(GvNode *,GvDataType,void *,GvOpSetDataMode) ;
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  
  SWIG_UnpackData(jarg2, (void *)&arg2, sizeof(arg2));
  
  if (arg1) (arg1)->IsSetDataAllowed = arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OPERATORPLUGIN_IsSetDataAllowed_get(void * jarg1) {
  char * jresult ;
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  Bool (GvOperatorData::*result)(GvNode *,GvDataType,void *,GvOpSetDataMode);
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  result = (Bool (GvOperatorData::*)(GvNode *,GvDataType,void *,GvOpSetDataMode)) ((arg1)->IsSetDataAllowed);
  
  char buf[128];
  char *data = SWIG_PackData(buf, (void *)&result, sizeof(result));
  *data = '\0';
  jresult = SWIG_csharp_string_callback(buf);
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OPERATORPLUGIN_FillPortMenu_set(void * jarg1, char * jarg2) {
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  LONG (GvOperatorData::*arg2)(GvNode *,BaseContainer &,LONG,LONG) ;
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  
  SWIG_UnpackData(jarg2, (void *)&arg2, sizeof(arg2));
  
  if (arg1) (arg1)->FillPortMenu = arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OPERATORPLUGIN_FillPortMenu_get(void * jarg1) {
  char * jresult ;
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  LONG (GvOperatorData::*result)(GvNode *,BaseContainer &,LONG,LONG);
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  result = (LONG (GvOperatorData::*)(GvNode *,BaseContainer &,LONG,LONG)) ((arg1)->FillPortMenu);
  
  char buf[128];
  char *data = SWIG_PackData(buf, (void *)&result, sizeof(result));
  *data = '\0';
  jresult = SWIG_csharp_string_callback(buf);
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OPERATORPLUGIN_PortMenuCommand_set(void * jarg1, char * jarg2) {
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  Bool (GvOperatorData::*arg2)(GvNode *,LONG,LONG,LONG,LONG) ;
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  
  SWIG_UnpackData(jarg2, (void *)&arg2, sizeof(arg2));
  
  if (arg1) (arg1)->PortMenuCommand = arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OPERATORPLUGIN_PortMenuCommand_get(void * jarg1) {
  char * jresult ;
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  Bool (GvOperatorData::*result)(GvNode *,LONG,LONG,LONG,LONG);
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  result = (Bool (GvOperatorData::*)(GvNode *,LONG,LONG,LONG,LONG)) ((arg1)->PortMenuCommand);
  
  char buf[128];
  char *data = SWIG_PackData(buf, (void *)&result, sizeof(result));
  *data = '\0';
  jresult = SWIG_csharp_string_callback(buf);
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OPERATORPLUGIN_FillOperatorMenu_set(void * jarg1, char * jarg2) {
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  LONG (GvOperatorData::*arg2)(GvNode *,BaseContainer &,LONG) ;
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  
  SWIG_UnpackData(jarg2, (void *)&arg2, sizeof(arg2));
  
  if (arg1) (arg1)->FillOperatorMenu = arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OPERATORPLUGIN_FillOperatorMenu_get(void * jarg1) {
  char * jresult ;
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  LONG (GvOperatorData::*result)(GvNode *,BaseContainer &,LONG);
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  result = (LONG (GvOperatorData::*)(GvNode *,BaseContainer &,LONG)) ((arg1)->FillOperatorMenu);
  
  char buf[128];
  char *data = SWIG_PackData(buf, (void *)&result, sizeof(result));
  *data = '\0';
  jresult = SWIG_csharp_string_callback(buf);
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OPERATORPLUGIN_OperatorMenuCommand_set(void * jarg1, char * jarg2) {
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  Bool (GvOperatorData::*arg2)(GvNode *,LONG,LONG,LONG) ;
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  
  SWIG_UnpackData(jarg2, (void *)&arg2, sizeof(arg2));
  
  if (arg1) (arg1)->OperatorMenuCommand = arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OPERATORPLUGIN_OperatorMenuCommand_get(void * jarg1) {
  char * jresult ;
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  Bool (GvOperatorData::*result)(GvNode *,LONG,LONG,LONG);
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  result = (Bool (GvOperatorData::*)(GvNode *,LONG,LONG,LONG)) ((arg1)->OperatorMenuCommand);
  
  char buf[128];
  char *data = SWIG_PackData(buf, (void *)&result, sizeof(result));
  *data = '\0';
  jresult = SWIG_csharp_string_callback(buf);
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OPERATORPLUGIN_FillPortsMenu_set(void * jarg1, char * jarg2) {
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  LONG (GvOperatorData::*arg2)(GvNode *,BaseContainer &,BaseContainer &,GvValueID,GvPortIO,LONG) ;
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  
  SWIG_UnpackData(jarg2, (void *)&arg2, sizeof(arg2));
  
  if (arg1) (arg1)->FillPortsMenu = arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OPERATORPLUGIN_FillPortsMenu_get(void * jarg1) {
  char * jresult ;
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  LONG (GvOperatorData::*result)(GvNode *,BaseContainer &,BaseContainer &,GvValueID,GvPortIO,LONG);
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  result = (LONG (GvOperatorData::*)(GvNode *,BaseContainer &,BaseContainer &,GvValueID,GvPortIO,LONG)) ((arg1)->FillPortsMenu);
  
  char buf[128];
  char *data = SWIG_PackData(buf, (void *)&result, sizeof(result));
  *data = '\0';
  jresult = SWIG_csharp_string_callback(buf);
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OPERATORPLUGIN_BodyMessage_set(void * jarg1, char * jarg2) {
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  Bool (GvOperatorData::*arg2)(GvNode *,GvNodeGUI *,LONG,LONG,LONG,LONG,BaseContainer const &) ;
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  
  SWIG_UnpackData(jarg2, (void *)&arg2, sizeof(arg2));
  
  if (arg1) (arg1)->BodyMessage = arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OPERATORPLUGIN_BodyMessage_get(void * jarg1) {
  char * jresult ;
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  Bool (GvOperatorData::*result)(GvNode *,GvNodeGUI *,LONG,LONG,LONG,LONG,BaseContainer const &);
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  result = (Bool (GvOperatorData::*)(GvNode *,GvNodeGUI *,LONG,LONG,LONG,LONG,BaseContainer const &)) ((arg1)->BodyMessage);
  
  char buf[128];
  char *data = SWIG_PackData(buf, (void *)&result, sizeof(result));
  *data = '\0';
  jresult = SWIG_csharp_string_callback(buf);
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OPERATORPLUGIN_EditSettings_set(void * jarg1, char * jarg2) {
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  Bool (GvOperatorData::*arg2)(GvNode *,GvNodeGUI *) ;
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  
  SWIG_UnpackData(jarg2, (void *)&arg2, sizeof(arg2));
  
  if (arg1) (arg1)->EditSettings = arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OPERATORPLUGIN_EditSettings_get(void * jarg1) {
  char * jresult ;
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  Bool (GvOperatorData::*result)(GvNode *,GvNodeGUI *);
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  result = (Bool (GvOperatorData::*)(GvNode *,GvNodeGUI *)) ((arg1)->EditSettings);
  
  char buf[128];
  char *data = SWIG_PackData(buf, (void *)&result, sizeof(result));
  *data = '\0';
  jresult = SWIG_csharp_string_callback(buf);
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OPERATORPLUGIN_GetErrorString_set(void * jarg1, char * jarg2) {
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  String (GvOperatorData::*arg2)(GvNode *,LONG) ;
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  
  SWIG_UnpackData(jarg2, (void *)&arg2, sizeof(arg2));
  
  if (arg1) (arg1)->GetErrorString = (String const (GvOperatorData::*)(GvNode *,LONG))arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OPERATORPLUGIN_GetErrorString_get(void * jarg1) {
  char * jresult ;
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  String (GvOperatorData::*result)(GvNode *,LONG);
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  result = (String (GvOperatorData::*)(GvNode *,LONG)) ((arg1)->GetErrorString);
  
  char buf[128];
  char *data = SWIG_PackData(buf, (void *)&result, sizeof(result));
  *data = '\0';
  jresult = SWIG_csharp_string_callback(buf);
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OPERATORPLUGIN_SceneDraw_set(void * jarg1, char * jarg2) {
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  Bool (GvOperatorData::*arg2)(GvNode *,BaseDraw *,BaseDrawHelp *,BaseThread *,LONG,void *,ULONG) ;
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  
  SWIG_UnpackData(jarg2, (void *)&arg2, sizeof(arg2));
  
  if (arg1) (arg1)->SceneDraw = arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OPERATORPLUGIN_SceneDraw_get(void * jarg1) {
  char * jresult ;
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  Bool (GvOperatorData::*result)(GvNode *,BaseDraw *,BaseDrawHelp *,BaseThread *,LONG,void *,ULONG);
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  result = (Bool (GvOperatorData::*)(GvNode *,BaseDraw *,BaseDrawHelp *,BaseThread *,LONG,void *,ULONG)) ((arg1)->SceneDraw);
  
  char buf[128];
  char *data = SWIG_PackData(buf, (void *)&result, sizeof(result));
  *data = '\0';
  jresult = SWIG_csharp_string_callback(buf);
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OPERATORPLUGIN_GetMainID_set(void * jarg1, char * jarg2) {
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  LONG (GvOperatorData::*arg2)(GvNode *,GvPortIO,DescID const &) ;
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  
  SWIG_UnpackData(jarg2, (void *)&arg2, sizeof(arg2));
  
  if (arg1) (arg1)->GetMainID = arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OPERATORPLUGIN_GetMainID_get(void * jarg1) {
  char * jresult ;
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  LONG (GvOperatorData::*result)(GvNode *,GvPortIO,DescID const &);
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  result = (LONG (GvOperatorData::*)(GvNode *,GvPortIO,DescID const &)) ((arg1)->GetMainID);
  
  char buf[128];
  char *data = SWIG_PackData(buf, (void *)&result, sizeof(result));
  *data = '\0';
  jresult = SWIG_csharp_string_callback(buf);
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OPERATORPLUGIN_GetDescID_set(void * jarg1, char * jarg2) {
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  DescID (GvOperatorData::*arg2)(GvNode *,GvPortIO,LONG) ;
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  
  SWIG_UnpackData(jarg2, (void *)&arg2, sizeof(arg2));
  
  if (arg1) (arg1)->GetDescID = (DescID const (GvOperatorData::*)(GvNode *,GvPortIO,LONG))arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OPERATORPLUGIN_GetDescID_get(void * jarg1) {
  char * jresult ;
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  DescID (GvOperatorData::*result)(GvNode *,GvPortIO,LONG);
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  result = (DescID (GvOperatorData::*)(GvNode *,GvPortIO,LONG)) ((arg1)->GetDescID);
  
  char buf[128];
  char *data = SWIG_PackData(buf, (void *)&result, sizeof(result));
  *data = '\0';
  jresult = SWIG_csharp_string_callback(buf);
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OPERATORPLUGIN_CreatePortDescriptionCache_set(void * jarg1, char * jarg2) {
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  Bool (GvOperatorData::*arg2)(GvNode *,Bool) ;
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  
  SWIG_UnpackData(jarg2, (void *)&arg2, sizeof(arg2));
  
  if (arg1) (arg1)->CreatePortDescriptionCache = arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OPERATORPLUGIN_CreatePortDescriptionCache_get(void * jarg1) {
  char * jresult ;
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  Bool (GvOperatorData::*result)(GvNode *,Bool);
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  result = (Bool (GvOperatorData::*)(GvNode *,Bool)) ((arg1)->CreatePortDescriptionCache);
  
  char buf[128];
  char *data = SWIG_PackData(buf, (void *)&result, sizeof(result));
  *data = '\0';
  jresult = SWIG_csharp_string_callback(buf);
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OPERATORPLUGIN_FreePortDescriptionCache_set(void * jarg1, char * jarg2) {
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  void (GvOperatorData::*arg2)(GvNode *) ;
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  
  SWIG_UnpackData(jarg2, (void *)&arg2, sizeof(arg2));
  
  if (arg1) (arg1)->FreePortDescriptionCache = arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OPERATORPLUGIN_FreePortDescriptionCache_get(void * jarg1) {
  char * jresult ;
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  void (GvOperatorData::*result)(GvNode *);
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  result = (void (GvOperatorData::*)(GvNode *)) ((arg1)->FreePortDescriptionCache);
  
  char buf[128];
  char *data = SWIG_PackData(buf, (void *)&result, sizeof(result));
  *data = '\0';
  jresult = SWIG_csharp_string_callback(buf);
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OPERATORPLUGIN_reserved_set(void * jarg1, void * jarg2) {
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  void **arg2 ;
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  arg2 = (void **)jarg2; 
  {
    size_t ii;
    void * *b = (void * *) arg1->reserved;
    for (ii = 0; ii < (size_t)(64-32) *C4DPL_MEMBERMULTIPLIER-3; ii++) b[ii] = *((void * *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OPERATORPLUGIN_reserved_get(void * jarg1) {
  void * jresult ;
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  void **result = 0 ;
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  result = (void **)(void **) ((arg1)->reserved);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OPERATORPLUGIN() {
  void * jresult ;
  OPERATORPLUGIN *result = 0 ;
  
  result = (OPERATORPLUGIN *)new OPERATORPLUGIN();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OPERATORPLUGIN(void * jarg1) {
  OPERATORPLUGIN *arg1 = (OPERATORPLUGIN *) 0 ;
  
  arg1 = (OPERATORPLUGIN *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PRIM_PLANE_get() {
  int jresult ;
  int result;
  
  result = (int)PRIM_PLANE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PRIM_PLANE_XY_get() {
  int jresult ;
  int result;
  
  result = (int)PRIM_PLANE_XY;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PRIM_PLANE_ZY_get() {
  int jresult ;
  int result;
  
  result = (int)PRIM_PLANE_ZY;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PRIM_PLANE_XZ_get() {
  int jresult ;
  int result;
  
  result = (int)PRIM_PLANE_XZ;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PRIM_REVERSE_get() {
  int jresult ;
  int result;
  
  result = (int)PRIM_REVERSE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SPLINEOBJECT_INTERPOL_get() {
  int jresult ;
  int result;
  
  result = (int)SPLINEOBJECT_INTERPOL;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SPLINEOBJECT_TYPE_get() {
  int jresult ;
  int result;
  
  result = (int)SPLINEOBJECT_TYPE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SPLINEOBJECT_TYPE_LINEAR_get() {
  int jresult ;
  int result;
  
  result = (int)SPLINEOBJECT_TYPE_LINEAR;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SPLINEOBJECT_TYPE_CUBIC_get() {
  int jresult ;
  int result;
  
  result = (int)SPLINEOBJECT_TYPE_CUBIC;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SPLINEOBJECT_TYPE_AKIMA_get() {
  int jresult ;
  int result;
  
  result = (int)SPLINEOBJECT_TYPE_AKIMA;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SPLINEOBJECT_TYPE_BSPLINE_get() {
  int jresult ;
  int result;
  
  result = (int)SPLINEOBJECT_TYPE_BSPLINE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SPLINEOBJECT_TYPE_BEZIER_get() {
  int jresult ;
  int result;
  
  result = (int)SPLINEOBJECT_TYPE_BEZIER;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SPLINEOBJECT_INTERPOLATION_get() {
  int jresult ;
  int result;
  
  result = (int)SPLINEOBJECT_INTERPOLATION;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SPLINEOBJECT_INTERPOLATION_NONE_get() {
  int jresult ;
  int result;
  
  result = (int)SPLINEOBJECT_INTERPOLATION_NONE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SPLINEOBJECT_INTERPOLATION_NATURAL_get() {
  int jresult ;
  int result;
  
  result = (int)SPLINEOBJECT_INTERPOLATION_NATURAL;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SPLINEOBJECT_INTERPOLATION_UNIFORM_get() {
  int jresult ;
  int result;
  
  result = (int)SPLINEOBJECT_INTERPOLATION_UNIFORM;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SPLINEOBJECT_INTERPOLATION_ADAPTIVE_get() {
  int jresult ;
  int result;
  
  result = (int)SPLINEOBJECT_INTERPOLATION_ADAPTIVE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SPLINEOBJECT_INTERPOLATION_SUBDIV_get() {
  int jresult ;
  int result;
  
  result = (int)SPLINEOBJECT_INTERPOLATION_SUBDIV;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SPLINEOBJECT_CLOSED_get() {
  int jresult ;
  int result;
  
  result = (int)SPLINEOBJECT_CLOSED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SPLINEOBJECT_SUB_get() {
  int jresult ;
  int result;
  
  result = (int)SPLINEOBJECT_SUB;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SPLINEOBJECT_ANGLE_get() {
  int jresult ;
  int result;
  
  result = (int)SPLINEOBJECT_ANGLE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SPLINEOBJECT_MAXIMUMLENGTH_get() {
  int jresult ;
  int result;
  
  result = (int)SPLINEOBJECT_MAXIMUMLENGTH;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_API_VERSION_get() {
  int jresult ;
  int result;
  
  result = (int)(12000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ModelingCommandData__SWIG_0() {
  void * jresult ;
  ModelingCommandData *result = 0 ;
  
  result = (ModelingCommandData *)new ModelingCommandData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ModelingCommandData_doc_set(void * jarg1, void * jarg2) {
  ModelingCommandData *arg1 = (ModelingCommandData *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  
  arg1 = (ModelingCommandData *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  if (arg1) (arg1)->doc = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ModelingCommandData_doc_get(void * jarg1) {
  void * jresult ;
  ModelingCommandData *arg1 = (ModelingCommandData *) 0 ;
  BaseDocument *result = 0 ;
  
  arg1 = (ModelingCommandData *)jarg1; 
  result = (BaseDocument *) ((arg1)->doc);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ModelingCommandData_op_set(void * jarg1, void * jarg2) {
  ModelingCommandData *arg1 = (ModelingCommandData *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  
  arg1 = (ModelingCommandData *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  if (arg1) (arg1)->op = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ModelingCommandData_op_get(void * jarg1) {
  void * jresult ;
  ModelingCommandData *arg1 = (ModelingCommandData *) 0 ;
  BaseObject *result = 0 ;
  
  arg1 = (ModelingCommandData *)jarg1; 
  result = (BaseObject *) ((arg1)->op);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ModelingCommandData_bc_set(void * jarg1, void * jarg2) {
  ModelingCommandData *arg1 = (ModelingCommandData *) 0 ;
  BaseContainer *arg2 = (BaseContainer *) 0 ;
  
  arg1 = (ModelingCommandData *)jarg1; 
  arg2 = (BaseContainer *)jarg2; 
  if (arg1) (arg1)->bc = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ModelingCommandData_bc_get(void * jarg1) {
  void * jresult ;
  ModelingCommandData *arg1 = (ModelingCommandData *) 0 ;
  BaseContainer *result = 0 ;
  
  arg1 = (ModelingCommandData *)jarg1; 
  result = (BaseContainer *) ((arg1)->bc);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ModelingCommandData_mode_set(void * jarg1, int jarg2) {
  ModelingCommandData *arg1 = (ModelingCommandData *) 0 ;
  MODELINGCOMMANDMODE arg2 ;
  
  arg1 = (ModelingCommandData *)jarg1; 
  arg2 = (MODELINGCOMMANDMODE)jarg2; 
  if (arg1) (arg1)->mode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ModelingCommandData_mode_get(void * jarg1) {
  int jresult ;
  ModelingCommandData *arg1 = (ModelingCommandData *) 0 ;
  MODELINGCOMMANDMODE result;
  
  arg1 = (ModelingCommandData *)jarg1; 
  result = (MODELINGCOMMANDMODE) ((arg1)->mode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ModelingCommandData_flags_set(void * jarg1, int jarg2) {
  ModelingCommandData *arg1 = (ModelingCommandData *) 0 ;
  MODELINGCOMMANDFLAGS arg2 ;
  
  arg1 = (ModelingCommandData *)jarg1; 
  arg2 = (MODELINGCOMMANDFLAGS)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ModelingCommandData_flags_get(void * jarg1) {
  int jresult ;
  ModelingCommandData *arg1 = (ModelingCommandData *) 0 ;
  MODELINGCOMMANDFLAGS result;
  
  arg1 = (ModelingCommandData *)jarg1; 
  result = (MODELINGCOMMANDFLAGS) ((arg1)->flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ModelingCommandData_arr_set(void * jarg1, void * jarg2) {
  ModelingCommandData *arg1 = (ModelingCommandData *) 0 ;
  AtomArray *arg2 = (AtomArray *) 0 ;
  
  arg1 = (ModelingCommandData *)jarg1; 
  arg2 = (AtomArray *)jarg2; 
  if (arg1) (arg1)->arr = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ModelingCommandData_arr_get(void * jarg1) {
  void * jresult ;
  ModelingCommandData *arg1 = (ModelingCommandData *) 0 ;
  AtomArray *result = 0 ;
  
  arg1 = (ModelingCommandData *)jarg1; 
  result = (AtomArray *) ((arg1)->arr);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ModelingCommandData_result_set(void * jarg1, void * jarg2) {
  ModelingCommandData *arg1 = (ModelingCommandData *) 0 ;
  AtomArray *arg2 = (AtomArray *) 0 ;
  
  arg1 = (ModelingCommandData *)jarg1; 
  arg2 = (AtomArray *)jarg2; 
  if (arg1) (arg1)->result = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ModelingCommandData_result_get(void * jarg1) {
  void * jresult ;
  ModelingCommandData *arg1 = (ModelingCommandData *) 0 ;
  AtomArray *result = 0 ;
  
  arg1 = (ModelingCommandData *)jarg1; 
  result = (AtomArray *) ((arg1)->result);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ModelingCommandData__SWIG_1(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5, void * jarg6, void * jarg7) {
  void * jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  BaseContainer *arg3 = (BaseContainer *) 0 ;
  MODELINGCOMMANDMODE arg4 ;
  MODELINGCOMMANDFLAGS arg5 ;
  AtomArray *arg6 = (AtomArray *) 0 ;
  AtomArray *arg7 = (AtomArray *) 0 ;
  ModelingCommandData *result = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  arg3 = (BaseContainer *)jarg3; 
  arg4 = (MODELINGCOMMANDMODE)jarg4; 
  arg5 = (MODELINGCOMMANDFLAGS)jarg5; 
  arg6 = (AtomArray *)jarg6; 
  arg7 = (AtomArray *)jarg7; 
  result = (ModelingCommandData *)new_ModelingCommandData__SWIG_1(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ModelingCommandData__SWIG_2(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5, void * jarg6) {
  void * jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  BaseContainer *arg3 = (BaseContainer *) 0 ;
  MODELINGCOMMANDMODE arg4 ;
  MODELINGCOMMANDFLAGS arg5 ;
  AtomArray *arg6 = (AtomArray *) 0 ;
  ModelingCommandData *result = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  arg3 = (BaseContainer *)jarg3; 
  arg4 = (MODELINGCOMMANDMODE)jarg4; 
  arg5 = (MODELINGCOMMANDFLAGS)jarg5; 
  arg6 = (AtomArray *)jarg6; 
  result = (ModelingCommandData *)new_ModelingCommandData__SWIG_1(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ModelingCommandData__SWIG_3(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5) {
  void * jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  BaseContainer *arg3 = (BaseContainer *) 0 ;
  MODELINGCOMMANDMODE arg4 ;
  MODELINGCOMMANDFLAGS arg5 ;
  ModelingCommandData *result = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  arg3 = (BaseContainer *)jarg3; 
  arg4 = (MODELINGCOMMANDMODE)jarg4; 
  arg5 = (MODELINGCOMMANDFLAGS)jarg5; 
  result = (ModelingCommandData *)new_ModelingCommandData__SWIG_1(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ModelingCommandData__SWIG_4(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  void * jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  BaseContainer *arg3 = (BaseContainer *) 0 ;
  MODELINGCOMMANDMODE arg4 ;
  ModelingCommandData *result = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  arg3 = (BaseContainer *)jarg3; 
  arg4 = (MODELINGCOMMANDMODE)jarg4; 
  result = (ModelingCommandData *)new_ModelingCommandData__SWIG_1(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ModelingCommandData__SWIG_5(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  BaseContainer *arg3 = (BaseContainer *) 0 ;
  ModelingCommandData *result = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  arg3 = (BaseContainer *)jarg3; 
  result = (ModelingCommandData *)new_ModelingCommandData__SWIG_1(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ModelingCommandData__SWIG_6(void * jarg1, void * jarg2) {
  void * jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  BaseObject *arg2 = (BaseObject *) 0 ;
  ModelingCommandData *result = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  arg2 = (BaseObject *)jarg2; 
  result = (ModelingCommandData *)new_ModelingCommandData__SWIG_1(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ModelingCommandData__SWIG_7(void * jarg1) {
  void * jresult ;
  BaseDocument *arg1 = (BaseDocument *) 0 ;
  ModelingCommandData *result = 0 ;
  
  arg1 = (BaseDocument *)jarg1; 
  result = (ModelingCommandData *)new_ModelingCommandData__SWIG_1(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ModelingCommandData(void * jarg1) {
  ModelingCommandData *arg1 = (ModelingCommandData *) 0 ;
  
  arg1 = (ModelingCommandData *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CUSTOMDATATYPE_INFO_HASSUBDESCRIPTION_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 0));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CUSTOMDATATYPE_INFO_NEEDDATAFORSUBDESC_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 1));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CUSTOMDATATYPE_INFO_TOGGLEDISPLAY_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 2));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CUSTOMDATATYPE_INFO_DONTREGISTERGVTYPE_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 3));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CUSTOMDATATYPE_INFO_SUBDESCRIPTIONDISABLEGUI_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 4));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CUSTOMDATATYPE_INFO_UNDOSAMECUSTOMGUI_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 5));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CUSTOMDATATYPE_INFO_HASSUBDESCRIPTION_NOANIM_get() {
  int jresult ;
  int result;
  
  result = (int)(((1 << 0)|(1 << 6)));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CUSTOMDATATYPE_INFO_LOADSAVE_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 7));
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CustomDataType() {
  void * jresult ;
  CustomDataType *result = 0 ;
  
  result = (CustomDataType *)new CustomDataType();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CustomDataType(void * jarg1) {
  CustomDataType *arg1 = (CustomDataType *) 0 ;
  
  arg1 = (CustomDataType *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GvHelper_data_set(void * jarg1, void * jarg2) {
  GvHelper *arg1 = (GvHelper *) 0 ;
  CustomDataType **arg2 = (CustomDataType **) 0 ;
  
  arg1 = (GvHelper *)jarg1; 
  arg2 = (CustomDataType **)jarg2; 
  if (arg1) (arg1)->data = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GvHelper_data_get(void * jarg1) {
  void * jresult ;
  GvHelper *arg1 = (GvHelper *) 0 ;
  CustomDataType **result = 0 ;
  
  arg1 = (GvHelper *)jarg1; 
  result = (CustomDataType **) ((arg1)->data);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GvHelper() {
  void * jresult ;
  GvHelper *result = 0 ;
  
  result = (GvHelper *)new GvHelper();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GvHelper(void * jarg1) {
  GvHelper *arg1 = (GvHelper *) 0 ;
  
  arg1 = (GvHelper *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CustomDataTypeClass_GetId(void * jarg1) {
  int jresult ;
  CustomDataTypeClass *arg1 = (CustomDataTypeClass *) 0 ;
  LONG result;
  
  arg1 = (CustomDataTypeClass *)jarg1; 
  result = (arg1)->GetId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CustomDataTypeClass_GetDataID(void * jarg1) {
  int jresult ;
  CustomDataTypeClass *arg1 = (CustomDataTypeClass *) 0 ;
  LONG result;
  
  arg1 = (CustomDataTypeClass *)jarg1; 
  result = (arg1)->GetDataID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CustomDataTypeClass_GetValueID(void * jarg1) {
  int jresult ;
  CustomDataTypeClass *arg1 = (CustomDataTypeClass *) 0 ;
  LONG result;
  
  arg1 = (CustomDataTypeClass *)jarg1; 
  result = (arg1)->GetValueID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CustomDataTypeClass_AllocData(void * jarg1) {
  void * jresult ;
  CustomDataTypeClass *arg1 = (CustomDataTypeClass *) 0 ;
  CustomDataType *result = 0 ;
  
  arg1 = (CustomDataTypeClass *)jarg1; 
  result = (CustomDataType *)(arg1)->AllocData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CustomDataTypeClass_FreeData(void * jarg1, void * jarg2) {
  CustomDataTypeClass *arg1 = (CustomDataTypeClass *) 0 ;
  CustomDataType *arg2 = (CustomDataType *) 0 ;
  
  arg1 = (CustomDataTypeClass *)jarg1; 
  arg2 = (CustomDataType *)jarg2; 
  (arg1)->FreeData(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CustomDataTypeClass_CopyData(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  CustomDataTypeClass *arg1 = (CustomDataTypeClass *) 0 ;
  CustomDataType *arg2 = (CustomDataType *) 0 ;
  CustomDataType *arg3 = (CustomDataType *) 0 ;
  AliasTrans *arg4 = (AliasTrans *) 0 ;
  Bool result;
  
  arg1 = (CustomDataTypeClass *)jarg1; 
  arg2 = (CustomDataType *)jarg2; 
  arg3 = (CustomDataType *)jarg3; 
  arg4 = (AliasTrans *)jarg4; 
  result = (arg1)->CopyData((CustomDataType const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CustomDataTypeClass_Compare(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  CustomDataTypeClass *arg1 = (CustomDataTypeClass *) 0 ;
  CustomDataType *arg2 = (CustomDataType *) 0 ;
  CustomDataType *arg3 = (CustomDataType *) 0 ;
  LONG result;
  
  arg1 = (CustomDataTypeClass *)jarg1; 
  arg2 = (CustomDataType *)jarg2; 
  arg3 = (CustomDataType *)jarg3; 
  result = (arg1)->Compare((CustomDataType const *)arg2,(CustomDataType const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CustomDataTypeClass_WriteData(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  CustomDataTypeClass *arg1 = (CustomDataTypeClass *) 0 ;
  CustomDataType *arg2 = (CustomDataType *) 0 ;
  HyperFile *arg3 = (HyperFile *) 0 ;
  Bool result;
  
  arg1 = (CustomDataTypeClass *)jarg1; 
  arg2 = (CustomDataType *)jarg2; 
  arg3 = (HyperFile *)jarg3; 
  result = (arg1)->WriteData((CustomDataType const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CustomDataTypeClass_ReadData(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  CustomDataTypeClass *arg1 = (CustomDataTypeClass *) 0 ;
  CustomDataType *arg2 = (CustomDataType *) 0 ;
  HyperFile *arg3 = (HyperFile *) 0 ;
  LONG arg4 ;
  Bool result;
  
  arg1 = (CustomDataTypeClass *)jarg1; 
  arg2 = (CustomDataType *)jarg2; 
  arg3 = (HyperFile *)jarg3; 
  arg4 = (LONG)jarg4; 
  result = (arg1)->ReadData(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CustomDataTypeClass_GetResourceSym(void * jarg1) {
  void * jresult ;
  CustomDataTypeClass *arg1 = (CustomDataTypeClass *) 0 ;
  CHAR *result = 0 ;
  
  arg1 = (CustomDataTypeClass *)jarg1; 
  result = (CHAR *)(arg1)->GetResourceSym();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CustomDataTypeClass_GetProperties(void * jarg1) {
  void * jresult ;
  CustomDataTypeClass *arg1 = (CustomDataTypeClass *) 0 ;
  CustomProperty *result = 0 ;
  
  arg1 = (CustomDataTypeClass *)jarg1; 
  result = (CustomProperty *)(arg1)->GetProperties();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CustomDataTypeClass_GetDefaultProperties(void * jarg1, void * jarg2) {
  CustomDataTypeClass *arg1 = (CustomDataTypeClass *) 0 ;
  BaseContainer *arg2 = 0 ;
  
  arg1 = (CustomDataTypeClass *)jarg1; 
  arg2 = (BaseContainer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return ;
  } 
  (arg1)->GetDefaultProperties(*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CustomDataTypeClass_GetConversionsFrom(void * jarg1, void * jarg2) {
  int jresult ;
  CustomDataTypeClass *arg1 = (CustomDataTypeClass *) 0 ;
  LONG **arg2 = 0 ;
  LONG result;
  
  arg1 = (CustomDataTypeClass *)jarg1; 
  arg2 = (LONG **)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG *& type is null", 0);
    return 0;
  } 
  result = (arg1)->GetConversionsFrom(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CustomDataTypeClass_ConvertFromGv(void * jarg1, int jarg2, void * jarg3, int jarg4, void * jarg5) {
  int jresult ;
  CustomDataTypeClass *arg1 = (CustomDataTypeClass *) 0 ;
  LONG arg2 ;
  void *arg3 = (void *) (void *)0 ;
  LONG arg4 ;
  CustomDataType *arg5 = (CustomDataType *) 0 ;
  GvError result;
  
  arg1 = (CustomDataTypeClass *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (LONG)jarg4; 
  arg5 = (CustomDataType *)jarg5; 
  result = (GvError)(arg1)->ConvertFromGv(arg2,(void const *)arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CustomDataTypeClass_GetConversionsTo(void * jarg1, void * jarg2) {
  int jresult ;
  CustomDataTypeClass *arg1 = (CustomDataTypeClass *) 0 ;
  LONG **arg2 = 0 ;
  LONG result;
  
  arg1 = (CustomDataTypeClass *)jarg1; 
  arg2 = (LONG **)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG *& type is null", 0);
    return 0;
  } 
  result = (arg1)->GetConversionsTo(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CustomDataTypeClass_ConvertToGv(void * jarg1, int jarg2, void * jarg3, void * jarg4, int jarg5) {
  int jresult ;
  CustomDataTypeClass *arg1 = (CustomDataTypeClass *) 0 ;
  LONG arg2 ;
  CustomDataType *arg3 = (CustomDataType *) 0 ;
  void *arg4 = (void *) 0 ;
  LONG arg5 ;
  GvError result;
  
  arg1 = (CustomDataTypeClass *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (CustomDataType *)jarg3; 
  arg4 = (void *)jarg4; 
  arg5 = (LONG)jarg5; 
  result = (GvError)(arg1)->ConvertToGv(arg2,(CustomDataType const *)arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CustomDataTypeClass_ConvertToGeData(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  CustomDataTypeClass *arg1 = (CustomDataTypeClass *) 0 ;
  LONG arg2 ;
  CustomDataType *arg3 = (CustomDataType *) 0 ;
  GeData *arg4 = 0 ;
  GvError result;
  
  arg1 = (CustomDataTypeClass *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (CustomDataType *)jarg3; 
  arg4 = (GeData *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeData & type is null", 0);
    return 0;
  } 
  result = (GvError)(arg1)->ConvertToGeData(arg2,(CustomDataType const *)arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CustomDataTypeClass_GetCalculationFlags(void * jarg1) {
  int jresult ;
  CustomDataTypeClass *arg1 = (CustomDataTypeClass *) 0 ;
  GvValueFlags result;
  
  arg1 = (CustomDataTypeClass *)jarg1; 
  result = (GvValueFlags)(arg1)->GetCalculationFlags();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CustomDataTypeClass_Calculate(void * jarg1, int jarg2, void * jarg3, void * jarg4, void * jarg5, double jarg6) {
  int jresult ;
  CustomDataTypeClass *arg1 = (CustomDataTypeClass *) 0 ;
  LONG arg2 ;
  CustomDataType *arg3 = (CustomDataType *) 0 ;
  CustomDataType *arg4 = (CustomDataType *) 0 ;
  CustomDataType *arg5 = (CustomDataType *) 0 ;
  Real arg6 ;
  GvError result;
  
  arg1 = (CustomDataTypeClass *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (CustomDataType *)jarg3; 
  arg4 = (CustomDataType *)jarg4; 
  arg5 = (CustomDataType *)jarg5; 
  arg6 = (Real)jarg6; 
  result = (GvError)(arg1)->Calculate(arg2,(CustomDataType const *)arg3,(CustomDataType const *)arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CustomDataTypeClass_GetGvValueHandler(void * jarg1) {
  void * jresult ;
  CustomDataTypeClass *arg1 = (CustomDataTypeClass *) 0 ;
  GV_VALUE_HANDLER *result = 0 ;
  
  arg1 = (CustomDataTypeClass *)jarg1; 
  result = (GV_VALUE_HANDLER *)(arg1)->GetGvValueHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CustomDataTypeClass_ConvertGeDataToGv(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  CustomDataTypeClass *arg1 = (CustomDataTypeClass *) 0 ;
  GeData *arg2 = 0 ;
  void *arg3 = (void *) 0 ;
  LONG arg4 ;
  Bool result;
  
  arg1 = (CustomDataTypeClass *)jarg1; 
  arg2 = (GeData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeData const & type is null", 0);
    return 0;
  } 
  arg3 = (void *)jarg3; 
  arg4 = (LONG)jarg4; 
  result = (arg1)->ConvertGeDataToGv((GeData const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CustomDataTypeClass_ConvertGvToGeData(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  CustomDataTypeClass *arg1 = (CustomDataTypeClass *) 0 ;
  void *arg2 = (void *) (void *)0 ;
  LONG arg3 ;
  GeData *arg4 = 0 ;
  Bool result;
  
  arg1 = (CustomDataTypeClass *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (LONG)jarg3; 
  arg4 = (GeData *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeData & type is null", 0);
    return 0;
  } 
  result = (arg1)->ConvertGvToGeData((void const *)arg2,arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CustomDataTypeClass_GetDescription(void * jarg1) {
  unsigned int jresult ;
  CustomDataTypeClass *arg1 = (CustomDataTypeClass *) 0 ;
  Bool result;
  
  arg1 = (CustomDataTypeClass *)jarg1; 
  result = (arg1)->GetDescription();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CustomDataTypeClass__GetDescription(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  CustomDataTypeClass *arg1 = (CustomDataTypeClass *) 0 ;
  CustomDataType *arg2 = (CustomDataType *) 0 ;
  Description *arg3 = 0 ;
  DESCFLAGS_DESC *arg4 = 0 ;
  BaseContainer *arg5 = 0 ;
  DescID *arg6 = (DescID *) 0 ;
  Bool result;
  
  arg1 = (CustomDataTypeClass *)jarg1; 
  arg2 = (CustomDataType *)jarg2; 
  arg3 = (Description *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Description & type is null", 0);
    return 0;
  } 
  arg4 = (DESCFLAGS_DESC *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DESCFLAGS_DESC & type is null", 0);
    return 0;
  } 
  arg5 = (BaseContainer *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer const & type is null", 0);
    return 0;
  } 
  arg6 = (DescID *)jarg6; 
  result = (arg1)->_GetDescription((CustomDataType const *)arg2,*arg3,*arg4,(BaseContainer const &)*arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CustomDataTypeClass_GetParameter(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  CustomDataTypeClass *arg1 = (CustomDataTypeClass *) 0 ;
  CustomDataType *arg2 = (CustomDataType *) 0 ;
  DescID *arg3 = 0 ;
  GeData *arg4 = 0 ;
  DESCFLAGS_GET *arg5 = 0 ;
  Bool result;
  
  arg1 = (CustomDataTypeClass *)jarg1; 
  arg2 = (CustomDataType *)jarg2; 
  arg3 = (DescID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescID const & type is null", 0);
    return 0;
  } 
  arg4 = (GeData *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeData & type is null", 0);
    return 0;
  } 
  arg5 = (DESCFLAGS_GET *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DESCFLAGS_GET & type is null", 0);
    return 0;
  } 
  result = (arg1)->GetParameter((CustomDataType const *)arg2,(DescID const &)*arg3,*arg4,*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CustomDataTypeClass_SetDParameter(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  CustomDataTypeClass *arg1 = (CustomDataTypeClass *) 0 ;
  CustomDataType *arg2 = (CustomDataType *) 0 ;
  DescID *arg3 = 0 ;
  GeData *arg4 = 0 ;
  DESCFLAGS_SET *arg5 = 0 ;
  Bool result;
  
  arg1 = (CustomDataTypeClass *)jarg1; 
  arg2 = (CustomDataType *)jarg2; 
  arg3 = (DescID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescID const & type is null", 0);
    return 0;
  } 
  arg4 = (GeData *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeData const & type is null", 0);
    return 0;
  } 
  arg5 = (DESCFLAGS_SET *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DESCFLAGS_SET & type is null", 0);
    return 0;
  } 
  result = (arg1)->SetDParameter(arg2,(DescID const &)*arg3,(GeData const &)*arg4,*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CustomDataTypeClass_GetEnabling(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  CustomDataTypeClass *arg1 = (CustomDataTypeClass *) 0 ;
  CustomDataType *arg2 = (CustomDataType *) 0 ;
  DescID *arg3 = 0 ;
  GeData *arg4 = 0 ;
  DESCFLAGS_ENABLE *arg5 = 0 ;
  BaseContainer *arg6 = (BaseContainer *) 0 ;
  Bool result;
  
  arg1 = (CustomDataTypeClass *)jarg1; 
  arg2 = (CustomDataType *)jarg2; 
  arg3 = (DescID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescID const & type is null", 0);
    return 0;
  } 
  arg4 = (GeData *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeData const & type is null", 0);
    return 0;
  } 
  arg5 = (DESCFLAGS_ENABLE *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DESCFLAGS_ENABLE & type is null", 0);
    return 0;
  } 
  arg6 = (BaseContainer *)jarg6; 
  result = (arg1)->GetEnabling((CustomDataType const *)arg2,(DescID const &)*arg3,(GeData const &)*arg4,*arg5,(BaseContainer const *)arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CustomDataTypeClass_InterpolateKeys(void * jarg1, void * jarg2, void * jarg3, void * jarg4, double jarg5, int jarg6) {
  unsigned int jresult ;
  CustomDataTypeClass *arg1 = (CustomDataTypeClass *) 0 ;
  GeData *arg2 = 0 ;
  GeData *arg3 = 0 ;
  GeData *arg4 = 0 ;
  Real arg5 ;
  LONG arg6 ;
  Bool result;
  
  arg1 = (CustomDataTypeClass *)jarg1; 
  arg2 = (GeData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeData & type is null", 0);
    return 0;
  } 
  arg3 = (GeData *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeData const & type is null", 0);
    return 0;
  } 
  arg4 = (GeData *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeData const & type is null", 0);
    return 0;
  } 
  arg5 = (Real)jarg5; 
  arg6 = (LONG)jarg6; 
  result = (arg1)->InterpolateKeys(*arg2,(GeData const &)*arg3,(GeData const &)*arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CustomDataTypeClass_CheckData(void * jarg1, void * jarg2, void * jarg3) {
  CustomDataTypeClass *arg1 = (CustomDataTypeClass *) 0 ;
  BaseContainer *arg2 = 0 ;
  GeData *arg3 = 0 ;
  
  arg1 = (CustomDataTypeClass *)jarg1; 
  arg2 = (BaseContainer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer const & type is null", 0);
    return ;
  } 
  arg3 = (GeData *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeData & type is null", 0);
    return ;
  } 
  (arg1)->CheckData((BaseContainer const &)*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CustomDataTypeClass(void * jarg1) {
  CustomDataTypeClass *arg1 = (CustomDataTypeClass *) 0 ;
  
  arg1 = (CustomDataTypeClass *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ResourceDataTypeClass_GetId(void * jarg1) {
  int jresult ;
  ResourceDataTypeClass *arg1 = (ResourceDataTypeClass *) 0 ;
  LONG result;
  
  arg1 = (ResourceDataTypeClass *)jarg1; 
  result = (arg1)->GetId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ResourceDataTypeClass_GetCustomDataType(void * jarg1) {
  int jresult ;
  ResourceDataTypeClass *arg1 = (ResourceDataTypeClass *) 0 ;
  LONG result;
  
  arg1 = (ResourceDataTypeClass *)jarg1; 
  result = (arg1)->GetCustomDataType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ResourceDataTypeClass_GetCustomDataTypePlugin(void * jarg1) {
  void * jresult ;
  ResourceDataTypeClass *arg1 = (ResourceDataTypeClass *) 0 ;
  CUSTOMDATATYPEPLUGIN *result = 0 ;
  
  arg1 = (ResourceDataTypeClass *)jarg1; 
  result = (CUSTOMDATATYPEPLUGIN *)(arg1)->GetCustomDataTypePlugin();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ResourceDataTypeClass_GetDefaultProperties(void * jarg1, void * jarg2) {
  ResourceDataTypeClass *arg1 = (ResourceDataTypeClass *) 0 ;
  BaseContainer *arg2 = 0 ;
  
  arg1 = (ResourceDataTypeClass *)jarg1; 
  arg2 = (BaseContainer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer & type is null", 0);
    return ;
  } 
  (arg1)->GetDefaultProperties(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ResourceDataTypeClass_GetResourceSym(void * jarg1) {
  void * jresult ;
  ResourceDataTypeClass *arg1 = (ResourceDataTypeClass *) 0 ;
  CHAR *result = 0 ;
  
  arg1 = (ResourceDataTypeClass *)jarg1; 
  result = (CHAR *)(arg1)->GetResourceSym();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ResourceDataTypeClass_GetProperties(void * jarg1) {
  void * jresult ;
  ResourceDataTypeClass *arg1 = (ResourceDataTypeClass *) 0 ;
  CustomProperty *result = 0 ;
  
  arg1 = (ResourceDataTypeClass *)jarg1; 
  result = (CustomProperty *)(arg1)->GetProperties();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ResourceDataTypeClass_GetDescription(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  ResourceDataTypeClass *arg1 = (ResourceDataTypeClass *) 0 ;
  CustomDataType *arg2 = (CustomDataType *) 0 ;
  Description *arg3 = 0 ;
  DESCFLAGS_DESC *arg4 = 0 ;
  BaseContainer *arg5 = 0 ;
  DescID *arg6 = (DescID *) 0 ;
  Bool result;
  
  arg1 = (ResourceDataTypeClass *)jarg1; 
  arg2 = (CustomDataType *)jarg2; 
  arg3 = (Description *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Description & type is null", 0);
    return 0;
  } 
  arg4 = (DESCFLAGS_DESC *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DESCFLAGS_DESC & type is null", 0);
    return 0;
  } 
  arg5 = (BaseContainer *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer const & type is null", 0);
    return 0;
  } 
  arg6 = (DescID *)jarg6; 
  result = (arg1)->GetDescription((CustomDataType const *)arg2,*arg3,*arg4,(BaseContainer const &)*arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ResourceDataTypeClass_CheckData(void * jarg1, void * jarg2, void * jarg3) {
  ResourceDataTypeClass *arg1 = (ResourceDataTypeClass *) 0 ;
  BaseContainer *arg2 = 0 ;
  GeData *arg3 = 0 ;
  
  arg1 = (ResourceDataTypeClass *)jarg1; 
  arg2 = (BaseContainer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BaseContainer const & type is null", 0);
    return ;
  } 
  arg3 = (GeData *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeData & type is null", 0);
    return ;
  } 
  (arg1)->CheckData((BaseContainer const &)*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ResourceDataTypeClass(void * jarg1) {
  ResourceDataTypeClass *arg1 = (ResourceDataTypeClass *) 0 ;
  
  arg1 = (ResourceDataTypeClass *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RegisterCustomDataTypePlugin(char * /* constString&_ctype */ jarg1, int jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  String *arg1 = 0 ;
  LONG arg2 ;
  CustomDataTypeClass *arg3 = (CustomDataTypeClass *) 0 ;
  LONG arg4 ;
  Bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (LONG)jarg2; 
  arg3 = (CustomDataTypeClass *)jarg3; 
  arg4 = (LONG)jarg4; 
  result = RegisterCustomDataTypePlugin((String const &)*arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RegisterResourceDataTypePlugin(char * /* constString&_ctype */ jarg1, int jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  String *arg1 = 0 ;
  LONG arg2 ;
  ResourceDataTypeClass *arg3 = (ResourceDataTypeClass *) 0 ;
  LONG arg4 ;
  Bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  String arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (LONG)jarg2; 
  arg3 = (ResourceDataTypeClass *)jarg3; 
  arg4 = (LONG)jarg4; 
  result = RegisterResourceDataTypePlugin((String const &)*arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_iCustomDataType_inex_Alloc() {
  void * jresult ;
  DescID *result = 0 ;
  
  result = (DescID *)iCustomDataType< DescID >::SWIGTEMPLATEDISAMBIGUATOR Alloc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_iCustomDataType_inex_Free(void * jarg1) {
  DescID **arg1 = 0 ;
  
  arg1 = (DescID **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DescID *& type is null", 0);
    return ;
  } 
  iCustomDataType< DescID >::SWIGTEMPLATEDISAMBIGUATOR Free(*arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_iCustomDataType_inex() {
  void * jresult ;
  iCustomDataType< DescID > *result = 0 ;
  
  result = (iCustomDataType< DescID > *)new iCustomDataType< DescID >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_iCustomDataType_inex(void * jarg1) {
  iCustomDataType< DescID > *arg1 = (iCustomDataType< DescID > *) 0 ;
  
  arg1 = (iCustomDataType< DescID > *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CUSTOMGUI_INEXCLUDE_LIST_get() {
  int jresult ;
  int result;
  
  result = (int)(1009290);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CUSTOMDATATYPE_INEXCLUDE_LIST_get() {
  int jresult ;
  int result;
  
  result = (int)(1009290);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_DATA_SELECTION_get() {
  int jresult ;
  int result;
  
  result = (int)(10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_NUM_FLAGS_get() {
  int jresult ;
  int result;
  
  result = (int)(2000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_INIT_STATE_get() {
  int jresult ;
  int result;
  
  result = (int)(2065);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_SEND_SELCHANGE_MSG_get() {
  int jresult ;
  int result;
  
  result = (int)(2066);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_01_ON_get() {
  int jresult ;
  int result;
  
  result = (int)(2001);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_01_OFF_get() {
  int jresult ;
  int result;
  
  result = (int)(2002);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_02_ON_get() {
  int jresult ;
  int result;
  
  result = (int)(2003);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_02_OFF_get() {
  int jresult ;
  int result;
  
  result = (int)(2004);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_03_ON_get() {
  int jresult ;
  int result;
  
  result = (int)(2005);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_03_OFF_get() {
  int jresult ;
  int result;
  
  result = (int)(2006);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_04_ON_get() {
  int jresult ;
  int result;
  
  result = (int)(2007);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_04_OFF_get() {
  int jresult ;
  int result;
  
  result = (int)(2008);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_05_ON_get() {
  int jresult ;
  int result;
  
  result = (int)(2009);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_05_OFF_get() {
  int jresult ;
  int result;
  
  result = (int)(2010);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_06_ON_get() {
  int jresult ;
  int result;
  
  result = (int)(2011);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_06_OFF_get() {
  int jresult ;
  int result;
  
  result = (int)(2012);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_07_ON_get() {
  int jresult ;
  int result;
  
  result = (int)(2013);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_07_OFF_get() {
  int jresult ;
  int result;
  
  result = (int)(2014);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_08_ON_get() {
  int jresult ;
  int result;
  
  result = (int)(2015);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_08_OFF_get() {
  int jresult ;
  int result;
  
  result = (int)(2016);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_09_ON_get() {
  int jresult ;
  int result;
  
  result = (int)(2017);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_09_OFF_get() {
  int jresult ;
  int result;
  
  result = (int)(2018);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_10_ON_get() {
  int jresult ;
  int result;
  
  result = (int)(2019);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_10_OFF_get() {
  int jresult ;
  int result;
  
  result = (int)(2020);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_11_ON_get() {
  int jresult ;
  int result;
  
  result = (int)(2021);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_11_OFF_get() {
  int jresult ;
  int result;
  
  result = (int)(2022);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_12_ON_get() {
  int jresult ;
  int result;
  
  result = (int)(2023);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_12_OFF_get() {
  int jresult ;
  int result;
  
  result = (int)(2024);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_13_ON_get() {
  int jresult ;
  int result;
  
  result = (int)(2025);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_13_OFF_get() {
  int jresult ;
  int result;
  
  result = (int)(2026);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_14_ON_get() {
  int jresult ;
  int result;
  
  result = (int)(2027);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_14_OFF_get() {
  int jresult ;
  int result;
  
  result = (int)(2028);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_15_ON_get() {
  int jresult ;
  int result;
  
  result = (int)(2029);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_15_OFF_get() {
  int jresult ;
  int result;
  
  result = (int)(2030);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_16_ON_get() {
  int jresult ;
  int result;
  
  result = (int)(2031);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_16_OFF_get() {
  int jresult ;
  int result;
  
  result = (int)(2032);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_17_ON_get() {
  int jresult ;
  int result;
  
  result = (int)(2033);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_17_OFF_get() {
  int jresult ;
  int result;
  
  result = (int)(2034);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_18_ON_get() {
  int jresult ;
  int result;
  
  result = (int)(2035);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_18_OFF_get() {
  int jresult ;
  int result;
  
  result = (int)(2036);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_19_ON_get() {
  int jresult ;
  int result;
  
  result = (int)(2037);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_19_OFF_get() {
  int jresult ;
  int result;
  
  result = (int)(2038);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_20_ON_get() {
  int jresult ;
  int result;
  
  result = (int)(2039);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_20_OFF_get() {
  int jresult ;
  int result;
  
  result = (int)(2040);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_21_ON_get() {
  int jresult ;
  int result;
  
  result = (int)(2041);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_21_OFF_get() {
  int jresult ;
  int result;
  
  result = (int)(2042);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_22_ON_get() {
  int jresult ;
  int result;
  
  result = (int)(2043);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_22_OFF_get() {
  int jresult ;
  int result;
  
  result = (int)(2044);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_23_ON_get() {
  int jresult ;
  int result;
  
  result = (int)(2045);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_23_OFF_get() {
  int jresult ;
  int result;
  
  result = (int)(2046);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_24_ON_get() {
  int jresult ;
  int result;
  
  result = (int)(2047);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_24_OFF_get() {
  int jresult ;
  int result;
  
  result = (int)(2048);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_25_ON_get() {
  int jresult ;
  int result;
  
  result = (int)(2049);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_25_OFF_get() {
  int jresult ;
  int result;
  
  result = (int)(2050);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_26_ON_get() {
  int jresult ;
  int result;
  
  result = (int)(2051);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_26_OFF_get() {
  int jresult ;
  int result;
  
  result = (int)(2052);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_27_ON_get() {
  int jresult ;
  int result;
  
  result = (int)(2053);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_27_OFF_get() {
  int jresult ;
  int result;
  
  result = (int)(2054);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_28_ON_get() {
  int jresult ;
  int result;
  
  result = (int)(2055);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_28_OFF_get() {
  int jresult ;
  int result;
  
  result = (int)(2056);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_29_ON_get() {
  int jresult ;
  int result;
  
  result = (int)(2057);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_29_OFF_get() {
  int jresult ;
  int result;
  
  result = (int)(2058);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_30_ON_get() {
  int jresult ;
  int result;
  
  result = (int)(2059);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_30_OFF_get() {
  int jresult ;
  int result;
  
  result = (int)(2060);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_31_ON_get() {
  int jresult ;
  int result;
  
  result = (int)(2061);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_31_OFF_get() {
  int jresult ;
  int result;
  
  result = (int)(2062);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_32_ON_get() {
  int jresult ;
  int result;
  
  result = (int)(2063);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IN_EXCLUDE_FLAG_IMAGE_32_OFF_get() {
  int jresult ;
  int result;
  
  result = (int)(2064);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InExcludeData_InsertObject(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  InExcludeData *arg1 = (InExcludeData *) 0 ;
  BaseList2D *arg2 = (BaseList2D *) 0 ;
  LONG arg3 ;
  Bool result;
  
  arg1 = (InExcludeData *)jarg1; 
  arg2 = (BaseList2D *)jarg2; 
  arg3 = (LONG)jarg3; 
  result = (arg1)->InsertObject(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_InExcludeData_GetObjectIndex(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  InExcludeData *arg1 = (InExcludeData *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  BaseList2D *arg3 = (BaseList2D *) 0 ;
  LONG result;
  
  arg1 = (InExcludeData *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (BaseList2D *)jarg3; 
  result = ((InExcludeData const *)arg1)->GetObjectIndex(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InExcludeData_DeleteObject__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  InExcludeData *arg1 = (InExcludeData *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  BaseList2D *arg3 = (BaseList2D *) 0 ;
  Bool result;
  
  arg1 = (InExcludeData *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (BaseList2D *)jarg3; 
  result = (arg1)->DeleteObject(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_InExcludeData_GetFlags__SWIG_0(void * jarg1, int jarg2) {
  int jresult ;
  InExcludeData *arg1 = (InExcludeData *) 0 ;
  LONG arg2 ;
  LONG result;
  
  arg1 = (InExcludeData *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = ((InExcludeData const *)arg1)->GetFlags(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_InExcludeData_SetFlags(void * jarg1, int jarg2, int jarg3) {
  InExcludeData *arg1 = (InExcludeData *) 0 ;
  LONG arg2 ;
  LONG arg3 ;
  
  arg1 = (InExcludeData *)jarg1; 
  arg2 = (LONG)jarg2; 
  arg3 = (LONG)jarg3; 
  (arg1)->SetFlags(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_InExcludeData_GetFlags__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  InExcludeData *arg1 = (InExcludeData *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  BaseList2D *arg3 = (BaseList2D *) 0 ;
  LONG result;
  
  arg1 = (InExcludeData *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (BaseList2D *)jarg3; 
  result = ((InExcludeData const *)arg1)->GetFlags(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_InExcludeData_GetData__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  InExcludeData *arg1 = (InExcludeData *) 0 ;
  LONG arg2 ;
  BaseContainer *result = 0 ;
  
  arg1 = (InExcludeData *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (BaseContainer *)((InExcludeData const *)arg1)->GetData(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_InExcludeData_GetData__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  InExcludeData *arg1 = (InExcludeData *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  BaseList2D *arg3 = (BaseList2D *) 0 ;
  BaseContainer *result = 0 ;
  
  arg1 = (InExcludeData *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (BaseList2D *)jarg3; 
  result = (BaseContainer *)((InExcludeData const *)arg1)->GetData(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_InExcludeData_ObjectFromIndex(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  InExcludeData *arg1 = (InExcludeData *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  LONG arg3 ;
  BaseList2D *result = 0 ;
  
  arg1 = (InExcludeData *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (LONG)jarg3; 
  result = (BaseList2D *)((InExcludeData const *)arg1)->ObjectFromIndex(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_InExcludeData_BuildInclusionTable__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  InExcludeData *arg1 = (InExcludeData *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  LONG arg3 ;
  InclusionTable *result = 0 ;
  
  arg1 = (InExcludeData *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  arg3 = (LONG)jarg3; 
  result = (InclusionTable *)(arg1)->BuildInclusionTable(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_InExcludeData_BuildInclusionTable__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  InExcludeData *arg1 = (InExcludeData *) 0 ;
  BaseDocument *arg2 = (BaseDocument *) 0 ;
  InclusionTable *result = 0 ;
  
  arg1 = (InExcludeData *)jarg1; 
  arg2 = (BaseDocument *)jarg2; 
  result = (InclusionTable *)(arg1)->BuildInclusionTable(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InExcludeData_DeleteObject__SWIG_1(void * jarg1, int jarg2) {
  unsigned int jresult ;
  InExcludeData *arg1 = (InExcludeData *) 0 ;
  LONG arg2 ;
  Bool result;
  
  arg1 = (InExcludeData *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (arg1)->DeleteObject(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_InExcludeData_GetObjectCount(void * jarg1) {
  int jresult ;
  InExcludeData *arg1 = (InExcludeData *) 0 ;
  LONG result;
  
  arg1 = (InExcludeData *)jarg1; 
  result = ((InExcludeData const *)arg1)->GetObjectCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InclusionTable_Check__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  InclusionTable *arg1 = (InclusionTable *) 0 ;
  BaseList2D *arg2 = (BaseList2D *) 0 ;
  Bool result;
  
  arg1 = (InclusionTable *)jarg1; 
  arg2 = (BaseList2D *)jarg2; 
  result = (arg1)->Check(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InclusionTable_Check__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  InclusionTable *arg1 = (InclusionTable *) 0 ;
  BaseList2D *arg2 = (BaseList2D *) 0 ;
  LONG *arg3 = 0 ;
  Bool result;
  
  arg1 = (InclusionTable *)jarg1; 
  arg2 = (BaseList2D *)jarg2; 
  arg3 = (LONG *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LONG & type is null", 0);
    return 0;
  } 
  result = (arg1)->Check(arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_InclusionTable_GetObjectCount(void * jarg1) {
  int jresult ;
  InclusionTable *arg1 = (InclusionTable *) 0 ;
  LONG result;
  
  arg1 = (InclusionTable *)jarg1; 
  result = (arg1)->GetObjectCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_InclusionTable_GetObject(void * jarg1, int jarg2) {
  void * jresult ;
  InclusionTable *arg1 = (InclusionTable *) 0 ;
  LONG arg2 ;
  BaseList2D *result = 0 ;
  
  arg1 = (InclusionTable *)jarg1; 
  arg2 = (LONG)jarg2; 
  result = (BaseList2D *)(arg1)->GetObject(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeInclusionTable(void * jarg1) {
  InclusionTable **arg1 = 0 ;
  
  arg1 = (InclusionTable **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "InclusionTable *& type is null", 0);
    return ;
  } 
  FreeInclusionTable(*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_iInExcludeCustomGui(void * jarg1) {
  iInExcludeCustomGui *arg1 = (iInExcludeCustomGui *) 0 ;
  
  arg1 = (iInExcludeCustomGui *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_iIncludeExcludeData() {
  void * jresult ;
  iIncludeExcludeData *result = 0 ;
  
  result = (iIncludeExcludeData *)new iIncludeExcludeData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_iIncludeExcludeData(void * jarg1) {
  iIncludeExcludeData *arg1 = (iIncludeExcludeData *) 0 ;
  
  arg1 = (iIncludeExcludeData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_iInclusionTable() {
  void * jresult ;
  iInclusionTable *result = 0 ;
  
  result = (iInclusionTable *)new iInclusionTable();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_iInclusionTable(void * jarg1) {
  iInclusionTable *arg1 = (iInclusionTable *) 0 ;
  
  arg1 = (iInclusionTable *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CustomGuiInExcludeLib_InsertObject_set(void * jarg1, char * jarg2) {
  CustomGuiInExcludeLib *arg1 = (CustomGuiInExcludeLib *) 0 ;
  Bool (iIncludeExcludeData::*arg2)(BaseList2D *,LONG) ;
  
  arg1 = (CustomGuiInExcludeLib *)jarg1; 
  
  SWIG_UnpackData(jarg2, (void *)&arg2, sizeof(arg2));
  
  if (arg1) (arg1)->InsertObject = arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CustomGuiInExcludeLib_InsertObject_get(void * jarg1) {
  char * jresult ;
  CustomGuiInExcludeLib *arg1 = (CustomGuiInExcludeLib *) 0 ;
  Bool (iIncludeExcludeData::*result)(BaseList2D *,LONG);
  
  arg1 = (CustomGuiInExcludeLib *)jarg1; 
  result = (Bool (iIncludeExcludeData::*)(BaseList2D *,LONG)) ((arg1)->InsertObject);
  
  char buf[128];
  char *data = SWIG_PackData(buf, (void *)&result, sizeof(result));
  *data = '\0';
  jresult = SWIG_csharp_string_callback(buf);
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CustomGuiInExcludeLib_GetObjectIndex_set(void * jarg1, char * jarg2) {
  CustomGuiInExcludeLib *arg1 = (CustomGuiInExcludeLib *) 0 ;
  LONG (iIncludeExcludeData::*arg2)(BaseDocument *,BaseList2D *) ;
  
  arg1 = (CustomGuiInExcludeLib *)jarg1; 
  
  SWIG_UnpackData(jarg2, (void *)&arg2, sizeof(arg2));
  
  if (arg1) (arg1)->GetObjectIndex = arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CustomGuiInExcludeLib_GetObjectIndex_get(void * jarg1) {
  char * jresult ;
  CustomGuiInExcludeLib *arg1 = (CustomGuiInExcludeLib *) 0 ;
  LONG (iIncludeExcludeData::*result)(BaseDocument *,BaseList2D *);
  
  arg1 = (CustomGuiInExcludeLib *)jarg1; 
  result = (LONG (iIncludeExcludeData::*)(BaseDocument *,BaseList2D *)) ((arg1)->GetObjectIndex);
  
  char buf[128];
  char *data = SWIG_PackData(buf, (void *)&result, sizeof(result));
  *data = '\0';
  jresult = SWIG_csharp_string_callback(buf);
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CustomGuiInExcludeLib_DeleteObject_set(void * jarg1, char * jarg2) {
  CustomGuiInExcludeLib *arg1 = (CustomGuiInExcludeLib *) 0 ;
  Bool (iIncludeExcludeData::*arg2)(LONG) ;
  
  arg1 = (CustomGuiInExcludeLib *)jarg1; 
  
  SWIG_UnpackData(jarg2, (void *)&arg2, sizeof(arg2));
  
  if (arg1) (arg1)->DeleteObject = arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CustomGuiInExcludeLib_DeleteObject_get(void * jarg1) {
  char * jresult ;
  CustomGuiInExcludeLib *arg1 = (CustomGuiInExcludeLib *) 0 ;
  Bool (iIncludeExcludeData::*result)(LONG);
  
  arg1 = (CustomGuiInExcludeLib *)jarg1; 
  result = (Bool (iIncludeExcludeData::*)(LONG)) ((arg1)->DeleteObject);
  
  char buf[128];
  char *data = SWIG_PackData(buf, (void *)&result, sizeof(result));
  *data = '\0';
  jresult = SWIG_csharp_string_callback(buf);
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CustomGuiInExcludeLib_GetObjectCount_set(void * jarg1, char * jarg2) {
  CustomGuiInExcludeLib *arg1 = (CustomGuiInExcludeLib *) 0 ;
  LONG (iIncludeExcludeData::*arg2)() ;
  
  arg1 = (CustomGuiInExcludeLib *)jarg1; 
  
  SWIG_UnpackData(jarg2, (void *)&arg2, sizeof(arg2));
  
  if (arg1) (arg1)->GetObjectCount = arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CustomGuiInExcludeLib_GetObjectCount_get(void * jarg1) {
  char * jresult ;
  CustomGuiInExcludeLib *arg1 = (CustomGuiInExcludeLib *) 0 ;
  LONG (iIncludeExcludeData::*result)();
  
  arg1 = (CustomGuiInExcludeLib *)jarg1; 
  result = (LONG (iIncludeExcludeData::*)()) ((arg1)->GetObjectCount);
  
  char buf[128];
  char *data = SWIG_PackData(buf, (void *)&result, sizeof(result));
  *data = '\0';
  jresult = SWIG_csharp_string_callback(buf);
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CustomGuiInExcludeLib_GetFlags_set(void * jarg1, char * jarg2) {
  CustomGuiInExcludeLib *arg1 = (CustomGuiInExcludeLib *) 0 ;
  LONG (iIncludeExcludeData::*arg2)(LONG) ;
  
  arg1 = (CustomGuiInExcludeLib *)jarg1; 
  
  SWIG_UnpackData(jarg2, (void *)&arg2, sizeof(arg2));
  
  if (arg1) (arg1)->GetFlags = arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CustomGuiInExcludeLib_GetFlags_get(void * jarg1) {
  char * jresult ;
  CustomGuiInExcludeLib *arg1 = (CustomGuiInExcludeLib *) 0 ;
  LONG (iIncludeExcludeData::*result)(LONG);
  
  arg1 = (CustomGuiInExcludeLib *)jarg1; 
  result = (LONG (iIncludeExcludeData::*)(LONG)) ((arg1)->GetFlags);
  
  char buf[128];
  char *data = SWIG_PackData(buf, (void *)&result, sizeof(result));
  *data = '\0';
  jresult = SWIG_csharp_string_callback(buf);
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CustomGuiInExcludeLib_ObjectFromIndex_set(void * jarg1, char * jarg2) {
  CustomGuiInExcludeLib *arg1 = (CustomGuiInExcludeLib *) 0 ;
  BaseList2D *(iIncludeExcludeData::*arg2)(BaseDocument *,LONG) ;
  
  arg1 = (CustomGuiInExcludeLib *)jarg1; 
  
  SWIG_UnpackData(jarg2, (void *)&arg2, sizeof(arg2));
  
  if (arg1) (arg1)->ObjectFromIndex = arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CustomGuiInExcludeLib_ObjectFromIndex_get(void * jarg1) {
  char * jresult ;
  CustomGuiInExcludeLib *arg1 = (CustomGuiInExcludeLib *) 0 ;
  BaseList2D *(iIncludeExcludeData::*result)(BaseDocument *,LONG);
  
  arg1 = (CustomGuiInExcludeLib *)jarg1; 
  result = (BaseList2D *(iIncludeExcludeData::*)(BaseDocument *,LONG)) ((arg1)->ObjectFromIndex);
  
  char buf[128];
  char *data = SWIG_PackData(buf, (void *)&result, sizeof(result));
  *data = '\0';
  jresult = SWIG_csharp_string_callback(buf);
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CustomGuiInExcludeLib_BuildInclusionTable_set(void * jarg1, char * jarg2) {
  CustomGuiInExcludeLib *arg1 = (CustomGuiInExcludeLib *) 0 ;
  InclusionTable *(iIncludeExcludeData::*arg2)(BaseDocument *,LONG) ;
  
  arg1 = (CustomGuiInExcludeLib *)jarg1; 
  
  SWIG_UnpackData(jarg2, (void *)&arg2, sizeof(arg2));
  
  if (arg1) (arg1)->BuildInclusionTable = arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CustomGuiInExcludeLib_BuildInclusionTable_get(void * jarg1) {
  char * jresult ;
  CustomGuiInExcludeLib *arg1 = (CustomGuiInExcludeLib *) 0 ;
  InclusionTable *(iIncludeExcludeData::*result)(BaseDocument *,LONG);
  
  arg1 = (CustomGuiInExcludeLib *)jarg1; 
  result = (InclusionTable *(iIncludeExcludeData::*)(BaseDocument *,LONG)) ((arg1)->BuildInclusionTable);
  
  char buf[128];
  char *data = SWIG_PackData(buf, (void *)&result, sizeof(result));
  *data = '\0';
  jresult = SWIG_csharp_string_callback(buf);
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CustomGuiInExcludeLib_Check_set(void * jarg1, char * jarg2) {
  CustomGuiInExcludeLib *arg1 = (CustomGuiInExcludeLib *) 0 ;
  Bool (iInclusionTable::*arg2)(BaseList2D *) ;
  
  arg1 = (CustomGuiInExcludeLib *)jarg1; 
  
  SWIG_UnpackData(jarg2, (void *)&arg2, sizeof(arg2));
  
  if (arg1) (arg1)->Check = arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CustomGuiInExcludeLib_Check_get(void * jarg1) {
  char * jresult ;
  CustomGuiInExcludeLib *arg1 = (CustomGuiInExcludeLib *) 0 ;
  Bool (iInclusionTable::*result)(BaseList2D *);
  
  arg1 = (CustomGuiInExcludeLib *)jarg1; 
  result = (Bool (iInclusionTable::*)(BaseList2D *)) ((arg1)->Check);
  
  char buf[128];
  char *data = SWIG_PackData(buf, (void *)&result, sizeof(result));
  *data = '\0';
  jresult = SWIG_csharp_string_callback(buf);
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CustomGuiInExcludeLib_GetObjectCountT_set(void * jarg1, char * jarg2) {
  CustomGuiInExcludeLib *arg1 = (CustomGuiInExcludeLib *) 0 ;
  LONG (iInclusionTable::*arg2)() ;
  
  arg1 = (CustomGuiInExcludeLib *)jarg1; 
  
  SWIG_UnpackData(jarg2, (void *)&arg2, sizeof(arg2));
  
  if (arg1) (arg1)->GetObjectCountT = arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CustomGuiInExcludeLib_GetObjectCountT_get(void * jarg1) {
  char * jresult ;
  CustomGuiInExcludeLib *arg1 = (CustomGuiInExcludeLib *) 0 ;
  LONG (iInclusionTable::*result)();
  
  arg1 = (CustomGuiInExcludeLib *)jarg1; 
  result = (LONG (iInclusionTable::*)()) ((arg1)->GetObjectCountT);
  
  char buf[128];
  char *data = SWIG_PackData(buf, (void *)&result, sizeof(result));
  *data = '\0';
  jresult = SWIG_csharp_string_callback(buf);
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CustomGuiInExcludeLib_GetObject_set(void * jarg1, char * jarg2) {
  CustomGuiInExcludeLib *arg1 = (CustomGuiInExcludeLib *) 0 ;
  BaseList2D *(iInclusionTable::*arg2)(LONG) ;
  
  arg1 = (CustomGuiInExcludeLib *)jarg1; 
  
  SWIG_UnpackData(jarg2, (void *)&arg2, sizeof(arg2));
  
  if (arg1) (arg1)->GetObject = arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CustomGuiInExcludeLib_GetObject_get(void * jarg1) {
  char * jresult ;
  CustomGuiInExcludeLib *arg1 = (CustomGuiInExcludeLib *) 0 ;
  BaseList2D *(iInclusionTable::*result)(LONG);
  
  arg1 = (CustomGuiInExcludeLib *)jarg1; 
  result = (BaseList2D *(iInclusionTable::*)(LONG)) ((arg1)->GetObject);
  
  char buf[128];
  char *data = SWIG_PackData(buf, (void *)&result, sizeof(result));
  *data = '\0';
  jresult = SWIG_csharp_string_callback(buf);
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CustomGuiInExcludeLib_LIB_FreeInclusionTable_set(void * jarg1, void * jarg2) {
  CustomGuiInExcludeLib *arg1 = (CustomGuiInExcludeLib *) 0 ;
  void (*arg2)(iInclusionTable *) = (void (*)(iInclusionTable *)) 0 ;
  
  arg1 = (CustomGuiInExcludeLib *)jarg1; 
  arg2 = (void (*)(iInclusionTable *))jarg2; 
  if (arg1) (arg1)->LIB_FreeInclusionTable = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CustomGuiInExcludeLib_LIB_FreeInclusionTable_get(void * jarg1) {
  void * jresult ;
  CustomGuiInExcludeLib *arg1 = (CustomGuiInExcludeLib *) 0 ;
  void (*result)(iInclusionTable *) = 0 ;
  
  arg1 = (CustomGuiInExcludeLib *)jarg1; 
  result = (void (*)(iInclusionTable *)) ((arg1)->LIB_FreeInclusionTable);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CustomGuiInExcludeLib_GetData_set(void * jarg1, char * jarg2) {
  CustomGuiInExcludeLib *arg1 = (CustomGuiInExcludeLib *) 0 ;
  BaseContainer *(iIncludeExcludeData::*arg2)(LONG) ;
  
  arg1 = (CustomGuiInExcludeLib *)jarg1; 
  
  SWIG_UnpackData(jarg2, (void *)&arg2, sizeof(arg2));
  
  if (arg1) (arg1)->GetData = arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CustomGuiInExcludeLib_GetData_get(void * jarg1) {
  char * jresult ;
  CustomGuiInExcludeLib *arg1 = (CustomGuiInExcludeLib *) 0 ;
  BaseContainer *(iIncludeExcludeData::*result)(LONG);
  
  arg1 = (CustomGuiInExcludeLib *)jarg1; 
  result = (BaseContainer *(iIncludeExcludeData::*)(LONG)) ((arg1)->GetData);
  
  char buf[128];
  char *data = SWIG_PackData(buf, (void *)&result, sizeof(result));
  *data = '\0';
  jresult = SWIG_csharp_string_callback(buf);
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CustomGuiInExcludeLib_CheckFlags_set(void * jarg1, char * jarg2) {
  CustomGuiInExcludeLib *arg1 = (CustomGuiInExcludeLib *) 0 ;
  Bool (iInclusionTable::*arg2)(BaseList2D *,LONG &) ;
  
  arg1 = (CustomGuiInExcludeLib *)jarg1; 
  
  SWIG_UnpackData(jarg2, (void *)&arg2, sizeof(arg2));
  
  if (arg1) (arg1)->CheckFlags = arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CustomGuiInExcludeLib_CheckFlags_get(void * jarg1) {
  char * jresult ;
  CustomGuiInExcludeLib *arg1 = (CustomGuiInExcludeLib *) 0 ;
  Bool (iInclusionTable::*result)(BaseList2D *,LONG &);
  
  arg1 = (CustomGuiInExcludeLib *)jarg1; 
  result = (Bool (iInclusionTable::*)(BaseList2D *,LONG &)) ((arg1)->CheckFlags);
  
  char buf[128];
  char *data = SWIG_PackData(buf, (void *)&result, sizeof(result));
  *data = '\0';
  jresult = SWIG_csharp_string_callback(buf);
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CustomGuiInExcludeLib_SetFlags_set(void * jarg1, char * jarg2) {
  CustomGuiInExcludeLib *arg1 = (CustomGuiInExcludeLib *) 0 ;
  void (iIncludeExcludeData::*arg2)(LONG,LONG) ;
  
  arg1 = (CustomGuiInExcludeLib *)jarg1; 
  
  SWIG_UnpackData(jarg2, (void *)&arg2, sizeof(arg2));
  
  if (arg1) (arg1)->SetFlags = arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CustomGuiInExcludeLib_SetFlags_get(void * jarg1) {
  char * jresult ;
  CustomGuiInExcludeLib *arg1 = (CustomGuiInExcludeLib *) 0 ;
  void (iIncludeExcludeData::*result)(LONG,LONG);
  
  arg1 = (CustomGuiInExcludeLib *)jarg1; 
  result = (void (iIncludeExcludeData::*)(LONG,LONG)) ((arg1)->SetFlags);
  
  char buf[128];
  char *data = SWIG_PackData(buf, (void *)&result, sizeof(result));
  *data = '\0';
  jresult = SWIG_csharp_string_callback(buf);
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CustomGuiInExcludeLib() {
  void * jresult ;
  CustomGuiInExcludeLib *result = 0 ;
  
  result = (CustomGuiInExcludeLib *)new CustomGuiInExcludeLib();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CustomGuiInExcludeLib(void * jarg1) {
  CustomGuiInExcludeLib *arg1 = (CustomGuiInExcludeLib *) 0 ;
  
  arg1 = (CustomGuiInExcludeLib *)jarg1; 
  delete arg1;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MAXRANGE_get() {
  double jresult ;
  double result;
  
  result = (double)(1.0e20);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAXELEMENTS_get() {
  int jresult ;
  int result;
  
  result = (int)(100000000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MIN_EPSILON_get() {
  double jresult ;
  double result;
  
  result = (double)(0.001);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MessageDialog(char * /* constString&_ctype */ jarg1) {
  String *arg1 = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  String arg1_str(jarg1);
  arg1 = &arg1_str; 
  MessageDialog((String const &)*arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetCustomDataTypeDefault(int jarg1) {
  void * jresult ;
  LONG arg1 ;
  BaseContainer result;
  
  arg1 = (LONG)jarg1; 
  result = GetCustomDataTypeDefault(arg1);
  jresult = new BaseContainer((const BaseContainer &)result); 
  return jresult;
}


SWIGEXPORT BaseBitmap * SWIGSTDCALL CSharp_MultipassBitmap_SWIGUpcast(MultipassBitmap *jarg1) {
    return (BaseBitmap *)jarg1;
}

SWIGEXPORT C4DAtom * SWIGSTDCALL CSharp_C4DAtomGoal_SWIGUpcast(C4DAtomGoal *jarg1) {
    return (C4DAtom *)jarg1;
}

SWIGEXPORT C4DAtomGoal * SWIGSTDCALL CSharp_GeListNode_SWIGUpcast(GeListNode *jarg1) {
    return (C4DAtomGoal *)jarg1;
}

SWIGEXPORT GeListNode * SWIGSTDCALL CSharp_GeListHead_SWIGUpcast(GeListHead *jarg1) {
    return (GeListNode *)jarg1;
}

SWIGEXPORT GeListNode * SWIGSTDCALL CSharp_BaseList2D_SWIGUpcast(BaseList2D *jarg1) {
    return (GeListNode *)jarg1;
}

SWIGEXPORT BaseList2D * SWIGSTDCALL CSharp_BaseSceneLoader_SWIGUpcast(BaseSceneLoader *jarg1) {
    return (BaseList2D *)jarg1;
}

SWIGEXPORT BaseList2D * SWIGSTDCALL CSharp_BaseSceneSaver_SWIGUpcast(BaseSceneSaver *jarg1) {
    return (BaseList2D *)jarg1;
}

SWIGEXPORT BaseList2D * SWIGSTDCALL CSharp_BaseObject_SWIGUpcast(BaseObject *jarg1) {
    return (BaseList2D *)jarg1;
}

SWIGEXPORT BaseObject * SWIGSTDCALL CSharp_CameraObject_SWIGUpcast(CameraObject *jarg1) {
    return (BaseObject *)jarg1;
}

SWIGEXPORT BaseObject * SWIGSTDCALL CSharp_PointObject_SWIGUpcast(PointObject *jarg1) {
    return (BaseObject *)jarg1;
}

SWIGEXPORT PointObject * SWIGSTDCALL CSharp_LineObject_SWIGUpcast(LineObject *jarg1) {
    return (PointObject *)jarg1;
}

SWIGEXPORT PointObject * SWIGSTDCALL CSharp_PolygonObject_SWIGUpcast(PolygonObject *jarg1) {
    return (PointObject *)jarg1;
}

SWIGEXPORT PointObject * SWIGSTDCALL CSharp_SplineObject_SWIGUpcast(SplineObject *jarg1) {
    return (PointObject *)jarg1;
}

SWIGEXPORT BaseList2D * SWIGSTDCALL CSharp_BaseView_SWIGUpcast(BaseView *jarg1) {
    return (BaseList2D *)jarg1;
}

SWIGEXPORT BaseView * SWIGSTDCALL CSharp_BaseDraw_SWIGUpcast(BaseDraw *jarg1) {
    return (BaseView *)jarg1;
}

SWIGEXPORT BaseList2D * SWIGSTDCALL CSharp_BaseSceneHook_SWIGUpcast(BaseSceneHook *jarg1) {
    return (BaseList2D *)jarg1;
}

SWIGEXPORT BaseList2D * SWIGSTDCALL CSharp_MultipassObject_SWIGUpcast(MultipassObject *jarg1) {
    return (BaseList2D *)jarg1;
}

SWIGEXPORT BaseList2D * SWIGSTDCALL CSharp_RenderData_SWIGUpcast(RenderData *jarg1) {
    return (BaseList2D *)jarg1;
}

SWIGEXPORT BaseList2D * SWIGSTDCALL CSharp_LayerObject_SWIGUpcast(LayerObject *jarg1) {
    return (BaseList2D *)jarg1;
}

SWIGEXPORT BaseList2D * SWIGSTDCALL CSharp_BaseDocument_SWIGUpcast(BaseDocument *jarg1) {
    return (BaseList2D *)jarg1;
}

SWIGEXPORT BaseList2D * SWIGSTDCALL CSharp_BaseTag_SWIGUpcast(BaseTag *jarg1) {
    return (BaseList2D *)jarg1;
}

SWIGEXPORT BaseTag * SWIGSTDCALL CSharp_VariableTag_SWIGUpcast(VariableTag *jarg1) {
    return (BaseTag *)jarg1;
}

SWIGEXPORT VariableTag * SWIGSTDCALL CSharp_PointTag_SWIGUpcast(PointTag *jarg1) {
    return (VariableTag *)jarg1;
}

SWIGEXPORT VariableTag * SWIGSTDCALL CSharp_VertexMapTag_SWIGUpcast(VertexMapTag *jarg1) {
    return (VariableTag *)jarg1;
}

SWIGEXPORT VariableTag * SWIGSTDCALL CSharp_SegmentTag_SWIGUpcast(SegmentTag *jarg1) {
    return (VariableTag *)jarg1;
}

SWIGEXPORT VariableTag * SWIGSTDCALL CSharp_TangentTag_SWIGUpcast(TangentTag *jarg1) {
    return (VariableTag *)jarg1;
}

SWIGEXPORT VariableTag * SWIGSTDCALL CSharp_PolygonTag_SWIGUpcast(PolygonTag *jarg1) {
    return (VariableTag *)jarg1;
}

SWIGEXPORT BaseTag * SWIGSTDCALL CSharp_SelectionTag_SWIGUpcast(SelectionTag *jarg1) {
    return (BaseTag *)jarg1;
}

SWIGEXPORT VariableTag * SWIGSTDCALL CSharp_UVWTag_SWIGUpcast(UVWTag *jarg1) {
    return (VariableTag *)jarg1;
}

SWIGEXPORT VariableTag * SWIGSTDCALL CSharp_NormalTag_SWIGUpcast(NormalTag *jarg1) {
    return (VariableTag *)jarg1;
}

SWIGEXPORT BaseTag * SWIGSTDCALL CSharp_TextureTag_SWIGUpcast(TextureTag *jarg1) {
    return (BaseTag *)jarg1;
}

SWIGEXPORT VariableTag * SWIGSTDCALL CSharp_StickTextureTag_SWIGUpcast(StickTextureTag *jarg1) {
    return (VariableTag *)jarg1;
}

SWIGEXPORT BaseTag * SWIGSTDCALL CSharp_XPressoTag_SWIGUpcast(XPressoTag *jarg1) {
    return (BaseTag *)jarg1;
}

SWIGEXPORT BaseTag * SWIGSTDCALL CSharp_HNWeightTag_SWIGUpcast(HNWeightTag *jarg1) {
    return (BaseTag *)jarg1;
}

SWIGEXPORT BaseObject * SWIGSTDCALL CSharp_CAJointObject_SWIGUpcast(CAJointObject *jarg1) {
    return (BaseObject *)jarg1;
}

SWIGEXPORT BaseTag * SWIGSTDCALL CSharp_CAWeightTag_SWIGUpcast(CAWeightTag *jarg1) {
    return (BaseTag *)jarg1;
}

SWIGEXPORT BaseTag * SWIGSTDCALL CSharp_CAPoseMorphTag_SWIGUpcast(CAPoseMorphTag *jarg1) {
    return (BaseTag *)jarg1;
}

SWIGEXPORT NodeData * SWIGSTDCALL CSharp_ObjectData_SWIGUpcast(ObjectData *jarg1) {
    return (NodeData *)jarg1;
}

SWIGEXPORT ObjectData * SWIGSTDCALL CSharp_ObjectDataM_SWIGUpcast(ObjectDataM *jarg1) {
    return (ObjectData *)jarg1;
}

SWIGEXPORT BaseList2D * SWIGSTDCALL CSharp_GvNode_SWIGUpcast(GvNode *jarg1) {
    return (BaseList2D *)jarg1;
}

SWIGEXPORT BaseList2D * SWIGSTDCALL CSharp_GvNodeMaster_SWIGUpcast(GvNodeMaster *jarg1) {
    return (BaseList2D *)jarg1;
}

SWIGEXPORT NodeData * SWIGSTDCALL CSharp_GvOperatorData_SWIGUpcast(GvOperatorData *jarg1) {
    return (NodeData *)jarg1;
}

SWIGEXPORT CustomDataType * SWIGSTDCALL CSharp_iCustomDataType_inex_SWIGUpcast(iCustomDataType< DescID > *jarg1) {
    return (CustomDataType *)jarg1;
}

SWIGEXPORT CustomDataType * SWIGSTDCALL CSharp_InExcludeData_SWIGUpcast(InExcludeData *jarg1) {
    return (CustomDataType *)jarg1;
}

#ifdef __cplusplus
}
#endif

